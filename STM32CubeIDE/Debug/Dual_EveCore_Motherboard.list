
Dual_EveCore_Motherboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009760  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  080098e8  080098e8  0000a8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c0c  08009c0c  0000b120  2**0
                  CONTENTS
  4 .ARM          00000008  08009c0c  08009c0c  0000ac0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c14  08009c14  0000b120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c14  08009c14  0000ac14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c18  08009c18  0000ac18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000120  20000000  08009c1c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b120  2**0
                  CONTENTS
 10 .bss          00001cf4  20000120  20000120  0000b120  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001e14  20001e14  0000b120  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b120  2**0
                  CONTENTS, READONLY
 13 .debug_info   000155d6  00000000  00000000  0000b150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b53  00000000  00000000  00020726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001218  00000000  00000000  00024280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dc0  00000000  00000000  00025498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021cdf  00000000  00000000  00026258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000184ea  00000000  00000000  00047f37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be773  00000000  00000000  00060421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011eb94  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004994  00000000  00000000  0011ebd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  0012356c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000120 	.word	0x20000120
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080098d0 	.word	0x080098d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000124 	.word	0x20000124
 80001c4:	080098d0 	.word	0x080098d0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b09a      	sub	sp, #104	@ 0x68
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f001 f8ff 	bl	80016c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f85b 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 f927 	bl	8000718 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004ca:	f000 f8c1 	bl	8000650 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004ce:	f000 fbbd 	bl	8000c4c <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 80004d2:	f000 f8f5 	bl	80006c0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */


  TxData[0] = 50;
 80004d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000554 <main+0x9c>)
 80004d8:	2232      	movs	r2, #50	@ 0x32
 80004da:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0xAA;
 80004dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000554 <main+0x9c>)
 80004de:	22aa      	movs	r2, #170	@ 0xaa
 80004e0:	705a      	strb	r2, [r3, #1]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if(newData ==1){
 80004e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000558 <main+0xa0>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d10b      	bne.n	8000502 <main+0x4a>
	newData  = 0;
 80004ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000558 <main+0xa0>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
	char msg[100] = {0};
 80004f0:	2300      	movs	r3, #0
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	f107 0308 	add.w	r3, r7, #8
 80004f8:	2260      	movs	r2, #96	@ 0x60
 80004fa:	2100      	movs	r1, #0
 80004fc:	4618      	mov	r0, r3
 80004fe:	f009 f9bb 	bl	8009878 <memset>

    //sprintf(msg, "New SPI Data Received: %d: %d: %d\n", SPI_RX_Buffer[0] , SPI_RX_Buffer[1] , SPI_RX_Buffer[2] );
    //CDC_Transmit_FS(msg, strlen(msg));
					}
	HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin); //Toggle LED
 8000502:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000506:	4815      	ldr	r0, [pc, #84]	@ (800055c <main+0xa4>)
 8000508:	f002 f810 	bl	800252c <HAL_GPIO_TogglePin>
    HAL_UART_Transmit_IT(&huart4, tx_buff, 28);
 800050c:	221c      	movs	r2, #28
 800050e:	4914      	ldr	r1, [pc, #80]	@ (8000560 <main+0xa8>)
 8000510:	4814      	ldr	r0, [pc, #80]	@ (8000564 <main+0xac>)
 8000512:	f004 feed 	bl	80052f0 <HAL_UART_Transmit_IT>
    CDC_Transmit_FS("\nSTM32-EvCore Firmware Test1 :\n",34);
 8000516:	2122      	movs	r1, #34	@ 0x22
 8000518:	4813      	ldr	r0, [pc, #76]	@ (8000568 <main+0xb0>)
 800051a:	f000 fc63 	bl	8000de4 <CDC_Transmit_FS>
    HAL_SPI_TransmitReceive_IT(&hspi1, SPI_TX_Buffer, SPI_RX_Buffer, 3); //Sending in Interrupt mode
 800051e:	2303      	movs	r3, #3
 8000520:	4a12      	ldr	r2, [pc, #72]	@ (800056c <main+0xb4>)
 8000522:	4913      	ldr	r1, [pc, #76]	@ (8000570 <main+0xb8>)
 8000524:	4813      	ldr	r0, [pc, #76]	@ (8000574 <main+0xbc>)
 8000526:	f004 fa49 	bl	80049bc <HAL_SPI_TransmitReceive_IT>
	HAL_Delay(1000); //Delay 1 Seconds
 800052a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800052e:	f001 f939 	bl	80017a4 <HAL_Delay>
	if(HAL_UART_Receive_IT(&huart4, rx_buff, 28) ==HAL_OK) //if transfer is successful
 8000532:	221c      	movs	r2, #28
 8000534:	4910      	ldr	r1, [pc, #64]	@ (8000578 <main+0xc0>)
 8000536:	480b      	ldr	r0, [pc, #44]	@ (8000564 <main+0xac>)
 8000538:	f004 ff10 	bl	800535c <HAL_UART_Receive_IT>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d105      	bne.n	800054e <main+0x96>
      {
	    CDC_Transmit_FS(rx_buff,28);
 8000542:	211c      	movs	r1, #28
 8000544:	480c      	ldr	r0, [pc, #48]	@ (8000578 <main+0xc0>)
 8000546:	f000 fc4d 	bl	8000de4 <CDC_Transmit_FS>
        __NOP(); //You need to toggle a breakpoint on this line!
 800054a:	bf00      	nop
 800054c:	e7c9      	b.n	80004e2 <main+0x2a>
      } else {
      __NOP();
 800054e:	bf00      	nop
  {
 8000550:	e7c7      	b.n	80004e2 <main+0x2a>
 8000552:	bf00      	nop
 8000554:	200001dc 	.word	0x200001dc
 8000558:	20000208 	.word	0x20000208
 800055c:	40020800 	.word	0x40020800
 8000560:	20000000 	.word	0x20000000
 8000564:	20000194 	.word	0x20000194
 8000568:	080098e8 	.word	0x080098e8
 800056c:	20000204 	.word	0x20000204
 8000570:	20000020 	.word	0x20000020
 8000574:	2000013c 	.word	0x2000013c
 8000578:	200001e4 	.word	0x200001e4

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	@ 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2230      	movs	r2, #48	@ 0x30
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f009 f974 	bl	8009878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	4b28      	ldr	r3, [pc, #160]	@ (8000648 <SystemClock_Config+0xcc>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a8:	4a27      	ldr	r2, [pc, #156]	@ (8000648 <SystemClock_Config+0xcc>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80005b0:	4b25      	ldr	r3, [pc, #148]	@ (8000648 <SystemClock_Config+0xcc>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b22      	ldr	r3, [pc, #136]	@ (800064c <SystemClock_Config+0xd0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a21      	ldr	r2, [pc, #132]	@ (800064c <SystemClock_Config+0xd0>)
 80005c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b1f      	ldr	r3, [pc, #124]	@ (800064c <SystemClock_Config+0xd0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d8:	2301      	movs	r3, #1
 80005da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ec:	2304      	movs	r3, #4
 80005ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005f0:	23a8      	movs	r3, #168	@ 0xa8
 80005f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f8:	2307      	movs	r3, #7
 80005fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0320 	add.w	r3, r7, #32
 8000600:	4618      	mov	r0, r3
 8000602:	f003 fa59 	bl	8003ab8 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800060c:	f000 f974 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2302      	movs	r3, #2
 8000616:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800061c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000620:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000622:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000626:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2105      	movs	r1, #5
 800062e:	4618      	mov	r0, r3
 8000630:	f003 fd6e 	bl	8004110 <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800063a:	f000 f95d 	bl	80008f8 <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3750      	adds	r7, #80	@ 0x50
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000654:	4b18      	ldr	r3, [pc, #96]	@ (80006b8 <MX_SPI1_Init+0x68>)
 8000656:	4a19      	ldr	r2, [pc, #100]	@ (80006bc <MX_SPI1_Init+0x6c>)
 8000658:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800065a:	4b17      	ldr	r3, [pc, #92]	@ (80006b8 <MX_SPI1_Init+0x68>)
 800065c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000660:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000662:	4b15      	ldr	r3, [pc, #84]	@ (80006b8 <MX_SPI1_Init+0x68>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000668:	4b13      	ldr	r3, [pc, #76]	@ (80006b8 <MX_SPI1_Init+0x68>)
 800066a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800066e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000670:	4b11      	ldr	r3, [pc, #68]	@ (80006b8 <MX_SPI1_Init+0x68>)
 8000672:	2202      	movs	r2, #2
 8000674:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000676:	4b10      	ldr	r3, [pc, #64]	@ (80006b8 <MX_SPI1_Init+0x68>)
 8000678:	2200      	movs	r2, #0
 800067a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800067c:	4b0e      	ldr	r3, [pc, #56]	@ (80006b8 <MX_SPI1_Init+0x68>)
 800067e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000682:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000684:	4b0c      	ldr	r3, [pc, #48]	@ (80006b8 <MX_SPI1_Init+0x68>)
 8000686:	2220      	movs	r2, #32
 8000688:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800068a:	4b0b      	ldr	r3, [pc, #44]	@ (80006b8 <MX_SPI1_Init+0x68>)
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000690:	4b09      	ldr	r3, [pc, #36]	@ (80006b8 <MX_SPI1_Init+0x68>)
 8000692:	2200      	movs	r2, #0
 8000694:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000696:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <MX_SPI1_Init+0x68>)
 8000698:	2200      	movs	r2, #0
 800069a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800069c:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <MX_SPI1_Init+0x68>)
 800069e:	220a      	movs	r2, #10
 80006a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006a2:	4805      	ldr	r0, [pc, #20]	@ (80006b8 <MX_SPI1_Init+0x68>)
 80006a4:	f003 fffc 	bl	80046a0 <HAL_SPI_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80006ae:	f000 f923 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	2000013c 	.word	0x2000013c
 80006bc:	40013000 	.word	0x40013000

080006c0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <MX_UART4_Init+0x50>)
 80006c6:	4a13      	ldr	r2, [pc, #76]	@ (8000714 <MX_UART4_Init+0x54>)
 80006c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <MX_UART4_Init+0x50>)
 80006cc:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80006d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 80006d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <MX_UART4_Init+0x50>)
 80006d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006d8:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80006da:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <MX_UART4_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 80006e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <MX_UART4_Init+0x50>)
 80006e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006e6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <MX_UART4_Init+0x50>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <MX_UART4_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <MX_UART4_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	@ (8000710 <MX_UART4_Init+0x50>)
 80006fc:	f004 fd24 	bl	8005148 <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_UART4_Init+0x4a>
  {
    Error_Handler();
 8000706:	f000 f8f7 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000194 	.word	0x20000194
 8000714:	40004c00 	.word	0x40004c00

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	@ 0x28
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
 8000732:	4b5e      	ldr	r3, [pc, #376]	@ (80008ac <MX_GPIO_Init+0x194>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a5d      	ldr	r2, [pc, #372]	@ (80008ac <MX_GPIO_Init+0x194>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b5b      	ldr	r3, [pc, #364]	@ (80008ac <MX_GPIO_Init+0x194>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	4b57      	ldr	r3, [pc, #348]	@ (80008ac <MX_GPIO_Init+0x194>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a56      	ldr	r2, [pc, #344]	@ (80008ac <MX_GPIO_Init+0x194>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b54      	ldr	r3, [pc, #336]	@ (80008ac <MX_GPIO_Init+0x194>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	4b50      	ldr	r3, [pc, #320]	@ (80008ac <MX_GPIO_Init+0x194>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	4a4f      	ldr	r2, [pc, #316]	@ (80008ac <MX_GPIO_Init+0x194>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6313      	str	r3, [r2, #48]	@ 0x30
 8000776:	4b4d      	ldr	r3, [pc, #308]	@ (80008ac <MX_GPIO_Init+0x194>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b49      	ldr	r3, [pc, #292]	@ (80008ac <MX_GPIO_Init+0x194>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a48      	ldr	r2, [pc, #288]	@ (80008ac <MX_GPIO_Init+0x194>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b46      	ldr	r3, [pc, #280]	@ (80008ac <MX_GPIO_Init+0x194>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST_CS2_Pin|ST_CS1_Pin, GPIO_PIN_SET);
 800079e:	2201      	movs	r2, #1
 80007a0:	2111      	movs	r1, #17
 80007a2:	4843      	ldr	r0, [pc, #268]	@ (80008b0 <MX_GPIO_Init+0x198>)
 80007a4:	f001 fe96 	bl	80024d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST_RST_GPIO_Port, ST_RST_Pin, GPIO_PIN_SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	2110      	movs	r1, #16
 80007ac:	4841      	ldr	r0, [pc, #260]	@ (80008b4 <MX_GPIO_Init+0x19c>)
 80007ae:	f001 fe91 	bl	80024d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80007b8:	483e      	ldr	r0, [pc, #248]	@ (80008b4 <MX_GPIO_Init+0x19c>)
 80007ba:	f001 fe8b 	bl	80024d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST_CS2_Pin ST_CS1_Pin */
  GPIO_InitStruct.Pin = ST_CS2_Pin|ST_CS1_Pin;
 80007be:	2311      	movs	r3, #17
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ca:	2303      	movs	r3, #3
 80007cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	4619      	mov	r1, r3
 80007d4:	4836      	ldr	r0, [pc, #216]	@ (80008b0 <MX_GPIO_Init+0x198>)
 80007d6:	f001 fba9 	bl	8001f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : ST_RST_Pin */
  GPIO_InitStruct.Pin = ST_RST_Pin;
 80007da:	2310      	movs	r3, #16
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80007e6:	2301      	movs	r3, #1
 80007e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ST_RST_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	4830      	ldr	r0, [pc, #192]	@ (80008b4 <MX_GPIO_Init+0x19c>)
 80007f2:	f001 fb9b 	bl	8001f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : ST_IRQ1_Pin */
  GPIO_InitStruct.Pin = ST_IRQ1_Pin;
 80007f6:	2320      	movs	r3, #32
 80007f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80007fa:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80007fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ST_IRQ1_GPIO_Port, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	482a      	ldr	r0, [pc, #168]	@ (80008b4 <MX_GPIO_Init+0x19c>)
 800080c:	f001 fb8e 	bl	8001f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : ST_IRQ2_Pin */
  GPIO_InitStruct.Pin = ST_IRQ2_Pin;
 8000810:	2301      	movs	r3, #1
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000814:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ST_IRQ2_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	4824      	ldr	r0, [pc, #144]	@ (80008b8 <MX_GPIO_Init+0x1a0>)
 8000826:	f001 fb81 	bl	8001f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : ST_SYNC11_Pin ST_SYNC01_Pin ST_SYNC12_Pin ST_SYNC02_Pin */
  GPIO_InitStruct.Pin = ST_SYNC11_Pin|ST_SYNC01_Pin|ST_SYNC12_Pin|ST_SYNC02_Pin;
 800082a:	f641 4302 	movw	r3, #7170	@ 0x1c02
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4619      	mov	r1, r3
 800083e:	481e      	ldr	r0, [pc, #120]	@ (80008b8 <MX_GPIO_Init+0x1a0>)
 8000840:	f001 fb74 	bl	8001f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000844:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000852:	2303      	movs	r3, #3
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000856:	2309      	movs	r3, #9
 8000858:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4619      	mov	r1, r3
 8000860:	4815      	ldr	r0, [pc, #84]	@ (80008b8 <MX_GPIO_Init+0x1a0>)
 8000862:	f001 fb63 	bl	8001f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED1_Pin;
 8000866:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	480d      	ldr	r0, [pc, #52]	@ (80008b4 <MX_GPIO_Init+0x19c>)
 8000880:	f001 fb54 	bl	8001f2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000884:	2200      	movs	r2, #0
 8000886:	2100      	movs	r1, #0
 8000888:	2006      	movs	r0, #6
 800088a:	f001 f89f 	bl	80019cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800088e:	2006      	movs	r0, #6
 8000890:	f001 f8c8 	bl	8001a24 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000894:	2200      	movs	r2, #0
 8000896:	2100      	movs	r1, #0
 8000898:	2017      	movs	r0, #23
 800089a:	f001 f897 	bl	80019cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800089e:	2017      	movs	r0, #23
 80008a0:	f001 f8c0 	bl	8001a24 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008a4:	bf00      	nop
 80008a6:	3728      	adds	r7, #40	@ 0x28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40020000 	.word	0x40020000
 80008b4:	40020800 	.word	0x40020800
 80008b8:	40020400 	.word	0x40020400

080008bc <USB_CDC_RxHandler>:

/* USER CODE BEGIN 4 */

void USB_CDC_RxHandler(uint8_t* Buf, uint32_t Len)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
    CDC_Transmit_FS(Buf, Len);
 80008c6:	6839      	ldr	r1, [r7, #0]
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f000 fa8b 	bl	8000de4 <CDC_Transmit_FS>
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  	newData = 1;
 80008e0:	4b04      	ldr	r3, [pc, #16]	@ (80008f4 <HAL_SPI_TxRxCpltCallback+0x1c>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	601a      	str	r2, [r3, #0]

}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	20000208 	.word	0x20000208

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <Error_Handler+0x8>

08000904 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
	...

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b1f      	ldr	r3, [pc, #124]	@ (80009a4 <HAL_MspInit+0x88>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092a:	4a1e      	ldr	r2, [pc, #120]	@ (80009a4 <HAL_MspInit+0x88>)
 800092c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000930:	6453      	str	r3, [r2, #68]	@ 0x44
 8000932:	4b1c      	ldr	r3, [pc, #112]	@ (80009a4 <HAL_MspInit+0x88>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000936:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b18      	ldr	r3, [pc, #96]	@ (80009a4 <HAL_MspInit+0x88>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000946:	4a17      	ldr	r2, [pc, #92]	@ (80009a4 <HAL_MspInit+0x88>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800094c:	6413      	str	r3, [r2, #64]	@ 0x40
 800094e:	4b15      	ldr	r3, [pc, #84]	@ (80009a4 <HAL_MspInit+0x88>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2100      	movs	r1, #0
 800095e:	2001      	movs	r0, #1
 8000960:	f001 f834 	bl	80019cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8000964:	2001      	movs	r0, #1
 8000966:	f001 f85d 	bl	8001a24 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	2004      	movs	r0, #4
 8000970:	f001 f82c 	bl	80019cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8000974:	2004      	movs	r0, #4
 8000976:	f001 f855 	bl	8001a24 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	2005      	movs	r0, #5
 8000980:	f001 f824 	bl	80019cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000984:	2005      	movs	r0, #5
 8000986:	f001 f84d 	bl	8001a24 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	2051      	movs	r0, #81	@ 0x51
 8000990:	f001 f81c 	bl	80019cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8000994:	2051      	movs	r0, #81	@ 0x51
 8000996:	f001 f845 	bl	8001a24 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800

080009a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	@ 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a3c <HAL_SPI_MspInit+0x94>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d133      	bne.n	8000a32 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000a40 <HAL_SPI_MspInit+0x98>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d2:	4a1b      	ldr	r2, [pc, #108]	@ (8000a40 <HAL_SPI_MspInit+0x98>)
 80009d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009da:	4b19      	ldr	r3, [pc, #100]	@ (8000a40 <HAL_SPI_MspInit+0x98>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b15      	ldr	r3, [pc, #84]	@ (8000a40 <HAL_SPI_MspInit+0x98>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a14      	ldr	r2, [pc, #80]	@ (8000a40 <HAL_SPI_MspInit+0x98>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <HAL_SPI_MspInit+0x98>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ST_SCK_Pin|ST_MISO_Pin|ST_MOSI_Pin;
 8000a02:	23e0      	movs	r3, #224	@ 0xe0
 8000a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a12:	2305      	movs	r3, #5
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4809      	ldr	r0, [pc, #36]	@ (8000a44 <HAL_SPI_MspInit+0x9c>)
 8000a1e:	f001 fa85 	bl	8001f2c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	2023      	movs	r0, #35	@ 0x23
 8000a28:	f000 ffd0 	bl	80019cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000a2c:	2023      	movs	r0, #35	@ 0x23
 8000a2e:	f000 fff9 	bl	8001a24 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000a32:	bf00      	nop
 8000a34:	3728      	adds	r7, #40	@ 0x28
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40013000 	.word	0x40013000
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020000 	.word	0x40020000

08000a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	@ 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a26      	ldr	r2, [pc, #152]	@ (8000b00 <HAL_UART_MspInit+0xb8>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d145      	bne.n	8000af6 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b25      	ldr	r3, [pc, #148]	@ (8000b04 <HAL_UART_MspInit+0xbc>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a72:	4a24      	ldr	r2, [pc, #144]	@ (8000b04 <HAL_UART_MspInit+0xbc>)
 8000a74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a7a:	4b22      	ldr	r3, [pc, #136]	@ (8000b04 <HAL_UART_MspInit+0xbc>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b04 <HAL_UART_MspInit+0xbc>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a1d      	ldr	r2, [pc, #116]	@ (8000b04 <HAL_UART_MspInit+0xbc>)
 8000a90:	f043 0304 	orr.w	r3, r3, #4
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b1b      	ldr	r3, [pc, #108]	@ (8000b04 <HAL_UART_MspInit+0xbc>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000aa2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ab4:	2308      	movs	r3, #8
 8000ab6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	4812      	ldr	r0, [pc, #72]	@ (8000b08 <HAL_UART_MspInit+0xc0>)
 8000ac0:	f001 fa34 	bl	8001f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ac4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ad6:	2308      	movs	r3, #8
 8000ad8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4809      	ldr	r0, [pc, #36]	@ (8000b08 <HAL_UART_MspInit+0xc0>)
 8000ae2:	f001 fa23 	bl	8001f2c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2034      	movs	r0, #52	@ 0x34
 8000aec:	f000 ff6e 	bl	80019cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000af0:	2034      	movs	r0, #52	@ 0x34
 8000af2:	f000 ff97 	bl	8001a24 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8000af6:	bf00      	nop
 8000af8:	3728      	adds	r7, #40	@ 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40004c00 	.word	0x40004c00
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020800 	.word	0x40020800

08000b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <NMI_Handler+0x4>

08000b14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <HardFault_Handler+0x4>

08000b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <MemManage_Handler+0x4>

08000b24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <BusFault_Handler+0x4>

08000b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <UsageFault_Handler+0x4>

08000b34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b62:	f000 fdff 	bl	8001764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8000b6e:	f002 ff89 	bl	8003a84 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8000b7a:	f001 f809 	bl	8001b90 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ST_IRQ2_Pin);
 8000b94:	2001      	movs	r0, #1
 8000b96:	f001 fceb 	bl	8002570 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ST_IRQ1_Pin);
 8000ba2:	2020      	movs	r0, #32
 8000ba4:	f001 fce4 	bl	8002570 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000bb0:	4802      	ldr	r0, [pc, #8]	@ (8000bbc <SPI1_IRQHandler+0x10>)
 8000bb2:	f003 ff9b 	bl	8004aec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	2000013c 	.word	0x2000013c

08000bc0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000bc4:	4802      	ldr	r0, [pc, #8]	@ (8000bd0 <UART4_IRQHandler+0x10>)
 8000bc6:	f004 fbef 	bl	80053a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000194 	.word	0x20000194

08000bd4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bd8:	4802      	ldr	r0, [pc, #8]	@ (8000be4 <OTG_FS_IRQHandler+0x10>)
 8000bda:	f001 fe44 	bl	8002866 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200016e8 	.word	0x200016e8

08000be8 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
	...

08000bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bf8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bfc:	f000 fd4e 	bl	800169c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c00:	480c      	ldr	r0, [pc, #48]	@ (8000c34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c02:	490d      	ldr	r1, [pc, #52]	@ (8000c38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c04:	4a0d      	ldr	r2, [pc, #52]	@ (8000c3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c08:	e002      	b.n	8000c10 <LoopCopyDataInit>

08000c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0e:	3304      	adds	r3, #4

08000c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c14:	d3f9      	bcc.n	8000c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c16:	4a0a      	ldr	r2, [pc, #40]	@ (8000c40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c18:	4c0a      	ldr	r4, [pc, #40]	@ (8000c44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c1c:	e001      	b.n	8000c22 <LoopFillZerobss>

08000c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c20:	3204      	adds	r2, #4

08000c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c24:	d3fb      	bcc.n	8000c1e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000c26:	f008 fe2f 	bl	8009888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2a:	f7ff fc45 	bl	80004b8 <main>
  bx  lr    
 8000c2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c38:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8000c3c:	08009c1c 	.word	0x08009c1c
  ldr r2, =_sbss
 8000c40:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8000c44:	20001e14 	.word	0x20001e14

08000c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC_IRQHandler>
	...

08000c4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8000c50:	2200      	movs	r2, #0
 8000c52:	4912      	ldr	r1, [pc, #72]	@ (8000c9c <MX_USB_DEVICE_Init+0x50>)
 8000c54:	4812      	ldr	r0, [pc, #72]	@ (8000ca0 <MX_USB_DEVICE_Init+0x54>)
 8000c56:	f007 fb0d 	bl	8008274 <USBD_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8000c60:	f7ff fe4a 	bl	80008f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8000c64:	490f      	ldr	r1, [pc, #60]	@ (8000ca4 <MX_USB_DEVICE_Init+0x58>)
 8000c66:	480e      	ldr	r0, [pc, #56]	@ (8000ca0 <MX_USB_DEVICE_Init+0x54>)
 8000c68:	f007 fb34 	bl	80082d4 <USBD_RegisterClass>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8000c72:	f7ff fe41 	bl	80008f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8000c76:	490c      	ldr	r1, [pc, #48]	@ (8000ca8 <MX_USB_DEVICE_Init+0x5c>)
 8000c78:	4809      	ldr	r0, [pc, #36]	@ (8000ca0 <MX_USB_DEVICE_Init+0x54>)
 8000c7a:	f007 fa2b 	bl	80080d4 <USBD_CDC_RegisterInterface>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8000c84:	f7ff fe38 	bl	80008f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8000c88:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <MX_USB_DEVICE_Init+0x54>)
 8000c8a:	f007 fb59 	bl	8008340 <USBD_Start>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8000c94:	f7ff fe30 	bl	80008f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000038 	.word	0x20000038
 8000ca0:	2000020c 	.word	0x2000020c
 8000ca4:	200000a0 	.word	0x200000a0
 8000ca8:	20000024 	.word	0x20000024

08000cac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4905      	ldr	r1, [pc, #20]	@ (8000cc8 <CDC_Init_FS+0x1c>)
 8000cb4:	4805      	ldr	r0, [pc, #20]	@ (8000ccc <CDC_Init_FS+0x20>)
 8000cb6:	f007 fa27 	bl	8008108 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8000cba:	4905      	ldr	r1, [pc, #20]	@ (8000cd0 <CDC_Init_FS+0x24>)
 8000cbc:	4803      	ldr	r0, [pc, #12]	@ (8000ccc <CDC_Init_FS+0x20>)
 8000cbe:	f007 fa45 	bl	800814c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8000cc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000ce8 	.word	0x20000ce8
 8000ccc:	2000020c 	.word	0x2000020c
 8000cd0:	200004e8 	.word	0x200004e8

08000cd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8000cd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	71fb      	strb	r3, [r7, #7]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	2b23      	cmp	r3, #35	@ 0x23
 8000cf8:	d84a      	bhi.n	8000d90 <CDC_Control_FS+0xac>
 8000cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8000d00 <CDC_Control_FS+0x1c>)
 8000cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d00:	08000d91 	.word	0x08000d91
 8000d04:	08000d91 	.word	0x08000d91
 8000d08:	08000d91 	.word	0x08000d91
 8000d0c:	08000d91 	.word	0x08000d91
 8000d10:	08000d91 	.word	0x08000d91
 8000d14:	08000d91 	.word	0x08000d91
 8000d18:	08000d91 	.word	0x08000d91
 8000d1c:	08000d91 	.word	0x08000d91
 8000d20:	08000d91 	.word	0x08000d91
 8000d24:	08000d91 	.word	0x08000d91
 8000d28:	08000d91 	.word	0x08000d91
 8000d2c:	08000d91 	.word	0x08000d91
 8000d30:	08000d91 	.word	0x08000d91
 8000d34:	08000d91 	.word	0x08000d91
 8000d38:	08000d91 	.word	0x08000d91
 8000d3c:	08000d91 	.word	0x08000d91
 8000d40:	08000d91 	.word	0x08000d91
 8000d44:	08000d91 	.word	0x08000d91
 8000d48:	08000d91 	.word	0x08000d91
 8000d4c:	08000d91 	.word	0x08000d91
 8000d50:	08000d91 	.word	0x08000d91
 8000d54:	08000d91 	.word	0x08000d91
 8000d58:	08000d91 	.word	0x08000d91
 8000d5c:	08000d91 	.word	0x08000d91
 8000d60:	08000d91 	.word	0x08000d91
 8000d64:	08000d91 	.word	0x08000d91
 8000d68:	08000d91 	.word	0x08000d91
 8000d6c:	08000d91 	.word	0x08000d91
 8000d70:	08000d91 	.word	0x08000d91
 8000d74:	08000d91 	.word	0x08000d91
 8000d78:	08000d91 	.word	0x08000d91
 8000d7c:	08000d91 	.word	0x08000d91
 8000d80:	08000d91 	.word	0x08000d91
 8000d84:	08000d91 	.word	0x08000d91
 8000d88:	08000d91 	.word	0x08000d91
 8000d8c:	08000d91 	.word	0x08000d91
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8000d90:	bf00      	nop
  }

  return (USBD_OK);
 8000d92:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	480b      	ldr	r0, [pc, #44]	@ (8000ddc <CDC_Receive_FS+0x3c>)
 8000dae:	f007 f9cd 	bl	800814c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8000db2:	480a      	ldr	r0, [pc, #40]	@ (8000ddc <CDC_Receive_FS+0x3c>)
 8000db4:	f007 fa28 	bl	8008208 <USBD_CDC_ReceivePacket>
  USB_CDC_RxHandler(UserRxBufferFS, *Len);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4808      	ldr	r0, [pc, #32]	@ (8000de0 <CDC_Receive_FS+0x40>)
 8000dc0:	f7ff fd7c 	bl	80008bc <USB_CDC_RxHandler>
  memset(UserRxBufferFS, '\0', *Len);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4804      	ldr	r0, [pc, #16]	@ (8000de0 <CDC_Receive_FS+0x40>)
 8000dce:	f008 fd53 	bl	8009878 <memset>
  return (USBD_OK);
 8000dd2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	2000020c 	.word	0x2000020c
 8000de0:	200004e8 	.word	0x200004e8

08000de4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8000df0:	2300      	movs	r3, #0
 8000df2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8000df4:	4b0d      	ldr	r3, [pc, #52]	@ (8000e2c <CDC_Transmit_FS+0x48>)
 8000df6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8000dfa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00b      	b.n	8000e22 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8000e0a:	887b      	ldrh	r3, [r7, #2]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	4806      	ldr	r0, [pc, #24]	@ (8000e2c <CDC_Transmit_FS+0x48>)
 8000e12:	f007 f979 	bl	8008108 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8000e16:	4805      	ldr	r0, [pc, #20]	@ (8000e2c <CDC_Transmit_FS+0x48>)
 8000e18:	f007 f9b6 	bl	8008188 <USBD_CDC_TransmitPacket>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	2000020c 	.word	0x2000020c

08000e30 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b087      	sub	sp, #28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8000e42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	371c      	adds	r7, #28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
	...

08000e54 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	2212      	movs	r2, #18
 8000e64:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8000e66:	4b03      	ldr	r3, [pc, #12]	@ (8000e74 <USBD_FS_DeviceDescriptor+0x20>)
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	20000054 	.word	0x20000054

08000e78 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	2204      	movs	r2, #4
 8000e88:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8000e8a:	4b03      	ldr	r3, [pc, #12]	@ (8000e98 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	20000068 	.word	0x20000068

08000e9c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d105      	bne.n	8000eba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8000eae:	683a      	ldr	r2, [r7, #0]
 8000eb0:	4907      	ldr	r1, [pc, #28]	@ (8000ed0 <USBD_FS_ProductStrDescriptor+0x34>)
 8000eb2:	4808      	ldr	r0, [pc, #32]	@ (8000ed4 <USBD_FS_ProductStrDescriptor+0x38>)
 8000eb4:	f008 fbf4 	bl	80096a0 <USBD_GetString>
 8000eb8:	e004      	b.n	8000ec4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8000eba:	683a      	ldr	r2, [r7, #0]
 8000ebc:	4904      	ldr	r1, [pc, #16]	@ (8000ed0 <USBD_FS_ProductStrDescriptor+0x34>)
 8000ebe:	4805      	ldr	r0, [pc, #20]	@ (8000ed4 <USBD_FS_ProductStrDescriptor+0x38>)
 8000ec0:	f008 fbee 	bl	80096a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8000ec4:	4b02      	ldr	r3, [pc, #8]	@ (8000ed0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200014e8 	.word	0x200014e8
 8000ed4:	08009908 	.word	0x08009908

08000ed8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8000ee4:	683a      	ldr	r2, [r7, #0]
 8000ee6:	4904      	ldr	r1, [pc, #16]	@ (8000ef8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8000ee8:	4804      	ldr	r0, [pc, #16]	@ (8000efc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8000eea:	f008 fbd9 	bl	80096a0 <USBD_GetString>
  return USBD_StrDesc;
 8000eee:	4b02      	ldr	r3, [pc, #8]	@ (8000ef8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	200014e8 	.word	0x200014e8
 8000efc:	08009920 	.word	0x08009920

08000f00 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	221a      	movs	r2, #26
 8000f10:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8000f12:	f000 f843 	bl	8000f9c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8000f16:	4b02      	ldr	r3, [pc, #8]	@ (8000f20 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	2000006c 	.word	0x2000006c

08000f24 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d105      	bne.n	8000f42 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8000f36:	683a      	ldr	r2, [r7, #0]
 8000f38:	4907      	ldr	r1, [pc, #28]	@ (8000f58 <USBD_FS_ConfigStrDescriptor+0x34>)
 8000f3a:	4808      	ldr	r0, [pc, #32]	@ (8000f5c <USBD_FS_ConfigStrDescriptor+0x38>)
 8000f3c:	f008 fbb0 	bl	80096a0 <USBD_GetString>
 8000f40:	e004      	b.n	8000f4c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8000f42:	683a      	ldr	r2, [r7, #0]
 8000f44:	4904      	ldr	r1, [pc, #16]	@ (8000f58 <USBD_FS_ConfigStrDescriptor+0x34>)
 8000f46:	4805      	ldr	r0, [pc, #20]	@ (8000f5c <USBD_FS_ConfigStrDescriptor+0x38>)
 8000f48:	f008 fbaa 	bl	80096a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8000f4c:	4b02      	ldr	r3, [pc, #8]	@ (8000f58 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200014e8 	.word	0x200014e8
 8000f5c:	08009934 	.word	0x08009934

08000f60 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	6039      	str	r1, [r7, #0]
 8000f6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d105      	bne.n	8000f7e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	4907      	ldr	r1, [pc, #28]	@ (8000f94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8000f76:	4808      	ldr	r0, [pc, #32]	@ (8000f98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8000f78:	f008 fb92 	bl	80096a0 <USBD_GetString>
 8000f7c:	e004      	b.n	8000f88 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	4904      	ldr	r1, [pc, #16]	@ (8000f94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8000f82:	4805      	ldr	r0, [pc, #20]	@ (8000f98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8000f84:	f008 fb8c 	bl	80096a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8000f88:	4b02      	ldr	r3, [pc, #8]	@ (8000f94 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200014e8 	.word	0x200014e8
 8000f98:	08009940 	.word	0x08009940

08000f9c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <Get_SerialNum+0x44>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe4 <Get_SerialNum+0x48>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <Get_SerialNum+0x4c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d009      	beq.n	8000fd6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8000fc2:	2208      	movs	r2, #8
 8000fc4:	4909      	ldr	r1, [pc, #36]	@ (8000fec <Get_SerialNum+0x50>)
 8000fc6:	68f8      	ldr	r0, [r7, #12]
 8000fc8:	f000 f814 	bl	8000ff4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8000fcc:	2204      	movs	r2, #4
 8000fce:	4908      	ldr	r1, [pc, #32]	@ (8000ff0 <Get_SerialNum+0x54>)
 8000fd0:	68b8      	ldr	r0, [r7, #8]
 8000fd2:	f000 f80f 	bl	8000ff4 <IntToUnicode>
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	1fff7a10 	.word	0x1fff7a10
 8000fe4:	1fff7a14 	.word	0x1fff7a14
 8000fe8:	1fff7a18 	.word	0x1fff7a18
 8000fec:	2000006e 	.word	0x2000006e
 8000ff0:	2000007e 	.word	0x2000007e

08000ff4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b087      	sub	sp, #28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	4613      	mov	r3, r2
 8001000:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8001006:	2300      	movs	r3, #0
 8001008:	75fb      	strb	r3, [r7, #23]
 800100a:	e027      	b.n	800105c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	0f1b      	lsrs	r3, r3, #28
 8001010:	2b09      	cmp	r3, #9
 8001012:	d80b      	bhi.n	800102c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	0f1b      	lsrs	r3, r3, #28
 8001018:	b2da      	uxtb	r2, r3
 800101a:	7dfb      	ldrb	r3, [r7, #23]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	4619      	mov	r1, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	440b      	add	r3, r1
 8001024:	3230      	adds	r2, #48	@ 0x30
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	701a      	strb	r2, [r3, #0]
 800102a:	e00a      	b.n	8001042 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	0f1b      	lsrs	r3, r3, #28
 8001030:	b2da      	uxtb	r2, r3
 8001032:	7dfb      	ldrb	r3, [r7, #23]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	4619      	mov	r1, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	440b      	add	r3, r1
 800103c:	3237      	adds	r2, #55	@ 0x37
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	011b      	lsls	r3, r3, #4
 8001046:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8001048:	7dfb      	ldrb	r3, [r7, #23]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	3301      	adds	r3, #1
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	4413      	add	r3, r2
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8001056:	7dfb      	ldrb	r3, [r7, #23]
 8001058:	3301      	adds	r3, #1
 800105a:	75fb      	strb	r3, [r7, #23]
 800105c:	7dfa      	ldrb	r2, [r7, #23]
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	429a      	cmp	r2, r3
 8001062:	d3d3      	bcc.n	800100c <IntToUnicode+0x18>
  }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	371c      	adds	r7, #28
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	@ 0x28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001094:	d13a      	bne.n	800110c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	4b1e      	ldr	r3, [pc, #120]	@ (8001114 <HAL_PCD_MspInit+0xa0>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	4a1d      	ldr	r2, [pc, #116]	@ (8001114 <HAL_PCD_MspInit+0xa0>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001114 <HAL_PCD_MspInit+0xa0>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010b2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80010b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c0:	2303      	movs	r3, #3
 80010c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010c4:	230a      	movs	r3, #10
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4619      	mov	r1, r3
 80010ce:	4812      	ldr	r0, [pc, #72]	@ (8001118 <HAL_PCD_MspInit+0xa4>)
 80010d0:	f000 ff2c 	bl	8001f2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001114 <HAL_PCD_MspInit+0xa0>)
 80010d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010d8:	4a0e      	ldr	r2, [pc, #56]	@ (8001114 <HAL_PCD_MspInit+0xa0>)
 80010da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010de:	6353      	str	r3, [r2, #52]	@ 0x34
 80010e0:	2300      	movs	r3, #0
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <HAL_PCD_MspInit+0xa0>)
 80010e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001114 <HAL_PCD_MspInit+0xa0>)
 80010ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80010f0:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <HAL_PCD_MspInit+0xa0>)
 80010f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2100      	movs	r1, #0
 8001100:	2043      	movs	r0, #67	@ 0x43
 8001102:	f000 fc63 	bl	80019cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001106:	2043      	movs	r0, #67	@ 0x43
 8001108:	f000 fc8c 	bl	8001a24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800110c:	bf00      	nop
 800110e:	3728      	adds	r7, #40	@ 0x28
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40023800 	.word	0x40023800
 8001118:	40020000 	.word	0x40020000

0800111c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001130:	4619      	mov	r1, r3
 8001132:	4610      	mov	r0, r2
 8001134:	f007 f951 	bl	80083da <USBD_LL_SetupStage>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8001152:	78fa      	ldrb	r2, [r7, #3]
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	4413      	add	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	440b      	add	r3, r1
 8001160:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	78fb      	ldrb	r3, [r7, #3]
 8001168:	4619      	mov	r1, r3
 800116a:	f007 f98b 	bl	8008484 <USBD_LL_DataOutStage>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8001188:	78fa      	ldrb	r2, [r7, #3]
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	4613      	mov	r3, r2
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	4413      	add	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	440b      	add	r3, r1
 8001196:	3320      	adds	r3, #32
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	78fb      	ldrb	r3, [r7, #3]
 800119c:	4619      	mov	r1, r3
 800119e:	f007 fa24 	bl	80085ea <USBD_LL_DataInStage>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f007 fb5e 	bl	800887a <USBD_LL_SOF>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b084      	sub	sp, #16
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80011ce:	2301      	movs	r3, #1
 80011d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	79db      	ldrb	r3, [r3, #7]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d102      	bne.n	80011e0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80011da:	2300      	movs	r3, #0
 80011dc:	73fb      	strb	r3, [r7, #15]
 80011de:	e008      	b.n	80011f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	79db      	ldrb	r3, [r3, #7]
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d102      	bne.n	80011ee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80011e8:	2301      	movs	r3, #1
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e001      	b.n	80011f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80011ee:	f7ff fb83 	bl	80008f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80011f8:	7bfa      	ldrb	r2, [r7, #15]
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f007 faf8 	bl	80087f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8001208:	4618      	mov	r0, r3
 800120a:	f007 faa0 	bl	800874e <USBD_LL_Reset>
}
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8001226:	4618      	mov	r0, r3
 8001228:	f007 faf3 	bl	8008812 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	6812      	ldr	r2, [r2, #0]
 800123a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	7adb      	ldrb	r3, [r3, #11]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d005      	beq.n	8001258 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800124c:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <HAL_PCD_SuspendCallback+0x48>)
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	4a03      	ldr	r2, [pc, #12]	@ (8001260 <HAL_PCD_SuspendCallback+0x48>)
 8001252:	f043 0306 	orr.w	r3, r3, #6
 8001256:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8001272:	4618      	mov	r0, r3
 8001274:	f007 fae9 	bl	800884a <USBD_LL_Resume>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8001292:	78fa      	ldrb	r2, [r7, #3]
 8001294:	4611      	mov	r1, r2
 8001296:	4618      	mov	r0, r3
 8001298:	f007 fb41 	bl	800891e <USBD_LL_IsoOUTIncomplete>
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80012b6:	78fa      	ldrb	r2, [r7, #3]
 80012b8:	4611      	mov	r1, r2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f007 fafd 	bl	80088ba <USBD_LL_IsoINIncomplete>
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f007 fb53 	bl	8008982 <USBD_LL_DevConnected>
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f007 fb50 	bl	8008998 <USBD_LL_DevDisconnected>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d13c      	bne.n	800138a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8001310:	4a20      	ldr	r2, [pc, #128]	@ (8001394 <USBD_LL_Init+0x94>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a1e      	ldr	r2, [pc, #120]	@ (8001394 <USBD_LL_Init+0x94>)
 800131c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001320:	4b1c      	ldr	r3, [pc, #112]	@ (8001394 <USBD_LL_Init+0x94>)
 8001322:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001326:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001328:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <USBD_LL_Init+0x94>)
 800132a:	2204      	movs	r2, #4
 800132c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800132e:	4b19      	ldr	r3, [pc, #100]	@ (8001394 <USBD_LL_Init+0x94>)
 8001330:	2202      	movs	r2, #2
 8001332:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001334:	4b17      	ldr	r3, [pc, #92]	@ (8001394 <USBD_LL_Init+0x94>)
 8001336:	2200      	movs	r2, #0
 8001338:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800133a:	4b16      	ldr	r3, [pc, #88]	@ (8001394 <USBD_LL_Init+0x94>)
 800133c:	2202      	movs	r2, #2
 800133e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001340:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <USBD_LL_Init+0x94>)
 8001342:	2201      	movs	r2, #1
 8001344:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001346:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <USBD_LL_Init+0x94>)
 8001348:	2200      	movs	r2, #0
 800134a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800134c:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <USBD_LL_Init+0x94>)
 800134e:	2200      	movs	r2, #0
 8001350:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001352:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <USBD_LL_Init+0x94>)
 8001354:	2200      	movs	r2, #0
 8001356:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001358:	4b0e      	ldr	r3, [pc, #56]	@ (8001394 <USBD_LL_Init+0x94>)
 800135a:	2200      	movs	r2, #0
 800135c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800135e:	480d      	ldr	r0, [pc, #52]	@ (8001394 <USBD_LL_Init+0x94>)
 8001360:	f001 f92a 	bl	80025b8 <HAL_PCD_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800136a:	f7ff fac5 	bl	80008f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800136e:	2180      	movs	r1, #128	@ 0x80
 8001370:	4808      	ldr	r0, [pc, #32]	@ (8001394 <USBD_LL_Init+0x94>)
 8001372:	f002 fb6a 	bl	8003a4a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8001376:	2240      	movs	r2, #64	@ 0x40
 8001378:	2100      	movs	r1, #0
 800137a:	4806      	ldr	r0, [pc, #24]	@ (8001394 <USBD_LL_Init+0x94>)
 800137c:	f002 fb1e 	bl	80039bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8001380:	2280      	movs	r2, #128	@ 0x80
 8001382:	2101      	movs	r1, #1
 8001384:	4803      	ldr	r0, [pc, #12]	@ (8001394 <USBD_LL_Init+0x94>)
 8001386:	f002 fb19 	bl	80039bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200016e8 	.word	0x200016e8

08001398 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80013a0:	2300      	movs	r3, #0
 80013a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80013ae:	4618      	mov	r0, r3
 80013b0:	f001 fa24 	bl	80027fc <HAL_PCD_Start>
 80013b4:	4603      	mov	r3, r0
 80013b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 f942 	bl	8001644 <USBD_Get_USB_Status>
 80013c0:	4603      	mov	r3, r0
 80013c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80013c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b084      	sub	sp, #16
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	4608      	mov	r0, r1
 80013d8:	4611      	mov	r1, r2
 80013da:	461a      	mov	r2, r3
 80013dc:	4603      	mov	r3, r0
 80013de:	70fb      	strb	r3, [r7, #3]
 80013e0:	460b      	mov	r3, r1
 80013e2:	70bb      	strb	r3, [r7, #2]
 80013e4:	4613      	mov	r3, r2
 80013e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80013e8:	2300      	movs	r3, #0
 80013ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80013f6:	78bb      	ldrb	r3, [r7, #2]
 80013f8:	883a      	ldrh	r2, [r7, #0]
 80013fa:	78f9      	ldrb	r1, [r7, #3]
 80013fc:	f001 fef8 	bl	80031f0 <HAL_PCD_EP_Open>
 8001400:	4603      	mov	r3, r0
 8001402:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	4618      	mov	r0, r3
 8001408:	f000 f91c 	bl	8001644 <USBD_Get_USB_Status>
 800140c:	4603      	mov	r3, r0
 800140e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001410:	7bbb      	ldrb	r3, [r7, #14]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b084      	sub	sp, #16
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	460b      	mov	r3, r1
 8001424:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001426:	2300      	movs	r3, #0
 8001428:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8001434:	78fa      	ldrb	r2, [r7, #3]
 8001436:	4611      	mov	r1, r2
 8001438:	4618      	mov	r0, r3
 800143a:	f001 ff43 	bl	80032c4 <HAL_PCD_EP_Close>
 800143e:	4603      	mov	r3, r0
 8001440:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	4618      	mov	r0, r3
 8001446:	f000 f8fd 	bl	8001644 <USBD_Get_USB_Status>
 800144a:	4603      	mov	r3, r0
 800144c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800144e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001464:	2300      	movs	r3, #0
 8001466:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001468:	2300      	movs	r3, #0
 800146a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8001472:	78fa      	ldrb	r2, [r7, #3]
 8001474:	4611      	mov	r1, r2
 8001476:	4618      	mov	r0, r3
 8001478:	f001 fffb 	bl	8003472 <HAL_PCD_EP_SetStall>
 800147c:	4603      	mov	r3, r0
 800147e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	4618      	mov	r0, r3
 8001484:	f000 f8de 	bl	8001644 <USBD_Get_USB_Status>
 8001488:	4603      	mov	r3, r0
 800148a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800148c:	7bbb      	ldrb	r3, [r7, #14]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b084      	sub	sp, #16
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
 800149e:	460b      	mov	r3, r1
 80014a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80014a6:	2300      	movs	r3, #0
 80014a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80014b0:	78fa      	ldrb	r2, [r7, #3]
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f002 f83f 	bl	8003538 <HAL_PCD_EP_ClrStall>
 80014ba:	4603      	mov	r3, r0
 80014bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 f8bf 	bl	8001644 <USBD_Get_USB_Status>
 80014c6:	4603      	mov	r3, r0
 80014c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80014ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80014e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80014e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	da0b      	bge.n	8001508 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80014f0:	78fb      	ldrb	r3, [r7, #3]
 80014f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80014f6:	68f9      	ldr	r1, [r7, #12]
 80014f8:	4613      	mov	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	4413      	add	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	3316      	adds	r3, #22
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	e00b      	b.n	8001520 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800150e:	68f9      	ldr	r1, [r7, #12]
 8001510:	4613      	mov	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800151e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001520:	4618      	mov	r0, r3
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800153c:	2300      	movs	r3, #0
 800153e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8001546:	78fa      	ldrb	r2, [r7, #3]
 8001548:	4611      	mov	r1, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f001 fe2c 	bl	80031a8 <HAL_PCD_SetAddress>
 8001550:	4603      	mov	r3, r0
 8001552:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f874 	bl	8001644 <USBD_Get_USB_Status>
 800155c:	4603      	mov	r3, r0
 800155e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001560:	7bbb      	ldrb	r3, [r7, #14]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b086      	sub	sp, #24
 800156e:	af00      	add	r7, sp, #0
 8001570:	60f8      	str	r0, [r7, #12]
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	603b      	str	r3, [r7, #0]
 8001576:	460b      	mov	r3, r1
 8001578:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800157a:	2300      	movs	r3, #0
 800157c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8001588:	7af9      	ldrb	r1, [r7, #11]
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	f001 ff36 	bl	80033fe <HAL_PCD_EP_Transmit>
 8001592:	4603      	mov	r3, r0
 8001594:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001596:	7dfb      	ldrb	r3, [r7, #23]
 8001598:	4618      	mov	r0, r3
 800159a:	f000 f853 	bl	8001644 <USBD_Get_USB_Status>
 800159e:	4603      	mov	r3, r0
 80015a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80015a2:	7dbb      	ldrb	r3, [r7, #22]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	607a      	str	r2, [r7, #4]
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	460b      	mov	r3, r1
 80015ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80015bc:	2300      	movs	r3, #0
 80015be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80015ca:	7af9      	ldrb	r1, [r7, #11]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	f001 fec2 	bl	8003358 <HAL_PCD_EP_Receive>
 80015d4:	4603      	mov	r3, r0
 80015d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80015d8:	7dfb      	ldrb	r3, [r7, #23]
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 f832 	bl	8001644 <USBD_Get_USB_Status>
 80015e0:	4603      	mov	r3, r0
 80015e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80015e4:	7dbb      	ldrb	r3, [r7, #22]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	460b      	mov	r3, r1
 80015f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8001600:	78fa      	ldrb	r2, [r7, #3]
 8001602:	4611      	mov	r1, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f001 fee2 	bl	80033ce <HAL_PCD_EP_GetRxCount>
 800160a:	4603      	mov	r3, r0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800161c:	4b03      	ldr	r3, [pc, #12]	@ (800162c <USBD_static_malloc+0x18>)
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20001bcc 	.word	0x20001bcc

08001630 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	2b03      	cmp	r3, #3
 8001656:	d817      	bhi.n	8001688 <USBD_Get_USB_Status+0x44>
 8001658:	a201      	add	r2, pc, #4	@ (adr r2, 8001660 <USBD_Get_USB_Status+0x1c>)
 800165a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165e:	bf00      	nop
 8001660:	08001671 	.word	0x08001671
 8001664:	08001677 	.word	0x08001677
 8001668:	0800167d 	.word	0x0800167d
 800166c:	08001683 	.word	0x08001683
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	73fb      	strb	r3, [r7, #15]
    break;
 8001674:	e00b      	b.n	800168e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8001676:	2303      	movs	r3, #3
 8001678:	73fb      	strb	r3, [r7, #15]
    break;
 800167a:	e008      	b.n	800168e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800167c:	2301      	movs	r3, #1
 800167e:	73fb      	strb	r3, [r7, #15]
    break;
 8001680:	e005      	b.n	800168e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8001682:	2303      	movs	r3, #3
 8001684:	73fb      	strb	r3, [r7, #15]
    break;
 8001686:	e002      	b.n	800168e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8001688:	2303      	movs	r3, #3
 800168a:	73fb      	strb	r3, [r7, #15]
    break;
 800168c:	bf00      	nop
  }
  return usb_status;
 800168e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016a0:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <SystemInit+0x20>)
 80016a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016a6:	4a05      	ldr	r2, [pc, #20]	@ (80016bc <SystemInit+0x20>)
 80016a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001700 <HAL_Init+0x40>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001700 <HAL_Init+0x40>)
 80016ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001700 <HAL_Init+0x40>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001700 <HAL_Init+0x40>)
 80016d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016dc:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <HAL_Init+0x40>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a07      	ldr	r2, [pc, #28]	@ (8001700 <HAL_Init+0x40>)
 80016e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e8:	2003      	movs	r0, #3
 80016ea:	f000 f94f 	bl	800198c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ee:	200f      	movs	r0, #15
 80016f0:	f000 f808 	bl	8001704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f4:	f7ff f912 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40023c00 	.word	0x40023c00

08001704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800170c:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <HAL_InitTick+0x54>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b12      	ldr	r3, [pc, #72]	@ (800175c <HAL_InitTick+0x58>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800171a:	fbb3 f3f1 	udiv	r3, r3, r1
 800171e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001722:	4618      	mov	r0, r3
 8001724:	f000 f996 	bl	8001a54 <HAL_SYSTICK_Config>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e00e      	b.n	8001750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b0f      	cmp	r3, #15
 8001736:	d80a      	bhi.n	800174e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001738:	2200      	movs	r2, #0
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	f04f 30ff 	mov.w	r0, #4294967295
 8001740:	f000 f944 	bl	80019cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001744:	4a06      	ldr	r2, [pc, #24]	@ (8001760 <HAL_InitTick+0x5c>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	e000      	b.n	8001750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000088 	.word	0x20000088
 800175c:	20000090 	.word	0x20000090
 8001760:	2000008c 	.word	0x2000008c

08001764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001768:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <HAL_IncTick+0x20>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <HAL_IncTick+0x24>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4413      	add	r3, r2
 8001774:	4a04      	ldr	r2, [pc, #16]	@ (8001788 <HAL_IncTick+0x24>)
 8001776:	6013      	str	r3, [r2, #0]
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000090 	.word	0x20000090
 8001788:	20001dec 	.word	0x20001dec

0800178c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return uwTick;
 8001790:	4b03      	ldr	r3, [pc, #12]	@ (80017a0 <HAL_GetTick+0x14>)
 8001792:	681b      	ldr	r3, [r3, #0]
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	20001dec 	.word	0x20001dec

080017a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017ac:	f7ff ffee 	bl	800178c <HAL_GetTick>
 80017b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017bc:	d005      	beq.n	80017ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017be:	4b0a      	ldr	r3, [pc, #40]	@ (80017e8 <HAL_Delay+0x44>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	461a      	mov	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4413      	add	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ca:	bf00      	nop
 80017cc:	f7ff ffde 	bl	800178c <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d8f7      	bhi.n	80017cc <HAL_Delay+0x28>
  {
  }
}
 80017dc:	bf00      	nop
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000090 	.word	0x20000090

080017ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001808:	4013      	ands	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001814:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001818:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800181c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181e:	4a04      	ldr	r2, [pc, #16]	@ (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	60d3      	str	r3, [r2, #12]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001838:	4b04      	ldr	r3, [pc, #16]	@ (800184c <__NVIC_GetPriorityGrouping+0x18>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	0a1b      	lsrs	r3, r3, #8
 800183e:	f003 0307 	and.w	r3, r3, #7
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	2b00      	cmp	r3, #0
 8001860:	db0b      	blt.n	800187a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	f003 021f 	and.w	r2, r3, #31
 8001868:	4907      	ldr	r1, [pc, #28]	@ (8001888 <__NVIC_EnableIRQ+0x38>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	2001      	movs	r0, #1
 8001872:	fa00 f202 	lsl.w	r2, r0, r2
 8001876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000e100 	.word	0xe000e100

0800188c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	2b00      	cmp	r3, #0
 800189e:	db0a      	blt.n	80018b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	490c      	ldr	r1, [pc, #48]	@ (80018d8 <__NVIC_SetPriority+0x4c>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	0112      	lsls	r2, r2, #4
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	440b      	add	r3, r1
 80018b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b4:	e00a      	b.n	80018cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4908      	ldr	r1, [pc, #32]	@ (80018dc <__NVIC_SetPriority+0x50>)
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	3b04      	subs	r3, #4
 80018c4:	0112      	lsls	r2, r2, #4
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	440b      	add	r3, r1
 80018ca:	761a      	strb	r2, [r3, #24]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000e100 	.word	0xe000e100
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	@ 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f1c3 0307 	rsb	r3, r3, #7
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	bf28      	it	cs
 80018fe:	2304      	movcs	r3, #4
 8001900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3304      	adds	r3, #4
 8001906:	2b06      	cmp	r3, #6
 8001908:	d902      	bls.n	8001910 <NVIC_EncodePriority+0x30>
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3b03      	subs	r3, #3
 800190e:	e000      	b.n	8001912 <NVIC_EncodePriority+0x32>
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	f04f 32ff 	mov.w	r2, #4294967295
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43da      	mvns	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	401a      	ands	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	43d9      	mvns	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	4313      	orrs	r3, r2
         );
}
 800193a:	4618      	mov	r0, r3
 800193c:	3724      	adds	r7, #36	@ 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001958:	d301      	bcc.n	800195e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195a:	2301      	movs	r3, #1
 800195c:	e00f      	b.n	800197e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195e:	4a0a      	ldr	r2, [pc, #40]	@ (8001988 <SysTick_Config+0x40>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001966:	210f      	movs	r1, #15
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f7ff ff8e 	bl	800188c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001970:	4b05      	ldr	r3, [pc, #20]	@ (8001988 <SysTick_Config+0x40>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001976:	4b04      	ldr	r3, [pc, #16]	@ (8001988 <SysTick_Config+0x40>)
 8001978:	2207      	movs	r2, #7
 800197a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	e000e010 	.word	0xe000e010

0800198c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b07      	cmp	r3, #7
 8001998:	d00f      	beq.n	80019ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b06      	cmp	r3, #6
 800199e:	d00c      	beq.n	80019ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b05      	cmp	r3, #5
 80019a4:	d009      	beq.n	80019ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d006      	beq.n	80019ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d003      	beq.n	80019ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 80019b2:	2190      	movs	r1, #144	@ 0x90
 80019b4:	4804      	ldr	r0, [pc, #16]	@ (80019c8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80019b6:	f7fe ffa5 	bl	8000904 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ff16 	bl	80017ec <__NVIC_SetPriorityGrouping>
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	08009950 	.word	0x08009950

080019cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
 80019d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b0f      	cmp	r3, #15
 80019e2:	d903      	bls.n	80019ec <HAL_NVIC_SetPriority+0x20>
 80019e4:	21a8      	movs	r1, #168	@ 0xa8
 80019e6:	480e      	ldr	r0, [pc, #56]	@ (8001a20 <HAL_NVIC_SetPriority+0x54>)
 80019e8:	f7fe ff8c 	bl	8000904 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	2b0f      	cmp	r3, #15
 80019f0:	d903      	bls.n	80019fa <HAL_NVIC_SetPriority+0x2e>
 80019f2:	21a9      	movs	r1, #169	@ 0xa9
 80019f4:	480a      	ldr	r0, [pc, #40]	@ (8001a20 <HAL_NVIC_SetPriority+0x54>)
 80019f6:	f7fe ff85 	bl	8000904 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019fa:	f7ff ff1b 	bl	8001834 <__NVIC_GetPriorityGrouping>
 80019fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	68b9      	ldr	r1, [r7, #8]
 8001a04:	6978      	ldr	r0, [r7, #20]
 8001a06:	f7ff ff6b 	bl	80018e0 <NVIC_EncodePriority>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a10:	4611      	mov	r1, r2
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff ff3a 	bl	800188c <__NVIC_SetPriority>
}
 8001a18:	bf00      	nop
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	08009950 	.word	0x08009950

08001a24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	da03      	bge.n	8001a3e <HAL_NVIC_EnableIRQ+0x1a>
 8001a36:	21bc      	movs	r1, #188	@ 0xbc
 8001a38:	4805      	ldr	r0, [pc, #20]	@ (8001a50 <HAL_NVIC_EnableIRQ+0x2c>)
 8001a3a:	f7fe ff63 	bl	8000904 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff ff04 	bl	8001850 <__NVIC_EnableIRQ>
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	08009950 	.word	0x08009950

08001a54 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ff73 	bl	8001948 <SysTick_Config>
 8001a62:	4603      	mov	r3, r0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a78:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a7a:	f7ff fe87 	bl	800178c <HAL_GetTick>
 8001a7e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d008      	beq.n	8001a9e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2280      	movs	r2, #128	@ 0x80
 8001a90:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e052      	b.n	8001b44 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0216 	bic.w	r2, r2, #22
 8001aac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	695a      	ldr	r2, [r3, #20]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001abc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d103      	bne.n	8001ace <HAL_DMA_Abort+0x62>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d007      	beq.n	8001ade <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0208 	bic.w	r2, r2, #8
 8001adc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0201 	bic.w	r2, r2, #1
 8001aec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aee:	e013      	b.n	8001b18 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001af0:	f7ff fe4c 	bl	800178c <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b05      	cmp	r3, #5
 8001afc:	d90c      	bls.n	8001b18 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2220      	movs	r2, #32
 8001b02:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2203      	movs	r2, #3
 8001b08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e015      	b.n	8001b44 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1e4      	bne.n	8001af0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2a:	223f      	movs	r2, #63	@ 0x3f
 8001b2c:	409a      	lsls	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d004      	beq.n	8001b6a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2280      	movs	r2, #128	@ 0x80
 8001b64:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00c      	b.n	8001b84 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2205      	movs	r2, #5
 8001b6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0201 	bic.w	r2, r2, #1
 8001b80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001b9a:	4b49      	ldr	r3, [pc, #292]	@ (8001cc0 <HAL_FLASH_IRQHandler+0x130>)
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d020      	beq.n	8001be8 <HAL_FLASH_IRQHandler+0x58>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8001ba6:	4b47      	ldr	r3, [pc, #284]	@ (8001cc4 <HAL_FLASH_IRQHandler+0x134>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d107      	bne.n	8001bc0 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8001bb0:	4b44      	ldr	r3, [pc, #272]	@ (8001cc4 <HAL_FLASH_IRQHandler+0x134>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8001bb6:	4b43      	ldr	r3, [pc, #268]	@ (8001cc4 <HAL_FLASH_IRQHandler+0x134>)
 8001bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	e00b      	b.n	8001bd8 <HAL_FLASH_IRQHandler+0x48>
    }
    else if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8001bc0:	4b40      	ldr	r3, [pc, #256]	@ (8001cc4 <HAL_FLASH_IRQHandler+0x134>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d103      	bne.n	8001bd2 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8001bca:	4b3e      	ldr	r3, [pc, #248]	@ (8001cc4 <HAL_FLASH_IRQHandler+0x134>)
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	e002      	b.n	8001bd8 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8001bd2:	4b3c      	ldr	r3, [pc, #240]	@ (8001cc4 <HAL_FLASH_IRQHandler+0x134>)
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	607b      	str	r3, [r7, #4]
    }

    /*Save the Error code*/
    FLASH_SetErrorCode();
 8001bd8:	f000 f88a 	bl	8001cf0 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 f87d 	bl	8001cdc <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001be2:	4b38      	ldr	r3, [pc, #224]	@ (8001cc4 <HAL_FLASH_IRQHandler+0x134>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001be8:	4b35      	ldr	r3, [pc, #212]	@ (8001cc0 <HAL_FLASH_IRQHandler+0x130>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d04a      	beq.n	8001c8a <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001bf4:	4b32      	ldr	r3, [pc, #200]	@ (8001cc0 <HAL_FLASH_IRQHandler+0x130>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	60da      	str	r2, [r3, #12]

    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8001bfa:	4b32      	ldr	r3, [pc, #200]	@ (8001cc4 <HAL_FLASH_IRQHandler+0x134>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d12d      	bne.n	8001c60 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8001c04:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc4 <HAL_FLASH_IRQHandler+0x134>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	4a2e      	ldr	r2, [pc, #184]	@ (8001cc4 <HAL_FLASH_IRQHandler+0x134>)
 8001c0c:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase*/
      if (pFlash.NbSectorsToErase != 0U)
 8001c0e:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc4 <HAL_FLASH_IRQHandler+0x134>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d015      	beq.n	8001c42 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8001c16:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc4 <HAL_FLASH_IRQHandler+0x134>)
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f853 	bl	8001cc8 <HAL_FLASH_EndOfOperationCallback>

        /*Increment sector number*/
        pFlash.Sector++;
 8001c22:	4b28      	ldr	r3, [pc, #160]	@ (8001cc4 <HAL_FLASH_IRQHandler+0x134>)
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	3301      	adds	r3, #1
 8001c28:	4a26      	ldr	r2, [pc, #152]	@ (8001cc4 <HAL_FLASH_IRQHandler+0x134>)
 8001c2a:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8001c2c:	4b25      	ldr	r3, [pc, #148]	@ (8001cc4 <HAL_FLASH_IRQHandler+0x134>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8001c32:	4b24      	ldr	r3, [pc, #144]	@ (8001cc4 <HAL_FLASH_IRQHandler+0x134>)
 8001c34:	7a1b      	ldrb	r3, [r3, #8]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	4619      	mov	r1, r3
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f8ae 	bl	8001d9c <FLASH_Erase_Sector>
 8001c40:	e023      	b.n	8001c8a <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	4a1e      	ldr	r2, [pc, #120]	@ (8001cc4 <HAL_FLASH_IRQHandler+0x134>)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc4 <HAL_FLASH_IRQHandler+0x134>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 8001c54:	f000 f924 	bl	8001ea0 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f835 	bl	8001cc8 <HAL_FLASH_EndOfOperationCallback>
 8001c5e:	e014      	b.n	8001c8a <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else
    {
      if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8001c60:	4b18      	ldr	r3, [pc, #96]	@ (8001cc4 <HAL_FLASH_IRQHandler+0x134>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d107      	bne.n	8001c7a <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 8001c6a:	f000 f919 	bl	8001ea0 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8001c6e:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <HAL_FLASH_IRQHandler+0x134>)
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 f828 	bl	8001cc8 <HAL_FLASH_EndOfOperationCallback>
 8001c78:	e004      	b.n	8001c84 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8001c7a:	4b12      	ldr	r3, [pc, #72]	@ (8001cc4 <HAL_FLASH_IRQHandler+0x134>)
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 f822 	bl	8001cc8 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001c84:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc4 <HAL_FLASH_IRQHandler+0x134>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	701a      	strb	r2, [r3, #0]
    }
  }

  if (pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc4 <HAL_FLASH_IRQHandler+0x134>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d111      	bne.n	8001cb8 <HAL_FLASH_IRQHandler+0x128>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8001c94:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc0 <HAL_FLASH_IRQHandler+0x130>)
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	4a09      	ldr	r2, [pc, #36]	@ (8001cc0 <HAL_FLASH_IRQHandler+0x130>)
 8001c9a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001c9e:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8001ca0:	4b07      	ldr	r3, [pc, #28]	@ (8001cc0 <HAL_FLASH_IRQHandler+0x130>)
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	4a06      	ldr	r2, [pc, #24]	@ (8001cc0 <HAL_FLASH_IRQHandler+0x130>)
 8001ca6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001caa:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8001cac:	4b04      	ldr	r3, [pc, #16]	@ (8001cc0 <HAL_FLASH_IRQHandler+0x130>)
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	4a03      	ldr	r2, [pc, #12]	@ (8001cc0 <HAL_FLASH_IRQHandler+0x130>)
 8001cb2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8001cb6:	6113      	str	r3, [r2, #16]
  }
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40023c00 	.word	0x40023c00
 8001cc4:	20001df0 	.word	0x20001df0

08001cc8 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001cf4:	4b27      	ldr	r3, [pc, #156]	@ (8001d94 <FLASH_SetErrorCode+0xa4>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d008      	beq.n	8001d12 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001d00:	4b25      	ldr	r3, [pc, #148]	@ (8001d98 <FLASH_SetErrorCode+0xa8>)
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	f043 0310 	orr.w	r3, r3, #16
 8001d08:	4a23      	ldr	r2, [pc, #140]	@ (8001d98 <FLASH_SetErrorCode+0xa8>)
 8001d0a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001d0c:	4b21      	ldr	r3, [pc, #132]	@ (8001d94 <FLASH_SetErrorCode+0xa4>)
 8001d0e:	2210      	movs	r2, #16
 8001d10:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001d12:	4b20      	ldr	r3, [pc, #128]	@ (8001d94 <FLASH_SetErrorCode+0xa4>)
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	f003 0320 	and.w	r3, r3, #32
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d008      	beq.n	8001d30 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d98 <FLASH_SetErrorCode+0xa8>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	f043 0308 	orr.w	r3, r3, #8
 8001d26:	4a1c      	ldr	r2, [pc, #112]	@ (8001d98 <FLASH_SetErrorCode+0xa8>)
 8001d28:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d94 <FLASH_SetErrorCode+0xa4>)
 8001d2c:	2220      	movs	r2, #32
 8001d2e:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001d30:	4b18      	ldr	r3, [pc, #96]	@ (8001d94 <FLASH_SetErrorCode+0xa4>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d008      	beq.n	8001d4e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001d3c:	4b16      	ldr	r3, [pc, #88]	@ (8001d98 <FLASH_SetErrorCode+0xa8>)
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	f043 0304 	orr.w	r3, r3, #4
 8001d44:	4a14      	ldr	r2, [pc, #80]	@ (8001d98 <FLASH_SetErrorCode+0xa8>)
 8001d46:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001d48:	4b12      	ldr	r3, [pc, #72]	@ (8001d94 <FLASH_SetErrorCode+0xa4>)
 8001d4a:	2240      	movs	r2, #64	@ 0x40
 8001d4c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001d4e:	4b11      	ldr	r3, [pc, #68]	@ (8001d94 <FLASH_SetErrorCode+0xa4>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d008      	beq.n	8001d6c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d98 <FLASH_SetErrorCode+0xa8>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	f043 0302 	orr.w	r3, r3, #2
 8001d62:	4a0d      	ldr	r2, [pc, #52]	@ (8001d98 <FLASH_SetErrorCode+0xa8>)
 8001d64:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001d66:	4b0b      	ldr	r3, [pc, #44]	@ (8001d94 <FLASH_SetErrorCode+0xa4>)
 8001d68:	2280      	movs	r2, #128	@ 0x80
 8001d6a:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001d6c:	4b09      	ldr	r3, [pc, #36]	@ (8001d94 <FLASH_SetErrorCode+0xa4>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d008      	beq.n	8001d8a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001d78:	4b07      	ldr	r3, [pc, #28]	@ (8001d98 <FLASH_SetErrorCode+0xa8>)
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	f043 0320 	orr.w	r3, r3, #32
 8001d80:	4a05      	ldr	r2, [pc, #20]	@ (8001d98 <FLASH_SetErrorCode+0xa8>)
 8001d82:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001d84:	4b03      	ldr	r3, [pc, #12]	@ (8001d94 <FLASH_SetErrorCode+0xa4>)
 8001d86:	2202      	movs	r2, #2
 8001d88:	60da      	str	r2, [r3, #12]
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	40023c00 	.word	0x40023c00
 8001d98:	20001df0 	.word	0x20001df0

08001d9c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	460b      	mov	r3, r1
 8001da6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d025      	beq.n	8001dfe <FLASH_Erase_Sector+0x62>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d022      	beq.n	8001dfe <FLASH_Erase_Sector+0x62>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d01f      	beq.n	8001dfe <FLASH_Erase_Sector+0x62>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d01c      	beq.n	8001dfe <FLASH_Erase_Sector+0x62>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d019      	beq.n	8001dfe <FLASH_Erase_Sector+0x62>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b05      	cmp	r3, #5
 8001dce:	d016      	beq.n	8001dfe <FLASH_Erase_Sector+0x62>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b06      	cmp	r3, #6
 8001dd4:	d013      	beq.n	8001dfe <FLASH_Erase_Sector+0x62>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b07      	cmp	r3, #7
 8001dda:	d010      	beq.n	8001dfe <FLASH_Erase_Sector+0x62>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d00d      	beq.n	8001dfe <FLASH_Erase_Sector+0x62>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b09      	cmp	r3, #9
 8001de6:	d00a      	beq.n	8001dfe <FLASH_Erase_Sector+0x62>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b0a      	cmp	r3, #10
 8001dec:	d007      	beq.n	8001dfe <FLASH_Erase_Sector+0x62>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b0b      	cmp	r3, #11
 8001df2:	d004      	beq.n	8001dfe <FLASH_Erase_Sector+0x62>
 8001df4:	f240 31d6 	movw	r1, #982	@ 0x3d6
 8001df8:	4827      	ldr	r0, [pc, #156]	@ (8001e98 <FLASH_Erase_Sector+0xfc>)
 8001dfa:	f7fe fd83 	bl	8000904 <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 8001dfe:	78fb      	ldrb	r3, [r7, #3]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00d      	beq.n	8001e20 <FLASH_Erase_Sector+0x84>
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d00a      	beq.n	8001e20 <FLASH_Erase_Sector+0x84>
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d007      	beq.n	8001e20 <FLASH_Erase_Sector+0x84>
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d004      	beq.n	8001e20 <FLASH_Erase_Sector+0x84>
 8001e16:	f240 31d7 	movw	r1, #983	@ 0x3d7
 8001e1a:	481f      	ldr	r0, [pc, #124]	@ (8001e98 <FLASH_Erase_Sector+0xfc>)
 8001e1c:	f7fe fd72 	bl	8000904 <assert_failed>

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001e20:	78fb      	ldrb	r3, [r7, #3]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d102      	bne.n	8001e2c <FLASH_Erase_Sector+0x90>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	e010      	b.n	8001e4e <FLASH_Erase_Sector+0xb2>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d103      	bne.n	8001e3a <FLASH_Erase_Sector+0x9e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001e32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	e009      	b.n	8001e4e <FLASH_Erase_Sector+0xb2>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001e3a:	78fb      	ldrb	r3, [r7, #3]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d103      	bne.n	8001e48 <FLASH_Erase_Sector+0xac>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001e40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	e002      	b.n	8001e4e <FLASH_Erase_Sector+0xb2>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001e48:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e4c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e4e:	4b13      	ldr	r3, [pc, #76]	@ (8001e9c <FLASH_Erase_Sector+0x100>)
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	4a12      	ldr	r2, [pc, #72]	@ (8001e9c <FLASH_Erase_Sector+0x100>)
 8001e54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e58:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001e5a:	4b10      	ldr	r3, [pc, #64]	@ (8001e9c <FLASH_Erase_Sector+0x100>)
 8001e5c:	691a      	ldr	r2, [r3, #16]
 8001e5e:	490f      	ldr	r1, [pc, #60]	@ (8001e9c <FLASH_Erase_Sector+0x100>)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001e66:	4b0d      	ldr	r3, [pc, #52]	@ (8001e9c <FLASH_Erase_Sector+0x100>)
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e9c <FLASH_Erase_Sector+0x100>)
 8001e6c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001e70:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001e72:	4b0a      	ldr	r3, [pc, #40]	@ (8001e9c <FLASH_Erase_Sector+0x100>)
 8001e74:	691a      	ldr	r2, [r3, #16]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	4a07      	ldr	r2, [pc, #28]	@ (8001e9c <FLASH_Erase_Sector+0x100>)
 8001e7e:	f043 0302 	orr.w	r3, r3, #2
 8001e82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001e84:	4b05      	ldr	r3, [pc, #20]	@ (8001e9c <FLASH_Erase_Sector+0x100>)
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	4a04      	ldr	r2, [pc, #16]	@ (8001e9c <FLASH_Erase_Sector+0x100>)
 8001e8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e8e:	6113      	str	r3, [r2, #16]
}
 8001e90:	bf00      	nop
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	080099b0 	.word	0x080099b0
 8001e9c:	40023c00 	.word	0x40023c00

08001ea0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001ea4:	4b20      	ldr	r3, [pc, #128]	@ (8001f28 <FLASH_FlushCaches+0x88>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d017      	beq.n	8001ee0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f28 <FLASH_FlushCaches+0x88>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8001f28 <FLASH_FlushCaches+0x88>)
 8001eb6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001eba:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f28 <FLASH_FlushCaches+0x88>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a19      	ldr	r2, [pc, #100]	@ (8001f28 <FLASH_FlushCaches+0x88>)
 8001ec2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	4b17      	ldr	r3, [pc, #92]	@ (8001f28 <FLASH_FlushCaches+0x88>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a16      	ldr	r2, [pc, #88]	@ (8001f28 <FLASH_FlushCaches+0x88>)
 8001ece:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001ed2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ed4:	4b14      	ldr	r3, [pc, #80]	@ (8001f28 <FLASH_FlushCaches+0x88>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a13      	ldr	r2, [pc, #76]	@ (8001f28 <FLASH_FlushCaches+0x88>)
 8001eda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ede:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001ee0:	4b11      	ldr	r3, [pc, #68]	@ (8001f28 <FLASH_FlushCaches+0x88>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d017      	beq.n	8001f1c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001eec:	4b0e      	ldr	r3, [pc, #56]	@ (8001f28 <FLASH_FlushCaches+0x88>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f28 <FLASH_FlushCaches+0x88>)
 8001ef2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001ef6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f28 <FLASH_FlushCaches+0x88>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0a      	ldr	r2, [pc, #40]	@ (8001f28 <FLASH_FlushCaches+0x88>)
 8001efe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <FLASH_FlushCaches+0x88>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a07      	ldr	r2, [pc, #28]	@ (8001f28 <FLASH_FlushCaches+0x88>)
 8001f0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001f0e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f10:	4b05      	ldr	r3, [pc, #20]	@ (8001f28 <FLASH_FlushCaches+0x88>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a04      	ldr	r2, [pc, #16]	@ (8001f28 <FLASH_FlushCaches+0x88>)
 8001f16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f1a:	6013      	str	r3, [r2, #0]
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40023c00 	.word	0x40023c00

08001f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a38      	ldr	r2, [pc, #224]	@ (8002028 <HAL_GPIO_Init+0xfc>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d023      	beq.n	8001f92 <HAL_GPIO_Init+0x66>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a37      	ldr	r2, [pc, #220]	@ (800202c <HAL_GPIO_Init+0x100>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d01f      	beq.n	8001f92 <HAL_GPIO_Init+0x66>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a36      	ldr	r2, [pc, #216]	@ (8002030 <HAL_GPIO_Init+0x104>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d01b      	beq.n	8001f92 <HAL_GPIO_Init+0x66>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a35      	ldr	r2, [pc, #212]	@ (8002034 <HAL_GPIO_Init+0x108>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d017      	beq.n	8001f92 <HAL_GPIO_Init+0x66>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a34      	ldr	r2, [pc, #208]	@ (8002038 <HAL_GPIO_Init+0x10c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d013      	beq.n	8001f92 <HAL_GPIO_Init+0x66>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a33      	ldr	r2, [pc, #204]	@ (800203c <HAL_GPIO_Init+0x110>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d00f      	beq.n	8001f92 <HAL_GPIO_Init+0x66>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a32      	ldr	r2, [pc, #200]	@ (8002040 <HAL_GPIO_Init+0x114>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00b      	beq.n	8001f92 <HAL_GPIO_Init+0x66>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a31      	ldr	r2, [pc, #196]	@ (8002044 <HAL_GPIO_Init+0x118>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d007      	beq.n	8001f92 <HAL_GPIO_Init+0x66>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a30      	ldr	r2, [pc, #192]	@ (8002048 <HAL_GPIO_Init+0x11c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d003      	beq.n	8001f92 <HAL_GPIO_Init+0x66>
 8001f8a:	21ac      	movs	r1, #172	@ 0xac
 8001f8c:	482f      	ldr	r0, [pc, #188]	@ (800204c <HAL_GPIO_Init+0x120>)
 8001f8e:	f7fe fcb9 	bl	8000904 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d004      	beq.n	8001fa6 <HAL_GPIO_Init+0x7a>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fa4:	d303      	bcc.n	8001fae <HAL_GPIO_Init+0x82>
 8001fa6:	21ad      	movs	r1, #173	@ 0xad
 8001fa8:	4828      	ldr	r0, [pc, #160]	@ (800204c <HAL_GPIO_Init+0x120>)
 8001faa:	f7fe fcab 	bl	8000904 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d035      	beq.n	8002022 <HAL_GPIO_Init+0xf6>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d031      	beq.n	8002022 <HAL_GPIO_Init+0xf6>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b11      	cmp	r3, #17
 8001fc4:	d02d      	beq.n	8002022 <HAL_GPIO_Init+0xf6>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d029      	beq.n	8002022 <HAL_GPIO_Init+0xf6>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b12      	cmp	r3, #18
 8001fd4:	d025      	beq.n	8002022 <HAL_GPIO_Init+0xf6>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8001fde:	d020      	beq.n	8002022 <HAL_GPIO_Init+0xf6>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001fe8:	d01b      	beq.n	8002022 <HAL_GPIO_Init+0xf6>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8001ff2:	d016      	beq.n	8002022 <HAL_GPIO_Init+0xf6>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8001ffc:	d011      	beq.n	8002022 <HAL_GPIO_Init+0xf6>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8002006:	d00c      	beq.n	8002022 <HAL_GPIO_Init+0xf6>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8002010:	d007      	beq.n	8002022 <HAL_GPIO_Init+0xf6>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b03      	cmp	r3, #3
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_Init+0xf6>
 800201a:	21ae      	movs	r1, #174	@ 0xae
 800201c:	480b      	ldr	r0, [pc, #44]	@ (800204c <HAL_GPIO_Init+0x120>)
 800201e:	f7fe fc71 	bl	8000904 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
 8002026:	e235      	b.n	8002494 <HAL_GPIO_Init+0x568>
 8002028:	40020000 	.word	0x40020000
 800202c:	40020400 	.word	0x40020400
 8002030:	40020800 	.word	0x40020800
 8002034:	40020c00 	.word	0x40020c00
 8002038:	40021000 	.word	0x40021000
 800203c:	40021400 	.word	0x40021400
 8002040:	40021800 	.word	0x40021800
 8002044:	40021c00 	.word	0x40021c00
 8002048:	40022000 	.word	0x40022000
 800204c:	08009a14 	.word	0x08009a14
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002050:	2201      	movs	r2, #1
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	4013      	ands	r3, r2
 8002062:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	429a      	cmp	r2, r3
 800206a:	f040 8210 	bne.w	800248e <HAL_GPIO_Init+0x562>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	2b01      	cmp	r3, #1
 8002078:	d005      	beq.n	8002086 <HAL_GPIO_Init+0x15a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002082:	2b02      	cmp	r3, #2
 8002084:	d144      	bne.n	8002110 <HAL_GPIO_Init+0x1e4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00f      	beq.n	80020ae <HAL_GPIO_Init+0x182>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d00b      	beq.n	80020ae <HAL_GPIO_Init+0x182>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	2b02      	cmp	r3, #2
 800209c:	d007      	beq.n	80020ae <HAL_GPIO_Init+0x182>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_Init+0x182>
 80020a6:	21c0      	movs	r1, #192	@ 0xc0
 80020a8:	488d      	ldr	r0, [pc, #564]	@ (80022e0 <HAL_GPIO_Init+0x3b4>)
 80020aa:	f7fe fc2b 	bl	8000904 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	2203      	movs	r2, #3
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43db      	mvns	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020e4:	2201      	movs	r2, #1
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	091b      	lsrs	r3, r3, #4
 80020fa:	f003 0201 	and.w	r2, r3, #1
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	2b03      	cmp	r3, #3
 800211a:	d027      	beq.n	800216c <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00b      	beq.n	800213c <HAL_GPIO_Init+0x210>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d007      	beq.n	800213c <HAL_GPIO_Init+0x210>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b02      	cmp	r3, #2
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0x210>
 8002134:	21d1      	movs	r1, #209	@ 0xd1
 8002136:	486a      	ldr	r0, [pc, #424]	@ (80022e0 <HAL_GPIO_Init+0x3b4>)
 8002138:	f7fe fbe4 	bl	8000904 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	2203      	movs	r2, #3
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	2b02      	cmp	r3, #2
 8002176:	f040 80b5 	bne.w	80022e4 <HAL_GPIO_Init+0x3b8>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 8089 	beq.w	8002296 <HAL_GPIO_Init+0x36a>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	2b09      	cmp	r3, #9
 800218a:	f000 8084 	beq.w	8002296 <HAL_GPIO_Init+0x36a>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d07f      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d07b      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d077      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d073      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d06f      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d06b      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d067      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d063      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d05f      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d05b      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d057      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d053      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d04f      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	2b05      	cmp	r3, #5
 80021fc:	d04b      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	2b05      	cmp	r3, #5
 8002204:	d047      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	2b09      	cmp	r3, #9
 800220c:	d043      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	2b06      	cmp	r3, #6
 8002214:	d03f      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	2b09      	cmp	r3, #9
 800221c:	d03b      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	2b07      	cmp	r3, #7
 8002224:	d037      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	2b07      	cmp	r3, #7
 800222c:	d033      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	2b07      	cmp	r3, #7
 8002234:	d02f      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	2b08      	cmp	r3, #8
 800223c:	d02b      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	2b08      	cmp	r3, #8
 8002244:	d027      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	2b08      	cmp	r3, #8
 800224c:	d023      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	2b09      	cmp	r3, #9
 8002254:	d01f      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	2b09      	cmp	r3, #9
 800225c:	d01b      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	2b0a      	cmp	r3, #10
 8002264:	d017      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	2b0a      	cmp	r3, #10
 800226c:	d013      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	2b0c      	cmp	r3, #12
 8002274:	d00f      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	2b0c      	cmp	r3, #12
 800227c:	d00b      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	2b0c      	cmp	r3, #12
 8002284:	d007      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	2b0f      	cmp	r3, #15
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_Init+0x36a>
 800228e:	21de      	movs	r1, #222	@ 0xde
 8002290:	4813      	ldr	r0, [pc, #76]	@ (80022e0 <HAL_GPIO_Init+0x3b4>)
 8002292:	f7fe fb37 	bl	8000904 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	08da      	lsrs	r2, r3, #3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3208      	adds	r2, #8
 800229e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	220f      	movs	r2, #15
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	691a      	ldr	r2, [r3, #16]
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	08da      	lsrs	r2, r3, #3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3208      	adds	r2, #8
 80022d8:	69b9      	ldr	r1, [r7, #24]
 80022da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80022de:	e001      	b.n	80022e4 <HAL_GPIO_Init+0x3b8>
 80022e0:	08009a14 	.word	0x08009a14
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 0203 	and.w	r2, r3, #3
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 80b4 	beq.w	800248e <HAL_GPIO_Init+0x562>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	4b5f      	ldr	r3, [pc, #380]	@ (80024a8 <HAL_GPIO_Init+0x57c>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232e:	4a5e      	ldr	r2, [pc, #376]	@ (80024a8 <HAL_GPIO_Init+0x57c>)
 8002330:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002334:	6453      	str	r3, [r2, #68]	@ 0x44
 8002336:	4b5c      	ldr	r3, [pc, #368]	@ (80024a8 <HAL_GPIO_Init+0x57c>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002342:	4a5a      	ldr	r2, [pc, #360]	@ (80024ac <HAL_GPIO_Init+0x580>)
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	089b      	lsrs	r3, r3, #2
 8002348:	3302      	adds	r3, #2
 800234a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	220f      	movs	r2, #15
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a51      	ldr	r2, [pc, #324]	@ (80024b0 <HAL_GPIO_Init+0x584>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d02b      	beq.n	80023c6 <HAL_GPIO_Init+0x49a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a50      	ldr	r2, [pc, #320]	@ (80024b4 <HAL_GPIO_Init+0x588>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d025      	beq.n	80023c2 <HAL_GPIO_Init+0x496>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a4f      	ldr	r2, [pc, #316]	@ (80024b8 <HAL_GPIO_Init+0x58c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d01f      	beq.n	80023be <HAL_GPIO_Init+0x492>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a4e      	ldr	r2, [pc, #312]	@ (80024bc <HAL_GPIO_Init+0x590>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d019      	beq.n	80023ba <HAL_GPIO_Init+0x48e>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a4d      	ldr	r2, [pc, #308]	@ (80024c0 <HAL_GPIO_Init+0x594>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d013      	beq.n	80023b6 <HAL_GPIO_Init+0x48a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a4c      	ldr	r2, [pc, #304]	@ (80024c4 <HAL_GPIO_Init+0x598>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00d      	beq.n	80023b2 <HAL_GPIO_Init+0x486>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a4b      	ldr	r2, [pc, #300]	@ (80024c8 <HAL_GPIO_Init+0x59c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d007      	beq.n	80023ae <HAL_GPIO_Init+0x482>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a4a      	ldr	r2, [pc, #296]	@ (80024cc <HAL_GPIO_Init+0x5a0>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d101      	bne.n	80023aa <HAL_GPIO_Init+0x47e>
 80023a6:	2307      	movs	r3, #7
 80023a8:	e00e      	b.n	80023c8 <HAL_GPIO_Init+0x49c>
 80023aa:	2308      	movs	r3, #8
 80023ac:	e00c      	b.n	80023c8 <HAL_GPIO_Init+0x49c>
 80023ae:	2306      	movs	r3, #6
 80023b0:	e00a      	b.n	80023c8 <HAL_GPIO_Init+0x49c>
 80023b2:	2305      	movs	r3, #5
 80023b4:	e008      	b.n	80023c8 <HAL_GPIO_Init+0x49c>
 80023b6:	2304      	movs	r3, #4
 80023b8:	e006      	b.n	80023c8 <HAL_GPIO_Init+0x49c>
 80023ba:	2303      	movs	r3, #3
 80023bc:	e004      	b.n	80023c8 <HAL_GPIO_Init+0x49c>
 80023be:	2302      	movs	r3, #2
 80023c0:	e002      	b.n	80023c8 <HAL_GPIO_Init+0x49c>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <HAL_GPIO_Init+0x49c>
 80023c6:	2300      	movs	r3, #0
 80023c8:	69fa      	ldr	r2, [r7, #28]
 80023ca:	f002 0203 	and.w	r2, r2, #3
 80023ce:	0092      	lsls	r2, r2, #2
 80023d0:	4093      	lsls	r3, r2
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023d8:	4934      	ldr	r1, [pc, #208]	@ (80024ac <HAL_GPIO_Init+0x580>)
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	3302      	adds	r3, #2
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023e6:	4b3a      	ldr	r3, [pc, #232]	@ (80024d0 <HAL_GPIO_Init+0x5a4>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_Init+0x4de>
        {
          temp |= iocurrent;
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800240a:	4a31      	ldr	r2, [pc, #196]	@ (80024d0 <HAL_GPIO_Init+0x5a4>)
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002410:	4b2f      	ldr	r3, [pc, #188]	@ (80024d0 <HAL_GPIO_Init+0x5a4>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0x508>
        {
          temp |= iocurrent;
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002434:	4a26      	ldr	r2, [pc, #152]	@ (80024d0 <HAL_GPIO_Init+0x5a4>)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800243a:	4b25      	ldr	r3, [pc, #148]	@ (80024d0 <HAL_GPIO_Init+0x5a4>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_Init+0x532>
        {
          temp |= iocurrent;
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800245e:	4a1c      	ldr	r2, [pc, #112]	@ (80024d0 <HAL_GPIO_Init+0x5a4>)
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002464:	4b1a      	ldr	r3, [pc, #104]	@ (80024d0 <HAL_GPIO_Init+0x5a4>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x55c>
        {
          temp |= iocurrent;
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002488:	4a11      	ldr	r2, [pc, #68]	@ (80024d0 <HAL_GPIO_Init+0x5a4>)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3301      	adds	r3, #1
 8002492:	61fb      	str	r3, [r7, #28]
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	2b0f      	cmp	r3, #15
 8002498:	f67f adda 	bls.w	8002050 <HAL_GPIO_Init+0x124>
      }
    }
  }
}
 800249c:	bf00      	nop
 800249e:	bf00      	nop
 80024a0:	3720      	adds	r7, #32
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40013800 	.word	0x40013800
 80024b0:	40020000 	.word	0x40020000
 80024b4:	40020400 	.word	0x40020400
 80024b8:	40020800 	.word	0x40020800
 80024bc:	40020c00 	.word	0x40020c00
 80024c0:	40021000 	.word	0x40021000
 80024c4:	40021400 	.word	0x40021400
 80024c8:	40021800 	.word	0x40021800
 80024cc:	40021c00 	.word	0x40021c00
 80024d0:	40013c00 	.word	0x40013c00

080024d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	807b      	strh	r3, [r7, #2]
 80024e0:	4613      	mov	r3, r2
 80024e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80024e4:	887b      	ldrh	r3, [r7, #2]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d104      	bne.n	80024f4 <HAL_GPIO_WritePin+0x20>
 80024ea:	f240 119d 	movw	r1, #413	@ 0x19d
 80024ee:	480e      	ldr	r0, [pc, #56]	@ (8002528 <HAL_GPIO_WritePin+0x54>)
 80024f0:	f7fe fa08 	bl	8000904 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80024f4:	787b      	ldrb	r3, [r7, #1]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d007      	beq.n	800250a <HAL_GPIO_WritePin+0x36>
 80024fa:	787b      	ldrb	r3, [r7, #1]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d004      	beq.n	800250a <HAL_GPIO_WritePin+0x36>
 8002500:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 8002504:	4808      	ldr	r0, [pc, #32]	@ (8002528 <HAL_GPIO_WritePin+0x54>)
 8002506:	f7fe f9fd 	bl	8000904 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800250a:	787b      	ldrb	r3, [r7, #1]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002510:	887a      	ldrh	r2, [r7, #2]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002516:	e003      	b.n	8002520 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002518:	887b      	ldrh	r3, [r7, #2]
 800251a:	041a      	lsls	r2, r3, #16
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	619a      	str	r2, [r3, #24]
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	08009a14 	.word	0x08009a14

0800252c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002538:	887b      	ldrh	r3, [r7, #2]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d104      	bne.n	8002548 <HAL_GPIO_TogglePin+0x1c>
 800253e:	f44f 71db 	mov.w	r1, #438	@ 0x1b6
 8002542:	480a      	ldr	r0, [pc, #40]	@ (800256c <HAL_GPIO_TogglePin+0x40>)
 8002544:	f7fe f9de 	bl	8000904 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800254e:	887a      	ldrh	r2, [r7, #2]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4013      	ands	r3, r2
 8002554:	041a      	lsls	r2, r3, #16
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	43d9      	mvns	r1, r3
 800255a:	887b      	ldrh	r3, [r7, #2]
 800255c:	400b      	ands	r3, r1
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	619a      	str	r2, [r3, #24]
}
 8002564:	bf00      	nop
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	08009a14 	.word	0x08009a14

08002570 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800257a:	4b08      	ldr	r3, [pc, #32]	@ (800259c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800257c:	695a      	ldr	r2, [r3, #20]
 800257e:	88fb      	ldrh	r3, [r7, #6]
 8002580:	4013      	ands	r3, r2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d006      	beq.n	8002594 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002586:	4a05      	ldr	r2, [pc, #20]	@ (800259c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002588:	88fb      	ldrh	r3, [r7, #6]
 800258a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800258c:	88fb      	ldrh	r3, [r7, #6]
 800258e:	4618      	mov	r0, r3
 8002590:	f000 f806 	bl	80025a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40013c00 	.word	0x40013c00

080025a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
	...

080025b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af02      	add	r7, sp, #8
 80025be:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e10f      	b.n	80027ea <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025d2:	d008      	beq.n	80025e6 <HAL_PCD_Init+0x2e>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a86      	ldr	r2, [pc, #536]	@ (80027f4 <HAL_PCD_Init+0x23c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d003      	beq.n	80025e6 <HAL_PCD_Init+0x2e>
 80025de:	2189      	movs	r1, #137	@ 0x89
 80025e0:	4885      	ldr	r0, [pc, #532]	@ (80027f8 <HAL_PCD_Init+0x240>)
 80025e2:	f7fe f98f 	bl	8000904 <assert_failed>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d106      	bne.n	8002606 <HAL_PCD_Init+0x4e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7fe fd37 	bl	8001074 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2203      	movs	r2, #3
 800260a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002614:	d102      	bne.n	800261c <HAL_PCD_Init+0x64>
  {
    hpcd->Init.dma_enable = 0U;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f003 ff26 	bl	8006472 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	7c1a      	ldrb	r2, [r3, #16]
 800262e:	f88d 2000 	strb.w	r2, [sp]
 8002632:	3304      	adds	r3, #4
 8002634:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002636:	f003 fe05 	bl	8006244 <USB_CoreInit>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_PCD_Init+0x94>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2202      	movs	r2, #2
 8002644:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0ce      	b.n	80027ea <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2100      	movs	r1, #0
 8002652:	4618      	mov	r0, r3
 8002654:	f003 ff1e 	bl	8006494 <USB_SetCurrentMode>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d005      	beq.n	800266a <HAL_PCD_Init+0xb2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2202      	movs	r2, #2
 8002662:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e0bf      	b.n	80027ea <HAL_PCD_Init+0x232>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800266a:	2300      	movs	r3, #0
 800266c:	73fb      	strb	r3, [r7, #15]
 800266e:	e04a      	b.n	8002706 <HAL_PCD_Init+0x14e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002670:	7bfa      	ldrb	r2, [r7, #15]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	4413      	add	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	3315      	adds	r3, #21
 8002680:	2201      	movs	r2, #1
 8002682:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002684:	7bfa      	ldrb	r2, [r7, #15]
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	3314      	adds	r3, #20
 8002694:	7bfa      	ldrb	r2, [r7, #15]
 8002696:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002698:	7bfa      	ldrb	r2, [r7, #15]
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	b298      	uxth	r0, r3
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4413      	add	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	332e      	adds	r3, #46	@ 0x2e
 80026ac:	4602      	mov	r2, r0
 80026ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026b0:	7bfa      	ldrb	r2, [r7, #15]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4413      	add	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	3318      	adds	r3, #24
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026c4:	7bfa      	ldrb	r2, [r7, #15]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	331c      	adds	r3, #28
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026d8:	7bfa      	ldrb	r2, [r7, #15]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4413      	add	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	3320      	adds	r3, #32
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026ec:	7bfa      	ldrb	r2, [r7, #15]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	4413      	add	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	3324      	adds	r3, #36	@ 0x24
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	3301      	adds	r3, #1
 8002704:	73fb      	strb	r3, [r7, #15]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	791b      	ldrb	r3, [r3, #4]
 800270a:	7bfa      	ldrb	r2, [r7, #15]
 800270c:	429a      	cmp	r2, r3
 800270e:	d3af      	bcc.n	8002670 <HAL_PCD_Init+0xb8>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002710:	2300      	movs	r3, #0
 8002712:	73fb      	strb	r3, [r7, #15]
 8002714:	e044      	b.n	80027a0 <HAL_PCD_Init+0x1e8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002716:	7bfa      	ldrb	r2, [r7, #15]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4413      	add	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800272c:	7bfa      	ldrb	r2, [r7, #15]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	4413      	add	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800273e:	7bfa      	ldrb	r2, [r7, #15]
 8002740:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002742:	7bfa      	ldrb	r2, [r7, #15]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	4413      	add	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002754:	2200      	movs	r2, #0
 8002756:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002758:	7bfa      	ldrb	r2, [r7, #15]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	4413      	add	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800276e:	7bfa      	ldrb	r2, [r7, #15]
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4413      	add	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	440b      	add	r3, r1
 800277c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002784:	7bfa      	ldrb	r2, [r7, #15]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4413      	add	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800279a:	7bfb      	ldrb	r3, [r7, #15]
 800279c:	3301      	adds	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	791b      	ldrb	r3, [r3, #4]
 80027a4:	7bfa      	ldrb	r2, [r7, #15]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d3b5      	bcc.n	8002716 <HAL_PCD_Init+0x15e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6818      	ldr	r0, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	7c1a      	ldrb	r2, [r3, #16]
 80027b2:	f88d 2000 	strb.w	r2, [sp]
 80027b6:	3304      	adds	r3, #4
 80027b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027ba:	f003 feb7 	bl	800652c <USB_DevInit>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_PCD_Init+0x218>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e00c      	b.n	80027ea <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f004 ff01 	bl	80075ea <USB_DevDisconnect>

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40040000 	.word	0x40040000
 80027f8:	08009a74 	.word	0x08009a74

080027fc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <HAL_PCD_Start+0x1c>
 8002814:	2302      	movs	r3, #2
 8002816:	e022      	b.n	800285e <HAL_PCD_Start+0x62>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002828:	2b00      	cmp	r3, #0
 800282a:	d009      	beq.n	8002840 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002830:	2b01      	cmp	r3, #1
 8002832:	d105      	bne.n	8002840 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002838:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f003 fe03 	bl	8006450 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f004 feaa 	bl	80075a8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002866:	b590      	push	{r4, r7, lr}
 8002868:	b08d      	sub	sp, #52	@ 0x34
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002874:	6a3b      	ldr	r3, [r7, #32]
 8002876:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f004 ff68 	bl	8007752 <USB_GetMode>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	f040 848c 	bne.w	80031a2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f004 fecc 	bl	800762c <USB_ReadInterrupts>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 8482 	beq.w	80031a0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	0a1b      	lsrs	r3, r3, #8
 80028a6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f004 feb9 	bl	800762c <USB_ReadInterrupts>
 80028ba:	4603      	mov	r3, r0
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d107      	bne.n	80028d4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695a      	ldr	r2, [r3, #20]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f002 0202 	and.w	r2, r2, #2
 80028d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f004 fea7 	bl	800762c <USB_ReadInterrupts>
 80028de:	4603      	mov	r3, r0
 80028e0:	f003 0310 	and.w	r3, r3, #16
 80028e4:	2b10      	cmp	r3, #16
 80028e6:	d161      	bne.n	80029ac <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699a      	ldr	r2, [r3, #24]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0210 	bic.w	r2, r2, #16
 80028f6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	f003 020f 	and.w	r2, r3, #15
 8002904:	4613      	mov	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	4413      	add	r3, r2
 8002914:	3304      	adds	r3, #4
 8002916:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	0c5b      	lsrs	r3, r3, #17
 800291c:	f003 030f 	and.w	r3, r3, #15
 8002920:	2b02      	cmp	r3, #2
 8002922:	d124      	bne.n	800296e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800292a:	4013      	ands	r3, r2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d035      	beq.n	800299c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	091b      	lsrs	r3, r3, #4
 8002938:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800293a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800293e:	b29b      	uxth	r3, r3
 8002940:	461a      	mov	r2, r3
 8002942:	6a38      	ldr	r0, [r7, #32]
 8002944:	f004 fcde 	bl	8007304 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	091b      	lsrs	r3, r3, #4
 8002950:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002954:	441a      	add	r2, r3
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	695a      	ldr	r2, [r3, #20]
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002966:	441a      	add	r2, r3
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	615a      	str	r2, [r3, #20]
 800296c:	e016      	b.n	800299c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	0c5b      	lsrs	r3, r3, #17
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	2b06      	cmp	r3, #6
 8002978:	d110      	bne.n	800299c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002980:	2208      	movs	r2, #8
 8002982:	4619      	mov	r1, r3
 8002984:	6a38      	ldr	r0, [r7, #32]
 8002986:	f004 fcbd 	bl	8007304 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	695a      	ldr	r2, [r3, #20]
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002996:	441a      	add	r2, r3
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699a      	ldr	r2, [r3, #24]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0210 	orr.w	r2, r2, #16
 80029aa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f004 fe3b 	bl	800762c <USB_ReadInterrupts>
 80029b6:	4603      	mov	r3, r0
 80029b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029bc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80029c0:	f040 80a7 	bne.w	8002b12 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f004 fe40 	bl	8007652 <USB_ReadDevAllOutEpInterrupt>
 80029d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80029d4:	e099      	b.n	8002b0a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80029d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 808e 	beq.w	8002afe <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	4611      	mov	r1, r2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f004 fe64 	bl	80076ba <USB_ReadDevOutEPInterrupt>
 80029f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00c      	beq.n	8002a18 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80029fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a00:	015a      	lsls	r2, r3, #5
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	4413      	add	r3, r2
 8002a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 fea4 	bl	8003760 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00c      	beq.n	8002a3c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a24:	015a      	lsls	r2, r3, #5
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a2e:	461a      	mov	r2, r3
 8002a30:	2308      	movs	r3, #8
 8002a32:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 ff7a 	bl	8003930 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d008      	beq.n	8002a58 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a48:	015a      	lsls	r2, r3, #5
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a52:	461a      	mov	r2, r3
 8002a54:	2310      	movs	r3, #16
 8002a56:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d030      	beq.n	8002ac4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a6a:	2b80      	cmp	r3, #128	@ 0x80
 8002a6c:	d109      	bne.n	8002a82 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	69fa      	ldr	r2, [r7, #28]
 8002a78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a7c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a80:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	4413      	add	r3, r2
 8002a94:	3304      	adds	r3, #4
 8002a96:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	78db      	ldrb	r3, [r3, #3]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d108      	bne.n	8002ab2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	4619      	mov	r1, r3
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7fe fbe7 	bl	8001280 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab4:	015a      	lsls	r2, r3, #5
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002abe:	461a      	mov	r2, r3
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d008      	beq.n	8002ae0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad0:	015a      	lsls	r2, r3, #5
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ada:	461a      	mov	r2, r3
 8002adc:	2320      	movs	r3, #32
 8002ade:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d009      	beq.n	8002afe <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aec:	015a      	lsls	r2, r3, #5
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002af6:	461a      	mov	r2, r3
 8002af8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002afc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b00:	3301      	adds	r3, #1
 8002b02:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b06:	085b      	lsrs	r3, r3, #1
 8002b08:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f47f af62 	bne.w	80029d6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f004 fd88 	bl	800762c <USB_ReadInterrupts>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b26:	f040 80db 	bne.w	8002ce0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f004 fda9 	bl	8007686 <USB_ReadDevAllInEpInterrupt>
 8002b34:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002b3a:	e0cd      	b.n	8002cd8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 80c2 	beq.w	8002ccc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	4611      	mov	r1, r2
 8002b52:	4618      	mov	r0, r3
 8002b54:	f004 fdcf 	bl	80076f6 <USB_ReadDevInEPInterrupt>
 8002b58:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d057      	beq.n	8002c14 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	69f9      	ldr	r1, [r7, #28]
 8002b80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002b84:	4013      	ands	r3, r2
 8002b86:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b94:	461a      	mov	r2, r3
 8002b96:	2301      	movs	r3, #1
 8002b98:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	799b      	ldrb	r3, [r3, #6]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d132      	bne.n	8002c08 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	4413      	add	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	3320      	adds	r3, #32
 8002bb2:	6819      	ldr	r1, [r3, #0]
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bb8:	4613      	mov	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4403      	add	r3, r0
 8002bc2:	331c      	adds	r3, #28
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4419      	add	r1, r3
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bcc:	4613      	mov	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4403      	add	r3, r0
 8002bd6:	3320      	adds	r3, #32
 8002bd8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d113      	bne.n	8002c08 <HAL_PCD_IRQHandler+0x3a2>
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002be4:	4613      	mov	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	3324      	adds	r3, #36	@ 0x24
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d108      	bne.n	8002c08 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6818      	ldr	r0, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c00:	461a      	mov	r2, r3
 8002c02:	2101      	movs	r1, #1
 8002c04:	f004 fdd6 	bl	80077b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fe fab1 	bl	8001176 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d008      	beq.n	8002c30 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c20:	015a      	lsls	r2, r3, #5
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	2308      	movs	r3, #8
 8002c2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	f003 0310 	and.w	r3, r3, #16
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d008      	beq.n	8002c4c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	015a      	lsls	r2, r3, #5
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	4413      	add	r3, r2
 8002c42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c46:	461a      	mov	r2, r3
 8002c48:	2310      	movs	r3, #16
 8002c4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d008      	beq.n	8002c68 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c62:	461a      	mov	r2, r3
 8002c64:	2340      	movs	r3, #64	@ 0x40
 8002c66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d023      	beq.n	8002cba <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002c72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c74:	6a38      	ldr	r0, [r7, #32]
 8002c76:	f003 fdbd 	bl	80067f4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	3310      	adds	r3, #16
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	4413      	add	r3, r2
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	78db      	ldrb	r3, [r3, #3]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d108      	bne.n	8002ca8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fe fafe 	bl	80012a4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002cc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fcbd 	bl	8003646 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cce:	3301      	adds	r3, #1
 8002cd0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd4:	085b      	lsrs	r3, r3, #1
 8002cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f47f af2e 	bne.w	8002b3c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f004 fca1 	bl	800762c <USB_ReadInterrupts>
 8002cea:	4603      	mov	r3, r0
 8002cec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002cf0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002cf4:	d122      	bne.n	8002d3c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	69fa      	ldr	r2, [r7, #28]
 8002d00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d04:	f023 0301 	bic.w	r3, r3, #1
 8002d08:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d108      	bne.n	8002d26 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fea4 	bl	8003a6c <HAL_PCDEx_LPM_Callback>
 8002d24:	e002      	b.n	8002d2c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7fe fa9c 	bl	8001264 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695a      	ldr	r2, [r3, #20]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002d3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f004 fc73 	bl	800762c <USB_ReadInterrupts>
 8002d46:	4603      	mov	r3, r0
 8002d48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d50:	d112      	bne.n	8002d78 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d102      	bne.n	8002d68 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7fe fa58 	bl	8001218 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695a      	ldr	r2, [r3, #20]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002d76:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f004 fc55 	bl	800762c <USB_ReadInterrupts>
 8002d82:	4603      	mov	r3, r0
 8002d84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d8c:	f040 80b7 	bne.w	8002efe <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	69fa      	ldr	r2, [r7, #28]
 8002d9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d9e:	f023 0301 	bic.w	r3, r3, #1
 8002da2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2110      	movs	r1, #16
 8002daa:	4618      	mov	r0, r3
 8002dac:	f003 fd22 	bl	80067f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002db0:	2300      	movs	r3, #0
 8002db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002db4:	e046      	b.n	8002e44 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002db8:	015a      	lsls	r2, r3, #5
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002dc8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dcc:	015a      	lsls	r2, r3, #5
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dda:	0151      	lsls	r1, r2, #5
 8002ddc:	69fa      	ldr	r2, [r7, #28]
 8002dde:	440a      	add	r2, r1
 8002de0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002de4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002de8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dec:	015a      	lsls	r2, r3, #5
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	4413      	add	r3, r2
 8002df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002df6:	461a      	mov	r2, r3
 8002df8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002dfc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e00:	015a      	lsls	r2, r3, #5
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	4413      	add	r3, r2
 8002e06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e0e:	0151      	lsls	r1, r2, #5
 8002e10:	69fa      	ldr	r2, [r7, #28]
 8002e12:	440a      	add	r2, r1
 8002e14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002e18:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e1c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e20:	015a      	lsls	r2, r3, #5
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e2e:	0151      	lsls	r1, r2, #5
 8002e30:	69fa      	ldr	r2, [r7, #28]
 8002e32:	440a      	add	r2, r1
 8002e34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002e38:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002e3c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e40:	3301      	adds	r3, #1
 8002e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	791b      	ldrb	r3, [r3, #4]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d3b2      	bcc.n	8002db6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e5e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002e62:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	7bdb      	ldrb	r3, [r3, #15]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d016      	beq.n	8002e9a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e76:	69fa      	ldr	r2, [r7, #28]
 8002e78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e7c:	f043 030b 	orr.w	r3, r3, #11
 8002e80:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8c:	69fa      	ldr	r2, [r7, #28]
 8002e8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e92:	f043 030b 	orr.w	r3, r3, #11
 8002e96:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e98:	e015      	b.n	8002ec6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	69fa      	ldr	r2, [r7, #28]
 8002ea4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ea8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002eac:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002eb0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	69fa      	ldr	r2, [r7, #28]
 8002ebc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ec0:	f043 030b 	orr.w	r3, r3, #11
 8002ec4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ed4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002ed8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ee8:	461a      	mov	r2, r3
 8002eea:	f004 fc63 	bl	80077b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695a      	ldr	r2, [r3, #20]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002efc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f004 fb92 	bl	800762c <USB_ReadInterrupts>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f12:	d123      	bne.n	8002f5c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f004 fc28 	bl	800776e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f003 fcdf 	bl	80068e6 <USB_GetDevSpeed>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681c      	ldr	r4, [r3, #0]
 8002f34:	f001 fb80 	bl	8004638 <HAL_RCC_GetHCLKFreq>
 8002f38:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f3e:	461a      	mov	r2, r3
 8002f40:	4620      	mov	r0, r4
 8002f42:	f003 f9e3 	bl	800630c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7fe f93d 	bl	80011c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695a      	ldr	r2, [r3, #20]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002f5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f004 fb63 	bl	800762c <USB_ReadInterrupts>
 8002f66:	4603      	mov	r3, r0
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d10a      	bne.n	8002f86 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7fe f91a 	bl	80011aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695a      	ldr	r2, [r3, #20]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f002 0208 	and.w	r2, r2, #8
 8002f84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f004 fb4e 	bl	800762c <USB_ReadInterrupts>
 8002f90:	4603      	mov	r3, r0
 8002f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f96:	2b80      	cmp	r3, #128	@ 0x80
 8002f98:	d123      	bne.n	8002fe2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002faa:	e014      	b.n	8002fd6 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d105      	bne.n	8002fd0 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	4619      	mov	r1, r3
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 fb0a 	bl	80035e4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	791b      	ldrb	r3, [r3, #4]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d3e4      	bcc.n	8002fac <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f004 fb20 	bl	800762c <USB_ReadInterrupts>
 8002fec:	4603      	mov	r3, r0
 8002fee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ff2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ff6:	d13c      	bne.n	8003072 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ffc:	e02b      	b.n	8003056 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	4413      	add	r3, r2
 8003006:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003012:	4613      	mov	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	440b      	add	r3, r1
 800301c:	3318      	adds	r3, #24
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d115      	bne.n	8003050 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003024:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003026:	2b00      	cmp	r3, #0
 8003028:	da12      	bge.n	8003050 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800302e:	4613      	mov	r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	4413      	add	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	3317      	adds	r3, #23
 800303a:	2201      	movs	r2, #1
 800303c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800303e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003040:	b2db      	uxtb	r3, r3
 8003042:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003046:	b2db      	uxtb	r3, r3
 8003048:	4619      	mov	r1, r3
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 faca 	bl	80035e4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003052:	3301      	adds	r3, #1
 8003054:	627b      	str	r3, [r7, #36]	@ 0x24
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	791b      	ldrb	r3, [r3, #4]
 800305a:	461a      	mov	r2, r3
 800305c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305e:	4293      	cmp	r3, r2
 8003060:	d3cd      	bcc.n	8002ffe <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695a      	ldr	r2, [r3, #20]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003070:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f004 fad8 	bl	800762c <USB_ReadInterrupts>
 800307c:	4603      	mov	r3, r0
 800307e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003082:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003086:	d156      	bne.n	8003136 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003088:	2301      	movs	r3, #1
 800308a:	627b      	str	r3, [r7, #36]	@ 0x24
 800308c:	e045      	b.n	800311a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800308e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	4413      	add	r3, r2
 8003096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030a2:	4613      	mov	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d12e      	bne.n	8003114 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80030b6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	da2b      	bge.n	8003114 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80030c8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d121      	bne.n	8003114 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030d4:	4613      	mov	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80030e2:	2201      	movs	r2, #1
 80030e4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80030f2:	6a3b      	ldr	r3, [r7, #32]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10a      	bne.n	8003114 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	69fa      	ldr	r2, [r7, #28]
 8003108:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800310c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003110:	6053      	str	r3, [r2, #4]
            break;
 8003112:	e008      	b.n	8003126 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003116:	3301      	adds	r3, #1
 8003118:	627b      	str	r3, [r7, #36]	@ 0x24
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	791b      	ldrb	r3, [r3, #4]
 800311e:	461a      	mov	r2, r3
 8003120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003122:	4293      	cmp	r3, r2
 8003124:	d3b3      	bcc.n	800308e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	695a      	ldr	r2, [r3, #20]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003134:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f004 fa76 	bl	800762c <USB_ReadInterrupts>
 8003140:	4603      	mov	r3, r0
 8003142:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800314a:	d10a      	bne.n	8003162 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7fe f8bb 	bl	80012c8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695a      	ldr	r2, [r3, #20]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003160:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f004 fa60 	bl	800762c <USB_ReadInterrupts>
 800316c:	4603      	mov	r3, r0
 800316e:	f003 0304 	and.w	r3, r3, #4
 8003172:	2b04      	cmp	r3, #4
 8003174:	d115      	bne.n	80031a2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7fe f8ab 	bl	80012e4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6859      	ldr	r1, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	430a      	orrs	r2, r1
 800319c:	605a      	str	r2, [r3, #4]
 800319e:	e000      	b.n	80031a2 <HAL_PCD_IRQHandler+0x93c>
      return;
 80031a0:	bf00      	nop
    }
  }
}
 80031a2:	3734      	adds	r7, #52	@ 0x34
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd90      	pop	{r4, r7, pc}

080031a8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_PCD_SetAddress+0x1a>
 80031be:	2302      	movs	r3, #2
 80031c0:	e012      	b.n	80031e8 <HAL_PCD_SetAddress+0x40>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	78fa      	ldrb	r2, [r7, #3]
 80031ce:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	78fa      	ldrb	r2, [r7, #3]
 80031d6:	4611      	mov	r1, r2
 80031d8:	4618      	mov	r0, r3
 80031da:	f004 f9bf 	bl	800755c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	4608      	mov	r0, r1
 80031fa:	4611      	mov	r1, r2
 80031fc:	461a      	mov	r2, r3
 80031fe:	4603      	mov	r3, r0
 8003200:	70fb      	strb	r3, [r7, #3]
 8003202:	460b      	mov	r3, r1
 8003204:	803b      	strh	r3, [r7, #0]
 8003206:	4613      	mov	r3, r2
 8003208:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800320e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003212:	2b00      	cmp	r3, #0
 8003214:	da0f      	bge.n	8003236 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003216:	78fb      	ldrb	r3, [r7, #3]
 8003218:	f003 020f 	and.w	r2, r3, #15
 800321c:	4613      	mov	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	4413      	add	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	3310      	adds	r3, #16
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	4413      	add	r3, r2
 800322a:	3304      	adds	r3, #4
 800322c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2201      	movs	r2, #1
 8003232:	705a      	strb	r2, [r3, #1]
 8003234:	e00f      	b.n	8003256 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003236:	78fb      	ldrb	r3, [r7, #3]
 8003238:	f003 020f 	and.w	r2, r3, #15
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	4413      	add	r3, r2
 800324c:	3304      	adds	r3, #4
 800324e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003256:	78fb      	ldrb	r3, [r7, #3]
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	b2da      	uxtb	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003262:	883b      	ldrh	r3, [r7, #0]
 8003264:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	78ba      	ldrb	r2, [r7, #2]
 8003270:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	785b      	ldrb	r3, [r3, #1]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d004      	beq.n	8003284 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003284:	78bb      	ldrb	r3, [r7, #2]
 8003286:	2b02      	cmp	r3, #2
 8003288:	d102      	bne.n	8003290 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <HAL_PCD_EP_Open+0xae>
 800329a:	2302      	movs	r3, #2
 800329c:	e00e      	b.n	80032bc <HAL_PCD_EP_Open+0xcc>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68f9      	ldr	r1, [r7, #12]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f003 fb3f 	bl	8006930 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80032ba:	7afb      	ldrb	r3, [r7, #11]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	da0f      	bge.n	80032f8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032d8:	78fb      	ldrb	r3, [r7, #3]
 80032da:	f003 020f 	and.w	r2, r3, #15
 80032de:	4613      	mov	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	3310      	adds	r3, #16
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	4413      	add	r3, r2
 80032ec:	3304      	adds	r3, #4
 80032ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2201      	movs	r2, #1
 80032f4:	705a      	strb	r2, [r3, #1]
 80032f6:	e00f      	b.n	8003318 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	f003 020f 	and.w	r2, r3, #15
 80032fe:	4613      	mov	r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	4413      	add	r3, r2
 800330e:	3304      	adds	r3, #4
 8003310:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003318:	78fb      	ldrb	r3, [r7, #3]
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	b2da      	uxtb	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <HAL_PCD_EP_Close+0x6e>
 800332e:	2302      	movs	r3, #2
 8003330:	e00e      	b.n	8003350 <HAL_PCD_EP_Close+0x8c>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68f9      	ldr	r1, [r7, #12]
 8003340:	4618      	mov	r0, r3
 8003342:	f003 fb7d 	bl	8006a40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	607a      	str	r2, [r7, #4]
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	460b      	mov	r3, r1
 8003366:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003368:	7afb      	ldrb	r3, [r7, #11]
 800336a:	f003 020f 	and.w	r2, r3, #15
 800336e:	4613      	mov	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	4413      	add	r3, r2
 800337e:	3304      	adds	r3, #4
 8003380:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2200      	movs	r2, #0
 8003392:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2200      	movs	r2, #0
 8003398:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800339a:	7afb      	ldrb	r3, [r7, #11]
 800339c:	f003 030f 	and.w	r3, r3, #15
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	799b      	ldrb	r3, [r3, #6]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d102      	bne.n	80033b4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6818      	ldr	r0, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	799b      	ldrb	r3, [r3, #6]
 80033bc:	461a      	mov	r2, r3
 80033be:	6979      	ldr	r1, [r7, #20]
 80033c0:	f003 fc1a 	bl	8006bf8 <USB_EPStartXfer>

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
 80033d6:	460b      	mov	r3, r1
 80033d8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033da:	78fb      	ldrb	r3, [r7, #3]
 80033dc:	f003 020f 	and.w	r2, r3, #15
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	4413      	add	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80033f0:	681b      	ldr	r3, [r3, #0]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr

080033fe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b086      	sub	sp, #24
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	607a      	str	r2, [r7, #4]
 8003408:	603b      	str	r3, [r7, #0]
 800340a:	460b      	mov	r3, r1
 800340c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800340e:	7afb      	ldrb	r3, [r7, #11]
 8003410:	f003 020f 	and.w	r2, r3, #15
 8003414:	4613      	mov	r3, r2
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	3310      	adds	r3, #16
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4413      	add	r3, r2
 8003422:	3304      	adds	r3, #4
 8003424:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2200      	movs	r2, #0
 8003436:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2201      	movs	r2, #1
 800343c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800343e:	7afb      	ldrb	r3, [r7, #11]
 8003440:	f003 030f 	and.w	r3, r3, #15
 8003444:	b2da      	uxtb	r2, r3
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	799b      	ldrb	r3, [r3, #6]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d102      	bne.n	8003458 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	799b      	ldrb	r3, [r3, #6]
 8003460:	461a      	mov	r2, r3
 8003462:	6979      	ldr	r1, [r7, #20]
 8003464:	f003 fbc8 	bl	8006bf8 <USB_EPStartXfer>

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b084      	sub	sp, #16
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	460b      	mov	r3, r1
 800347c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800347e:	78fb      	ldrb	r3, [r7, #3]
 8003480:	f003 030f 	and.w	r3, r3, #15
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	7912      	ldrb	r2, [r2, #4]
 8003488:	4293      	cmp	r3, r2
 800348a:	d901      	bls.n	8003490 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e04f      	b.n	8003530 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003490:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003494:	2b00      	cmp	r3, #0
 8003496:	da0f      	bge.n	80034b8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	f003 020f 	and.w	r2, r3, #15
 800349e:	4613      	mov	r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	4413      	add	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	3310      	adds	r3, #16
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	4413      	add	r3, r2
 80034ac:	3304      	adds	r3, #4
 80034ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2201      	movs	r2, #1
 80034b4:	705a      	strb	r2, [r3, #1]
 80034b6:	e00d      	b.n	80034d4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034b8:	78fa      	ldrb	r2, [r7, #3]
 80034ba:	4613      	mov	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	4413      	add	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	4413      	add	r3, r2
 80034ca:	3304      	adds	r3, #4
 80034cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2201      	movs	r2, #1
 80034d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034da:	78fb      	ldrb	r3, [r7, #3]
 80034dc:	f003 030f 	and.w	r3, r3, #15
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <HAL_PCD_EP_SetStall+0x82>
 80034f0:	2302      	movs	r3, #2
 80034f2:	e01d      	b.n	8003530 <HAL_PCD_EP_SetStall+0xbe>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68f9      	ldr	r1, [r7, #12]
 8003502:	4618      	mov	r0, r3
 8003504:	f003 ff56 	bl	80073b4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003508:	78fb      	ldrb	r3, [r7, #3]
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	2b00      	cmp	r3, #0
 8003510:	d109      	bne.n	8003526 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	7999      	ldrb	r1, [r3, #6]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003520:	461a      	mov	r2, r3
 8003522:	f004 f947 	bl	80077b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003544:	78fb      	ldrb	r3, [r7, #3]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	7912      	ldrb	r2, [r2, #4]
 800354e:	4293      	cmp	r3, r2
 8003550:	d901      	bls.n	8003556 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e042      	b.n	80035dc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003556:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800355a:	2b00      	cmp	r3, #0
 800355c:	da0f      	bge.n	800357e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800355e:	78fb      	ldrb	r3, [r7, #3]
 8003560:	f003 020f 	and.w	r2, r3, #15
 8003564:	4613      	mov	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	4413      	add	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	3310      	adds	r3, #16
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	4413      	add	r3, r2
 8003572:	3304      	adds	r3, #4
 8003574:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2201      	movs	r2, #1
 800357a:	705a      	strb	r2, [r3, #1]
 800357c:	e00f      	b.n	800359e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800357e:	78fb      	ldrb	r3, [r7, #3]
 8003580:	f003 020f 	and.w	r2, r3, #15
 8003584:	4613      	mov	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	4413      	add	r3, r2
 8003594:	3304      	adds	r3, #4
 8003596:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035a4:	78fb      	ldrb	r3, [r7, #3]
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <HAL_PCD_EP_ClrStall+0x86>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e00e      	b.n	80035dc <HAL_PCD_EP_ClrStall+0xa4>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68f9      	ldr	r1, [r7, #12]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f003 ff5f 	bl	8007490 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80035f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	da0c      	bge.n	8003612 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035f8:	78fb      	ldrb	r3, [r7, #3]
 80035fa:	f003 020f 	and.w	r2, r3, #15
 80035fe:	4613      	mov	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	3310      	adds	r3, #16
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	4413      	add	r3, r2
 800360c:	3304      	adds	r3, #4
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	e00c      	b.n	800362c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003612:	78fb      	ldrb	r3, [r7, #3]
 8003614:	f003 020f 	and.w	r2, r3, #15
 8003618:	4613      	mov	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	4413      	add	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	4413      	add	r3, r2
 8003628:	3304      	adds	r3, #4
 800362a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68f9      	ldr	r1, [r7, #12]
 8003632:	4618      	mov	r0, r3
 8003634:	f003 fd7e 	bl	8007134 <USB_EPStopXfer>
 8003638:	4603      	mov	r3, r0
 800363a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800363c:	7afb      	ldrb	r3, [r7, #11]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b08a      	sub	sp, #40	@ 0x28
 800364a:	af02      	add	r7, sp, #8
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	3310      	adds	r3, #16
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	4413      	add	r3, r2
 800366a:	3304      	adds	r3, #4
 800366c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	695a      	ldr	r2, [r3, #20]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	429a      	cmp	r2, r3
 8003678:	d901      	bls.n	800367e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e06b      	b.n	8003756 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	69fa      	ldr	r2, [r7, #28]
 8003690:	429a      	cmp	r2, r3
 8003692:	d902      	bls.n	800369a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	3303      	adds	r3, #3
 800369e:	089b      	lsrs	r3, r3, #2
 80036a0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036a2:	e02a      	b.n	80036fa <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	69fa      	ldr	r2, [r7, #28]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d902      	bls.n	80036c0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	3303      	adds	r3, #3
 80036c4:	089b      	lsrs	r3, r3, #2
 80036c6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	68d9      	ldr	r1, [r3, #12]
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	4603      	mov	r3, r0
 80036dc:	6978      	ldr	r0, [r7, #20]
 80036de:	f003 fdd3 	bl	8007288 <USB_WritePacket>

    ep->xfer_buff  += len;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	441a      	add	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	695a      	ldr	r2, [r3, #20]
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	441a      	add	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	4413      	add	r3, r2
 8003702:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	429a      	cmp	r2, r3
 800370e:	d809      	bhi.n	8003724 <PCD_WriteEmptyTxFifo+0xde>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	695a      	ldr	r2, [r3, #20]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003718:	429a      	cmp	r2, r3
 800371a:	d203      	bcs.n	8003724 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1bf      	bne.n	80036a4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	691a      	ldr	r2, [r3, #16]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	429a      	cmp	r2, r3
 800372e:	d811      	bhi.n	8003754 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	2201      	movs	r2, #1
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003744:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	43db      	mvns	r3, r3
 800374a:	6939      	ldr	r1, [r7, #16]
 800374c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003750:	4013      	ands	r3, r2
 8003752:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3720      	adds	r7, #32
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	333c      	adds	r3, #60	@ 0x3c
 8003778:	3304      	adds	r3, #4
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	015a      	lsls	r2, r3, #5
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	4413      	add	r3, r2
 8003786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	799b      	ldrb	r3, [r3, #6]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d17b      	bne.n	800388e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b00      	cmp	r3, #0
 800379e:	d015      	beq.n	80037cc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	4a61      	ldr	r2, [pc, #388]	@ (8003928 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	f240 80b9 	bls.w	800391c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 80b3 	beq.w	800391c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	015a      	lsls	r2, r3, #5
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	4413      	add	r3, r2
 80037be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037c2:	461a      	mov	r2, r3
 80037c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037c8:	6093      	str	r3, [r2, #8]
 80037ca:	e0a7      	b.n	800391c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	f003 0320 	and.w	r3, r3, #32
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d009      	beq.n	80037ea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	015a      	lsls	r2, r3, #5
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	4413      	add	r3, r2
 80037de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037e2:	461a      	mov	r2, r3
 80037e4:	2320      	movs	r3, #32
 80037e6:	6093      	str	r3, [r2, #8]
 80037e8:	e098      	b.n	800391c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f040 8093 	bne.w	800391c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	4a4b      	ldr	r2, [pc, #300]	@ (8003928 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d90f      	bls.n	800381e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	4413      	add	r3, r2
 8003810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003814:	461a      	mov	r2, r3
 8003816:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800381a:	6093      	str	r3, [r2, #8]
 800381c:	e07e      	b.n	800391c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	4613      	mov	r3, r2
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	4413      	add	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	4413      	add	r3, r2
 8003830:	3304      	adds	r3, #4
 8003832:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a1a      	ldr	r2, [r3, #32]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	0159      	lsls	r1, r3, #5
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	440b      	add	r3, r1
 8003840:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800384a:	1ad2      	subs	r2, r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d114      	bne.n	8003880 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6818      	ldr	r0, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003868:	461a      	mov	r2, r3
 800386a:	2101      	movs	r1, #1
 800386c:	f003 ffa2 	bl	80077b4 <USB_EP0_OutStart>
 8003870:	e006      	b.n	8003880 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	441a      	add	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	b2db      	uxtb	r3, r3
 8003884:	4619      	mov	r1, r3
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fd fc5a 	bl	8001140 <HAL_PCD_DataOutStageCallback>
 800388c:	e046      	b.n	800391c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	4a26      	ldr	r2, [pc, #152]	@ (800392c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d124      	bne.n	80038e0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00a      	beq.n	80038b6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038ac:	461a      	mov	r2, r3
 80038ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038b2:	6093      	str	r3, [r2, #8]
 80038b4:	e032      	b.n	800391c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	f003 0320 	and.w	r3, r3, #32
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038cc:	461a      	mov	r2, r3
 80038ce:	2320      	movs	r3, #32
 80038d0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	4619      	mov	r1, r3
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7fd fc31 	bl	8001140 <HAL_PCD_DataOutStageCallback>
 80038de:	e01d      	b.n	800391c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d114      	bne.n	8003910 <PCD_EP_OutXfrComplete_int+0x1b0>
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	4613      	mov	r3, r2
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	4413      	add	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	440b      	add	r3, r1
 80038f4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d108      	bne.n	8003910 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003908:	461a      	mov	r2, r3
 800390a:	2100      	movs	r1, #0
 800390c:	f003 ff52 	bl	80077b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	b2db      	uxtb	r3, r3
 8003914:	4619      	mov	r1, r3
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7fd fc12 	bl	8001140 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3720      	adds	r7, #32
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	4f54300a 	.word	0x4f54300a
 800392c:	4f54310a 	.word	0x4f54310a

08003930 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	333c      	adds	r3, #60	@ 0x3c
 8003948:	3304      	adds	r3, #4
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	4413      	add	r3, r2
 8003956:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4a15      	ldr	r2, [pc, #84]	@ (80039b8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d90e      	bls.n	8003984 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800396c:	2b00      	cmp	r3, #0
 800396e:	d009      	beq.n	8003984 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	4413      	add	r3, r2
 8003978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800397c:	461a      	mov	r2, r3
 800397e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003982:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7fd fbc9 	bl	800111c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	4a0a      	ldr	r2, [pc, #40]	@ (80039b8 <PCD_EP_OutSetupPacket_int+0x88>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d90c      	bls.n	80039ac <PCD_EP_OutSetupPacket_int+0x7c>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	799b      	ldrb	r3, [r3, #6]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d108      	bne.n	80039ac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6818      	ldr	r0, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80039a4:	461a      	mov	r2, r3
 80039a6:	2101      	movs	r1, #1
 80039a8:	f003 ff04 	bl	80077b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	4f54300a 	.word	0x4f54300a

080039bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	460b      	mov	r3, r1
 80039c6:	70fb      	strb	r3, [r7, #3]
 80039c8:	4613      	mov	r3, r2
 80039ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80039d4:	78fb      	ldrb	r3, [r7, #3]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d107      	bne.n	80039ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80039da:	883b      	ldrh	r3, [r7, #0]
 80039dc:	0419      	lsls	r1, r3, #16
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80039e8:	e028      	b.n	8003a3c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f0:	0c1b      	lsrs	r3, r3, #16
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	4413      	add	r3, r2
 80039f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039f8:	2300      	movs	r3, #0
 80039fa:	73fb      	strb	r3, [r7, #15]
 80039fc:	e00d      	b.n	8003a1a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	3340      	adds	r3, #64	@ 0x40
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	0c1b      	lsrs	r3, r3, #16
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	4413      	add	r3, r2
 8003a12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
 8003a16:	3301      	adds	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
 8003a1a:	7bfa      	ldrb	r2, [r7, #15]
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d3ec      	bcc.n	80039fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a24:	883b      	ldrh	r3, [r7, #0]
 8003a26:	0418      	lsls	r0, r3, #16
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6819      	ldr	r1, [r3, #0]
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	4302      	orrs	r2, r0
 8003a34:	3340      	adds	r3, #64	@ 0x40
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	460b      	mov	r3, r1
 8003a54:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	887a      	ldrh	r2, [r7, #2]
 8003a5c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8003a88:	4b06      	ldr	r3, [pc, #24]	@ (8003aa4 <HAL_PWR_PVD_IRQHandler+0x20>)
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8003a94:	f000 f808 	bl	8003aa8 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8003a98:	4b02      	ldr	r3, [pc, #8]	@ (8003aa4 <HAL_PWR_PVD_IRQHandler+0x20>)
 8003a9a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003a9e:	615a      	str	r2, [r3, #20]
  }
}
 8003aa0:	bf00      	nop
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40013c00 	.word	0x40013c00

08003aa8 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8003aac:	bf00      	nop
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
	...

08003ab8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e318      	b.n	80040fc <HAL_RCC_OscConfig+0x644>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b0f      	cmp	r3, #15
 8003ad0:	d903      	bls.n	8003ada <HAL_RCC_OscConfig+0x22>
 8003ad2:	21e6      	movs	r1, #230	@ 0xe6
 8003ad4:	4897      	ldr	r0, [pc, #604]	@ (8003d34 <HAL_RCC_OscConfig+0x27c>)
 8003ad6:	f7fc ff15 	bl	8000904 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 8088 	beq.w	8003bf8 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00d      	beq.n	8003b0c <HAL_RCC_OscConfig+0x54>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af8:	d008      	beq.n	8003b0c <HAL_RCC_OscConfig+0x54>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b02:	d003      	beq.n	8003b0c <HAL_RCC_OscConfig+0x54>
 8003b04:	21eb      	movs	r1, #235	@ 0xeb
 8003b06:	488b      	ldr	r0, [pc, #556]	@ (8003d34 <HAL_RCC_OscConfig+0x27c>)
 8003b08:	f7fc fefc 	bl	8000904 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b0c:	4b8a      	ldr	r3, [pc, #552]	@ (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f003 030c 	and.w	r3, r3, #12
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d00c      	beq.n	8003b32 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b18:	4b87      	ldr	r3, [pc, #540]	@ (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d112      	bne.n	8003b4a <HAL_RCC_OscConfig+0x92>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b24:	4b84      	ldr	r3, [pc, #528]	@ (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b30:	d10b      	bne.n	8003b4a <HAL_RCC_OscConfig+0x92>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b32:	4b81      	ldr	r3, [pc, #516]	@ (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d05b      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x13e>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d157      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e2d8      	b.n	80040fc <HAL_RCC_OscConfig+0x644>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b52:	d106      	bne.n	8003b62 <HAL_RCC_OscConfig+0xaa>
 8003b54:	4b78      	ldr	r3, [pc, #480]	@ (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a77      	ldr	r2, [pc, #476]	@ (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003b5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	e01d      	b.n	8003b9e <HAL_RCC_OscConfig+0xe6>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b6a:	d10c      	bne.n	8003b86 <HAL_RCC_OscConfig+0xce>
 8003b6c:	4b72      	ldr	r3, [pc, #456]	@ (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a71      	ldr	r2, [pc, #452]	@ (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003b72:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b76:	6013      	str	r3, [r2, #0]
 8003b78:	4b6f      	ldr	r3, [pc, #444]	@ (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a6e      	ldr	r2, [pc, #440]	@ (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003b7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b82:	6013      	str	r3, [r2, #0]
 8003b84:	e00b      	b.n	8003b9e <HAL_RCC_OscConfig+0xe6>
 8003b86:	4b6c      	ldr	r3, [pc, #432]	@ (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a6b      	ldr	r2, [pc, #428]	@ (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003b8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	4b69      	ldr	r3, [pc, #420]	@ (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a68      	ldr	r2, [pc, #416]	@ (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003b98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b9c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d013      	beq.n	8003bce <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba6:	f7fd fdf1 	bl	800178c <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bae:	f7fd fded 	bl	800178c <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b64      	cmp	r3, #100	@ 0x64
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e29d      	b.n	80040fc <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc0:	4b5d      	ldr	r3, [pc, #372]	@ (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0f0      	beq.n	8003bae <HAL_RCC_OscConfig+0xf6>
 8003bcc:	e014      	b.n	8003bf8 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bce:	f7fd fddd 	bl	800178c <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bd6:	f7fd fdd9 	bl	800178c <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b64      	cmp	r3, #100	@ 0x64
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e289      	b.n	80040fc <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003be8:	4b53      	ldr	r3, [pc, #332]	@ (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1f0      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x11e>
 8003bf4:	e000      	b.n	8003bf8 <HAL_RCC_OscConfig+0x140>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d079      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d008      	beq.n	8003c1e <HAL_RCC_OscConfig+0x166>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d004      	beq.n	8003c1e <HAL_RCC_OscConfig+0x166>
 8003c14:	f240 111d 	movw	r1, #285	@ 0x11d
 8003c18:	4846      	ldr	r0, [pc, #280]	@ (8003d34 <HAL_RCC_OscConfig+0x27c>)
 8003c1a:	f7fc fe73 	bl	8000904 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	2b1f      	cmp	r3, #31
 8003c24:	d904      	bls.n	8003c30 <HAL_RCC_OscConfig+0x178>
 8003c26:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8003c2a:	4842      	ldr	r0, [pc, #264]	@ (8003d34 <HAL_RCC_OscConfig+0x27c>)
 8003c2c:	f7fc fe6a 	bl	8000904 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c30:	4b41      	ldr	r3, [pc, #260]	@ (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 030c 	and.w	r3, r3, #12
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00b      	beq.n	8003c54 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c3c:	4b3e      	ldr	r3, [pc, #248]	@ (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d11c      	bne.n	8003c82 <HAL_RCC_OscConfig+0x1ca>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c48:	4b3b      	ldr	r3, [pc, #236]	@ (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d116      	bne.n	8003c82 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c54:	4b38      	ldr	r3, [pc, #224]	@ (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_RCC_OscConfig+0x1b4>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d001      	beq.n	8003c6c <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e247      	b.n	80040fc <HAL_RCC_OscConfig+0x644>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6c:	4b32      	ldr	r3, [pc, #200]	@ (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	492f      	ldr	r1, [pc, #188]	@ (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c80:	e03a      	b.n	8003cf8 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d020      	beq.n	8003ccc <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c8a:	4b2c      	ldr	r3, [pc, #176]	@ (8003d3c <HAL_RCC_OscConfig+0x284>)
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c90:	f7fd fd7c 	bl	800178c <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c98:	f7fd fd78 	bl	800178c <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e228      	b.n	80040fc <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003caa:	4b23      	ldr	r3, [pc, #140]	@ (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f0      	beq.n	8003c98 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb6:	4b20      	ldr	r3, [pc, #128]	@ (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	491c      	ldr	r1, [pc, #112]	@ (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	600b      	str	r3, [r1, #0]
 8003cca:	e015      	b.n	8003cf8 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8003d3c <HAL_RCC_OscConfig+0x284>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd2:	f7fd fd5b 	bl	800178c <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x234>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cda:	f7fd fd57 	bl	800178c <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e207      	b.n	80040fc <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cec:	4b12      	ldr	r3, [pc, #72]	@ (8003d38 <HAL_RCC_OscConfig+0x280>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1f0      	bne.n	8003cda <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d045      	beq.n	8003d90 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <HAL_RCC_OscConfig+0x266>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d004      	beq.n	8003d1e <HAL_RCC_OscConfig+0x266>
 8003d14:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8003d18:	4806      	ldr	r0, [pc, #24]	@ (8003d34 <HAL_RCC_OscConfig+0x27c>)
 8003d1a:	f7fc fdf3 	bl	8000904 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d01e      	beq.n	8003d64 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d26:	4b06      	ldr	r3, [pc, #24]	@ (8003d40 <HAL_RCC_OscConfig+0x288>)
 8003d28:	2201      	movs	r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2c:	f7fd fd2e 	bl	800178c <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d32:	e010      	b.n	8003d56 <HAL_RCC_OscConfig+0x29e>
 8003d34:	08009ad4 	.word	0x08009ad4
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	42470000 	.word	0x42470000
 8003d40:	42470e80 	.word	0x42470e80
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d44:	f7fd fd22 	bl	800178c <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e1d2      	b.n	80040fc <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d56:	4b5e      	ldr	r3, [pc, #376]	@ (8003ed0 <HAL_RCC_OscConfig+0x418>)
 8003d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0f0      	beq.n	8003d44 <HAL_RCC_OscConfig+0x28c>
 8003d62:	e015      	b.n	8003d90 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d64:	4b5b      	ldr	r3, [pc, #364]	@ (8003ed4 <HAL_RCC_OscConfig+0x41c>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d6a:	f7fd fd0f 	bl	800178c <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x2cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d72:	f7fd fd0b 	bl	800178c <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e1bb      	b.n	80040fc <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d84:	4b52      	ldr	r3, [pc, #328]	@ (8003ed0 <HAL_RCC_OscConfig+0x418>)
 8003d86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1f0      	bne.n	8003d72 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 80b0 	beq.w	8003efe <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00c      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x30c>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d008      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x30c>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b05      	cmp	r3, #5
 8003db8:	d004      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x30c>
 8003dba:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 8003dbe:	4846      	ldr	r0, [pc, #280]	@ (8003ed8 <HAL_RCC_OscConfig+0x420>)
 8003dc0:	f7fc fda0 	bl	8000904 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dc4:	4b42      	ldr	r3, [pc, #264]	@ (8003ed0 <HAL_RCC_OscConfig+0x418>)
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10f      	bne.n	8003df0 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60bb      	str	r3, [r7, #8]
 8003dd4:	4b3e      	ldr	r3, [pc, #248]	@ (8003ed0 <HAL_RCC_OscConfig+0x418>)
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd8:	4a3d      	ldr	r2, [pc, #244]	@ (8003ed0 <HAL_RCC_OscConfig+0x418>)
 8003dda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dde:	6413      	str	r3, [r2, #64]	@ 0x40
 8003de0:	4b3b      	ldr	r3, [pc, #236]	@ (8003ed0 <HAL_RCC_OscConfig+0x418>)
 8003de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003de8:	60bb      	str	r3, [r7, #8]
 8003dea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dec:	2301      	movs	r3, #1
 8003dee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df0:	4b3a      	ldr	r3, [pc, #232]	@ (8003edc <HAL_RCC_OscConfig+0x424>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d118      	bne.n	8003e2e <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dfc:	4b37      	ldr	r3, [pc, #220]	@ (8003edc <HAL_RCC_OscConfig+0x424>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a36      	ldr	r2, [pc, #216]	@ (8003edc <HAL_RCC_OscConfig+0x424>)
 8003e02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e08:	f7fd fcc0 	bl	800178c <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x36a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e10:	f7fd fcbc 	bl	800178c <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e16c      	b.n	80040fc <HAL_RCC_OscConfig+0x644>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e22:	4b2e      	ldr	r3, [pc, #184]	@ (8003edc <HAL_RCC_OscConfig+0x424>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0f0      	beq.n	8003e10 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d106      	bne.n	8003e44 <HAL_RCC_OscConfig+0x38c>
 8003e36:	4b26      	ldr	r3, [pc, #152]	@ (8003ed0 <HAL_RCC_OscConfig+0x418>)
 8003e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3a:	4a25      	ldr	r2, [pc, #148]	@ (8003ed0 <HAL_RCC_OscConfig+0x418>)
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e42:	e01c      	b.n	8003e7e <HAL_RCC_OscConfig+0x3c6>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2b05      	cmp	r3, #5
 8003e4a:	d10c      	bne.n	8003e66 <HAL_RCC_OscConfig+0x3ae>
 8003e4c:	4b20      	ldr	r3, [pc, #128]	@ (8003ed0 <HAL_RCC_OscConfig+0x418>)
 8003e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e50:	4a1f      	ldr	r2, [pc, #124]	@ (8003ed0 <HAL_RCC_OscConfig+0x418>)
 8003e52:	f043 0304 	orr.w	r3, r3, #4
 8003e56:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e58:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed0 <HAL_RCC_OscConfig+0x418>)
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ed0 <HAL_RCC_OscConfig+0x418>)
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e64:	e00b      	b.n	8003e7e <HAL_RCC_OscConfig+0x3c6>
 8003e66:	4b1a      	ldr	r3, [pc, #104]	@ (8003ed0 <HAL_RCC_OscConfig+0x418>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6a:	4a19      	ldr	r2, [pc, #100]	@ (8003ed0 <HAL_RCC_OscConfig+0x418>)
 8003e6c:	f023 0301 	bic.w	r3, r3, #1
 8003e70:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e72:	4b17      	ldr	r3, [pc, #92]	@ (8003ed0 <HAL_RCC_OscConfig+0x418>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e76:	4a16      	ldr	r2, [pc, #88]	@ (8003ed0 <HAL_RCC_OscConfig+0x418>)
 8003e78:	f023 0304 	bic.w	r3, r3, #4
 8003e7c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d015      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e86:	f7fd fc81 	bl	800178c <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e8c:	e00a      	b.n	8003ea4 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8e:	f7fd fc7d 	bl	800178c <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e12b      	b.n	80040fc <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ed0 <HAL_RCC_OscConfig+0x418>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0ee      	beq.n	8003e8e <HAL_RCC_OscConfig+0x3d6>
 8003eb0:	e01c      	b.n	8003eec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eb2:	f7fd fc6b 	bl	800178c <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb8:	e012      	b.n	8003ee0 <HAL_RCC_OscConfig+0x428>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eba:	f7fd fc67 	bl	800178c <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d909      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e115      	b.n	80040fc <HAL_RCC_OscConfig+0x644>
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	42470e80 	.word	0x42470e80
 8003ed8:	08009ad4 	.word	0x08009ad4
 8003edc:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee0:	4b88      	ldr	r3, [pc, #544]	@ (8004104 <HAL_RCC_OscConfig+0x64c>)
 8003ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1e6      	bne.n	8003eba <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003eec:	7dfb      	ldrb	r3, [r7, #23]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d105      	bne.n	8003efe <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef2:	4b84      	ldr	r3, [pc, #528]	@ (8004104 <HAL_RCC_OscConfig+0x64c>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef6:	4a83      	ldr	r2, [pc, #524]	@ (8004104 <HAL_RCC_OscConfig+0x64c>)
 8003ef8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003efc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00c      	beq.n	8003f20 <HAL_RCC_OscConfig+0x468>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d008      	beq.n	8003f20 <HAL_RCC_OscConfig+0x468>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d004      	beq.n	8003f20 <HAL_RCC_OscConfig+0x468>
 8003f16:	f240 11cd 	movw	r1, #461	@ 0x1cd
 8003f1a:	487b      	ldr	r0, [pc, #492]	@ (8004108 <HAL_RCC_OscConfig+0x650>)
 8003f1c:	f7fc fcf2 	bl	8000904 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 80e8 	beq.w	80040fa <HAL_RCC_OscConfig+0x642>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f2a:	4b76      	ldr	r3, [pc, #472]	@ (8004104 <HAL_RCC_OscConfig+0x64c>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
 8003f32:	2b08      	cmp	r3, #8
 8003f34:	f000 80a9 	beq.w	800408a <HAL_RCC_OscConfig+0x5d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	f040 808d 	bne.w	800405c <HAL_RCC_OscConfig+0x5a4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d009      	beq.n	8003f5e <HAL_RCC_OscConfig+0x4a6>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f52:	d004      	beq.n	8003f5e <HAL_RCC_OscConfig+0x4a6>
 8003f54:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
 8003f58:	486b      	ldr	r0, [pc, #428]	@ (8004108 <HAL_RCC_OscConfig+0x650>)
 8003f5a:	f7fc fcd3 	bl	8000904 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d903      	bls.n	8003f6e <HAL_RCC_OscConfig+0x4b6>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8003f6c:	d904      	bls.n	8003f78 <HAL_RCC_OscConfig+0x4c0>
 8003f6e:	f240 11d7 	movw	r1, #471	@ 0x1d7
 8003f72:	4865      	ldr	r0, [pc, #404]	@ (8004108 <HAL_RCC_OscConfig+0x650>)
 8003f74:	f7fc fcc6 	bl	8000904 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7c:	2b31      	cmp	r3, #49	@ 0x31
 8003f7e:	d904      	bls.n	8003f8a <HAL_RCC_OscConfig+0x4d2>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f84:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8003f88:	d904      	bls.n	8003f94 <HAL_RCC_OscConfig+0x4dc>
 8003f8a:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 8003f8e:	485e      	ldr	r0, [pc, #376]	@ (8004108 <HAL_RCC_OscConfig+0x650>)
 8003f90:	f7fc fcb8 	bl	8000904 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d010      	beq.n	8003fbe <HAL_RCC_OscConfig+0x506>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	d00c      	beq.n	8003fbe <HAL_RCC_OscConfig+0x506>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa8:	2b06      	cmp	r3, #6
 8003faa:	d008      	beq.n	8003fbe <HAL_RCC_OscConfig+0x506>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d004      	beq.n	8003fbe <HAL_RCC_OscConfig+0x506>
 8003fb4:	f240 11d9 	movw	r1, #473	@ 0x1d9
 8003fb8:	4853      	ldr	r0, [pc, #332]	@ (8004108 <HAL_RCC_OscConfig+0x650>)
 8003fba:	f7fc fca3 	bl	8000904 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d903      	bls.n	8003fce <HAL_RCC_OscConfig+0x516>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fca:	2b0f      	cmp	r3, #15
 8003fcc:	d904      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x520>
 8003fce:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 8003fd2:	484d      	ldr	r0, [pc, #308]	@ (8004108 <HAL_RCC_OscConfig+0x650>)
 8003fd4:	f7fc fc96 	bl	8000904 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd8:	4b4c      	ldr	r3, [pc, #304]	@ (800410c <HAL_RCC_OscConfig+0x654>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fde:	f7fd fbd5 	bl	800178c <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x540>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe6:	f7fd fbd1 	bl	800178c <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x540>
          {
            return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e081      	b.n	80040fc <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff8:	4b42      	ldr	r3, [pc, #264]	@ (8004104 <HAL_RCC_OscConfig+0x64c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1f0      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x52e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69da      	ldr	r2, [r3, #28]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	431a      	orrs	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004012:	019b      	lsls	r3, r3, #6
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401a:	085b      	lsrs	r3, r3, #1
 800401c:	3b01      	subs	r3, #1
 800401e:	041b      	lsls	r3, r3, #16
 8004020:	431a      	orrs	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004026:	061b      	lsls	r3, r3, #24
 8004028:	4936      	ldr	r1, [pc, #216]	@ (8004104 <HAL_RCC_OscConfig+0x64c>)
 800402a:	4313      	orrs	r3, r2
 800402c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800402e:	4b37      	ldr	r3, [pc, #220]	@ (800410c <HAL_RCC_OscConfig+0x654>)
 8004030:	2201      	movs	r2, #1
 8004032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004034:	f7fd fbaa 	bl	800178c <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x596>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403c:	f7fd fba6 	bl	800178c <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e056      	b.n	80040fc <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800404e:	4b2d      	ldr	r3, [pc, #180]	@ (8004104 <HAL_RCC_OscConfig+0x64c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0f0      	beq.n	800403c <HAL_RCC_OscConfig+0x584>
 800405a:	e04e      	b.n	80040fa <HAL_RCC_OscConfig+0x642>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800405c:	4b2b      	ldr	r3, [pc, #172]	@ (800410c <HAL_RCC_OscConfig+0x654>)
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004062:	f7fd fb93 	bl	800178c <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x5c4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406a:	f7fd fb8f 	bl	800178c <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e03f      	b.n	80040fc <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800407c:	4b21      	ldr	r3, [pc, #132]	@ (8004104 <HAL_RCC_OscConfig+0x64c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1f0      	bne.n	800406a <HAL_RCC_OscConfig+0x5b2>
 8004088:	e037      	b.n	80040fa <HAL_RCC_OscConfig+0x642>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d101      	bne.n	8004096 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e032      	b.n	80040fc <HAL_RCC_OscConfig+0x644>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004096:	4b1b      	ldr	r3, [pc, #108]	@ (8004104 <HAL_RCC_OscConfig+0x64c>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d028      	beq.n	80040f6 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d121      	bne.n	80040f6 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040bc:	429a      	cmp	r2, r3
 80040be:	d11a      	bne.n	80040f6 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80040c6:	4013      	ands	r3, r2
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d111      	bne.n	80040f6 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040dc:	085b      	lsrs	r3, r3, #1
 80040de:	3b01      	subs	r3, #1
 80040e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d107      	bne.n	80040f6 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d001      	beq.n	80040fa <HAL_RCC_OscConfig+0x642>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e000      	b.n	80040fc <HAL_RCC_OscConfig+0x644>
        }
      }
    }
  }
  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3718      	adds	r7, #24
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40023800 	.word	0x40023800
 8004108:	08009ad4 	.word	0x08009ad4
 800410c:	42470060 	.word	0x42470060

08004110 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e174      	b.n	800440e <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <HAL_RCC_ClockConfig+0x24>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b0f      	cmp	r3, #15
 8004132:	d904      	bls.n	800413e <HAL_RCC_ClockConfig+0x2e>
 8004134:	f240 215a 	movw	r1, #602	@ 0x25a
 8004138:	487b      	ldr	r0, [pc, #492]	@ (8004328 <HAL_RCC_ClockConfig+0x218>)
 800413a:	f7fc fbe3 	bl	8000904 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d019      	beq.n	8004178 <HAL_RCC_ClockConfig+0x68>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d016      	beq.n	8004178 <HAL_RCC_ClockConfig+0x68>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b02      	cmp	r3, #2
 800414e:	d013      	beq.n	8004178 <HAL_RCC_ClockConfig+0x68>
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	2b03      	cmp	r3, #3
 8004154:	d010      	beq.n	8004178 <HAL_RCC_ClockConfig+0x68>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b04      	cmp	r3, #4
 800415a:	d00d      	beq.n	8004178 <HAL_RCC_ClockConfig+0x68>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2b05      	cmp	r3, #5
 8004160:	d00a      	beq.n	8004178 <HAL_RCC_ClockConfig+0x68>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b06      	cmp	r3, #6
 8004166:	d007      	beq.n	8004178 <HAL_RCC_ClockConfig+0x68>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	2b07      	cmp	r3, #7
 800416c:	d004      	beq.n	8004178 <HAL_RCC_ClockConfig+0x68>
 800416e:	f240 215b 	movw	r1, #603	@ 0x25b
 8004172:	486d      	ldr	r0, [pc, #436]	@ (8004328 <HAL_RCC_ClockConfig+0x218>)
 8004174:	f7fc fbc6 	bl	8000904 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004178:	4b6c      	ldr	r3, [pc, #432]	@ (800432c <HAL_RCC_ClockConfig+0x21c>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d90c      	bls.n	80041a0 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004186:	4b69      	ldr	r3, [pc, #420]	@ (800432c <HAL_RCC_ClockConfig+0x21c>)
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800418e:	4b67      	ldr	r3, [pc, #412]	@ (800432c <HAL_RCC_ClockConfig+0x21c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d001      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e136      	b.n	800440e <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d049      	beq.n	8004240 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041b8:	4b5d      	ldr	r3, [pc, #372]	@ (8004330 <HAL_RCC_ClockConfig+0x220>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	4a5c      	ldr	r2, [pc, #368]	@ (8004330 <HAL_RCC_ClockConfig+0x220>)
 80041be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80041c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d005      	beq.n	80041dc <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041d0:	4b57      	ldr	r3, [pc, #348]	@ (8004330 <HAL_RCC_ClockConfig+0x220>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	4a56      	ldr	r2, [pc, #344]	@ (8004330 <HAL_RCC_ClockConfig+0x220>)
 80041d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80041da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d024      	beq.n	800422e <HAL_RCC_ClockConfig+0x11e>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	2b80      	cmp	r3, #128	@ 0x80
 80041ea:	d020      	beq.n	800422e <HAL_RCC_ClockConfig+0x11e>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	2b90      	cmp	r3, #144	@ 0x90
 80041f2:	d01c      	beq.n	800422e <HAL_RCC_ClockConfig+0x11e>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	2ba0      	cmp	r3, #160	@ 0xa0
 80041fa:	d018      	beq.n	800422e <HAL_RCC_ClockConfig+0x11e>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	2bb0      	cmp	r3, #176	@ 0xb0
 8004202:	d014      	beq.n	800422e <HAL_RCC_ClockConfig+0x11e>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2bc0      	cmp	r3, #192	@ 0xc0
 800420a:	d010      	beq.n	800422e <HAL_RCC_ClockConfig+0x11e>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	2bd0      	cmp	r3, #208	@ 0xd0
 8004212:	d00c      	beq.n	800422e <HAL_RCC_ClockConfig+0x11e>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	2be0      	cmp	r3, #224	@ 0xe0
 800421a:	d008      	beq.n	800422e <HAL_RCC_ClockConfig+0x11e>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	2bf0      	cmp	r3, #240	@ 0xf0
 8004222:	d004      	beq.n	800422e <HAL_RCC_ClockConfig+0x11e>
 8004224:	f240 217e 	movw	r1, #638	@ 0x27e
 8004228:	483f      	ldr	r0, [pc, #252]	@ (8004328 <HAL_RCC_ClockConfig+0x218>)
 800422a:	f7fc fb6b 	bl	8000904 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800422e:	4b40      	ldr	r3, [pc, #256]	@ (8004330 <HAL_RCC_ClockConfig+0x220>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	493d      	ldr	r1, [pc, #244]	@ (8004330 <HAL_RCC_ClockConfig+0x220>)
 800423c:	4313      	orrs	r3, r2
 800423e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d059      	beq.n	8004300 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d010      	beq.n	8004276 <HAL_RCC_ClockConfig+0x166>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d00c      	beq.n	8004276 <HAL_RCC_ClockConfig+0x166>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d008      	beq.n	8004276 <HAL_RCC_ClockConfig+0x166>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2b03      	cmp	r3, #3
 800426a:	d004      	beq.n	8004276 <HAL_RCC_ClockConfig+0x166>
 800426c:	f240 2185 	movw	r1, #645	@ 0x285
 8004270:	482d      	ldr	r0, [pc, #180]	@ (8004328 <HAL_RCC_ClockConfig+0x218>)
 8004272:	f7fc fb47 	bl	8000904 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d107      	bne.n	800428e <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427e:	4b2c      	ldr	r3, [pc, #176]	@ (8004330 <HAL_RCC_ClockConfig+0x220>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d119      	bne.n	80042be <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e0bf      	b.n	800440e <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b02      	cmp	r3, #2
 8004294:	d003      	beq.n	800429e <HAL_RCC_ClockConfig+0x18e>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800429a:	2b03      	cmp	r3, #3
 800429c:	d107      	bne.n	80042ae <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800429e:	4b24      	ldr	r3, [pc, #144]	@ (8004330 <HAL_RCC_ClockConfig+0x220>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d109      	bne.n	80042be <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e0af      	b.n	800440e <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ae:	4b20      	ldr	r3, [pc, #128]	@ (8004330 <HAL_RCC_ClockConfig+0x220>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e0a7      	b.n	800440e <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042be:	4b1c      	ldr	r3, [pc, #112]	@ (8004330 <HAL_RCC_ClockConfig+0x220>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f023 0203 	bic.w	r2, r3, #3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	4919      	ldr	r1, [pc, #100]	@ (8004330 <HAL_RCC_ClockConfig+0x220>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042d0:	f7fd fa5c 	bl	800178c <HAL_GetTick>
 80042d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d6:	e00a      	b.n	80042ee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042d8:	f7fd fa58 	bl	800178c <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e08f      	b.n	800440e <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ee:	4b10      	ldr	r3, [pc, #64]	@ (8004330 <HAL_RCC_ClockConfig+0x220>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 020c 	and.w	r2, r3, #12
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d1eb      	bne.n	80042d8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004300:	4b0a      	ldr	r3, [pc, #40]	@ (800432c <HAL_RCC_ClockConfig+0x21c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d212      	bcs.n	8004334 <HAL_RCC_ClockConfig+0x224>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430e:	4b07      	ldr	r3, [pc, #28]	@ (800432c <HAL_RCC_ClockConfig+0x21c>)
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	b2d2      	uxtb	r2, r2
 8004314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004316:	4b05      	ldr	r3, [pc, #20]	@ (800432c <HAL_RCC_ClockConfig+0x21c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0307 	and.w	r3, r3, #7
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	429a      	cmp	r2, r3
 8004322:	d007      	beq.n	8004334 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e072      	b.n	800440e <HAL_RCC_ClockConfig+0x2fe>
 8004328:	08009ad4 	.word	0x08009ad4
 800432c:	40023c00 	.word	0x40023c00
 8004330:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d025      	beq.n	800438c <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d018      	beq.n	800437a <HAL_RCC_ClockConfig+0x26a>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004350:	d013      	beq.n	800437a <HAL_RCC_ClockConfig+0x26a>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800435a:	d00e      	beq.n	800437a <HAL_RCC_ClockConfig+0x26a>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8004364:	d009      	beq.n	800437a <HAL_RCC_ClockConfig+0x26a>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 800436e:	d004      	beq.n	800437a <HAL_RCC_ClockConfig+0x26a>
 8004370:	f240 21c3 	movw	r1, #707	@ 0x2c3
 8004374:	4828      	ldr	r0, [pc, #160]	@ (8004418 <HAL_RCC_ClockConfig+0x308>)
 8004376:	f7fc fac5 	bl	8000904 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800437a:	4b28      	ldr	r3, [pc, #160]	@ (800441c <HAL_RCC_ClockConfig+0x30c>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	4925      	ldr	r1, [pc, #148]	@ (800441c <HAL_RCC_ClockConfig+0x30c>)
 8004388:	4313      	orrs	r3, r2
 800438a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	2b00      	cmp	r3, #0
 8004396:	d026      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d018      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x2c2>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043a8:	d013      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x2c2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80043b2:	d00e      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x2c2>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80043bc:	d009      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x2c2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 80043c6:	d004      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x2c2>
 80043c8:	f240 21ca 	movw	r1, #714	@ 0x2ca
 80043cc:	4812      	ldr	r0, [pc, #72]	@ (8004418 <HAL_RCC_ClockConfig+0x308>)
 80043ce:	f7fc fa99 	bl	8000904 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043d2:	4b12      	ldr	r3, [pc, #72]	@ (800441c <HAL_RCC_ClockConfig+0x30c>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	490e      	ldr	r1, [pc, #56]	@ (800441c <HAL_RCC_ClockConfig+0x30c>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043e6:	f000 f821 	bl	800442c <HAL_RCC_GetSysClockFreq>
 80043ea:	4602      	mov	r2, r0
 80043ec:	4b0b      	ldr	r3, [pc, #44]	@ (800441c <HAL_RCC_ClockConfig+0x30c>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	091b      	lsrs	r3, r3, #4
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	490a      	ldr	r1, [pc, #40]	@ (8004420 <HAL_RCC_ClockConfig+0x310>)
 80043f8:	5ccb      	ldrb	r3, [r1, r3]
 80043fa:	fa22 f303 	lsr.w	r3, r2, r3
 80043fe:	4a09      	ldr	r2, [pc, #36]	@ (8004424 <HAL_RCC_ClockConfig+0x314>)
 8004400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004402:	4b09      	ldr	r3, [pc, #36]	@ (8004428 <HAL_RCC_ClockConfig+0x318>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f7fd f97c 	bl	8001704 <HAL_InitTick>

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	08009ad4 	.word	0x08009ad4
 800441c:	40023800 	.word	0x40023800
 8004420:	08009bf4 	.word	0x08009bf4
 8004424:	20000088 	.word	0x20000088
 8004428:	2000008c 	.word	0x2000008c

0800442c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800442c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004430:	b094      	sub	sp, #80	@ 0x50
 8004432:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004434:	2300      	movs	r3, #0
 8004436:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800443c:	2300      	movs	r3, #0
 800443e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004444:	4b79      	ldr	r3, [pc, #484]	@ (800462c <HAL_RCC_GetSysClockFreq+0x200>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 030c 	and.w	r3, r3, #12
 800444c:	2b08      	cmp	r3, #8
 800444e:	d00d      	beq.n	800446c <HAL_RCC_GetSysClockFreq+0x40>
 8004450:	2b08      	cmp	r3, #8
 8004452:	f200 80e1 	bhi.w	8004618 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004456:	2b00      	cmp	r3, #0
 8004458:	d002      	beq.n	8004460 <HAL_RCC_GetSysClockFreq+0x34>
 800445a:	2b04      	cmp	r3, #4
 800445c:	d003      	beq.n	8004466 <HAL_RCC_GetSysClockFreq+0x3a>
 800445e:	e0db      	b.n	8004618 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004460:	4b73      	ldr	r3, [pc, #460]	@ (8004630 <HAL_RCC_GetSysClockFreq+0x204>)
 8004462:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004464:	e0db      	b.n	800461e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004466:	4b73      	ldr	r3, [pc, #460]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x208>)
 8004468:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800446a:	e0d8      	b.n	800461e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800446c:	4b6f      	ldr	r3, [pc, #444]	@ (800462c <HAL_RCC_GetSysClockFreq+0x200>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004474:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004476:	4b6d      	ldr	r3, [pc, #436]	@ (800462c <HAL_RCC_GetSysClockFreq+0x200>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d063      	beq.n	800454a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004482:	4b6a      	ldr	r3, [pc, #424]	@ (800462c <HAL_RCC_GetSysClockFreq+0x200>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	099b      	lsrs	r3, r3, #6
 8004488:	2200      	movs	r2, #0
 800448a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800448c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800448e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004494:	633b      	str	r3, [r7, #48]	@ 0x30
 8004496:	2300      	movs	r3, #0
 8004498:	637b      	str	r3, [r7, #52]	@ 0x34
 800449a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800449e:	4622      	mov	r2, r4
 80044a0:	462b      	mov	r3, r5
 80044a2:	f04f 0000 	mov.w	r0, #0
 80044a6:	f04f 0100 	mov.w	r1, #0
 80044aa:	0159      	lsls	r1, r3, #5
 80044ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044b0:	0150      	lsls	r0, r2, #5
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4621      	mov	r1, r4
 80044b8:	1a51      	subs	r1, r2, r1
 80044ba:	6139      	str	r1, [r7, #16]
 80044bc:	4629      	mov	r1, r5
 80044be:	eb63 0301 	sbc.w	r3, r3, r1
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044d0:	4659      	mov	r1, fp
 80044d2:	018b      	lsls	r3, r1, #6
 80044d4:	4651      	mov	r1, sl
 80044d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044da:	4651      	mov	r1, sl
 80044dc:	018a      	lsls	r2, r1, #6
 80044de:	4651      	mov	r1, sl
 80044e0:	ebb2 0801 	subs.w	r8, r2, r1
 80044e4:	4659      	mov	r1, fp
 80044e6:	eb63 0901 	sbc.w	r9, r3, r1
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	f04f 0300 	mov.w	r3, #0
 80044f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044fe:	4690      	mov	r8, r2
 8004500:	4699      	mov	r9, r3
 8004502:	4623      	mov	r3, r4
 8004504:	eb18 0303 	adds.w	r3, r8, r3
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	462b      	mov	r3, r5
 800450c:	eb49 0303 	adc.w	r3, r9, r3
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800451e:	4629      	mov	r1, r5
 8004520:	024b      	lsls	r3, r1, #9
 8004522:	4621      	mov	r1, r4
 8004524:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004528:	4621      	mov	r1, r4
 800452a:	024a      	lsls	r2, r1, #9
 800452c:	4610      	mov	r0, r2
 800452e:	4619      	mov	r1, r3
 8004530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004532:	2200      	movs	r2, #0
 8004534:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004536:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004538:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800453c:	f7fb fe44 	bl	80001c8 <__aeabi_uldivmod>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4613      	mov	r3, r2
 8004546:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004548:	e058      	b.n	80045fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800454a:	4b38      	ldr	r3, [pc, #224]	@ (800462c <HAL_RCC_GetSysClockFreq+0x200>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	099b      	lsrs	r3, r3, #6
 8004550:	2200      	movs	r2, #0
 8004552:	4618      	mov	r0, r3
 8004554:	4611      	mov	r1, r2
 8004556:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800455a:	623b      	str	r3, [r7, #32]
 800455c:	2300      	movs	r3, #0
 800455e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004560:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004564:	4642      	mov	r2, r8
 8004566:	464b      	mov	r3, r9
 8004568:	f04f 0000 	mov.w	r0, #0
 800456c:	f04f 0100 	mov.w	r1, #0
 8004570:	0159      	lsls	r1, r3, #5
 8004572:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004576:	0150      	lsls	r0, r2, #5
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	4641      	mov	r1, r8
 800457e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004582:	4649      	mov	r1, r9
 8004584:	eb63 0b01 	sbc.w	fp, r3, r1
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	f04f 0300 	mov.w	r3, #0
 8004590:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004594:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004598:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800459c:	ebb2 040a 	subs.w	r4, r2, sl
 80045a0:	eb63 050b 	sbc.w	r5, r3, fp
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	f04f 0300 	mov.w	r3, #0
 80045ac:	00eb      	lsls	r3, r5, #3
 80045ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045b2:	00e2      	lsls	r2, r4, #3
 80045b4:	4614      	mov	r4, r2
 80045b6:	461d      	mov	r5, r3
 80045b8:	4643      	mov	r3, r8
 80045ba:	18e3      	adds	r3, r4, r3
 80045bc:	603b      	str	r3, [r7, #0]
 80045be:	464b      	mov	r3, r9
 80045c0:	eb45 0303 	adc.w	r3, r5, r3
 80045c4:	607b      	str	r3, [r7, #4]
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	f04f 0300 	mov.w	r3, #0
 80045ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045d2:	4629      	mov	r1, r5
 80045d4:	028b      	lsls	r3, r1, #10
 80045d6:	4621      	mov	r1, r4
 80045d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045dc:	4621      	mov	r1, r4
 80045de:	028a      	lsls	r2, r1, #10
 80045e0:	4610      	mov	r0, r2
 80045e2:	4619      	mov	r1, r3
 80045e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045e6:	2200      	movs	r2, #0
 80045e8:	61bb      	str	r3, [r7, #24]
 80045ea:	61fa      	str	r2, [r7, #28]
 80045ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045f0:	f7fb fdea 	bl	80001c8 <__aeabi_uldivmod>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4613      	mov	r3, r2
 80045fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80045fc:	4b0b      	ldr	r3, [pc, #44]	@ (800462c <HAL_RCC_GetSysClockFreq+0x200>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	0c1b      	lsrs	r3, r3, #16
 8004602:	f003 0303 	and.w	r3, r3, #3
 8004606:	3301      	adds	r3, #1
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800460c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800460e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004610:	fbb2 f3f3 	udiv	r3, r2, r3
 8004614:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004616:	e002      	b.n	800461e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004618:	4b05      	ldr	r3, [pc, #20]	@ (8004630 <HAL_RCC_GetSysClockFreq+0x204>)
 800461a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800461c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800461e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004620:	4618      	mov	r0, r3
 8004622:	3750      	adds	r7, #80	@ 0x50
 8004624:	46bd      	mov	sp, r7
 8004626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800462a:	bf00      	nop
 800462c:	40023800 	.word	0x40023800
 8004630:	00f42400 	.word	0x00f42400
 8004634:	007a1200 	.word	0x007a1200

08004638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800463c:	4b03      	ldr	r3, [pc, #12]	@ (800464c <HAL_RCC_GetHCLKFreq+0x14>)
 800463e:	681b      	ldr	r3, [r3, #0]
}
 8004640:	4618      	mov	r0, r3
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	20000088 	.word	0x20000088

08004650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004654:	f7ff fff0 	bl	8004638 <HAL_RCC_GetHCLKFreq>
 8004658:	4602      	mov	r2, r0
 800465a:	4b05      	ldr	r3, [pc, #20]	@ (8004670 <HAL_RCC_GetPCLK1Freq+0x20>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	0a9b      	lsrs	r3, r3, #10
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	4903      	ldr	r1, [pc, #12]	@ (8004674 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004666:	5ccb      	ldrb	r3, [r1, r3]
 8004668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800466c:	4618      	mov	r0, r3
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40023800 	.word	0x40023800
 8004674:	08009c04 	.word	0x08009c04

08004678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800467c:	f7ff ffdc 	bl	8004638 <HAL_RCC_GetHCLKFreq>
 8004680:	4602      	mov	r2, r0
 8004682:	4b05      	ldr	r3, [pc, #20]	@ (8004698 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	0b5b      	lsrs	r3, r3, #13
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	4903      	ldr	r1, [pc, #12]	@ (800469c <HAL_RCC_GetPCLK2Freq+0x24>)
 800468e:	5ccb      	ldrb	r3, [r1, r3]
 8004690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004694:	4618      	mov	r0, r3
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40023800 	.word	0x40023800
 800469c:	08009c04 	.word	0x08009c04

080046a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e17e      	b.n	80049b0 <HAL_SPI_Init+0x310>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a70      	ldr	r2, [pc, #448]	@ (8004878 <HAL_SPI_Init+0x1d8>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d00e      	beq.n	80046da <HAL_SPI_Init+0x3a>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a6e      	ldr	r2, [pc, #440]	@ (800487c <HAL_SPI_Init+0x1dc>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d009      	beq.n	80046da <HAL_SPI_Init+0x3a>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a6d      	ldr	r2, [pc, #436]	@ (8004880 <HAL_SPI_Init+0x1e0>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d004      	beq.n	80046da <HAL_SPI_Init+0x3a>
 80046d0:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80046d4:	486b      	ldr	r0, [pc, #428]	@ (8004884 <HAL_SPI_Init+0x1e4>)
 80046d6:	f7fc f915 	bl	8000904 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d009      	beq.n	80046f6 <HAL_SPI_Init+0x56>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046ea:	d004      	beq.n	80046f6 <HAL_SPI_Init+0x56>
 80046ec:	f240 1141 	movw	r1, #321	@ 0x141
 80046f0:	4864      	ldr	r0, [pc, #400]	@ (8004884 <HAL_SPI_Init+0x1e4>)
 80046f2:	f7fc f907 	bl	8000904 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00e      	beq.n	800471c <HAL_SPI_Init+0x7c>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004706:	d009      	beq.n	800471c <HAL_SPI_Init+0x7c>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004710:	d004      	beq.n	800471c <HAL_SPI_Init+0x7c>
 8004712:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 8004716:	485b      	ldr	r0, [pc, #364]	@ (8004884 <HAL_SPI_Init+0x1e4>)
 8004718:	f7fc f8f4 	bl	8000904 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004724:	d008      	beq.n	8004738 <HAL_SPI_Init+0x98>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d004      	beq.n	8004738 <HAL_SPI_Init+0x98>
 800472e:	f240 1143 	movw	r1, #323	@ 0x143
 8004732:	4854      	ldr	r0, [pc, #336]	@ (8004884 <HAL_SPI_Init+0x1e4>)
 8004734:	f7fc f8e6 	bl	8000904 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004740:	d00d      	beq.n	800475e <HAL_SPI_Init+0xbe>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d009      	beq.n	800475e <HAL_SPI_Init+0xbe>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004752:	d004      	beq.n	800475e <HAL_SPI_Init+0xbe>
 8004754:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8004758:	484a      	ldr	r0, [pc, #296]	@ (8004884 <HAL_SPI_Init+0x1e4>)
 800475a:	f7fc f8d3 	bl	8000904 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d020      	beq.n	80047a8 <HAL_SPI_Init+0x108>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	2b08      	cmp	r3, #8
 800476c:	d01c      	beq.n	80047a8 <HAL_SPI_Init+0x108>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	2b10      	cmp	r3, #16
 8004774:	d018      	beq.n	80047a8 <HAL_SPI_Init+0x108>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	2b18      	cmp	r3, #24
 800477c:	d014      	beq.n	80047a8 <HAL_SPI_Init+0x108>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	2b20      	cmp	r3, #32
 8004784:	d010      	beq.n	80047a8 <HAL_SPI_Init+0x108>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	2b28      	cmp	r3, #40	@ 0x28
 800478c:	d00c      	beq.n	80047a8 <HAL_SPI_Init+0x108>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	2b30      	cmp	r3, #48	@ 0x30
 8004794:	d008      	beq.n	80047a8 <HAL_SPI_Init+0x108>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	2b38      	cmp	r3, #56	@ 0x38
 800479c:	d004      	beq.n	80047a8 <HAL_SPI_Init+0x108>
 800479e:	f240 1145 	movw	r1, #325	@ 0x145
 80047a2:	4838      	ldr	r0, [pc, #224]	@ (8004884 <HAL_SPI_Init+0x1e4>)
 80047a4:	f7fc f8ae 	bl	8000904 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <HAL_SPI_Init+0x122>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	2b80      	cmp	r3, #128	@ 0x80
 80047b6:	d004      	beq.n	80047c2 <HAL_SPI_Init+0x122>
 80047b8:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 80047bc:	4831      	ldr	r0, [pc, #196]	@ (8004884 <HAL_SPI_Init+0x1e4>)
 80047be:	f7fc f8a1 	bl	8000904 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d008      	beq.n	80047dc <HAL_SPI_Init+0x13c>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ce:	2b10      	cmp	r3, #16
 80047d0:	d004      	beq.n	80047dc <HAL_SPI_Init+0x13c>
 80047d2:	f240 1147 	movw	r1, #327	@ 0x147
 80047d6:	482b      	ldr	r0, [pc, #172]	@ (8004884 <HAL_SPI_Init+0x1e4>)
 80047d8:	f7fc f894 	bl	8000904 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d151      	bne.n	8004888 <HAL_SPI_Init+0x1e8>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d008      	beq.n	80047fe <HAL_SPI_Init+0x15e>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d004      	beq.n	80047fe <HAL_SPI_Init+0x15e>
 80047f4:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 80047f8:	4822      	ldr	r0, [pc, #136]	@ (8004884 <HAL_SPI_Init+0x1e4>)
 80047fa:	f7fc f883 	bl	8000904 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d008      	beq.n	8004818 <HAL_SPI_Init+0x178>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d004      	beq.n	8004818 <HAL_SPI_Init+0x178>
 800480e:	f240 114b 	movw	r1, #331	@ 0x14b
 8004812:	481c      	ldr	r0, [pc, #112]	@ (8004884 <HAL_SPI_Init+0x1e4>)
 8004814:	f7fc f876 	bl	8000904 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004820:	d125      	bne.n	800486e <HAL_SPI_Init+0x1ce>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d059      	beq.n	80048de <HAL_SPI_Init+0x23e>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	2b08      	cmp	r3, #8
 8004830:	d055      	beq.n	80048de <HAL_SPI_Init+0x23e>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	2b10      	cmp	r3, #16
 8004838:	d051      	beq.n	80048de <HAL_SPI_Init+0x23e>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	2b18      	cmp	r3, #24
 8004840:	d04d      	beq.n	80048de <HAL_SPI_Init+0x23e>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	2b20      	cmp	r3, #32
 8004848:	d049      	beq.n	80048de <HAL_SPI_Init+0x23e>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	2b28      	cmp	r3, #40	@ 0x28
 8004850:	d045      	beq.n	80048de <HAL_SPI_Init+0x23e>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	2b30      	cmp	r3, #48	@ 0x30
 8004858:	d041      	beq.n	80048de <HAL_SPI_Init+0x23e>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	2b38      	cmp	r3, #56	@ 0x38
 8004860:	d03d      	beq.n	80048de <HAL_SPI_Init+0x23e>
 8004862:	f240 114f 	movw	r1, #335	@ 0x14f
 8004866:	4807      	ldr	r0, [pc, #28]	@ (8004884 <HAL_SPI_Init+0x1e4>)
 8004868:	f7fc f84c 	bl	8000904 <assert_failed>
 800486c:	e037      	b.n	80048de <HAL_SPI_Init+0x23e>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	61da      	str	r2, [r3, #28]
 8004874:	e033      	b.n	80048de <HAL_SPI_Init+0x23e>
 8004876:	bf00      	nop
 8004878:	40013000 	.word	0x40013000
 800487c:	40003800 	.word	0x40003800
 8004880:	40003c00 	.word	0x40003c00
 8004884:	08009b34 	.word	0x08009b34
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d020      	beq.n	80048d2 <HAL_SPI_Init+0x232>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	69db      	ldr	r3, [r3, #28]
 8004894:	2b08      	cmp	r3, #8
 8004896:	d01c      	beq.n	80048d2 <HAL_SPI_Init+0x232>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	2b10      	cmp	r3, #16
 800489e:	d018      	beq.n	80048d2 <HAL_SPI_Init+0x232>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	2b18      	cmp	r3, #24
 80048a6:	d014      	beq.n	80048d2 <HAL_SPI_Init+0x232>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	2b20      	cmp	r3, #32
 80048ae:	d010      	beq.n	80048d2 <HAL_SPI_Init+0x232>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	2b28      	cmp	r3, #40	@ 0x28
 80048b6:	d00c      	beq.n	80048d2 <HAL_SPI_Init+0x232>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	2b30      	cmp	r3, #48	@ 0x30
 80048be:	d008      	beq.n	80048d2 <HAL_SPI_Init+0x232>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	2b38      	cmp	r3, #56	@ 0x38
 80048c6:	d004      	beq.n	80048d2 <HAL_SPI_Init+0x232>
 80048c8:	f240 1159 	movw	r1, #345	@ 0x159
 80048cc:	483a      	ldr	r0, [pc, #232]	@ (80049b8 <HAL_SPI_Init+0x318>)
 80048ce:	f7fc f819 	bl	8000904 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d106      	bne.n	80048fe <HAL_SPI_Init+0x25e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7fc f855 	bl	80009a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2202      	movs	r2, #2
 8004902:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004914:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	431a      	orrs	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	69db      	ldr	r3, [r3, #28]
 8004954:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004962:	ea42 0103 	orr.w	r1, r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	0c1b      	lsrs	r3, r3, #16
 800497c:	f003 0104 	and.w	r1, r3, #4
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004984:	f003 0210 	and.w	r2, r3, #16
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	69da      	ldr	r2, [r3, #28]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800499e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	08009b34 	.word	0x08009b34

080049bc <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d004      	beq.n	80049dc <HAL_SPI_TransmitReceive_IT+0x20>
 80049d2:	f240 611d 	movw	r1, #1565	@ 0x61d
 80049d6:	4840      	ldr	r0, [pc, #256]	@ (8004ad8 <HAL_SPI_TransmitReceive_IT+0x11c>)
 80049d8:	f7fb ff94 	bl	8000904 <assert_failed>

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049e2:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049ea:	7dfb      	ldrb	r3, [r7, #23]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d00c      	beq.n	8004a0a <HAL_SPI_TransmitReceive_IT+0x4e>
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049f6:	d106      	bne.n	8004a06 <HAL_SPI_TransmitReceive_IT+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d102      	bne.n	8004a06 <HAL_SPI_TransmitReceive_IT+0x4a>
 8004a00:	7dfb      	ldrb	r3, [r7, #23]
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d001      	beq.n	8004a0a <HAL_SPI_TransmitReceive_IT+0x4e>
  {
    return HAL_BUSY;
 8004a06:	2302      	movs	r3, #2
 8004a08:	e061      	b.n	8004ace <HAL_SPI_TransmitReceive_IT+0x112>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <HAL_SPI_TransmitReceive_IT+0x60>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d002      	beq.n	8004a1c <HAL_SPI_TransmitReceive_IT+0x60>
 8004a16:	887b      	ldrh	r3, [r7, #2]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_SPI_TransmitReceive_IT+0x64>
  {
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e056      	b.n	8004ace <HAL_SPI_TransmitReceive_IT+0x112>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d101      	bne.n	8004a2e <HAL_SPI_TransmitReceive_IT+0x72>
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	e04f      	b.n	8004ace <HAL_SPI_TransmitReceive_IT+0x112>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d003      	beq.n	8004a4a <HAL_SPI_TransmitReceive_IT+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2205      	movs	r2, #5
 8004a46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	887a      	ldrh	r2, [r7, #2]
 8004a5a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	887a      	ldrh	r2, [r7, #2]
 8004a60:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	887a      	ldrh	r2, [r7, #2]
 8004a6c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	887a      	ldrh	r2, [r7, #2]
 8004a72:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d006      	beq.n	8004a8a <HAL_SPI_TransmitReceive_IT+0xce>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4a17      	ldr	r2, [pc, #92]	@ (8004adc <HAL_SPI_TransmitReceive_IT+0x120>)
 8004a80:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4a16      	ldr	r2, [pc, #88]	@ (8004ae0 <HAL_SPI_TransmitReceive_IT+0x124>)
 8004a86:	645a      	str	r2, [r3, #68]	@ 0x44
 8004a88:	e005      	b.n	8004a96 <HAL_SPI_TransmitReceive_IT+0xda>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4a15      	ldr	r2, [pc, #84]	@ (8004ae4 <HAL_SPI_TransmitReceive_IT+0x128>)
 8004a8e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4a15      	ldr	r2, [pc, #84]	@ (8004ae8 <HAL_SPI_TransmitReceive_IT+0x12c>)
 8004a94:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa0:	2b40      	cmp	r3, #64	@ 0x40
 8004aa2:	d007      	beq.n	8004ab4 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ab2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8004aca:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	08009b34 	.word	0x08009b34
 8004adc:	08004de9 	.word	0x08004de9
 8004ae0:	08004e49 	.word	0x08004e49
 8004ae4:	08004d25 	.word	0x08004d25
 8004ae8:	08004d89 	.word	0x08004d89

08004aec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b088      	sub	sp, #32
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10e      	bne.n	8004b2c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d009      	beq.n	8004b2c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d004      	beq.n	8004b2c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	4798      	blx	r3
    return;
 8004b2a:	e0ce      	b.n	8004cca <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d009      	beq.n	8004b4a <HAL_SPI_IRQHandler+0x5e>
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d004      	beq.n	8004b4a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	4798      	blx	r3
    return;
 8004b48:	e0bf      	b.n	8004cca <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10a      	bne.n	8004b6a <HAL_SPI_IRQHandler+0x7e>
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d105      	bne.n	8004b6a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 80b0 	beq.w	8004cca <HAL_SPI_IRQHandler+0x1de>
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	f003 0320 	and.w	r3, r3, #32
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 80aa 	beq.w	8004cca <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d023      	beq.n	8004bc8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b03      	cmp	r3, #3
 8004b8a:	d011      	beq.n	8004bb0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b90:	f043 0204 	orr.w	r2, r3, #4
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b98:	2300      	movs	r3, #0
 8004b9a:	617b      	str	r3, [r7, #20]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	617b      	str	r3, [r7, #20]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	e00b      	b.n	8004bc8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	613b      	str	r3, [r7, #16]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	613b      	str	r3, [r7, #16]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	693b      	ldr	r3, [r7, #16]
        return;
 8004bc6:	e080      	b.n	8004cca <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	f003 0320 	and.w	r3, r3, #32
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d014      	beq.n	8004bfc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd6:	f043 0201 	orr.w	r2, r3, #1
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004bde:	2300      	movs	r3, #0
 8004be0:	60fb      	str	r3, [r7, #12]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00c      	beq.n	8004c20 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c0a:	f043 0208 	orr.w	r2, r3, #8
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004c12:	2300      	movs	r3, #0
 8004c14:	60bb      	str	r3, [r7, #8]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	60bb      	str	r3, [r7, #8]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d04f      	beq.n	8004cc8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004c36:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d104      	bne.n	8004c54 <HAL_SPI_IRQHandler+0x168>
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d034      	beq.n	8004cbe <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0203 	bic.w	r2, r2, #3
 8004c62:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d011      	beq.n	8004c90 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c70:	4a17      	ldr	r2, [pc, #92]	@ (8004cd0 <HAL_SPI_IRQHandler+0x1e4>)
 8004c72:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7fc ff67 	bl	8001b4c <HAL_DMA_Abort_IT>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d005      	beq.n	8004c90 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c88:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d016      	beq.n	8004cc6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c9c:	4a0c      	ldr	r2, [pc, #48]	@ (8004cd0 <HAL_SPI_IRQHandler+0x1e4>)
 8004c9e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7fc ff51 	bl	8001b4c <HAL_DMA_Abort_IT>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cb4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8004cbc:	e003      	b.n	8004cc6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f812 	bl	8004ce8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004cc4:	e000      	b.n	8004cc8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004cc6:	bf00      	nop
    return;
 8004cc8:	bf00      	nop
  }
}
 8004cca:	3720      	adds	r7, #32
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	08004cfd 	.word	0x08004cfd

08004cd4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d08:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f7ff ffe6 	bl	8004ce8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d1c:	bf00      	nop
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f103 020c 	add.w	r2, r3, #12
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d38:	7812      	ldrb	r2, [r2, #0]
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10f      	bne.n	8004d80 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004d6e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d102      	bne.n	8004d80 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f970 	bl	8005060 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004d80:	bf00      	nop
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	330c      	adds	r3, #12
 8004d9a:	7812      	ldrb	r2, [r2, #0]
 8004d9c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10f      	bne.n	8004de0 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004dce:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d102      	bne.n	8004de0 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f940 	bl	8005060 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004de0:	bf00      	nop
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dfa:	b292      	uxth	r2, r2
 8004dfc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e02:	1c9a      	adds	r2, r3, #2
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10f      	bne.n	8004e40 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e2e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d102      	bne.n	8004e40 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f910 	bl	8005060 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004e40:	bf00      	nop
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e54:	881a      	ldrh	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e60:	1c9a      	adds	r2, r3, #2
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10f      	bne.n	8004e9e <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e8c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d102      	bne.n	8004e9e <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f8e1 	bl	8005060 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004e9e:	bf00      	nop
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
	...

08004ea8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b088      	sub	sp, #32
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	603b      	str	r3, [r7, #0]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004eb8:	f7fc fc68 	bl	800178c <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec0:	1a9b      	subs	r3, r3, r2
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ec8:	f7fc fc60 	bl	800178c <HAL_GetTick>
 8004ecc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ece:	4b39      	ldr	r3, [pc, #228]	@ (8004fb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	015b      	lsls	r3, r3, #5
 8004ed4:	0d1b      	lsrs	r3, r3, #20
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	fb02 f303 	mul.w	r3, r2, r3
 8004edc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ede:	e054      	b.n	8004f8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee6:	d050      	beq.n	8004f8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ee8:	f7fc fc50 	bl	800178c <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	69fa      	ldr	r2, [r7, #28]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d902      	bls.n	8004efe <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d13d      	bne.n	8004f7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f16:	d111      	bne.n	8004f3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f20:	d004      	beq.n	8004f2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f2a:	d107      	bne.n	8004f3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f44:	d10f      	bne.n	8004f66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e017      	b.n	8004faa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	3b01      	subs	r3, #1
 8004f88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	4013      	ands	r3, r2
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	bf0c      	ite	eq
 8004f9a:	2301      	moveq	r3, #1
 8004f9c:	2300      	movne	r3, #0
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	79fb      	ldrb	r3, [r7, #7]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d19b      	bne.n	8004ee0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3720      	adds	r7, #32
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20000088 	.word	0x20000088

08004fb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b088      	sub	sp, #32
 8004fbc:	af02      	add	r7, sp, #8
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	2102      	movs	r1, #2
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f7ff ff6a 	bl	8004ea8 <SPI_WaitFlagStateUntilTimeout>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d007      	beq.n	8004fea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fde:	f043 0220 	orr.w	r2, r3, #32
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e032      	b.n	8005050 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004fea:	4b1b      	ldr	r3, [pc, #108]	@ (8005058 <SPI_EndRxTxTransaction+0xa0>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a1b      	ldr	r2, [pc, #108]	@ (800505c <SPI_EndRxTxTransaction+0xa4>)
 8004ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff4:	0d5b      	lsrs	r3, r3, #21
 8004ff6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004ffa:	fb02 f303 	mul.w	r3, r2, r3
 8004ffe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005008:	d112      	bne.n	8005030 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2200      	movs	r2, #0
 8005012:	2180      	movs	r1, #128	@ 0x80
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f7ff ff47 	bl	8004ea8 <SPI_WaitFlagStateUntilTimeout>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d016      	beq.n	800504e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005024:	f043 0220 	orr.w	r2, r3, #32
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e00f      	b.n	8005050 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	3b01      	subs	r3, #1
 800503a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005046:	2b80      	cmp	r3, #128	@ 0x80
 8005048:	d0f2      	beq.n	8005030 <SPI_EndRxTxTransaction+0x78>
 800504a:	e000      	b.n	800504e <SPI_EndRxTxTransaction+0x96>
        break;
 800504c:	bf00      	nop
  }

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3718      	adds	r7, #24
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	20000088 	.word	0x20000088
 800505c:	165e9f81 	.word	0x165e9f81

08005060 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005068:	4b35      	ldr	r3, [pc, #212]	@ (8005140 <SPI_CloseRxTx_ISR+0xe0>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a35      	ldr	r2, [pc, #212]	@ (8005144 <SPI_CloseRxTx_ISR+0xe4>)
 800506e:	fba2 2303 	umull	r2, r3, r2, r3
 8005072:	0a5b      	lsrs	r3, r3, #9
 8005074:	2264      	movs	r2, #100	@ 0x64
 8005076:	fb02 f303 	mul.w	r3, r2, r3
 800507a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800507c:	f7fc fb86 	bl	800178c <HAL_GetTick>
 8005080:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0220 	bic.w	r2, r2, #32
 8005090:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d106      	bne.n	80050a6 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800509c:	f043 0220 	orr.w	r2, r3, #32
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80050a4:	e009      	b.n	80050ba <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	3b01      	subs	r3, #1
 80050aa:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0eb      	beq.n	8005092 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	2164      	movs	r1, #100	@ 0x64
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7ff ff7a 	bl	8004fb8 <SPI_EndRxTxTransaction>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d005      	beq.n	80050d6 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ce:	f043 0220 	orr.w	r2, r3, #32
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10a      	bne.n	80050f4 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050de:	2300      	movs	r3, #0
 80050e0:	60fb      	str	r3, [r7, #12]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	60fb      	str	r3, [r7, #12]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d115      	bne.n	8005128 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b04      	cmp	r3, #4
 8005106:	d107      	bne.n	8005118 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7ff fddf 	bl	8004cd4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005116:	e00e      	b.n	8005136 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7fb fbd9 	bl	80008d8 <HAL_SPI_TxRxCpltCallback>
}
 8005126:	e006      	b.n	8005136 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff fdd9 	bl	8004ce8 <HAL_SPI_ErrorCallback>
}
 8005136:	bf00      	nop
 8005138:	3718      	adds	r7, #24
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	20000088 	.word	0x20000088
 8005144:	057619f1 	.word	0x057619f1

08005148 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e0b7      	b.n	80052ca <HAL_UART_Init+0x182>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d031      	beq.n	80051c6 <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a5b      	ldr	r2, [pc, #364]	@ (80052d4 <HAL_UART_Init+0x18c>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d013      	beq.n	8005194 <HAL_UART_Init+0x4c>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a59      	ldr	r2, [pc, #356]	@ (80052d8 <HAL_UART_Init+0x190>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d00e      	beq.n	8005194 <HAL_UART_Init+0x4c>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a58      	ldr	r2, [pc, #352]	@ (80052dc <HAL_UART_Init+0x194>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d009      	beq.n	8005194 <HAL_UART_Init+0x4c>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a56      	ldr	r2, [pc, #344]	@ (80052e0 <HAL_UART_Init+0x198>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d004      	beq.n	8005194 <HAL_UART_Init+0x4c>
 800518a:	f240 1173 	movw	r1, #371	@ 0x173
 800518e:	4855      	ldr	r0, [pc, #340]	@ (80052e4 <HAL_UART_Init+0x19c>)
 8005190:	f7fb fbb8 	bl	8000904 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d037      	beq.n	800520c <HAL_UART_Init+0xc4>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051a4:	d032      	beq.n	800520c <HAL_UART_Init+0xc4>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051ae:	d02d      	beq.n	800520c <HAL_UART_Init+0xc4>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051b8:	d028      	beq.n	800520c <HAL_UART_Init+0xc4>
 80051ba:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 80051be:	4849      	ldr	r0, [pc, #292]	@ (80052e4 <HAL_UART_Init+0x19c>)
 80051c0:	f7fb fba0 	bl	8000904 <assert_failed>
 80051c4:	e022      	b.n	800520c <HAL_UART_Init+0xc4>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a42      	ldr	r2, [pc, #264]	@ (80052d4 <HAL_UART_Init+0x18c>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d01d      	beq.n	800520c <HAL_UART_Init+0xc4>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a40      	ldr	r2, [pc, #256]	@ (80052d8 <HAL_UART_Init+0x190>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d018      	beq.n	800520c <HAL_UART_Init+0xc4>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a3f      	ldr	r2, [pc, #252]	@ (80052dc <HAL_UART_Init+0x194>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d013      	beq.n	800520c <HAL_UART_Init+0xc4>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a3f      	ldr	r2, [pc, #252]	@ (80052e8 <HAL_UART_Init+0x1a0>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d00e      	beq.n	800520c <HAL_UART_Init+0xc4>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a3e      	ldr	r2, [pc, #248]	@ (80052ec <HAL_UART_Init+0x1a4>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d009      	beq.n	800520c <HAL_UART_Init+0xc4>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a38      	ldr	r2, [pc, #224]	@ (80052e0 <HAL_UART_Init+0x198>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d004      	beq.n	800520c <HAL_UART_Init+0xc4>
 8005202:	f44f 71bc 	mov.w	r1, #376	@ 0x178
 8005206:	4837      	ldr	r0, [pc, #220]	@ (80052e4 <HAL_UART_Init+0x19c>)
 8005208:	f7fb fb7c 	bl	8000904 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d009      	beq.n	8005228 <HAL_UART_Init+0xe0>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800521c:	d004      	beq.n	8005228 <HAL_UART_Init+0xe0>
 800521e:	f44f 71bd 	mov.w	r1, #378	@ 0x17a
 8005222:	4830      	ldr	r0, [pc, #192]	@ (80052e4 <HAL_UART_Init+0x19c>)
 8005224:	f7fb fb6e 	bl	8000904 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d009      	beq.n	8005244 <HAL_UART_Init+0xfc>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005238:	d004      	beq.n	8005244 <HAL_UART_Init+0xfc>
 800523a:	f240 117b 	movw	r1, #379	@ 0x17b
 800523e:	4829      	ldr	r0, [pc, #164]	@ (80052e4 <HAL_UART_Init+0x19c>)
 8005240:	f7fb fb60 	bl	8000904 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	d106      	bne.n	800525e <HAL_UART_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f7fb fbf5 	bl	8000a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2224      	movs	r2, #36	@ 0x24
 8005262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68da      	ldr	r2, [r3, #12]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005274:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fd2a 	bl	8005cd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691a      	ldr	r2, [r3, #16]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800528a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	695a      	ldr	r2, [r3, #20]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800529a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68da      	ldr	r2, [r3, #12]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052aa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2220      	movs	r2, #32
 80052b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2220      	movs	r2, #32
 80052be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	40011000 	.word	0x40011000
 80052d8:	40004400 	.word	0x40004400
 80052dc:	40004800 	.word	0x40004800
 80052e0:	40011400 	.word	0x40011400
 80052e4:	08009b94 	.word	0x08009b94
 80052e8:	40004c00 	.word	0x40004c00
 80052ec:	40005000 	.word	0x40005000

080052f0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	4613      	mov	r3, r2
 80052fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b20      	cmp	r3, #32
 8005308:	d121      	bne.n	800534e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <HAL_UART_Transmit_IT+0x26>
 8005310:	88fb      	ldrh	r3, [r7, #6]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e01a      	b.n	8005350 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	88fa      	ldrh	r2, [r7, #6]
 8005324:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	88fa      	ldrh	r2, [r7, #6]
 800532a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2221      	movs	r2, #33	@ 0x21
 8005336:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68da      	ldr	r2, [r3, #12]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005348:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	e000      	b.n	8005350 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800534e:	2302      	movs	r3, #2
  }
}
 8005350:	4618      	mov	r0, r3
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	4613      	mov	r3, r2
 8005368:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b20      	cmp	r3, #32
 8005374:	d112      	bne.n	800539c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <HAL_UART_Receive_IT+0x26>
 800537c:	88fb      	ldrh	r3, [r7, #6]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e00b      	b.n	800539e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800538c:	88fb      	ldrh	r3, [r7, #6]
 800538e:	461a      	mov	r2, r3
 8005390:	68b9      	ldr	r1, [r7, #8]
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 fac4 	bl	8005920 <UART_Start_Receive_IT>
 8005398:	4603      	mov	r3, r0
 800539a:	e000      	b.n	800539e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800539c:	2302      	movs	r3, #2
  }
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
	...

080053a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b0ba      	sub	sp, #232	@ 0xe8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80053ce:	2300      	movs	r3, #0
 80053d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80053e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10f      	bne.n	800540e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053f2:	f003 0320 	and.w	r3, r3, #32
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d009      	beq.n	800540e <HAL_UART_IRQHandler+0x66>
 80053fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053fe:	f003 0320 	and.w	r3, r3, #32
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fba3 	bl	8005b52 <UART_Receive_IT>
      return;
 800540c:	e25b      	b.n	80058c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800540e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 80de 	beq.w	80055d4 <HAL_UART_IRQHandler+0x22c>
 8005418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b00      	cmp	r3, #0
 8005422:	d106      	bne.n	8005432 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005428:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 80d1 	beq.w	80055d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00b      	beq.n	8005456 <HAL_UART_IRQHandler+0xae>
 800543e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005446:	2b00      	cmp	r3, #0
 8005448:	d005      	beq.n	8005456 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800544e:	f043 0201 	orr.w	r2, r3, #1
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800545a:	f003 0304 	and.w	r3, r3, #4
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00b      	beq.n	800547a <HAL_UART_IRQHandler+0xd2>
 8005462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d005      	beq.n	800547a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005472:	f043 0202 	orr.w	r2, r3, #2
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800547a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00b      	beq.n	800549e <HAL_UART_IRQHandler+0xf6>
 8005486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	d005      	beq.n	800549e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005496:	f043 0204 	orr.w	r2, r3, #4
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800549e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054a2:	f003 0308 	and.w	r3, r3, #8
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d011      	beq.n	80054ce <HAL_UART_IRQHandler+0x126>
 80054aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d105      	bne.n	80054c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80054b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d005      	beq.n	80054ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c6:	f043 0208 	orr.w	r2, r3, #8
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 81f2 	beq.w	80058bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054dc:	f003 0320 	and.w	r3, r3, #32
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d008      	beq.n	80054f6 <HAL_UART_IRQHandler+0x14e>
 80054e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054e8:	f003 0320 	and.w	r3, r3, #32
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d002      	beq.n	80054f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 fb2e 	bl	8005b52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005500:	2b40      	cmp	r3, #64	@ 0x40
 8005502:	bf0c      	ite	eq
 8005504:	2301      	moveq	r3, #1
 8005506:	2300      	movne	r3, #0
 8005508:	b2db      	uxtb	r3, r3
 800550a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005512:	f003 0308 	and.w	r3, r3, #8
 8005516:	2b00      	cmp	r3, #0
 8005518:	d103      	bne.n	8005522 <HAL_UART_IRQHandler+0x17a>
 800551a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800551e:	2b00      	cmp	r3, #0
 8005520:	d04f      	beq.n	80055c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 fa36 	bl	8005994 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005532:	2b40      	cmp	r3, #64	@ 0x40
 8005534:	d141      	bne.n	80055ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	3314      	adds	r3, #20
 800553c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005540:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005544:	e853 3f00 	ldrex	r3, [r3]
 8005548:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800554c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005550:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005554:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3314      	adds	r3, #20
 800555e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005562:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005566:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800556e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005572:	e841 2300 	strex	r3, r2, [r1]
 8005576:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800557a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1d9      	bne.n	8005536 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005586:	2b00      	cmp	r3, #0
 8005588:	d013      	beq.n	80055b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800558e:	4a7e      	ldr	r2, [pc, #504]	@ (8005788 <HAL_UART_IRQHandler+0x3e0>)
 8005590:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005596:	4618      	mov	r0, r3
 8005598:	f7fc fad8 	bl	8001b4c <HAL_DMA_Abort_IT>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d016      	beq.n	80055d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80055ac:	4610      	mov	r0, r2
 80055ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b0:	e00e      	b.n	80055d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f99e 	bl	80058f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b8:	e00a      	b.n	80055d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f99a 	bl	80058f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c0:	e006      	b.n	80055d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f996 	bl	80058f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80055ce:	e175      	b.n	80058bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d0:	bf00      	nop
    return;
 80055d2:	e173      	b.n	80058bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d8:	2b01      	cmp	r3, #1
 80055da:	f040 814f 	bne.w	800587c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80055de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055e2:	f003 0310 	and.w	r3, r3, #16
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 8148 	beq.w	800587c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80055ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055f0:	f003 0310 	and.w	r3, r3, #16
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 8141 	beq.w	800587c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055fa:	2300      	movs	r3, #0
 80055fc:	60bb      	str	r3, [r7, #8]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	60bb      	str	r3, [r7, #8]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	60bb      	str	r3, [r7, #8]
 800560e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800561a:	2b40      	cmp	r3, #64	@ 0x40
 800561c:	f040 80b6 	bne.w	800578c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800562c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 8145 	beq.w	80058c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800563a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800563e:	429a      	cmp	r2, r3
 8005640:	f080 813e 	bcs.w	80058c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800564a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005656:	f000 8088 	beq.w	800576a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	330c      	adds	r3, #12
 8005660:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005664:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005668:	e853 3f00 	ldrex	r3, [r3]
 800566c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005670:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005678:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	330c      	adds	r3, #12
 8005682:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005686:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800568a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005692:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005696:	e841 2300 	strex	r3, r2, [r1]
 800569a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800569e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1d9      	bne.n	800565a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	3314      	adds	r3, #20
 80056ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056b0:	e853 3f00 	ldrex	r3, [r3]
 80056b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80056b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056b8:	f023 0301 	bic.w	r3, r3, #1
 80056bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3314      	adds	r3, #20
 80056c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80056ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80056d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80056d6:	e841 2300 	strex	r3, r2, [r1]
 80056da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80056dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1e1      	bne.n	80056a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3314      	adds	r3, #20
 80056e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056ec:	e853 3f00 	ldrex	r3, [r3]
 80056f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80056f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3314      	adds	r3, #20
 8005702:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005706:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005708:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800570c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800570e:	e841 2300 	strex	r3, r2, [r1]
 8005712:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005714:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1e3      	bne.n	80056e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2220      	movs	r2, #32
 800571e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	330c      	adds	r3, #12
 800572e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005730:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005732:	e853 3f00 	ldrex	r3, [r3]
 8005736:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005738:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800573a:	f023 0310 	bic.w	r3, r3, #16
 800573e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	330c      	adds	r3, #12
 8005748:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800574c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800574e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005750:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005752:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005754:	e841 2300 	strex	r3, r2, [r1]
 8005758:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800575a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1e3      	bne.n	8005728 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005764:	4618      	mov	r0, r3
 8005766:	f7fc f981 	bl	8001a6c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2202      	movs	r2, #2
 800576e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005778:	b29b      	uxth	r3, r3
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	b29b      	uxth	r3, r3
 800577e:	4619      	mov	r1, r3
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 f8c1 	bl	8005908 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005786:	e09b      	b.n	80058c0 <HAL_UART_IRQHandler+0x518>
 8005788:	08005a5b 	.word	0x08005a5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005794:	b29b      	uxth	r3, r3
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f000 808e 	beq.w	80058c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80057a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 8089 	beq.w	80058c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	330c      	adds	r3, #12
 80057b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057bc:	e853 3f00 	ldrex	r3, [r3]
 80057c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	330c      	adds	r3, #12
 80057d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80057d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80057d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057de:	e841 2300 	strex	r3, r2, [r1]
 80057e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1e3      	bne.n	80057b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	3314      	adds	r3, #20
 80057f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f4:	e853 3f00 	ldrex	r3, [r3]
 80057f8:	623b      	str	r3, [r7, #32]
   return(result);
 80057fa:	6a3b      	ldr	r3, [r7, #32]
 80057fc:	f023 0301 	bic.w	r3, r3, #1
 8005800:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3314      	adds	r3, #20
 800580a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800580e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005810:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005812:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005814:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800581c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1e3      	bne.n	80057ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2220      	movs	r2, #32
 8005826:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	330c      	adds	r3, #12
 8005836:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	e853 3f00 	ldrex	r3, [r3]
 800583e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f023 0310 	bic.w	r3, r3, #16
 8005846:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	330c      	adds	r3, #12
 8005850:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005854:	61fa      	str	r2, [r7, #28]
 8005856:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005858:	69b9      	ldr	r1, [r7, #24]
 800585a:	69fa      	ldr	r2, [r7, #28]
 800585c:	e841 2300 	strex	r3, r2, [r1]
 8005860:	617b      	str	r3, [r7, #20]
   return(result);
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1e3      	bne.n	8005830 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800586e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005872:	4619      	mov	r1, r3
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 f847 	bl	8005908 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800587a:	e023      	b.n	80058c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800587c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005884:	2b00      	cmp	r3, #0
 8005886:	d009      	beq.n	800589c <HAL_UART_IRQHandler+0x4f4>
 8005888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800588c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f8f4 	bl	8005a82 <UART_Transmit_IT>
    return;
 800589a:	e014      	b.n	80058c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800589c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00e      	beq.n	80058c6 <HAL_UART_IRQHandler+0x51e>
 80058a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d008      	beq.n	80058c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 f934 	bl	8005b22 <UART_EndTransmit_IT>
    return;
 80058ba:	e004      	b.n	80058c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80058bc:	bf00      	nop
 80058be:	e002      	b.n	80058c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80058c0:	bf00      	nop
 80058c2:	e000      	b.n	80058c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80058c4:	bf00      	nop
  }
}
 80058c6:	37e8      	adds	r7, #232	@ 0xe8
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	460b      	mov	r3, r1
 8005912:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	4613      	mov	r3, r2
 800592c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	88fa      	ldrh	r2, [r7, #6]
 8005938:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	88fa      	ldrh	r2, [r7, #6]
 800593e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2222      	movs	r2, #34	@ 0x22
 800594a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d007      	beq.n	8005966 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68da      	ldr	r2, [r3, #12]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005964:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	695a      	ldr	r2, [r3, #20]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f042 0201 	orr.w	r2, r2, #1
 8005974:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68da      	ldr	r2, [r3, #12]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f042 0220 	orr.w	r2, r2, #32
 8005984:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005994:	b480      	push	{r7}
 8005996:	b095      	sub	sp, #84	@ 0x54
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	330c      	adds	r3, #12
 80059a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059a6:	e853 3f00 	ldrex	r3, [r3]
 80059aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	330c      	adds	r3, #12
 80059ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80059bc:	643a      	str	r2, [r7, #64]	@ 0x40
 80059be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059c4:	e841 2300 	strex	r3, r2, [r1]
 80059c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1e5      	bne.n	800599c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	3314      	adds	r3, #20
 80059d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	e853 3f00 	ldrex	r3, [r3]
 80059de:	61fb      	str	r3, [r7, #28]
   return(result);
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	f023 0301 	bic.w	r3, r3, #1
 80059e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3314      	adds	r3, #20
 80059ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059f8:	e841 2300 	strex	r3, r2, [r1]
 80059fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1e5      	bne.n	80059d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d119      	bne.n	8005a40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	330c      	adds	r3, #12
 8005a12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	e853 3f00 	ldrex	r3, [r3]
 8005a1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f023 0310 	bic.w	r3, r3, #16
 8005a22:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	330c      	adds	r3, #12
 8005a2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a2c:	61ba      	str	r2, [r7, #24]
 8005a2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a30:	6979      	ldr	r1, [r7, #20]
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	e841 2300 	strex	r3, r2, [r1]
 8005a38:	613b      	str	r3, [r7, #16]
   return(result);
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1e5      	bne.n	8005a0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005a4e:	bf00      	nop
 8005a50:	3754      	adds	r7, #84	@ 0x54
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b084      	sub	sp, #16
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f7ff ff3d 	bl	80058f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a7a:	bf00      	nop
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b085      	sub	sp, #20
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b21      	cmp	r3, #33	@ 0x21
 8005a94:	d13e      	bne.n	8005b14 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a9e:	d114      	bne.n	8005aca <UART_Transmit_IT+0x48>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d110      	bne.n	8005aca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	881b      	ldrh	r3, [r3, #0]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005abc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	1c9a      	adds	r2, r3, #2
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	621a      	str	r2, [r3, #32]
 8005ac8:	e008      	b.n	8005adc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	1c59      	adds	r1, r3, #1
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	6211      	str	r1, [r2, #32]
 8005ad4:	781a      	ldrb	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	4619      	mov	r1, r3
 8005aea:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10f      	bne.n	8005b10 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005afe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68da      	ldr	r2, [r3, #12]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b10:	2300      	movs	r3, #0
 8005b12:	e000      	b.n	8005b16 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b14:	2302      	movs	r3, #2
  }
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b082      	sub	sp, #8
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68da      	ldr	r2, [r3, #12]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7ff fec2 	bl	80058cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b08c      	sub	sp, #48	@ 0x30
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b22      	cmp	r3, #34	@ 0x22
 8005b64:	f040 80ae 	bne.w	8005cc4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b70:	d117      	bne.n	8005ba2 <UART_Receive_IT+0x50>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d113      	bne.n	8005ba2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b82:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b9a:	1c9a      	adds	r2, r3, #2
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ba0:	e026      	b.n	8005bf0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bb4:	d007      	beq.n	8005bc6 <UART_Receive_IT+0x74>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10a      	bne.n	8005bd4 <UART_Receive_IT+0x82>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d106      	bne.n	8005bd4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd0:	701a      	strb	r2, [r3, #0]
 8005bd2:	e008      	b.n	8005be6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d15d      	bne.n	8005cc0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68da      	ldr	r2, [r3, #12]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f022 0220 	bic.w	r2, r2, #32
 8005c12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68da      	ldr	r2, [r3, #12]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	695a      	ldr	r2, [r3, #20]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 0201 	bic.w	r2, r2, #1
 8005c32:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2220      	movs	r2, #32
 8005c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d135      	bne.n	8005cb6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	330c      	adds	r3, #12
 8005c56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	e853 3f00 	ldrex	r3, [r3]
 8005c5e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f023 0310 	bic.w	r3, r3, #16
 8005c66:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	330c      	adds	r3, #12
 8005c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c70:	623a      	str	r2, [r7, #32]
 8005c72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c74:	69f9      	ldr	r1, [r7, #28]
 8005c76:	6a3a      	ldr	r2, [r7, #32]
 8005c78:	e841 2300 	strex	r3, r2, [r1]
 8005c7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1e5      	bne.n	8005c50 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0310 	and.w	r3, r3, #16
 8005c8e:	2b10      	cmp	r3, #16
 8005c90:	d10a      	bne.n	8005ca8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c92:	2300      	movs	r3, #0
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	60fb      	str	r3, [r7, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	60fb      	str	r3, [r7, #12]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005cac:	4619      	mov	r1, r3
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f7ff fe2a 	bl	8005908 <HAL_UARTEx_RxEventCallback>
 8005cb4:	e002      	b.n	8005cbc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7ff fe12 	bl	80058e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	e002      	b.n	8005cc6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	e000      	b.n	8005cc6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005cc4:	2302      	movs	r3, #2
  }
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3730      	adds	r7, #48	@ 0x30
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
	...

08005cd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cd4:	b0c0      	sub	sp, #256	@ 0x100
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	4bcf      	ldr	r3, [pc, #828]	@ (8006020 <UART_SetConfig+0x350>)
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d904      	bls.n	8005cf2 <UART_SetConfig+0x22>
 8005ce8:	f640 6175 	movw	r1, #3701	@ 0xe75
 8005cec:	48cd      	ldr	r0, [pc, #820]	@ (8006024 <UART_SetConfig+0x354>)
 8005cee:	f7fa fe09 	bl	8000904 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8005cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00a      	beq.n	8005d12 <UART_SetConfig+0x42>
 8005cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d06:	d004      	beq.n	8005d12 <UART_SetConfig+0x42>
 8005d08:	f640 6176 	movw	r1, #3702	@ 0xe76
 8005d0c:	48c5      	ldr	r0, [pc, #788]	@ (8006024 <UART_SetConfig+0x354>)
 8005d0e:	f7fa fdf9 	bl	8000904 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d010      	beq.n	8005d3e <UART_SetConfig+0x6e>
 8005d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d26:	d00a      	beq.n	8005d3e <UART_SetConfig+0x6e>
 8005d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005d32:	d004      	beq.n	8005d3e <UART_SetConfig+0x6e>
 8005d34:	f640 6177 	movw	r1, #3703	@ 0xe77
 8005d38:	48ba      	ldr	r0, [pc, #744]	@ (8006024 <UART_SetConfig+0x354>)
 8005d3a:	f7fa fde3 	bl	8000904 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d42:	695a      	ldr	r2, [r3, #20]
 8005d44:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 8005d48:	4013      	ands	r3, r2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d104      	bne.n	8005d58 <UART_SetConfig+0x88>
 8005d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d104      	bne.n	8005d62 <UART_SetConfig+0x92>
 8005d58:	f640 6178 	movw	r1, #3704	@ 0xe78
 8005d5c:	48b1      	ldr	r0, [pc, #708]	@ (8006024 <UART_SetConfig+0x354>)
 8005d5e:	f7fa fdd1 	bl	8000904 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d72:	68d9      	ldr	r1, [r3, #12]
 8005d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	ea40 0301 	orr.w	r3, r0, r1
 8005d7e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d84:	689a      	ldr	r2, [r3, #8]
 8005d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	431a      	orrs	r2, r3
 8005d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d9a:	69db      	ldr	r3, [r3, #28]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005dae:	f021 010c 	bic.w	r1, r1, #12
 8005db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005dbc:	430b      	orrs	r3, r1
 8005dbe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd0:	6999      	ldr	r1, [r3, #24]
 8005dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	ea40 0301 	orr.w	r3, r0, r1
 8005ddc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	4b90      	ldr	r3, [pc, #576]	@ (8006028 <UART_SetConfig+0x358>)
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d005      	beq.n	8005df6 <UART_SetConfig+0x126>
 8005dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	4b8e      	ldr	r3, [pc, #568]	@ (800602c <UART_SetConfig+0x35c>)
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d104      	bne.n	8005e00 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005df6:	f7fe fc3f 	bl	8004678 <HAL_RCC_GetPCLK2Freq>
 8005dfa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005dfe:	e003      	b.n	8005e08 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e00:	f7fe fc26 	bl	8004650 <HAL_RCC_GetPCLK1Freq>
 8005e04:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e12:	f040 810f 	bne.w	8006034 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e20:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005e24:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005e28:	4622      	mov	r2, r4
 8005e2a:	462b      	mov	r3, r5
 8005e2c:	1891      	adds	r1, r2, r2
 8005e2e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005e30:	415b      	adcs	r3, r3
 8005e32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e34:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e38:	4621      	mov	r1, r4
 8005e3a:	eb12 0801 	adds.w	r8, r2, r1
 8005e3e:	4629      	mov	r1, r5
 8005e40:	eb43 0901 	adc.w	r9, r3, r1
 8005e44:	f04f 0200 	mov.w	r2, #0
 8005e48:	f04f 0300 	mov.w	r3, #0
 8005e4c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e50:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e54:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e58:	4690      	mov	r8, r2
 8005e5a:	4699      	mov	r9, r3
 8005e5c:	4623      	mov	r3, r4
 8005e5e:	eb18 0303 	adds.w	r3, r8, r3
 8005e62:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e66:	462b      	mov	r3, r5
 8005e68:	eb49 0303 	adc.w	r3, r9, r3
 8005e6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e7c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005e80:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e84:	460b      	mov	r3, r1
 8005e86:	18db      	adds	r3, r3, r3
 8005e88:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	eb42 0303 	adc.w	r3, r2, r3
 8005e90:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e92:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005e96:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005e9a:	f7fa f995 	bl	80001c8 <__aeabi_uldivmod>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	4b63      	ldr	r3, [pc, #396]	@ (8006030 <UART_SetConfig+0x360>)
 8005ea4:	fba3 2302 	umull	r2, r3, r3, r2
 8005ea8:	095b      	lsrs	r3, r3, #5
 8005eaa:	011c      	lsls	r4, r3, #4
 8005eac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005eb6:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005eba:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ebe:	4642      	mov	r2, r8
 8005ec0:	464b      	mov	r3, r9
 8005ec2:	1891      	adds	r1, r2, r2
 8005ec4:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005ec6:	415b      	adcs	r3, r3
 8005ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005eca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005ece:	4641      	mov	r1, r8
 8005ed0:	eb12 0a01 	adds.w	sl, r2, r1
 8005ed4:	4649      	mov	r1, r9
 8005ed6:	eb43 0b01 	adc.w	fp, r3, r1
 8005eda:	f04f 0200 	mov.w	r2, #0
 8005ede:	f04f 0300 	mov.w	r3, #0
 8005ee2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ee6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005eea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005eee:	4692      	mov	sl, r2
 8005ef0:	469b      	mov	fp, r3
 8005ef2:	4643      	mov	r3, r8
 8005ef4:	eb1a 0303 	adds.w	r3, sl, r3
 8005ef8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005efc:	464b      	mov	r3, r9
 8005efe:	eb4b 0303 	adc.w	r3, fp, r3
 8005f02:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f12:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005f16:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	18db      	adds	r3, r3, r3
 8005f1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f20:	4613      	mov	r3, r2
 8005f22:	eb42 0303 	adc.w	r3, r2, r3
 8005f26:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f28:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f2c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f30:	f7fa f94a 	bl	80001c8 <__aeabi_uldivmod>
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	4611      	mov	r1, r2
 8005f3a:	4b3d      	ldr	r3, [pc, #244]	@ (8006030 <UART_SetConfig+0x360>)
 8005f3c:	fba3 2301 	umull	r2, r3, r3, r1
 8005f40:	095b      	lsrs	r3, r3, #5
 8005f42:	2264      	movs	r2, #100	@ 0x64
 8005f44:	fb02 f303 	mul.w	r3, r2, r3
 8005f48:	1acb      	subs	r3, r1, r3
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f50:	4b37      	ldr	r3, [pc, #220]	@ (8006030 <UART_SetConfig+0x360>)
 8005f52:	fba3 2302 	umull	r2, r3, r3, r2
 8005f56:	095b      	lsrs	r3, r3, #5
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f5e:	441c      	add	r4, r3
 8005f60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f64:	2200      	movs	r2, #0
 8005f66:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f6a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005f6e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005f72:	4642      	mov	r2, r8
 8005f74:	464b      	mov	r3, r9
 8005f76:	1891      	adds	r1, r2, r2
 8005f78:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f7a:	415b      	adcs	r3, r3
 8005f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f7e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005f82:	4641      	mov	r1, r8
 8005f84:	1851      	adds	r1, r2, r1
 8005f86:	6339      	str	r1, [r7, #48]	@ 0x30
 8005f88:	4649      	mov	r1, r9
 8005f8a:	414b      	adcs	r3, r1
 8005f8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f8e:	f04f 0200 	mov.w	r2, #0
 8005f92:	f04f 0300 	mov.w	r3, #0
 8005f96:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005f9a:	4659      	mov	r1, fp
 8005f9c:	00cb      	lsls	r3, r1, #3
 8005f9e:	4651      	mov	r1, sl
 8005fa0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fa4:	4651      	mov	r1, sl
 8005fa6:	00ca      	lsls	r2, r1, #3
 8005fa8:	4610      	mov	r0, r2
 8005faa:	4619      	mov	r1, r3
 8005fac:	4603      	mov	r3, r0
 8005fae:	4642      	mov	r2, r8
 8005fb0:	189b      	adds	r3, r3, r2
 8005fb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fb6:	464b      	mov	r3, r9
 8005fb8:	460a      	mov	r2, r1
 8005fba:	eb42 0303 	adc.w	r3, r2, r3
 8005fbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005fce:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005fd2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	18db      	adds	r3, r3, r3
 8005fda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fdc:	4613      	mov	r3, r2
 8005fde:	eb42 0303 	adc.w	r3, r2, r3
 8005fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fe4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005fe8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005fec:	f7fa f8ec 	bl	80001c8 <__aeabi_uldivmod>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8006030 <UART_SetConfig+0x360>)
 8005ff6:	fba3 1302 	umull	r1, r3, r3, r2
 8005ffa:	095b      	lsrs	r3, r3, #5
 8005ffc:	2164      	movs	r1, #100	@ 0x64
 8005ffe:	fb01 f303 	mul.w	r3, r1, r3
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	00db      	lsls	r3, r3, #3
 8006006:	3332      	adds	r3, #50	@ 0x32
 8006008:	4a09      	ldr	r2, [pc, #36]	@ (8006030 <UART_SetConfig+0x360>)
 800600a:	fba2 2303 	umull	r2, r3, r2, r3
 800600e:	095b      	lsrs	r3, r3, #5
 8006010:	f003 0207 	and.w	r2, r3, #7
 8006014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4422      	add	r2, r4
 800601c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800601e:	e109      	b.n	8006234 <UART_SetConfig+0x564>
 8006020:	00a037a0 	.word	0x00a037a0
 8006024:	08009b94 	.word	0x08009b94
 8006028:	40011000 	.word	0x40011000
 800602c:	40011400 	.word	0x40011400
 8006030:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006038:	2200      	movs	r2, #0
 800603a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800603e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006042:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006046:	4642      	mov	r2, r8
 8006048:	464b      	mov	r3, r9
 800604a:	1891      	adds	r1, r2, r2
 800604c:	6239      	str	r1, [r7, #32]
 800604e:	415b      	adcs	r3, r3
 8006050:	627b      	str	r3, [r7, #36]	@ 0x24
 8006052:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006056:	4641      	mov	r1, r8
 8006058:	1854      	adds	r4, r2, r1
 800605a:	4649      	mov	r1, r9
 800605c:	eb43 0501 	adc.w	r5, r3, r1
 8006060:	f04f 0200 	mov.w	r2, #0
 8006064:	f04f 0300 	mov.w	r3, #0
 8006068:	00eb      	lsls	r3, r5, #3
 800606a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800606e:	00e2      	lsls	r2, r4, #3
 8006070:	4614      	mov	r4, r2
 8006072:	461d      	mov	r5, r3
 8006074:	4643      	mov	r3, r8
 8006076:	18e3      	adds	r3, r4, r3
 8006078:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800607c:	464b      	mov	r3, r9
 800607e:	eb45 0303 	adc.w	r3, r5, r3
 8006082:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006092:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006096:	f04f 0200 	mov.w	r2, #0
 800609a:	f04f 0300 	mov.w	r3, #0
 800609e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80060a2:	4629      	mov	r1, r5
 80060a4:	008b      	lsls	r3, r1, #2
 80060a6:	4621      	mov	r1, r4
 80060a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060ac:	4621      	mov	r1, r4
 80060ae:	008a      	lsls	r2, r1, #2
 80060b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80060b4:	f7fa f888 	bl	80001c8 <__aeabi_uldivmod>
 80060b8:	4602      	mov	r2, r0
 80060ba:	460b      	mov	r3, r1
 80060bc:	4b60      	ldr	r3, [pc, #384]	@ (8006240 <UART_SetConfig+0x570>)
 80060be:	fba3 2302 	umull	r2, r3, r3, r2
 80060c2:	095b      	lsrs	r3, r3, #5
 80060c4:	011c      	lsls	r4, r3, #4
 80060c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060ca:	2200      	movs	r2, #0
 80060cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80060d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80060d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80060d8:	4642      	mov	r2, r8
 80060da:	464b      	mov	r3, r9
 80060dc:	1891      	adds	r1, r2, r2
 80060de:	61b9      	str	r1, [r7, #24]
 80060e0:	415b      	adcs	r3, r3
 80060e2:	61fb      	str	r3, [r7, #28]
 80060e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060e8:	4641      	mov	r1, r8
 80060ea:	1851      	adds	r1, r2, r1
 80060ec:	6139      	str	r1, [r7, #16]
 80060ee:	4649      	mov	r1, r9
 80060f0:	414b      	adcs	r3, r1
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	f04f 0200 	mov.w	r2, #0
 80060f8:	f04f 0300 	mov.w	r3, #0
 80060fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006100:	4659      	mov	r1, fp
 8006102:	00cb      	lsls	r3, r1, #3
 8006104:	4651      	mov	r1, sl
 8006106:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800610a:	4651      	mov	r1, sl
 800610c:	00ca      	lsls	r2, r1, #3
 800610e:	4610      	mov	r0, r2
 8006110:	4619      	mov	r1, r3
 8006112:	4603      	mov	r3, r0
 8006114:	4642      	mov	r2, r8
 8006116:	189b      	adds	r3, r3, r2
 8006118:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800611c:	464b      	mov	r3, r9
 800611e:	460a      	mov	r2, r1
 8006120:	eb42 0303 	adc.w	r3, r2, r3
 8006124:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006132:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006134:	f04f 0200 	mov.w	r2, #0
 8006138:	f04f 0300 	mov.w	r3, #0
 800613c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006140:	4649      	mov	r1, r9
 8006142:	008b      	lsls	r3, r1, #2
 8006144:	4641      	mov	r1, r8
 8006146:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800614a:	4641      	mov	r1, r8
 800614c:	008a      	lsls	r2, r1, #2
 800614e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006152:	f7fa f839 	bl	80001c8 <__aeabi_uldivmod>
 8006156:	4602      	mov	r2, r0
 8006158:	460b      	mov	r3, r1
 800615a:	4611      	mov	r1, r2
 800615c:	4b38      	ldr	r3, [pc, #224]	@ (8006240 <UART_SetConfig+0x570>)
 800615e:	fba3 2301 	umull	r2, r3, r3, r1
 8006162:	095b      	lsrs	r3, r3, #5
 8006164:	2264      	movs	r2, #100	@ 0x64
 8006166:	fb02 f303 	mul.w	r3, r2, r3
 800616a:	1acb      	subs	r3, r1, r3
 800616c:	011b      	lsls	r3, r3, #4
 800616e:	3332      	adds	r3, #50	@ 0x32
 8006170:	4a33      	ldr	r2, [pc, #204]	@ (8006240 <UART_SetConfig+0x570>)
 8006172:	fba2 2303 	umull	r2, r3, r2, r3
 8006176:	095b      	lsrs	r3, r3, #5
 8006178:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800617c:	441c      	add	r4, r3
 800617e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006182:	2200      	movs	r2, #0
 8006184:	673b      	str	r3, [r7, #112]	@ 0x70
 8006186:	677a      	str	r2, [r7, #116]	@ 0x74
 8006188:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800618c:	4642      	mov	r2, r8
 800618e:	464b      	mov	r3, r9
 8006190:	1891      	adds	r1, r2, r2
 8006192:	60b9      	str	r1, [r7, #8]
 8006194:	415b      	adcs	r3, r3
 8006196:	60fb      	str	r3, [r7, #12]
 8006198:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800619c:	4641      	mov	r1, r8
 800619e:	1851      	adds	r1, r2, r1
 80061a0:	6039      	str	r1, [r7, #0]
 80061a2:	4649      	mov	r1, r9
 80061a4:	414b      	adcs	r3, r1
 80061a6:	607b      	str	r3, [r7, #4]
 80061a8:	f04f 0200 	mov.w	r2, #0
 80061ac:	f04f 0300 	mov.w	r3, #0
 80061b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061b4:	4659      	mov	r1, fp
 80061b6:	00cb      	lsls	r3, r1, #3
 80061b8:	4651      	mov	r1, sl
 80061ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061be:	4651      	mov	r1, sl
 80061c0:	00ca      	lsls	r2, r1, #3
 80061c2:	4610      	mov	r0, r2
 80061c4:	4619      	mov	r1, r3
 80061c6:	4603      	mov	r3, r0
 80061c8:	4642      	mov	r2, r8
 80061ca:	189b      	adds	r3, r3, r2
 80061cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061ce:	464b      	mov	r3, r9
 80061d0:	460a      	mov	r2, r1
 80061d2:	eb42 0303 	adc.w	r3, r2, r3
 80061d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80061d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80061e2:	667a      	str	r2, [r7, #100]	@ 0x64
 80061e4:	f04f 0200 	mov.w	r2, #0
 80061e8:	f04f 0300 	mov.w	r3, #0
 80061ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80061f0:	4649      	mov	r1, r9
 80061f2:	008b      	lsls	r3, r1, #2
 80061f4:	4641      	mov	r1, r8
 80061f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061fa:	4641      	mov	r1, r8
 80061fc:	008a      	lsls	r2, r1, #2
 80061fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006202:	f7f9 ffe1 	bl	80001c8 <__aeabi_uldivmod>
 8006206:	4602      	mov	r2, r0
 8006208:	460b      	mov	r3, r1
 800620a:	4b0d      	ldr	r3, [pc, #52]	@ (8006240 <UART_SetConfig+0x570>)
 800620c:	fba3 1302 	umull	r1, r3, r3, r2
 8006210:	095b      	lsrs	r3, r3, #5
 8006212:	2164      	movs	r1, #100	@ 0x64
 8006214:	fb01 f303 	mul.w	r3, r1, r3
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	011b      	lsls	r3, r3, #4
 800621c:	3332      	adds	r3, #50	@ 0x32
 800621e:	4a08      	ldr	r2, [pc, #32]	@ (8006240 <UART_SetConfig+0x570>)
 8006220:	fba2 2303 	umull	r2, r3, r2, r3
 8006224:	095b      	lsrs	r3, r3, #5
 8006226:	f003 020f 	and.w	r2, r3, #15
 800622a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4422      	add	r2, r4
 8006232:	609a      	str	r2, [r3, #8]
}
 8006234:	bf00      	nop
 8006236:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800623a:	46bd      	mov	sp, r7
 800623c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006240:	51eb851f 	.word	0x51eb851f

08006244 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006244:	b084      	sub	sp, #16
 8006246:	b580      	push	{r7, lr}
 8006248:	b084      	sub	sp, #16
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	f107 001c 	add.w	r0, r7, #28
 8006252:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006256:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800625a:	2b01      	cmp	r3, #1
 800625c:	d123      	bne.n	80062a6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006262:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006272:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006286:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800628a:	2b01      	cmp	r3, #1
 800628c:	d105      	bne.n	800629a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f001 fae8 	bl	8007870 <USB_CoreReset>
 80062a0:	4603      	mov	r3, r0
 80062a2:	73fb      	strb	r3, [r7, #15]
 80062a4:	e01b      	b.n	80062de <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f001 fadc 	bl	8007870 <USB_CoreReset>
 80062b8:	4603      	mov	r3, r0
 80062ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80062bc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d106      	bne.n	80062d2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062c8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80062d0:	e005      	b.n	80062de <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80062de:	7fbb      	ldrb	r3, [r7, #30]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d10b      	bne.n	80062fc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f043 0206 	orr.w	r2, r3, #6
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f043 0220 	orr.w	r2, r3, #32
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006308:	b004      	add	sp, #16
 800630a:	4770      	bx	lr

0800630c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800630c:	b480      	push	{r7}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	4613      	mov	r3, r2
 8006318:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800631a:	79fb      	ldrb	r3, [r7, #7]
 800631c:	2b02      	cmp	r3, #2
 800631e:	d165      	bne.n	80063ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	4a41      	ldr	r2, [pc, #260]	@ (8006428 <USB_SetTurnaroundTime+0x11c>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d906      	bls.n	8006336 <USB_SetTurnaroundTime+0x2a>
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	4a40      	ldr	r2, [pc, #256]	@ (800642c <USB_SetTurnaroundTime+0x120>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d202      	bcs.n	8006336 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006330:	230f      	movs	r3, #15
 8006332:	617b      	str	r3, [r7, #20]
 8006334:	e062      	b.n	80063fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	4a3c      	ldr	r2, [pc, #240]	@ (800642c <USB_SetTurnaroundTime+0x120>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d306      	bcc.n	800634c <USB_SetTurnaroundTime+0x40>
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	4a3b      	ldr	r2, [pc, #236]	@ (8006430 <USB_SetTurnaroundTime+0x124>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d202      	bcs.n	800634c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006346:	230e      	movs	r3, #14
 8006348:	617b      	str	r3, [r7, #20]
 800634a:	e057      	b.n	80063fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	4a38      	ldr	r2, [pc, #224]	@ (8006430 <USB_SetTurnaroundTime+0x124>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d306      	bcc.n	8006362 <USB_SetTurnaroundTime+0x56>
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	4a37      	ldr	r2, [pc, #220]	@ (8006434 <USB_SetTurnaroundTime+0x128>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d202      	bcs.n	8006362 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800635c:	230d      	movs	r3, #13
 800635e:	617b      	str	r3, [r7, #20]
 8006360:	e04c      	b.n	80063fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	4a33      	ldr	r2, [pc, #204]	@ (8006434 <USB_SetTurnaroundTime+0x128>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d306      	bcc.n	8006378 <USB_SetTurnaroundTime+0x6c>
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	4a32      	ldr	r2, [pc, #200]	@ (8006438 <USB_SetTurnaroundTime+0x12c>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d802      	bhi.n	8006378 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006372:	230c      	movs	r3, #12
 8006374:	617b      	str	r3, [r7, #20]
 8006376:	e041      	b.n	80063fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	4a2f      	ldr	r2, [pc, #188]	@ (8006438 <USB_SetTurnaroundTime+0x12c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d906      	bls.n	800638e <USB_SetTurnaroundTime+0x82>
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	4a2e      	ldr	r2, [pc, #184]	@ (800643c <USB_SetTurnaroundTime+0x130>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d802      	bhi.n	800638e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006388:	230b      	movs	r3, #11
 800638a:	617b      	str	r3, [r7, #20]
 800638c:	e036      	b.n	80063fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	4a2a      	ldr	r2, [pc, #168]	@ (800643c <USB_SetTurnaroundTime+0x130>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d906      	bls.n	80063a4 <USB_SetTurnaroundTime+0x98>
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	4a29      	ldr	r2, [pc, #164]	@ (8006440 <USB_SetTurnaroundTime+0x134>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d802      	bhi.n	80063a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800639e:	230a      	movs	r3, #10
 80063a0:	617b      	str	r3, [r7, #20]
 80063a2:	e02b      	b.n	80063fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	4a26      	ldr	r2, [pc, #152]	@ (8006440 <USB_SetTurnaroundTime+0x134>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d906      	bls.n	80063ba <USB_SetTurnaroundTime+0xae>
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	4a25      	ldr	r2, [pc, #148]	@ (8006444 <USB_SetTurnaroundTime+0x138>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d202      	bcs.n	80063ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80063b4:	2309      	movs	r3, #9
 80063b6:	617b      	str	r3, [r7, #20]
 80063b8:	e020      	b.n	80063fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	4a21      	ldr	r2, [pc, #132]	@ (8006444 <USB_SetTurnaroundTime+0x138>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d306      	bcc.n	80063d0 <USB_SetTurnaroundTime+0xc4>
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	4a20      	ldr	r2, [pc, #128]	@ (8006448 <USB_SetTurnaroundTime+0x13c>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d802      	bhi.n	80063d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80063ca:	2308      	movs	r3, #8
 80063cc:	617b      	str	r3, [r7, #20]
 80063ce:	e015      	b.n	80063fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	4a1d      	ldr	r2, [pc, #116]	@ (8006448 <USB_SetTurnaroundTime+0x13c>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d906      	bls.n	80063e6 <USB_SetTurnaroundTime+0xda>
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	4a1c      	ldr	r2, [pc, #112]	@ (800644c <USB_SetTurnaroundTime+0x140>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d202      	bcs.n	80063e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80063e0:	2307      	movs	r3, #7
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	e00a      	b.n	80063fc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80063e6:	2306      	movs	r3, #6
 80063e8:	617b      	str	r3, [r7, #20]
 80063ea:	e007      	b.n	80063fc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80063ec:	79fb      	ldrb	r3, [r7, #7]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d102      	bne.n	80063f8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80063f2:	2309      	movs	r3, #9
 80063f4:	617b      	str	r3, [r7, #20]
 80063f6:	e001      	b.n	80063fc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80063f8:	2309      	movs	r3, #9
 80063fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	68da      	ldr	r2, [r3, #12]
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	029b      	lsls	r3, r3, #10
 8006410:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006414:	431a      	orrs	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	371c      	adds	r7, #28
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	00d8acbf 	.word	0x00d8acbf
 800642c:	00e4e1c0 	.word	0x00e4e1c0
 8006430:	00f42400 	.word	0x00f42400
 8006434:	01067380 	.word	0x01067380
 8006438:	011a499f 	.word	0x011a499f
 800643c:	01312cff 	.word	0x01312cff
 8006440:	014ca43f 	.word	0x014ca43f
 8006444:	016e3600 	.word	0x016e3600
 8006448:	01a6ab1f 	.word	0x01a6ab1f
 800644c:	01e84800 	.word	0x01e84800

08006450 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f043 0201 	orr.w	r2, r3, #1
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	370c      	adds	r7, #12
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006472:	b480      	push	{r7}
 8006474:	b083      	sub	sp, #12
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f023 0201 	bic.w	r2, r3, #1
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	460b      	mov	r3, r1
 800649e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80064a0:	2300      	movs	r3, #0
 80064a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80064b0:	78fb      	ldrb	r3, [r7, #3]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d115      	bne.n	80064e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80064c2:	200a      	movs	r0, #10
 80064c4:	f7fb f96e 	bl	80017a4 <HAL_Delay>
      ms += 10U;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	330a      	adds	r3, #10
 80064cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f001 f93f 	bl	8007752 <USB_GetMode>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d01e      	beq.n	8006518 <USB_SetCurrentMode+0x84>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2bc7      	cmp	r3, #199	@ 0xc7
 80064de:	d9f0      	bls.n	80064c2 <USB_SetCurrentMode+0x2e>
 80064e0:	e01a      	b.n	8006518 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80064e2:	78fb      	ldrb	r3, [r7, #3]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d115      	bne.n	8006514 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80064f4:	200a      	movs	r0, #10
 80064f6:	f7fb f955 	bl	80017a4 <HAL_Delay>
      ms += 10U;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	330a      	adds	r3, #10
 80064fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f001 f926 	bl	8007752 <USB_GetMode>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d005      	beq.n	8006518 <USB_SetCurrentMode+0x84>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006510:	d9f0      	bls.n	80064f4 <USB_SetCurrentMode+0x60>
 8006512:	e001      	b.n	8006518 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e005      	b.n	8006524 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2bc8      	cmp	r3, #200	@ 0xc8
 800651c:	d101      	bne.n	8006522 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e000      	b.n	8006524 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800652c:	b084      	sub	sp, #16
 800652e:	b580      	push	{r7, lr}
 8006530:	b086      	sub	sp, #24
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800653a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800653e:	2300      	movs	r3, #0
 8006540:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006546:	2300      	movs	r3, #0
 8006548:	613b      	str	r3, [r7, #16]
 800654a:	e009      	b.n	8006560 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	3340      	adds	r3, #64	@ 0x40
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	4413      	add	r3, r2
 8006556:	2200      	movs	r2, #0
 8006558:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	3301      	adds	r3, #1
 800655e:	613b      	str	r3, [r7, #16]
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	2b0e      	cmp	r3, #14
 8006564:	d9f2      	bls.n	800654c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006566:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800656a:	2b00      	cmp	r3, #0
 800656c:	d11c      	bne.n	80065a8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800657c:	f043 0302 	orr.w	r3, r3, #2
 8006580:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006586:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006592:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800659e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80065a6:	e00b      	b.n	80065c0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ac:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80065c6:	461a      	mov	r2, r3
 80065c8:	2300      	movs	r3, #0
 80065ca:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065cc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d10d      	bne.n	80065f0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80065d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d104      	bne.n	80065e6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80065dc:	2100      	movs	r1, #0
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 f968 	bl	80068b4 <USB_SetDevSpeed>
 80065e4:	e008      	b.n	80065f8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80065e6:	2101      	movs	r1, #1
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 f963 	bl	80068b4 <USB_SetDevSpeed>
 80065ee:	e003      	b.n	80065f8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80065f0:	2103      	movs	r1, #3
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f95e 	bl	80068b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065f8:	2110      	movs	r1, #16
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f8fa 	bl	80067f4 <USB_FlushTxFifo>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f924 	bl	8006858 <USB_FlushRxFifo>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006620:	461a      	mov	r2, r3
 8006622:	2300      	movs	r3, #0
 8006624:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800662c:	461a      	mov	r2, r3
 800662e:	2300      	movs	r3, #0
 8006630:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006638:	461a      	mov	r2, r3
 800663a:	2300      	movs	r3, #0
 800663c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800663e:	2300      	movs	r3, #0
 8006640:	613b      	str	r3, [r7, #16]
 8006642:	e043      	b.n	80066cc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4413      	add	r3, r2
 800664c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006656:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800665a:	d118      	bne.n	800668e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10a      	bne.n	8006678 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	4413      	add	r3, r2
 800666a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800666e:	461a      	mov	r2, r3
 8006670:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006674:	6013      	str	r3, [r2, #0]
 8006676:	e013      	b.n	80066a0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	015a      	lsls	r2, r3, #5
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4413      	add	r3, r2
 8006680:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006684:	461a      	mov	r2, r3
 8006686:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800668a:	6013      	str	r3, [r2, #0]
 800668c:	e008      	b.n	80066a0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	4413      	add	r3, r2
 8006696:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800669a:	461a      	mov	r2, r3
 800669c:	2300      	movs	r3, #0
 800669e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066ac:	461a      	mov	r2, r3
 80066ae:	2300      	movs	r3, #0
 80066b0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	015a      	lsls	r2, r3, #5
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	4413      	add	r3, r2
 80066ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066be:	461a      	mov	r2, r3
 80066c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80066c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	3301      	adds	r3, #1
 80066ca:	613b      	str	r3, [r7, #16]
 80066cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80066d0:	461a      	mov	r2, r3
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d3b5      	bcc.n	8006644 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066d8:	2300      	movs	r3, #0
 80066da:	613b      	str	r3, [r7, #16]
 80066dc:	e043      	b.n	8006766 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066f4:	d118      	bne.n	8006728 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10a      	bne.n	8006712 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006708:	461a      	mov	r2, r3
 800670a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800670e:	6013      	str	r3, [r2, #0]
 8006710:	e013      	b.n	800673a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	4413      	add	r3, r2
 800671a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800671e:	461a      	mov	r2, r3
 8006720:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006724:	6013      	str	r3, [r2, #0]
 8006726:	e008      	b.n	800673a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4413      	add	r3, r2
 8006730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006734:	461a      	mov	r2, r3
 8006736:	2300      	movs	r3, #0
 8006738:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	4413      	add	r3, r2
 8006742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006746:	461a      	mov	r2, r3
 8006748:	2300      	movs	r3, #0
 800674a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	015a      	lsls	r2, r3, #5
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	4413      	add	r3, r2
 8006754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006758:	461a      	mov	r2, r3
 800675a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800675e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	3301      	adds	r3, #1
 8006764:	613b      	str	r3, [r7, #16]
 8006766:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800676a:	461a      	mov	r2, r3
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	4293      	cmp	r3, r2
 8006770:	d3b5      	bcc.n	80066de <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006780:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006784:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006792:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006794:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006798:	2b00      	cmp	r3, #0
 800679a:	d105      	bne.n	80067a8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	f043 0210 	orr.w	r2, r3, #16
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	699a      	ldr	r2, [r3, #24]
 80067ac:	4b10      	ldr	r3, [pc, #64]	@ (80067f0 <USB_DevInit+0x2c4>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80067b4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d005      	beq.n	80067c8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	f043 0208 	orr.w	r2, r3, #8
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80067c8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d107      	bne.n	80067e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067d8:	f043 0304 	orr.w	r3, r3, #4
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80067e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3718      	adds	r7, #24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067ec:	b004      	add	sp, #16
 80067ee:	4770      	bx	lr
 80067f0:	803c3800 	.word	0x803c3800

080067f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067fe:	2300      	movs	r3, #0
 8006800:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	3301      	adds	r3, #1
 8006806:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800680e:	d901      	bls.n	8006814 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e01b      	b.n	800684c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	daf2      	bge.n	8006802 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800681c:	2300      	movs	r3, #0
 800681e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	019b      	lsls	r3, r3, #6
 8006824:	f043 0220 	orr.w	r2, r3, #32
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	3301      	adds	r3, #1
 8006830:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006838:	d901      	bls.n	800683e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e006      	b.n	800684c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	f003 0320 	and.w	r3, r3, #32
 8006846:	2b20      	cmp	r3, #32
 8006848:	d0f0      	beq.n	800682c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3714      	adds	r7, #20
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006860:	2300      	movs	r3, #0
 8006862:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	3301      	adds	r3, #1
 8006868:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006870:	d901      	bls.n	8006876 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e018      	b.n	80068a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	2b00      	cmp	r3, #0
 800687c:	daf2      	bge.n	8006864 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800687e:	2300      	movs	r3, #0
 8006880:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2210      	movs	r2, #16
 8006886:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	3301      	adds	r3, #1
 800688c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006894:	d901      	bls.n	800689a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e006      	b.n	80068a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	f003 0310 	and.w	r3, r3, #16
 80068a2:	2b10      	cmp	r3, #16
 80068a4:	d0f0      	beq.n	8006888 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	460b      	mov	r3, r1
 80068be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	78fb      	ldrb	r3, [r7, #3]
 80068ce:	68f9      	ldr	r1, [r7, #12]
 80068d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80068d4:	4313      	orrs	r3, r2
 80068d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b087      	sub	sp, #28
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f003 0306 	and.w	r3, r3, #6
 80068fe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d102      	bne.n	800690c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006906:	2300      	movs	r3, #0
 8006908:	75fb      	strb	r3, [r7, #23]
 800690a:	e00a      	b.n	8006922 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2b02      	cmp	r3, #2
 8006910:	d002      	beq.n	8006918 <USB_GetDevSpeed+0x32>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2b06      	cmp	r3, #6
 8006916:	d102      	bne.n	800691e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006918:	2302      	movs	r3, #2
 800691a:	75fb      	strb	r3, [r7, #23]
 800691c:	e001      	b.n	8006922 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800691e:	230f      	movs	r3, #15
 8006920:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006922:	7dfb      	ldrb	r3, [r7, #23]
}
 8006924:	4618      	mov	r0, r3
 8006926:	371c      	adds	r7, #28
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	785b      	ldrb	r3, [r3, #1]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d13a      	bne.n	80069c2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006952:	69da      	ldr	r2, [r3, #28]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	f003 030f 	and.w	r3, r3, #15
 800695c:	2101      	movs	r1, #1
 800695e:	fa01 f303 	lsl.w	r3, r1, r3
 8006962:	b29b      	uxth	r3, r3
 8006964:	68f9      	ldr	r1, [r7, #12]
 8006966:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800696a:	4313      	orrs	r3, r2
 800696c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	015a      	lsls	r2, r3, #5
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4413      	add	r3, r2
 8006976:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d155      	bne.n	8006a30 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	4413      	add	r3, r2
 800698c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	791b      	ldrb	r3, [r3, #4]
 800699e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80069a0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	059b      	lsls	r3, r3, #22
 80069a6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80069a8:	4313      	orrs	r3, r2
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	0151      	lsls	r1, r2, #5
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	440a      	add	r2, r1
 80069b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069be:	6013      	str	r3, [r2, #0]
 80069c0:	e036      	b.n	8006a30 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069c8:	69da      	ldr	r2, [r3, #28]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	f003 030f 	and.w	r3, r3, #15
 80069d2:	2101      	movs	r1, #1
 80069d4:	fa01 f303 	lsl.w	r3, r1, r3
 80069d8:	041b      	lsls	r3, r3, #16
 80069da:	68f9      	ldr	r1, [r7, #12]
 80069dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069e0:	4313      	orrs	r3, r2
 80069e2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d11a      	bne.n	8006a30 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	791b      	ldrb	r3, [r3, #4]
 8006a14:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a16:	430b      	orrs	r3, r1
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	0151      	lsls	r1, r2, #5
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	440a      	add	r2, r1
 8006a22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a2e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3714      	adds	r7, #20
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
	...

08006a40 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	785b      	ldrb	r3, [r3, #1]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d161      	bne.n	8006b20 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a72:	d11f      	bne.n	8006ab4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	0151      	lsls	r1, r2, #5
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	440a      	add	r2, r1
 8006a8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a8e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006a92:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	015a      	lsls	r2, r3, #5
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	0151      	lsls	r1, r2, #5
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	440a      	add	r2, r1
 8006aaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006aae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ab2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	f003 030f 	and.w	r3, r3, #15
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	43db      	mvns	r3, r3
 8006ace:	68f9      	ldr	r1, [r7, #12]
 8006ad0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ade:	69da      	ldr	r2, [r3, #28]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	f003 030f 	and.w	r3, r3, #15
 8006ae8:	2101      	movs	r1, #1
 8006aea:	fa01 f303 	lsl.w	r3, r1, r3
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	43db      	mvns	r3, r3
 8006af2:	68f9      	ldr	r1, [r7, #12]
 8006af4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006af8:	4013      	ands	r3, r2
 8006afa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	0159      	lsls	r1, r3, #5
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	440b      	add	r3, r1
 8006b12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b16:	4619      	mov	r1, r3
 8006b18:	4b35      	ldr	r3, [pc, #212]	@ (8006bf0 <USB_DeactivateEndpoint+0x1b0>)
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	600b      	str	r3, [r1, #0]
 8006b1e:	e060      	b.n	8006be2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b36:	d11f      	bne.n	8006b78 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	015a      	lsls	r2, r3, #5
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	4413      	add	r3, r2
 8006b40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	0151      	lsls	r1, r2, #5
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	440a      	add	r2, r1
 8006b4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b52:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006b56:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	0151      	lsls	r1, r2, #5
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	440a      	add	r2, r1
 8006b6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b72:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	f003 030f 	and.w	r3, r3, #15
 8006b88:	2101      	movs	r1, #1
 8006b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b8e:	041b      	lsls	r3, r3, #16
 8006b90:	43db      	mvns	r3, r3
 8006b92:	68f9      	ldr	r1, [r7, #12]
 8006b94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b98:	4013      	ands	r3, r2
 8006b9a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ba2:	69da      	ldr	r2, [r3, #28]
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	f003 030f 	and.w	r3, r3, #15
 8006bac:	2101      	movs	r1, #1
 8006bae:	fa01 f303 	lsl.w	r3, r1, r3
 8006bb2:	041b      	lsls	r3, r3, #16
 8006bb4:	43db      	mvns	r3, r3
 8006bb6:	68f9      	ldr	r1, [r7, #12]
 8006bb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	015a      	lsls	r2, r3, #5
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	0159      	lsls	r1, r3, #5
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	440b      	add	r3, r1
 8006bd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bda:	4619      	mov	r1, r3
 8006bdc:	4b05      	ldr	r3, [pc, #20]	@ (8006bf4 <USB_DeactivateEndpoint+0x1b4>)
 8006bde:	4013      	ands	r3, r2
 8006be0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3714      	adds	r7, #20
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	ec337800 	.word	0xec337800
 8006bf4:	eff37800 	.word	0xeff37800

08006bf8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b08a      	sub	sp, #40	@ 0x28
 8006bfc:	af02      	add	r7, sp, #8
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	4613      	mov	r3, r2
 8006c04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	785b      	ldrb	r3, [r3, #1]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	f040 817f 	bne.w	8006f18 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d132      	bne.n	8006c88 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	015a      	lsls	r2, r3, #5
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	4413      	add	r3, r2
 8006c2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	69ba      	ldr	r2, [r7, #24]
 8006c32:	0151      	lsls	r1, r2, #5
 8006c34:	69fa      	ldr	r2, [r7, #28]
 8006c36:	440a      	add	r2, r1
 8006c38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c3c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006c40:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006c44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	015a      	lsls	r2, r3, #5
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	69ba      	ldr	r2, [r7, #24]
 8006c56:	0151      	lsls	r1, r2, #5
 8006c58:	69fa      	ldr	r2, [r7, #28]
 8006c5a:	440a      	add	r2, r1
 8006c5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c60:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	015a      	lsls	r2, r3, #5
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	69ba      	ldr	r2, [r7, #24]
 8006c76:	0151      	lsls	r1, r2, #5
 8006c78:	69fa      	ldr	r2, [r7, #28]
 8006c7a:	440a      	add	r2, r1
 8006c7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c80:	0cdb      	lsrs	r3, r3, #19
 8006c82:	04db      	lsls	r3, r3, #19
 8006c84:	6113      	str	r3, [r2, #16]
 8006c86:	e097      	b.n	8006db8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	015a      	lsls	r2, r3, #5
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	69ba      	ldr	r2, [r7, #24]
 8006c98:	0151      	lsls	r1, r2, #5
 8006c9a:	69fa      	ldr	r2, [r7, #28]
 8006c9c:	440a      	add	r2, r1
 8006c9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ca2:	0cdb      	lsrs	r3, r3, #19
 8006ca4:	04db      	lsls	r3, r3, #19
 8006ca6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	015a      	lsls	r2, r3, #5
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	4413      	add	r3, r2
 8006cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	69ba      	ldr	r2, [r7, #24]
 8006cb8:	0151      	lsls	r1, r2, #5
 8006cba:	69fa      	ldr	r2, [r7, #28]
 8006cbc:	440a      	add	r2, r1
 8006cbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cc2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006cc6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006cca:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d11a      	bne.n	8006d08 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	691a      	ldr	r2, [r3, #16]
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d903      	bls.n	8006ce6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	689a      	ldr	r2, [r3, #8]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	0151      	lsls	r1, r2, #5
 8006cf8:	69fa      	ldr	r2, [r7, #28]
 8006cfa:	440a      	add	r2, r1
 8006cfc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d00:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d04:	6113      	str	r3, [r2, #16]
 8006d06:	e044      	b.n	8006d92 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	691a      	ldr	r2, [r3, #16]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	4413      	add	r3, r2
 8006d12:	1e5a      	subs	r2, r3, #1
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d1c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	015a      	lsls	r2, r3, #5
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d2a:	691a      	ldr	r2, [r3, #16]
 8006d2c:	8afb      	ldrh	r3, [r7, #22]
 8006d2e:	04d9      	lsls	r1, r3, #19
 8006d30:	4ba4      	ldr	r3, [pc, #656]	@ (8006fc4 <USB_EPStartXfer+0x3cc>)
 8006d32:	400b      	ands	r3, r1
 8006d34:	69b9      	ldr	r1, [r7, #24]
 8006d36:	0148      	lsls	r0, r1, #5
 8006d38:	69f9      	ldr	r1, [r7, #28]
 8006d3a:	4401      	add	r1, r0
 8006d3c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006d40:	4313      	orrs	r3, r2
 8006d42:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	791b      	ldrb	r3, [r3, #4]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d122      	bne.n	8006d92 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	015a      	lsls	r2, r3, #5
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	4413      	add	r3, r2
 8006d54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	69ba      	ldr	r2, [r7, #24]
 8006d5c:	0151      	lsls	r1, r2, #5
 8006d5e:	69fa      	ldr	r2, [r7, #28]
 8006d60:	440a      	add	r2, r1
 8006d62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d66:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006d6a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	015a      	lsls	r2, r3, #5
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	4413      	add	r3, r2
 8006d74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d78:	691a      	ldr	r2, [r3, #16]
 8006d7a:	8afb      	ldrh	r3, [r7, #22]
 8006d7c:	075b      	lsls	r3, r3, #29
 8006d7e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006d82:	69b9      	ldr	r1, [r7, #24]
 8006d84:	0148      	lsls	r0, r1, #5
 8006d86:	69f9      	ldr	r1, [r7, #28]
 8006d88:	4401      	add	r1, r0
 8006d8a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d9e:	691a      	ldr	r2, [r3, #16]
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006da8:	69b9      	ldr	r1, [r7, #24]
 8006daa:	0148      	lsls	r0, r1, #5
 8006dac:	69f9      	ldr	r1, [r7, #28]
 8006dae:	4401      	add	r1, r0
 8006db0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006db4:	4313      	orrs	r3, r2
 8006db6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006db8:	79fb      	ldrb	r3, [r7, #7]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d14b      	bne.n	8006e56 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	69db      	ldr	r3, [r3, #28]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d009      	beq.n	8006dda <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	015a      	lsls	r2, r3, #5
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	4413      	add	r3, r2
 8006dce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	69db      	ldr	r3, [r3, #28]
 8006dd8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	791b      	ldrb	r3, [r3, #4]
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d128      	bne.n	8006e34 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d110      	bne.n	8006e14 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	015a      	lsls	r2, r3, #5
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	4413      	add	r3, r2
 8006dfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	69ba      	ldr	r2, [r7, #24]
 8006e02:	0151      	lsls	r1, r2, #5
 8006e04:	69fa      	ldr	r2, [r7, #28]
 8006e06:	440a      	add	r2, r1
 8006e08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e0c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006e10:	6013      	str	r3, [r2, #0]
 8006e12:	e00f      	b.n	8006e34 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	015a      	lsls	r2, r3, #5
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	69ba      	ldr	r2, [r7, #24]
 8006e24:	0151      	lsls	r1, r2, #5
 8006e26:	69fa      	ldr	r2, [r7, #28]
 8006e28:	440a      	add	r2, r1
 8006e2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e32:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	015a      	lsls	r2, r3, #5
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	69ba      	ldr	r2, [r7, #24]
 8006e44:	0151      	lsls	r1, r2, #5
 8006e46:	69fa      	ldr	r2, [r7, #28]
 8006e48:	440a      	add	r2, r1
 8006e4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e4e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006e52:	6013      	str	r3, [r2, #0]
 8006e54:	e166      	b.n	8007124 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	015a      	lsls	r2, r3, #5
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	69ba      	ldr	r2, [r7, #24]
 8006e66:	0151      	lsls	r1, r2, #5
 8006e68:	69fa      	ldr	r2, [r7, #28]
 8006e6a:	440a      	add	r2, r1
 8006e6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e70:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006e74:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	791b      	ldrb	r3, [r3, #4]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d015      	beq.n	8006eaa <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f000 814e 	beq.w	8007124 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	f003 030f 	and.w	r3, r3, #15
 8006e98:	2101      	movs	r1, #1
 8006e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e9e:	69f9      	ldr	r1, [r7, #28]
 8006ea0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	634b      	str	r3, [r1, #52]	@ 0x34
 8006ea8:	e13c      	b.n	8007124 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d110      	bne.n	8006edc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	015a      	lsls	r2, r3, #5
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	0151      	lsls	r1, r2, #5
 8006ecc:	69fa      	ldr	r2, [r7, #28]
 8006ece:	440a      	add	r2, r1
 8006ed0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ed4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006ed8:	6013      	str	r3, [r2, #0]
 8006eda:	e00f      	b.n	8006efc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	69ba      	ldr	r2, [r7, #24]
 8006eec:	0151      	lsls	r1, r2, #5
 8006eee:	69fa      	ldr	r2, [r7, #28]
 8006ef0:	440a      	add	r2, r1
 8006ef2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ef6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006efa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	68d9      	ldr	r1, [r3, #12]
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	781a      	ldrb	r2, [r3, #0]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	b298      	uxth	r0, r3
 8006f0a:	79fb      	ldrb	r3, [r7, #7]
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	4603      	mov	r3, r0
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f000 f9b9 	bl	8007288 <USB_WritePacket>
 8006f16:	e105      	b.n	8007124 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	69ba      	ldr	r2, [r7, #24]
 8006f28:	0151      	lsls	r1, r2, #5
 8006f2a:	69fa      	ldr	r2, [r7, #28]
 8006f2c:	440a      	add	r2, r1
 8006f2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f32:	0cdb      	lsrs	r3, r3, #19
 8006f34:	04db      	lsls	r3, r3, #19
 8006f36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	69ba      	ldr	r2, [r7, #24]
 8006f48:	0151      	lsls	r1, r2, #5
 8006f4a:	69fa      	ldr	r2, [r7, #28]
 8006f4c:	440a      	add	r2, r1
 8006f4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f52:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006f56:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006f5a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d132      	bne.n	8006fc8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	689a      	ldr	r2, [r3, #8]
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	689a      	ldr	r2, [r3, #8]
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f86:	691a      	ldr	r2, [r3, #16]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f90:	69b9      	ldr	r1, [r7, #24]
 8006f92:	0148      	lsls	r0, r1, #5
 8006f94:	69f9      	ldr	r1, [r7, #28]
 8006f96:	4401      	add	r1, r0
 8006f98:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	015a      	lsls	r2, r3, #5
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	69ba      	ldr	r2, [r7, #24]
 8006fb0:	0151      	lsls	r1, r2, #5
 8006fb2:	69fa      	ldr	r2, [r7, #28]
 8006fb4:	440a      	add	r2, r1
 8006fb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006fbe:	6113      	str	r3, [r2, #16]
 8006fc0:	e062      	b.n	8007088 <USB_EPStartXfer+0x490>
 8006fc2:	bf00      	nop
 8006fc4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d123      	bne.n	8007018 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	015a      	lsls	r2, r3, #5
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fdc:	691a      	ldr	r2, [r3, #16]
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fe6:	69b9      	ldr	r1, [r7, #24]
 8006fe8:	0148      	lsls	r0, r1, #5
 8006fea:	69f9      	ldr	r1, [r7, #28]
 8006fec:	4401      	add	r1, r0
 8006fee:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	015a      	lsls	r2, r3, #5
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	69ba      	ldr	r2, [r7, #24]
 8007006:	0151      	lsls	r1, r2, #5
 8007008:	69fa      	ldr	r2, [r7, #28]
 800700a:	440a      	add	r2, r1
 800700c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007010:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007014:	6113      	str	r3, [r2, #16]
 8007016:	e037      	b.n	8007088 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	691a      	ldr	r2, [r3, #16]
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	4413      	add	r3, r2
 8007022:	1e5a      	subs	r2, r3, #1
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	fbb2 f3f3 	udiv	r3, r2, r3
 800702c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	8afa      	ldrh	r2, [r7, #22]
 8007034:	fb03 f202 	mul.w	r2, r3, r2
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	4413      	add	r3, r2
 8007044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007048:	691a      	ldr	r2, [r3, #16]
 800704a:	8afb      	ldrh	r3, [r7, #22]
 800704c:	04d9      	lsls	r1, r3, #19
 800704e:	4b38      	ldr	r3, [pc, #224]	@ (8007130 <USB_EPStartXfer+0x538>)
 8007050:	400b      	ands	r3, r1
 8007052:	69b9      	ldr	r1, [r7, #24]
 8007054:	0148      	lsls	r0, r1, #5
 8007056:	69f9      	ldr	r1, [r7, #28]
 8007058:	4401      	add	r1, r0
 800705a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800705e:	4313      	orrs	r3, r2
 8007060:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	015a      	lsls	r2, r3, #5
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	4413      	add	r3, r2
 800706a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800706e:	691a      	ldr	r2, [r3, #16]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	6a1b      	ldr	r3, [r3, #32]
 8007074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007078:	69b9      	ldr	r1, [r7, #24]
 800707a:	0148      	lsls	r0, r1, #5
 800707c:	69f9      	ldr	r1, [r7, #28]
 800707e:	4401      	add	r1, r0
 8007080:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007084:	4313      	orrs	r3, r2
 8007086:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007088:	79fb      	ldrb	r3, [r7, #7]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d10d      	bne.n	80070aa <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d009      	beq.n	80070aa <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	68d9      	ldr	r1, [r3, #12]
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070a6:	460a      	mov	r2, r1
 80070a8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	791b      	ldrb	r3, [r3, #4]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d128      	bne.n	8007104 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d110      	bne.n	80070e4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	69ba      	ldr	r2, [r7, #24]
 80070d2:	0151      	lsls	r1, r2, #5
 80070d4:	69fa      	ldr	r2, [r7, #28]
 80070d6:	440a      	add	r2, r1
 80070d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80070e0:	6013      	str	r3, [r2, #0]
 80070e2:	e00f      	b.n	8007104 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	015a      	lsls	r2, r3, #5
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	69ba      	ldr	r2, [r7, #24]
 80070f4:	0151      	lsls	r1, r2, #5
 80070f6:	69fa      	ldr	r2, [r7, #28]
 80070f8:	440a      	add	r2, r1
 80070fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007102:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	015a      	lsls	r2, r3, #5
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	4413      	add	r3, r2
 800710c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	69ba      	ldr	r2, [r7, #24]
 8007114:	0151      	lsls	r1, r2, #5
 8007116:	69fa      	ldr	r2, [r7, #28]
 8007118:	440a      	add	r2, r1
 800711a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800711e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007122:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3720      	adds	r7, #32
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	1ff80000 	.word	0x1ff80000

08007134 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007134:	b480      	push	{r7}
 8007136:	b087      	sub	sp, #28
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800713e:	2300      	movs	r3, #0
 8007140:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007142:	2300      	movs	r3, #0
 8007144:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	785b      	ldrb	r3, [r3, #1]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d14a      	bne.n	80071e8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	015a      	lsls	r2, r3, #5
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	4413      	add	r3, r2
 800715c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007166:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800716a:	f040 8086 	bne.w	800727a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	015a      	lsls	r2, r3, #5
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	4413      	add	r3, r2
 8007178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	7812      	ldrb	r2, [r2, #0]
 8007182:	0151      	lsls	r1, r2, #5
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	440a      	add	r2, r1
 8007188:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800718c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007190:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	4413      	add	r3, r2
 800719c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	7812      	ldrb	r2, [r2, #0]
 80071a6:	0151      	lsls	r1, r2, #5
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	440a      	add	r2, r1
 80071ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80071b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	3301      	adds	r3, #1
 80071ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f242 7210 	movw	r2, #10000	@ 0x2710
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d902      	bls.n	80071cc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	75fb      	strb	r3, [r7, #23]
          break;
 80071ca:	e056      	b.n	800727a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	015a      	lsls	r2, r3, #5
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	4413      	add	r3, r2
 80071d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071e4:	d0e7      	beq.n	80071b6 <USB_EPStopXfer+0x82>
 80071e6:	e048      	b.n	800727a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	015a      	lsls	r2, r3, #5
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	4413      	add	r3, r2
 80071f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007200:	d13b      	bne.n	800727a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	7812      	ldrb	r2, [r2, #0]
 8007216:	0151      	lsls	r1, r2, #5
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	440a      	add	r2, r1
 800721c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007220:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007224:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	4413      	add	r3, r2
 8007230:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	7812      	ldrb	r2, [r2, #0]
 800723a:	0151      	lsls	r1, r2, #5
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	440a      	add	r2, r1
 8007240:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007244:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007248:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	3301      	adds	r3, #1
 800724e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007256:	4293      	cmp	r3, r2
 8007258:	d902      	bls.n	8007260 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	75fb      	strb	r3, [r7, #23]
          break;
 800725e:	e00c      	b.n	800727a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	015a      	lsls	r2, r3, #5
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	4413      	add	r3, r2
 800726a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007274:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007278:	d0e7      	beq.n	800724a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800727a:	7dfb      	ldrb	r3, [r7, #23]
}
 800727c:	4618      	mov	r0, r3
 800727e:	371c      	adds	r7, #28
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007288:	b480      	push	{r7}
 800728a:	b089      	sub	sp, #36	@ 0x24
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	4611      	mov	r1, r2
 8007294:	461a      	mov	r2, r3
 8007296:	460b      	mov	r3, r1
 8007298:	71fb      	strb	r3, [r7, #7]
 800729a:	4613      	mov	r3, r2
 800729c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80072a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d123      	bne.n	80072f6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80072ae:	88bb      	ldrh	r3, [r7, #4]
 80072b0:	3303      	adds	r3, #3
 80072b2:	089b      	lsrs	r3, r3, #2
 80072b4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80072b6:	2300      	movs	r3, #0
 80072b8:	61bb      	str	r3, [r7, #24]
 80072ba:	e018      	b.n	80072ee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80072bc:	79fb      	ldrb	r3, [r7, #7]
 80072be:	031a      	lsls	r2, r3, #12
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072c8:	461a      	mov	r2, r3
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	6013      	str	r3, [r2, #0]
      pSrc++;
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	3301      	adds	r3, #1
 80072d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	3301      	adds	r3, #1
 80072da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	3301      	adds	r3, #1
 80072e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	3301      	adds	r3, #1
 80072e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	3301      	adds	r3, #1
 80072ec:	61bb      	str	r3, [r7, #24]
 80072ee:	69ba      	ldr	r2, [r7, #24]
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d3e2      	bcc.n	80072bc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3724      	adds	r7, #36	@ 0x24
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007304:	b480      	push	{r7}
 8007306:	b08b      	sub	sp, #44	@ 0x2c
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	4613      	mov	r3, r2
 8007310:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800731a:	88fb      	ldrh	r3, [r7, #6]
 800731c:	089b      	lsrs	r3, r3, #2
 800731e:	b29b      	uxth	r3, r3
 8007320:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007322:	88fb      	ldrh	r3, [r7, #6]
 8007324:	f003 0303 	and.w	r3, r3, #3
 8007328:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800732a:	2300      	movs	r3, #0
 800732c:	623b      	str	r3, [r7, #32]
 800732e:	e014      	b.n	800735a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733a:	601a      	str	r2, [r3, #0]
    pDest++;
 800733c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733e:	3301      	adds	r3, #1
 8007340:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007344:	3301      	adds	r3, #1
 8007346:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734a:	3301      	adds	r3, #1
 800734c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800734e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007350:	3301      	adds	r3, #1
 8007352:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	3301      	adds	r3, #1
 8007358:	623b      	str	r3, [r7, #32]
 800735a:	6a3a      	ldr	r2, [r7, #32]
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	429a      	cmp	r2, r3
 8007360:	d3e6      	bcc.n	8007330 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007362:	8bfb      	ldrh	r3, [r7, #30]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d01e      	beq.n	80073a6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007368:	2300      	movs	r3, #0
 800736a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007372:	461a      	mov	r2, r3
 8007374:	f107 0310 	add.w	r3, r7, #16
 8007378:	6812      	ldr	r2, [r2, #0]
 800737a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800737c:	693a      	ldr	r2, [r7, #16]
 800737e:	6a3b      	ldr	r3, [r7, #32]
 8007380:	b2db      	uxtb	r3, r3
 8007382:	00db      	lsls	r3, r3, #3
 8007384:	fa22 f303 	lsr.w	r3, r2, r3
 8007388:	b2da      	uxtb	r2, r3
 800738a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738c:	701a      	strb	r2, [r3, #0]
      i++;
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	3301      	adds	r3, #1
 8007392:	623b      	str	r3, [r7, #32]
      pDest++;
 8007394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007396:	3301      	adds	r3, #1
 8007398:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800739a:	8bfb      	ldrh	r3, [r7, #30]
 800739c:	3b01      	subs	r3, #1
 800739e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80073a0:	8bfb      	ldrh	r3, [r7, #30]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1ea      	bne.n	800737c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80073a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	372c      	adds	r7, #44	@ 0x2c
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	785b      	ldrb	r3, [r3, #1]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d12c      	bne.n	800742a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	015a      	lsls	r2, r3, #5
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	db12      	blt.n	8007408 <USB_EPSetStall+0x54>
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00f      	beq.n	8007408 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	015a      	lsls	r2, r3, #5
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	4413      	add	r3, r2
 80073f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68ba      	ldr	r2, [r7, #8]
 80073f8:	0151      	lsls	r1, r2, #5
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	440a      	add	r2, r1
 80073fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007402:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007406:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	015a      	lsls	r2, r3, #5
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	4413      	add	r3, r2
 8007410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	0151      	lsls	r1, r2, #5
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	440a      	add	r2, r1
 800741e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007422:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007426:	6013      	str	r3, [r2, #0]
 8007428:	e02b      	b.n	8007482 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	015a      	lsls	r2, r3, #5
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	4413      	add	r3, r2
 8007432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	db12      	blt.n	8007462 <USB_EPSetStall+0xae>
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00f      	beq.n	8007462 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	015a      	lsls	r2, r3, #5
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	4413      	add	r3, r2
 800744a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	0151      	lsls	r1, r2, #5
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	440a      	add	r2, r1
 8007458:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800745c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007460:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	015a      	lsls	r2, r3, #5
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	4413      	add	r3, r2
 800746a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	0151      	lsls	r1, r2, #5
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	440a      	add	r2, r1
 8007478:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800747c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007480:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3714      	adds	r7, #20
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	785b      	ldrb	r3, [r3, #1]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d128      	bne.n	80074fe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	015a      	lsls	r2, r3, #5
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	0151      	lsls	r1, r2, #5
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	440a      	add	r2, r1
 80074c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80074ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	791b      	ldrb	r3, [r3, #4]
 80074d0:	2b03      	cmp	r3, #3
 80074d2:	d003      	beq.n	80074dc <USB_EPClearStall+0x4c>
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	791b      	ldrb	r3, [r3, #4]
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d138      	bne.n	800754e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	015a      	lsls	r2, r3, #5
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	4413      	add	r3, r2
 80074e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	0151      	lsls	r1, r2, #5
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	440a      	add	r2, r1
 80074f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074fa:	6013      	str	r3, [r2, #0]
 80074fc:	e027      	b.n	800754e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	015a      	lsls	r2, r3, #5
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	4413      	add	r3, r2
 8007506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	0151      	lsls	r1, r2, #5
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	440a      	add	r2, r1
 8007514:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007518:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800751c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	791b      	ldrb	r3, [r3, #4]
 8007522:	2b03      	cmp	r3, #3
 8007524:	d003      	beq.n	800752e <USB_EPClearStall+0x9e>
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	791b      	ldrb	r3, [r3, #4]
 800752a:	2b02      	cmp	r3, #2
 800752c:	d10f      	bne.n	800754e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	015a      	lsls	r2, r3, #5
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	4413      	add	r3, r2
 8007536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	0151      	lsls	r1, r2, #5
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	440a      	add	r2, r1
 8007544:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007548:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800754c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3714      	adds	r7, #20
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	460b      	mov	r3, r1
 8007566:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800757a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800757e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	78fb      	ldrb	r3, [r7, #3]
 800758a:	011b      	lsls	r3, r3, #4
 800758c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007590:	68f9      	ldr	r1, [r7, #12]
 8007592:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007596:	4313      	orrs	r3, r2
 8007598:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3714      	adds	r7, #20
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80075c2:	f023 0303 	bic.w	r3, r3, #3
 80075c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075d6:	f023 0302 	bic.w	r3, r3, #2
 80075da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3714      	adds	r7, #20
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b085      	sub	sp, #20
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007604:	f023 0303 	bic.w	r3, r3, #3
 8007608:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007618:	f043 0302 	orr.w	r3, r3, #2
 800761c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	695b      	ldr	r3, [r3, #20]
 8007638:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	4013      	ands	r3, r2
 8007642:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007644:	68fb      	ldr	r3, [r7, #12]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007652:	b480      	push	{r7}
 8007654:	b085      	sub	sp, #20
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800766e:	69db      	ldr	r3, [r3, #28]
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	4013      	ands	r3, r2
 8007674:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	0c1b      	lsrs	r3, r3, #16
}
 800767a:	4618      	mov	r0, r3
 800767c:	3714      	adds	r7, #20
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007686:	b480      	push	{r7}
 8007688:	b085      	sub	sp, #20
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076a2:	69db      	ldr	r3, [r3, #28]
 80076a4:	68ba      	ldr	r2, [r7, #8]
 80076a6:	4013      	ands	r3, r2
 80076a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	b29b      	uxth	r3, r3
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80076ba:	b480      	push	{r7}
 80076bc:	b085      	sub	sp, #20
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	460b      	mov	r3, r1
 80076c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80076ca:	78fb      	ldrb	r3, [r7, #3]
 80076cc:	015a      	lsls	r2, r3, #5
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	4413      	add	r3, r2
 80076d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	68ba      	ldr	r2, [r7, #8]
 80076e4:	4013      	ands	r3, r2
 80076e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80076e8:	68bb      	ldr	r3, [r7, #8]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr

080076f6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80076f6:	b480      	push	{r7}
 80076f8:	b087      	sub	sp, #28
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
 80076fe:	460b      	mov	r3, r1
 8007700:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007718:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800771a:	78fb      	ldrb	r3, [r7, #3]
 800771c:	f003 030f 	and.w	r3, r3, #15
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	fa22 f303 	lsr.w	r3, r2, r3
 8007726:	01db      	lsls	r3, r3, #7
 8007728:	b2db      	uxtb	r3, r3
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	4313      	orrs	r3, r2
 800772e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007730:	78fb      	ldrb	r3, [r7, #3]
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	4413      	add	r3, r2
 8007738:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	4013      	ands	r3, r2
 8007742:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007744:	68bb      	ldr	r3, [r7, #8]
}
 8007746:	4618      	mov	r0, r3
 8007748:	371c      	adds	r7, #28
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007752:	b480      	push	{r7}
 8007754:	b083      	sub	sp, #12
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	f003 0301 	and.w	r3, r3, #1
}
 8007762:	4618      	mov	r0, r3
 8007764:	370c      	adds	r7, #12
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800776e:	b480      	push	{r7}
 8007770:	b085      	sub	sp, #20
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007788:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800778c:	f023 0307 	bic.w	r3, r3, #7
 8007790:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b087      	sub	sp, #28
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	460b      	mov	r3, r1
 80077be:	607a      	str	r2, [r7, #4]
 80077c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	333c      	adds	r3, #60	@ 0x3c
 80077ca:	3304      	adds	r3, #4
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	4a26      	ldr	r2, [pc, #152]	@ (800786c <USB_EP0_OutStart+0xb8>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d90a      	bls.n	80077ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077e8:	d101      	bne.n	80077ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80077ea:	2300      	movs	r3, #0
 80077ec:	e037      	b.n	800785e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077f4:	461a      	mov	r2, r3
 80077f6:	2300      	movs	r3, #0
 80077f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007808:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800780c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800781c:	f043 0318 	orr.w	r3, r3, #24
 8007820:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	697a      	ldr	r2, [r7, #20]
 800782c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007830:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007834:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007836:	7afb      	ldrb	r3, [r7, #11]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d10f      	bne.n	800785c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007842:	461a      	mov	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	697a      	ldr	r2, [r7, #20]
 8007852:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007856:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800785a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	371c      	adds	r7, #28
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	4f54300a 	.word	0x4f54300a

08007870 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007878:	2300      	movs	r3, #0
 800787a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	3301      	adds	r3, #1
 8007880:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007888:	d901      	bls.n	800788e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800788a:	2303      	movs	r3, #3
 800788c:	e01b      	b.n	80078c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	2b00      	cmp	r3, #0
 8007894:	daf2      	bge.n	800787c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007896:	2300      	movs	r3, #0
 8007898:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	f043 0201 	orr.w	r2, r3, #1
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	3301      	adds	r3, #1
 80078aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80078b2:	d901      	bls.n	80078b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80078b4:	2303      	movs	r3, #3
 80078b6:	e006      	b.n	80078c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	f003 0301 	and.w	r3, r3, #1
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d0f0      	beq.n	80078a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3714      	adds	r7, #20
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
	...

080078d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	460b      	mov	r3, r1
 80078de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80078e0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80078e4:	f7f9 fe96 	bl	8001614 <USBD_static_malloc>
 80078e8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d109      	bne.n	8007904 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	32b0      	adds	r2, #176	@ 0xb0
 80078fa:	2100      	movs	r1, #0
 80078fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007900:	2302      	movs	r3, #2
 8007902:	e0d4      	b.n	8007aae <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007904:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007908:	2100      	movs	r1, #0
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f001 ffb4 	bl	8009878 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	32b0      	adds	r2, #176	@ 0xb0
 800791a:	68f9      	ldr	r1, [r7, #12]
 800791c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	32b0      	adds	r2, #176	@ 0xb0
 800792a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	7c1b      	ldrb	r3, [r3, #16]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d138      	bne.n	80079ae <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800793c:	4b5e      	ldr	r3, [pc, #376]	@ (8007ab8 <USBD_CDC_Init+0x1e4>)
 800793e:	7819      	ldrb	r1, [r3, #0]
 8007940:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007944:	2202      	movs	r2, #2
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7f9 fd41 	bl	80013ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800794c:	4b5a      	ldr	r3, [pc, #360]	@ (8007ab8 <USBD_CDC_Init+0x1e4>)
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	f003 020f 	and.w	r2, r3, #15
 8007954:	6879      	ldr	r1, [r7, #4]
 8007956:	4613      	mov	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	440b      	add	r3, r1
 8007960:	3324      	adds	r3, #36	@ 0x24
 8007962:	2201      	movs	r2, #1
 8007964:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007966:	4b55      	ldr	r3, [pc, #340]	@ (8007abc <USBD_CDC_Init+0x1e8>)
 8007968:	7819      	ldrb	r1, [r3, #0]
 800796a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800796e:	2202      	movs	r2, #2
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f7f9 fd2c 	bl	80013ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007976:	4b51      	ldr	r3, [pc, #324]	@ (8007abc <USBD_CDC_Init+0x1e8>)
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	f003 020f 	and.w	r2, r3, #15
 800797e:	6879      	ldr	r1, [r7, #4]
 8007980:	4613      	mov	r3, r2
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	4413      	add	r3, r2
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	440b      	add	r3, r1
 800798a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800798e:	2201      	movs	r2, #1
 8007990:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007992:	4b4b      	ldr	r3, [pc, #300]	@ (8007ac0 <USBD_CDC_Init+0x1ec>)
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	f003 020f 	and.w	r2, r3, #15
 800799a:	6879      	ldr	r1, [r7, #4]
 800799c:	4613      	mov	r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	440b      	add	r3, r1
 80079a6:	3326      	adds	r3, #38	@ 0x26
 80079a8:	2210      	movs	r2, #16
 80079aa:	801a      	strh	r2, [r3, #0]
 80079ac:	e035      	b.n	8007a1a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80079ae:	4b42      	ldr	r3, [pc, #264]	@ (8007ab8 <USBD_CDC_Init+0x1e4>)
 80079b0:	7819      	ldrb	r1, [r3, #0]
 80079b2:	2340      	movs	r3, #64	@ 0x40
 80079b4:	2202      	movs	r2, #2
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7f9 fd09 	bl	80013ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80079bc:	4b3e      	ldr	r3, [pc, #248]	@ (8007ab8 <USBD_CDC_Init+0x1e4>)
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	f003 020f 	and.w	r2, r3, #15
 80079c4:	6879      	ldr	r1, [r7, #4]
 80079c6:	4613      	mov	r3, r2
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	4413      	add	r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	440b      	add	r3, r1
 80079d0:	3324      	adds	r3, #36	@ 0x24
 80079d2:	2201      	movs	r2, #1
 80079d4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80079d6:	4b39      	ldr	r3, [pc, #228]	@ (8007abc <USBD_CDC_Init+0x1e8>)
 80079d8:	7819      	ldrb	r1, [r3, #0]
 80079da:	2340      	movs	r3, #64	@ 0x40
 80079dc:	2202      	movs	r2, #2
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7f9 fcf5 	bl	80013ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80079e4:	4b35      	ldr	r3, [pc, #212]	@ (8007abc <USBD_CDC_Init+0x1e8>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	f003 020f 	and.w	r2, r3, #15
 80079ec:	6879      	ldr	r1, [r7, #4]
 80079ee:	4613      	mov	r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4413      	add	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	440b      	add	r3, r1
 80079f8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80079fc:	2201      	movs	r2, #1
 80079fe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007a00:	4b2f      	ldr	r3, [pc, #188]	@ (8007ac0 <USBD_CDC_Init+0x1ec>)
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	f003 020f 	and.w	r2, r3, #15
 8007a08:	6879      	ldr	r1, [r7, #4]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	4413      	add	r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	440b      	add	r3, r1
 8007a14:	3326      	adds	r3, #38	@ 0x26
 8007a16:	2210      	movs	r2, #16
 8007a18:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007a1a:	4b29      	ldr	r3, [pc, #164]	@ (8007ac0 <USBD_CDC_Init+0x1ec>)
 8007a1c:	7819      	ldrb	r1, [r3, #0]
 8007a1e:	2308      	movs	r3, #8
 8007a20:	2203      	movs	r2, #3
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f7f9 fcd3 	bl	80013ce <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007a28:	4b25      	ldr	r3, [pc, #148]	@ (8007ac0 <USBD_CDC_Init+0x1ec>)
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	f003 020f 	and.w	r2, r3, #15
 8007a30:	6879      	ldr	r1, [r7, #4]
 8007a32:	4613      	mov	r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	4413      	add	r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	440b      	add	r3, r1
 8007a3c:	3324      	adds	r3, #36	@ 0x24
 8007a3e:	2201      	movs	r2, #1
 8007a40:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	33b0      	adds	r3, #176	@ 0xb0
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4413      	add	r3, r2
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d101      	bne.n	8007a7c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007a78:	2302      	movs	r3, #2
 8007a7a:	e018      	b.n	8007aae <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	7c1b      	ldrb	r3, [r3, #16]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10a      	bne.n	8007a9a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a84:	4b0d      	ldr	r3, [pc, #52]	@ (8007abc <USBD_CDC_Init+0x1e8>)
 8007a86:	7819      	ldrb	r1, [r3, #0]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007a8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f7f9 fd8a 	bl	80015ac <USBD_LL_PrepareReceive>
 8007a98:	e008      	b.n	8007aac <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a9a:	4b08      	ldr	r3, [pc, #32]	@ (8007abc <USBD_CDC_Init+0x1e8>)
 8007a9c:	7819      	ldrb	r1, [r3, #0]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007aa4:	2340      	movs	r3, #64	@ 0x40
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7f9 fd80 	bl	80015ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	2000011b 	.word	0x2000011b
 8007abc:	2000011c 	.word	0x2000011c
 8007ac0:	2000011d 	.word	0x2000011d

08007ac4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	460b      	mov	r3, r1
 8007ace:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007ad0:	4b3a      	ldr	r3, [pc, #232]	@ (8007bbc <USBD_CDC_DeInit+0xf8>)
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7f9 fc9f 	bl	800141a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007adc:	4b37      	ldr	r3, [pc, #220]	@ (8007bbc <USBD_CDC_DeInit+0xf8>)
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	f003 020f 	and.w	r2, r3, #15
 8007ae4:	6879      	ldr	r1, [r7, #4]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4413      	add	r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	440b      	add	r3, r1
 8007af0:	3324      	adds	r3, #36	@ 0x24
 8007af2:	2200      	movs	r2, #0
 8007af4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007af6:	4b32      	ldr	r3, [pc, #200]	@ (8007bc0 <USBD_CDC_DeInit+0xfc>)
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	4619      	mov	r1, r3
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f7f9 fc8c 	bl	800141a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007b02:	4b2f      	ldr	r3, [pc, #188]	@ (8007bc0 <USBD_CDC_DeInit+0xfc>)
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	f003 020f 	and.w	r2, r3, #15
 8007b0a:	6879      	ldr	r1, [r7, #4]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	4413      	add	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	440b      	add	r3, r1
 8007b16:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007b1e:	4b29      	ldr	r3, [pc, #164]	@ (8007bc4 <USBD_CDC_DeInit+0x100>)
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	4619      	mov	r1, r3
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f7f9 fc78 	bl	800141a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007b2a:	4b26      	ldr	r3, [pc, #152]	@ (8007bc4 <USBD_CDC_DeInit+0x100>)
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	f003 020f 	and.w	r2, r3, #15
 8007b32:	6879      	ldr	r1, [r7, #4]
 8007b34:	4613      	mov	r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	440b      	add	r3, r1
 8007b3e:	3324      	adds	r3, #36	@ 0x24
 8007b40:	2200      	movs	r2, #0
 8007b42:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007b44:	4b1f      	ldr	r3, [pc, #124]	@ (8007bc4 <USBD_CDC_DeInit+0x100>)
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	f003 020f 	and.w	r2, r3, #15
 8007b4c:	6879      	ldr	r1, [r7, #4]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4413      	add	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	440b      	add	r3, r1
 8007b58:	3326      	adds	r3, #38	@ 0x26
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	32b0      	adds	r2, #176	@ 0xb0
 8007b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d01f      	beq.n	8007bb0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	33b0      	adds	r3, #176	@ 0xb0
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	32b0      	adds	r2, #176	@ 0xb0
 8007b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7f9 fd4c 	bl	8001630 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	32b0      	adds	r2, #176	@ 0xb0
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3708      	adds	r7, #8
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	2000011b 	.word	0x2000011b
 8007bc0:	2000011c 	.word	0x2000011c
 8007bc4:	2000011d 	.word	0x2000011d

08007bc8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b086      	sub	sp, #24
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	32b0      	adds	r2, #176	@ 0xb0
 8007bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007be2:	2300      	movs	r3, #0
 8007be4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007be6:	2300      	movs	r3, #0
 8007be8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d101      	bne.n	8007bf8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e0bf      	b.n	8007d78 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d050      	beq.n	8007ca6 <USBD_CDC_Setup+0xde>
 8007c04:	2b20      	cmp	r3, #32
 8007c06:	f040 80af 	bne.w	8007d68 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	88db      	ldrh	r3, [r3, #6]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d03a      	beq.n	8007c88 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	b25b      	sxtb	r3, r3
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	da1b      	bge.n	8007c54 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	33b0      	adds	r3, #176	@ 0xb0
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	4413      	add	r3, r2
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	683a      	ldr	r2, [r7, #0]
 8007c30:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007c32:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007c34:	683a      	ldr	r2, [r7, #0]
 8007c36:	88d2      	ldrh	r2, [r2, #6]
 8007c38:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	88db      	ldrh	r3, [r3, #6]
 8007c3e:	2b07      	cmp	r3, #7
 8007c40:	bf28      	it	cs
 8007c42:	2307      	movcs	r3, #7
 8007c44:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	89fa      	ldrh	r2, [r7, #14]
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f001 fd93 	bl	8009778 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007c52:	e090      	b.n	8007d76 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	785a      	ldrb	r2, [r3, #1]
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	88db      	ldrh	r3, [r3, #6]
 8007c62:	2b3f      	cmp	r3, #63	@ 0x3f
 8007c64:	d803      	bhi.n	8007c6e <USBD_CDC_Setup+0xa6>
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	88db      	ldrh	r3, [r3, #6]
 8007c6a:	b2da      	uxtb	r2, r3
 8007c6c:	e000      	b.n	8007c70 <USBD_CDC_Setup+0xa8>
 8007c6e:	2240      	movs	r2, #64	@ 0x40
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007c76:	6939      	ldr	r1, [r7, #16]
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007c7e:	461a      	mov	r2, r3
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f001 fda5 	bl	80097d0 <USBD_CtlPrepareRx>
      break;
 8007c86:	e076      	b.n	8007d76 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	33b0      	adds	r3, #176	@ 0xb0
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	4413      	add	r3, r2
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	683a      	ldr	r2, [r7, #0]
 8007c9c:	7850      	ldrb	r0, [r2, #1]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	4798      	blx	r3
      break;
 8007ca4:	e067      	b.n	8007d76 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	785b      	ldrb	r3, [r3, #1]
 8007caa:	2b0b      	cmp	r3, #11
 8007cac:	d851      	bhi.n	8007d52 <USBD_CDC_Setup+0x18a>
 8007cae:	a201      	add	r2, pc, #4	@ (adr r2, 8007cb4 <USBD_CDC_Setup+0xec>)
 8007cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb4:	08007ce5 	.word	0x08007ce5
 8007cb8:	08007d61 	.word	0x08007d61
 8007cbc:	08007d53 	.word	0x08007d53
 8007cc0:	08007d53 	.word	0x08007d53
 8007cc4:	08007d53 	.word	0x08007d53
 8007cc8:	08007d53 	.word	0x08007d53
 8007ccc:	08007d53 	.word	0x08007d53
 8007cd0:	08007d53 	.word	0x08007d53
 8007cd4:	08007d53 	.word	0x08007d53
 8007cd8:	08007d53 	.word	0x08007d53
 8007cdc:	08007d0f 	.word	0x08007d0f
 8007ce0:	08007d39 	.word	0x08007d39
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	2b03      	cmp	r3, #3
 8007cee:	d107      	bne.n	8007d00 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007cf0:	f107 030a 	add.w	r3, r7, #10
 8007cf4:	2202      	movs	r2, #2
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f001 fd3d 	bl	8009778 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007cfe:	e032      	b.n	8007d66 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007d00:	6839      	ldr	r1, [r7, #0]
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f001 fcbb 	bl	800967e <USBD_CtlError>
            ret = USBD_FAIL;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	75fb      	strb	r3, [r7, #23]
          break;
 8007d0c:	e02b      	b.n	8007d66 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b03      	cmp	r3, #3
 8007d18:	d107      	bne.n	8007d2a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007d1a:	f107 030d 	add.w	r3, r7, #13
 8007d1e:	2201      	movs	r2, #1
 8007d20:	4619      	mov	r1, r3
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f001 fd28 	bl	8009778 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d28:	e01d      	b.n	8007d66 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007d2a:	6839      	ldr	r1, [r7, #0]
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f001 fca6 	bl	800967e <USBD_CtlError>
            ret = USBD_FAIL;
 8007d32:	2303      	movs	r3, #3
 8007d34:	75fb      	strb	r3, [r7, #23]
          break;
 8007d36:	e016      	b.n	8007d66 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b03      	cmp	r3, #3
 8007d42:	d00f      	beq.n	8007d64 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007d44:	6839      	ldr	r1, [r7, #0]
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f001 fc99 	bl	800967e <USBD_CtlError>
            ret = USBD_FAIL;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007d50:	e008      	b.n	8007d64 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f001 fc92 	bl	800967e <USBD_CtlError>
          ret = USBD_FAIL;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	75fb      	strb	r3, [r7, #23]
          break;
 8007d5e:	e002      	b.n	8007d66 <USBD_CDC_Setup+0x19e>
          break;
 8007d60:	bf00      	nop
 8007d62:	e008      	b.n	8007d76 <USBD_CDC_Setup+0x1ae>
          break;
 8007d64:	bf00      	nop
      }
      break;
 8007d66:	e006      	b.n	8007d76 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007d68:	6839      	ldr	r1, [r7, #0]
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f001 fc87 	bl	800967e <USBD_CtlError>
      ret = USBD_FAIL;
 8007d70:	2303      	movs	r3, #3
 8007d72:	75fb      	strb	r3, [r7, #23]
      break;
 8007d74:	bf00      	nop
  }

  return (uint8_t)ret;
 8007d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3718      	adds	r7, #24
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007d92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	32b0      	adds	r2, #176	@ 0xb0
 8007d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d101      	bne.n	8007daa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007da6:	2303      	movs	r3, #3
 8007da8:	e065      	b.n	8007e76 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	32b0      	adds	r2, #176	@ 0xb0
 8007db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007dba:	78fb      	ldrb	r3, [r7, #3]
 8007dbc:	f003 020f 	and.w	r2, r3, #15
 8007dc0:	6879      	ldr	r1, [r7, #4]
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	4413      	add	r3, r2
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	440b      	add	r3, r1
 8007dcc:	3318      	adds	r3, #24
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d02f      	beq.n	8007e34 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007dd4:	78fb      	ldrb	r3, [r7, #3]
 8007dd6:	f003 020f 	and.w	r2, r3, #15
 8007dda:	6879      	ldr	r1, [r7, #4]
 8007ddc:	4613      	mov	r3, r2
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	4413      	add	r3, r2
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	440b      	add	r3, r1
 8007de6:	3318      	adds	r3, #24
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	78fb      	ldrb	r3, [r7, #3]
 8007dec:	f003 010f 	and.w	r1, r3, #15
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	460b      	mov	r3, r1
 8007df4:	00db      	lsls	r3, r3, #3
 8007df6:	440b      	add	r3, r1
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4403      	add	r3, r0
 8007dfc:	331c      	adds	r3, #28
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	fbb2 f1f3 	udiv	r1, r2, r3
 8007e04:	fb01 f303 	mul.w	r3, r1, r3
 8007e08:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d112      	bne.n	8007e34 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007e0e:	78fb      	ldrb	r3, [r7, #3]
 8007e10:	f003 020f 	and.w	r2, r3, #15
 8007e14:	6879      	ldr	r1, [r7, #4]
 8007e16:	4613      	mov	r3, r2
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	4413      	add	r3, r2
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	440b      	add	r3, r1
 8007e20:	3318      	adds	r3, #24
 8007e22:	2200      	movs	r2, #0
 8007e24:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007e26:	78f9      	ldrb	r1, [r7, #3]
 8007e28:	2300      	movs	r3, #0
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f7f9 fb9c 	bl	800156a <USBD_LL_Transmit>
 8007e32:	e01f      	b.n	8007e74 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	33b0      	adds	r3, #176	@ 0xb0
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	4413      	add	r3, r2
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d010      	beq.n	8007e74 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	33b0      	adds	r3, #176	@ 0xb0
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	4413      	add	r3, r2
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007e70:	78fa      	ldrb	r2, [r7, #3]
 8007e72:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b084      	sub	sp, #16
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
 8007e86:	460b      	mov	r3, r1
 8007e88:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	32b0      	adds	r2, #176	@ 0xb0
 8007e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e98:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	32b0      	adds	r2, #176	@ 0xb0
 8007ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007eac:	2303      	movs	r3, #3
 8007eae:	e01a      	b.n	8007ee6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007eb0:	78fb      	ldrb	r3, [r7, #3]
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f7f9 fb9a 	bl	80015ee <USBD_LL_GetRxDataSize>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	33b0      	adds	r3, #176	@ 0xb0
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007ee0:	4611      	mov	r1, r2
 8007ee2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b084      	sub	sp, #16
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	32b0      	adds	r2, #176	@ 0xb0
 8007f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f04:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d101      	bne.n	8007f10 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e024      	b.n	8007f5a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	33b0      	adds	r3, #176	@ 0xb0
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	4413      	add	r3, r2
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d019      	beq.n	8007f58 <USBD_CDC_EP0_RxReady+0x6a>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007f2a:	2bff      	cmp	r3, #255	@ 0xff
 8007f2c:	d014      	beq.n	8007f58 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	33b0      	adds	r3, #176	@ 0xb0
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	4413      	add	r3, r2
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007f46:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007f4e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	22ff      	movs	r2, #255	@ 0xff
 8007f54:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
	...

08007f64 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b086      	sub	sp, #24
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007f6c:	2182      	movs	r1, #130	@ 0x82
 8007f6e:	4818      	ldr	r0, [pc, #96]	@ (8007fd0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007f70:	f000 fd4f 	bl	8008a12 <USBD_GetEpDesc>
 8007f74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007f76:	2101      	movs	r1, #1
 8007f78:	4815      	ldr	r0, [pc, #84]	@ (8007fd0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007f7a:	f000 fd4a 	bl	8008a12 <USBD_GetEpDesc>
 8007f7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007f80:	2181      	movs	r1, #129	@ 0x81
 8007f82:	4813      	ldr	r0, [pc, #76]	@ (8007fd0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007f84:	f000 fd45 	bl	8008a12 <USBD_GetEpDesc>
 8007f88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d002      	beq.n	8007f96 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	2210      	movs	r2, #16
 8007f94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d006      	beq.n	8007faa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fa4:	711a      	strb	r2, [r3, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d006      	beq.n	8007fbe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fb8:	711a      	strb	r2, [r3, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2243      	movs	r2, #67	@ 0x43
 8007fc2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007fc4:	4b02      	ldr	r3, [pc, #8]	@ (8007fd0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3718      	adds	r7, #24
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	200000d8 	.word	0x200000d8

08007fd4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b086      	sub	sp, #24
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007fdc:	2182      	movs	r1, #130	@ 0x82
 8007fde:	4818      	ldr	r0, [pc, #96]	@ (8008040 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007fe0:	f000 fd17 	bl	8008a12 <USBD_GetEpDesc>
 8007fe4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007fe6:	2101      	movs	r1, #1
 8007fe8:	4815      	ldr	r0, [pc, #84]	@ (8008040 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007fea:	f000 fd12 	bl	8008a12 <USBD_GetEpDesc>
 8007fee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ff0:	2181      	movs	r1, #129	@ 0x81
 8007ff2:	4813      	ldr	r0, [pc, #76]	@ (8008040 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ff4:	f000 fd0d 	bl	8008a12 <USBD_GetEpDesc>
 8007ff8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d002      	beq.n	8008006 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	2210      	movs	r2, #16
 8008004:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d006      	beq.n	800801a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	2200      	movs	r2, #0
 8008010:	711a      	strb	r2, [r3, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	f042 0202 	orr.w	r2, r2, #2
 8008018:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d006      	beq.n	800802e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2200      	movs	r2, #0
 8008024:	711a      	strb	r2, [r3, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	f042 0202 	orr.w	r2, r2, #2
 800802c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2243      	movs	r2, #67	@ 0x43
 8008032:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008034:	4b02      	ldr	r3, [pc, #8]	@ (8008040 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008036:	4618      	mov	r0, r3
 8008038:	3718      	adds	r7, #24
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	200000d8 	.word	0x200000d8

08008044 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b086      	sub	sp, #24
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800804c:	2182      	movs	r1, #130	@ 0x82
 800804e:	4818      	ldr	r0, [pc, #96]	@ (80080b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008050:	f000 fcdf 	bl	8008a12 <USBD_GetEpDesc>
 8008054:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008056:	2101      	movs	r1, #1
 8008058:	4815      	ldr	r0, [pc, #84]	@ (80080b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800805a:	f000 fcda 	bl	8008a12 <USBD_GetEpDesc>
 800805e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008060:	2181      	movs	r1, #129	@ 0x81
 8008062:	4813      	ldr	r0, [pc, #76]	@ (80080b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008064:	f000 fcd5 	bl	8008a12 <USBD_GetEpDesc>
 8008068:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d002      	beq.n	8008076 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	2210      	movs	r2, #16
 8008074:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d006      	beq.n	800808a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	2200      	movs	r2, #0
 8008080:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008084:	711a      	strb	r2, [r3, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d006      	beq.n	800809e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008098:	711a      	strb	r2, [r3, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2243      	movs	r2, #67	@ 0x43
 80080a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80080a4:	4b02      	ldr	r3, [pc, #8]	@ (80080b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3718      	adds	r7, #24
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	200000d8 	.word	0x200000d8

080080b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	220a      	movs	r2, #10
 80080c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80080c2:	4b03      	ldr	r3, [pc, #12]	@ (80080d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr
 80080d0:	20000094 	.word	0x20000094

080080d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d101      	bne.n	80080e8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80080e4:	2303      	movs	r3, #3
 80080e6:	e009      	b.n	80080fc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	33b0      	adds	r3, #176	@ 0xb0
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008108:	b480      	push	{r7}
 800810a:	b087      	sub	sp, #28
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	32b0      	adds	r2, #176	@ 0xb0
 800811e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008122:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d101      	bne.n	800812e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800812a:	2303      	movs	r3, #3
 800812c:	e008      	b.n	8008140 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	68ba      	ldr	r2, [r7, #8]
 8008132:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	371c      	adds	r7, #28
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	32b0      	adds	r2, #176	@ 0xb0
 8008160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008164:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d101      	bne.n	8008170 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800816c:	2303      	movs	r3, #3
 800816e:	e004      	b.n	800817a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	3714      	adds	r7, #20
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr
	...

08008188 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	32b0      	adds	r2, #176	@ 0xb0
 800819a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800819e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80081a0:	2301      	movs	r3, #1
 80081a2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d101      	bne.n	80081ae <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80081aa:	2303      	movs	r3, #3
 80081ac:	e025      	b.n	80081fa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d11f      	bne.n	80081f8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80081c0:	4b10      	ldr	r3, [pc, #64]	@ (8008204 <USBD_CDC_TransmitPacket+0x7c>)
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	f003 020f 	and.w	r2, r3, #15
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	4613      	mov	r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4413      	add	r3, r2
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	4403      	add	r3, r0
 80081da:	3318      	adds	r3, #24
 80081dc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80081de:	4b09      	ldr	r3, [pc, #36]	@ (8008204 <USBD_CDC_TransmitPacket+0x7c>)
 80081e0:	7819      	ldrb	r1, [r3, #0]
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f7f9 f9bb 	bl	800156a <USBD_LL_Transmit>

    ret = USBD_OK;
 80081f4:	2300      	movs	r3, #0
 80081f6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80081f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	2000011b 	.word	0x2000011b

08008208 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	32b0      	adds	r2, #176	@ 0xb0
 800821a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800821e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	32b0      	adds	r2, #176	@ 0xb0
 800822a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d101      	bne.n	8008236 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008232:	2303      	movs	r3, #3
 8008234:	e018      	b.n	8008268 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	7c1b      	ldrb	r3, [r3, #16]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10a      	bne.n	8008254 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800823e:	4b0c      	ldr	r3, [pc, #48]	@ (8008270 <USBD_CDC_ReceivePacket+0x68>)
 8008240:	7819      	ldrb	r1, [r3, #0]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008248:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f7f9 f9ad 	bl	80015ac <USBD_LL_PrepareReceive>
 8008252:	e008      	b.n	8008266 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008254:	4b06      	ldr	r3, [pc, #24]	@ (8008270 <USBD_CDC_ReceivePacket+0x68>)
 8008256:	7819      	ldrb	r1, [r3, #0]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800825e:	2340      	movs	r3, #64	@ 0x40
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f7f9 f9a3 	bl	80015ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	2000011c 	.word	0x2000011c

08008274 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b086      	sub	sp, #24
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	4613      	mov	r3, r2
 8008280:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d101      	bne.n	800828c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008288:	2303      	movs	r3, #3
 800828a:	e01f      	b.n	80082cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2200      	movs	r2, #0
 80082a0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d003      	beq.n	80082b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	68ba      	ldr	r2, [r7, #8]
 80082ae:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2201      	movs	r2, #1
 80082b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	79fa      	ldrb	r2, [r7, #7]
 80082be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	f7f9 f81d 	bl	8001300 <USBD_LL_Init>
 80082c6:	4603      	mov	r3, r0
 80082c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80082ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3718      	adds	r7, #24
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082de:	2300      	movs	r3, #0
 80082e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d101      	bne.n	80082ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80082e8:	2303      	movs	r3, #3
 80082ea:	e025      	b.n	8008338 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	683a      	ldr	r2, [r7, #0]
 80082f0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	32ae      	adds	r2, #174	@ 0xae
 80082fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00f      	beq.n	8008328 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	32ae      	adds	r2, #174	@ 0xae
 8008312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008318:	f107 020e 	add.w	r2, r7, #14
 800831c:	4610      	mov	r0, r2
 800831e:	4798      	blx	r3
 8008320:	4602      	mov	r2, r0
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800832e:	1c5a      	adds	r2, r3, #1
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3710      	adds	r7, #16
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f7f9 f825 	bl	8001398 <USBD_LL_Start>
 800834e:	4603      	mov	r3, r0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008360:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008362:	4618      	mov	r0, r3
 8008364:	370c      	adds	r7, #12
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b084      	sub	sp, #16
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
 8008376:	460b      	mov	r3, r1
 8008378:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800837a:	2300      	movs	r3, #0
 800837c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008384:	2b00      	cmp	r3, #0
 8008386:	d009      	beq.n	800839c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	78fa      	ldrb	r2, [r7, #3]
 8008392:	4611      	mov	r1, r2
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	4798      	blx	r3
 8008398:	4603      	mov	r3, r0
 800839a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800839c:	7bfb      	ldrb	r3, [r7, #15]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b084      	sub	sp, #16
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
 80083ae:	460b      	mov	r3, r1
 80083b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80083b2:	2300      	movs	r3, #0
 80083b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	78fa      	ldrb	r2, [r7, #3]
 80083c0:	4611      	mov	r1, r2
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	4798      	blx	r3
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d001      	beq.n	80083d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80083cc:	2303      	movs	r3, #3
 80083ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80083d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b084      	sub	sp, #16
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
 80083e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80083ea:	6839      	ldr	r1, [r7, #0]
 80083ec:	4618      	mov	r0, r3
 80083ee:	f001 f90c 	bl	800960a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008400:	461a      	mov	r2, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800840e:	f003 031f 	and.w	r3, r3, #31
 8008412:	2b02      	cmp	r3, #2
 8008414:	d01a      	beq.n	800844c <USBD_LL_SetupStage+0x72>
 8008416:	2b02      	cmp	r3, #2
 8008418:	d822      	bhi.n	8008460 <USBD_LL_SetupStage+0x86>
 800841a:	2b00      	cmp	r3, #0
 800841c:	d002      	beq.n	8008424 <USBD_LL_SetupStage+0x4a>
 800841e:	2b01      	cmp	r3, #1
 8008420:	d00a      	beq.n	8008438 <USBD_LL_SetupStage+0x5e>
 8008422:	e01d      	b.n	8008460 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800842a:	4619      	mov	r1, r3
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fb63 	bl	8008af8 <USBD_StdDevReq>
 8008432:	4603      	mov	r3, r0
 8008434:	73fb      	strb	r3, [r7, #15]
      break;
 8008436:	e020      	b.n	800847a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800843e:	4619      	mov	r1, r3
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 fbcb 	bl	8008bdc <USBD_StdItfReq>
 8008446:	4603      	mov	r3, r0
 8008448:	73fb      	strb	r3, [r7, #15]
      break;
 800844a:	e016      	b.n	800847a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008452:	4619      	mov	r1, r3
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 fc2d 	bl	8008cb4 <USBD_StdEPReq>
 800845a:	4603      	mov	r3, r0
 800845c:	73fb      	strb	r3, [r7, #15]
      break;
 800845e:	e00c      	b.n	800847a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008466:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800846a:	b2db      	uxtb	r3, r3
 800846c:	4619      	mov	r1, r3
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f7f8 fff2 	bl	8001458 <USBD_LL_StallEP>
 8008474:	4603      	mov	r3, r0
 8008476:	73fb      	strb	r3, [r7, #15]
      break;
 8008478:	bf00      	nop
  }

  return ret;
 800847a:	7bfb      	ldrb	r3, [r7, #15]
}
 800847c:	4618      	mov	r0, r3
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	460b      	mov	r3, r1
 800848e:	607a      	str	r2, [r7, #4]
 8008490:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008492:	2300      	movs	r3, #0
 8008494:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008496:	7afb      	ldrb	r3, [r7, #11]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d16e      	bne.n	800857a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80084a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80084aa:	2b03      	cmp	r3, #3
 80084ac:	f040 8098 	bne.w	80085e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	689a      	ldr	r2, [r3, #8]
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d913      	bls.n	80084e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	689a      	ldr	r2, [r3, #8]
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	1ad2      	subs	r2, r2, r3
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	68da      	ldr	r2, [r3, #12]
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	4293      	cmp	r3, r2
 80084d4:	bf28      	it	cs
 80084d6:	4613      	movcs	r3, r2
 80084d8:	461a      	mov	r2, r3
 80084da:	6879      	ldr	r1, [r7, #4]
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f001 f994 	bl	800980a <USBD_CtlContinueRx>
 80084e2:	e07d      	b.n	80085e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80084ea:	f003 031f 	and.w	r3, r3, #31
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d014      	beq.n	800851c <USBD_LL_DataOutStage+0x98>
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d81d      	bhi.n	8008532 <USBD_LL_DataOutStage+0xae>
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d002      	beq.n	8008500 <USBD_LL_DataOutStage+0x7c>
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d003      	beq.n	8008506 <USBD_LL_DataOutStage+0x82>
 80084fe:	e018      	b.n	8008532 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008500:	2300      	movs	r3, #0
 8008502:	75bb      	strb	r3, [r7, #22]
            break;
 8008504:	e018      	b.n	8008538 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800850c:	b2db      	uxtb	r3, r3
 800850e:	4619      	mov	r1, r3
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f000 fa64 	bl	80089de <USBD_CoreFindIF>
 8008516:	4603      	mov	r3, r0
 8008518:	75bb      	strb	r3, [r7, #22]
            break;
 800851a:	e00d      	b.n	8008538 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008522:	b2db      	uxtb	r3, r3
 8008524:	4619      	mov	r1, r3
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f000 fa66 	bl	80089f8 <USBD_CoreFindEP>
 800852c:	4603      	mov	r3, r0
 800852e:	75bb      	strb	r3, [r7, #22]
            break;
 8008530:	e002      	b.n	8008538 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008532:	2300      	movs	r3, #0
 8008534:	75bb      	strb	r3, [r7, #22]
            break;
 8008536:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008538:	7dbb      	ldrb	r3, [r7, #22]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d119      	bne.n	8008572 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b03      	cmp	r3, #3
 8008548:	d113      	bne.n	8008572 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800854a:	7dba      	ldrb	r2, [r7, #22]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	32ae      	adds	r2, #174	@ 0xae
 8008550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00b      	beq.n	8008572 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800855a:	7dba      	ldrb	r2, [r7, #22]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008562:	7dba      	ldrb	r2, [r7, #22]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	32ae      	adds	r2, #174	@ 0xae
 8008568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f001 f95a 	bl	800982c <USBD_CtlSendStatus>
 8008578:	e032      	b.n	80085e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800857a:	7afb      	ldrb	r3, [r7, #11]
 800857c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008580:	b2db      	uxtb	r3, r3
 8008582:	4619      	mov	r1, r3
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f000 fa37 	bl	80089f8 <USBD_CoreFindEP>
 800858a:	4603      	mov	r3, r0
 800858c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800858e:	7dbb      	ldrb	r3, [r7, #22]
 8008590:	2bff      	cmp	r3, #255	@ 0xff
 8008592:	d025      	beq.n	80085e0 <USBD_LL_DataOutStage+0x15c>
 8008594:	7dbb      	ldrb	r3, [r7, #22]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d122      	bne.n	80085e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	2b03      	cmp	r3, #3
 80085a4:	d117      	bne.n	80085d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80085a6:	7dba      	ldrb	r2, [r7, #22]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	32ae      	adds	r2, #174	@ 0xae
 80085ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b0:	699b      	ldr	r3, [r3, #24]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00f      	beq.n	80085d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80085b6:	7dba      	ldrb	r2, [r7, #22]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80085be:	7dba      	ldrb	r2, [r7, #22]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	32ae      	adds	r2, #174	@ 0xae
 80085c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	7afa      	ldrb	r2, [r7, #11]
 80085cc:	4611      	mov	r1, r2
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	4798      	blx	r3
 80085d2:	4603      	mov	r3, r0
 80085d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80085d6:	7dfb      	ldrb	r3, [r7, #23]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d001      	beq.n	80085e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80085dc:	7dfb      	ldrb	r3, [r7, #23]
 80085de:	e000      	b.n	80085e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3718      	adds	r7, #24
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b086      	sub	sp, #24
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	60f8      	str	r0, [r7, #12]
 80085f2:	460b      	mov	r3, r1
 80085f4:	607a      	str	r2, [r7, #4]
 80085f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80085f8:	7afb      	ldrb	r3, [r7, #11]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d16f      	bne.n	80086de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	3314      	adds	r3, #20
 8008602:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800860a:	2b02      	cmp	r3, #2
 800860c:	d15a      	bne.n	80086c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	689a      	ldr	r2, [r3, #8]
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	429a      	cmp	r2, r3
 8008618:	d914      	bls.n	8008644 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	689a      	ldr	r2, [r3, #8]
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	1ad2      	subs	r2, r2, r3
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	461a      	mov	r2, r3
 800862e:	6879      	ldr	r1, [r7, #4]
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f001 f8bc 	bl	80097ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008636:	2300      	movs	r3, #0
 8008638:	2200      	movs	r2, #0
 800863a:	2100      	movs	r1, #0
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f7f8 ffb5 	bl	80015ac <USBD_LL_PrepareReceive>
 8008642:	e03f      	b.n	80086c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	68da      	ldr	r2, [r3, #12]
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	429a      	cmp	r2, r3
 800864e:	d11c      	bne.n	800868a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	685a      	ldr	r2, [r3, #4]
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008658:	429a      	cmp	r2, r3
 800865a:	d316      	bcc.n	800868a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	685a      	ldr	r2, [r3, #4]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008666:	429a      	cmp	r2, r3
 8008668:	d20f      	bcs.n	800868a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800866a:	2200      	movs	r2, #0
 800866c:	2100      	movs	r1, #0
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	f001 f89d 	bl	80097ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800867c:	2300      	movs	r3, #0
 800867e:	2200      	movs	r2, #0
 8008680:	2100      	movs	r1, #0
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	f7f8 ff92 	bl	80015ac <USBD_LL_PrepareReceive>
 8008688:	e01c      	b.n	80086c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008690:	b2db      	uxtb	r3, r3
 8008692:	2b03      	cmp	r3, #3
 8008694:	d10f      	bne.n	80086b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d009      	beq.n	80086b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80086b6:	2180      	movs	r1, #128	@ 0x80
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f7f8 fecd 	bl	8001458 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f001 f8c7 	bl	8009852 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d03a      	beq.n	8008744 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f7ff fe42 	bl	8008358 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80086dc:	e032      	b.n	8008744 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80086de:	7afb      	ldrb	r3, [r7, #11]
 80086e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	4619      	mov	r1, r3
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f000 f985 	bl	80089f8 <USBD_CoreFindEP>
 80086ee:	4603      	mov	r3, r0
 80086f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086f2:	7dfb      	ldrb	r3, [r7, #23]
 80086f4:	2bff      	cmp	r3, #255	@ 0xff
 80086f6:	d025      	beq.n	8008744 <USBD_LL_DataInStage+0x15a>
 80086f8:	7dfb      	ldrb	r3, [r7, #23]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d122      	bne.n	8008744 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b03      	cmp	r3, #3
 8008708:	d11c      	bne.n	8008744 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800870a:	7dfa      	ldrb	r2, [r7, #23]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	32ae      	adds	r2, #174	@ 0xae
 8008710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008714:	695b      	ldr	r3, [r3, #20]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d014      	beq.n	8008744 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800871a:	7dfa      	ldrb	r2, [r7, #23]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008722:	7dfa      	ldrb	r2, [r7, #23]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	32ae      	adds	r2, #174	@ 0xae
 8008728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	7afa      	ldrb	r2, [r7, #11]
 8008730:	4611      	mov	r1, r2
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	4798      	blx	r3
 8008736:	4603      	mov	r3, r0
 8008738:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800873a:	7dbb      	ldrb	r3, [r7, #22]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d001      	beq.n	8008744 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008740:	7dbb      	ldrb	r3, [r7, #22]
 8008742:	e000      	b.n	8008746 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3718      	adds	r7, #24
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b084      	sub	sp, #16
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008756:	2300      	movs	r3, #0
 8008758:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2201      	movs	r2, #1
 800875e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008786:	2b00      	cmp	r3, #0
 8008788:	d014      	beq.n	80087b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00e      	beq.n	80087b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	6852      	ldr	r2, [r2, #4]
 80087a2:	b2d2      	uxtb	r2, r2
 80087a4:	4611      	mov	r1, r2
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	4798      	blx	r3
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d001      	beq.n	80087b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80087b0:	2303      	movs	r3, #3
 80087b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087b4:	2340      	movs	r3, #64	@ 0x40
 80087b6:	2200      	movs	r2, #0
 80087b8:	2100      	movs	r1, #0
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f7f8 fe07 	bl	80013ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2240      	movs	r2, #64	@ 0x40
 80087cc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087d0:	2340      	movs	r3, #64	@ 0x40
 80087d2:	2200      	movs	r2, #0
 80087d4:	2180      	movs	r1, #128	@ 0x80
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f7f8 fdf9 	bl	80013ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2240      	movs	r2, #64	@ 0x40
 80087e6:	621a      	str	r2, [r3, #32]

  return ret;
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80087f2:	b480      	push	{r7}
 80087f4:	b083      	sub	sp, #12
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
 80087fa:	460b      	mov	r3, r1
 80087fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	78fa      	ldrb	r2, [r7, #3]
 8008802:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	370c      	adds	r7, #12
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr

08008812 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008812:	b480      	push	{r7}
 8008814:	b083      	sub	sp, #12
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008820:	b2db      	uxtb	r3, r3
 8008822:	2b04      	cmp	r3, #4
 8008824:	d006      	beq.n	8008834 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800882c:	b2da      	uxtb	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2204      	movs	r2, #4
 8008838:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	370c      	adds	r7, #12
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr

0800884a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800884a:	b480      	push	{r7}
 800884c:	b083      	sub	sp, #12
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b04      	cmp	r3, #4
 800885c:	d106      	bne.n	800886c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008864:	b2da      	uxtb	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	370c      	adds	r7, #12
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr

0800887a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b082      	sub	sp, #8
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b03      	cmp	r3, #3
 800888c:	d110      	bne.n	80088b0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00b      	beq.n	80088b0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800889e:	69db      	ldr	r3, [r3, #28]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d005      	beq.n	80088b0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088aa:	69db      	ldr	r3, [r3, #28]
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b082      	sub	sp, #8
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	460b      	mov	r3, r1
 80088c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	32ae      	adds	r2, #174	@ 0xae
 80088d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d101      	bne.n	80088dc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80088d8:	2303      	movs	r3, #3
 80088da:	e01c      	b.n	8008916 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	2b03      	cmp	r3, #3
 80088e6:	d115      	bne.n	8008914 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	32ae      	adds	r2, #174	@ 0xae
 80088f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088f6:	6a1b      	ldr	r3, [r3, #32]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00b      	beq.n	8008914 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	32ae      	adds	r2, #174	@ 0xae
 8008906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800890a:	6a1b      	ldr	r3, [r3, #32]
 800890c:	78fa      	ldrb	r2, [r7, #3]
 800890e:	4611      	mov	r1, r2
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b082      	sub	sp, #8
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	460b      	mov	r3, r1
 8008928:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	32ae      	adds	r2, #174	@ 0xae
 8008934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d101      	bne.n	8008940 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800893c:	2303      	movs	r3, #3
 800893e:	e01c      	b.n	800897a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008946:	b2db      	uxtb	r3, r3
 8008948:	2b03      	cmp	r3, #3
 800894a:	d115      	bne.n	8008978 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	32ae      	adds	r2, #174	@ 0xae
 8008956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800895a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00b      	beq.n	8008978 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	32ae      	adds	r2, #174	@ 0xae
 800896a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800896e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008970:	78fa      	ldrb	r2, [r7, #3]
 8008972:	4611      	mov	r1, r2
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008982:	b480      	push	{r7}
 8008984:	b083      	sub	sp, #12
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80089a0:	2300      	movs	r3, #0
 80089a2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00e      	beq.n	80089d4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	6852      	ldr	r2, [r2, #4]
 80089c2:	b2d2      	uxtb	r2, r2
 80089c4:	4611      	mov	r1, r2
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	4798      	blx	r3
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d001      	beq.n	80089d4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80089d0:	2303      	movs	r3, #3
 80089d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80089de:	b480      	push	{r7}
 80089e0:	b083      	sub	sp, #12
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
 80089e6:	460b      	mov	r3, r1
 80089e8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80089ea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	460b      	mov	r3, r1
 8008a02:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008a04:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	370c      	adds	r7, #12
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr

08008a12 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b086      	sub	sp, #24
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008a26:	2300      	movs	r3, #0
 8008a28:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	885b      	ldrh	r3, [r3, #2]
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	7812      	ldrb	r2, [r2, #0]
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d91f      	bls.n	8008a78 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008a3e:	e013      	b.n	8008a68 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008a40:	f107 030a 	add.w	r3, r7, #10
 8008a44:	4619      	mov	r1, r3
 8008a46:	6978      	ldr	r0, [r7, #20]
 8008a48:	f000 f81b 	bl	8008a82 <USBD_GetNextDesc>
 8008a4c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	785b      	ldrb	r3, [r3, #1]
 8008a52:	2b05      	cmp	r3, #5
 8008a54:	d108      	bne.n	8008a68 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	789b      	ldrb	r3, [r3, #2]
 8008a5e:	78fa      	ldrb	r2, [r7, #3]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d008      	beq.n	8008a76 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008a64:	2300      	movs	r3, #0
 8008a66:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	885b      	ldrh	r3, [r3, #2]
 8008a6c:	b29a      	uxth	r2, r3
 8008a6e:	897b      	ldrh	r3, [r7, #10]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d8e5      	bhi.n	8008a40 <USBD_GetEpDesc+0x2e>
 8008a74:	e000      	b.n	8008a78 <USBD_GetEpDesc+0x66>
          break;
 8008a76:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008a78:	693b      	ldr	r3, [r7, #16]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3718      	adds	r7, #24
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008a82:	b480      	push	{r7}
 8008a84:	b085      	sub	sp, #20
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	881b      	ldrh	r3, [r3, #0]
 8008a94:	68fa      	ldr	r2, [r7, #12]
 8008a96:	7812      	ldrb	r2, [r2, #0]
 8008a98:	4413      	add	r3, r2
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008aac:	68fb      	ldr	r3, [r7, #12]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr

08008aba <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008aba:	b480      	push	{r7}
 8008abc:	b087      	sub	sp, #28
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008ad8:	8a3b      	ldrh	r3, [r7, #16]
 8008ada:	021b      	lsls	r3, r3, #8
 8008adc:	b21a      	sxth	r2, r3
 8008ade:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	b21b      	sxth	r3, r3
 8008ae6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008ae8:	89fb      	ldrh	r3, [r7, #14]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	371c      	adds	r7, #28
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
	...

08008af8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b02:	2300      	movs	r3, #0
 8008b04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b0e:	2b40      	cmp	r3, #64	@ 0x40
 8008b10:	d005      	beq.n	8008b1e <USBD_StdDevReq+0x26>
 8008b12:	2b40      	cmp	r3, #64	@ 0x40
 8008b14:	d857      	bhi.n	8008bc6 <USBD_StdDevReq+0xce>
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00f      	beq.n	8008b3a <USBD_StdDevReq+0x42>
 8008b1a:	2b20      	cmp	r3, #32
 8008b1c:	d153      	bne.n	8008bc6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	32ae      	adds	r2, #174	@ 0xae
 8008b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	6839      	ldr	r1, [r7, #0]
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	4798      	blx	r3
 8008b34:	4603      	mov	r3, r0
 8008b36:	73fb      	strb	r3, [r7, #15]
      break;
 8008b38:	e04a      	b.n	8008bd0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	785b      	ldrb	r3, [r3, #1]
 8008b3e:	2b09      	cmp	r3, #9
 8008b40:	d83b      	bhi.n	8008bba <USBD_StdDevReq+0xc2>
 8008b42:	a201      	add	r2, pc, #4	@ (adr r2, 8008b48 <USBD_StdDevReq+0x50>)
 8008b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b48:	08008b9d 	.word	0x08008b9d
 8008b4c:	08008bb1 	.word	0x08008bb1
 8008b50:	08008bbb 	.word	0x08008bbb
 8008b54:	08008ba7 	.word	0x08008ba7
 8008b58:	08008bbb 	.word	0x08008bbb
 8008b5c:	08008b7b 	.word	0x08008b7b
 8008b60:	08008b71 	.word	0x08008b71
 8008b64:	08008bbb 	.word	0x08008bbb
 8008b68:	08008b93 	.word	0x08008b93
 8008b6c:	08008b85 	.word	0x08008b85
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008b70:	6839      	ldr	r1, [r7, #0]
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fa3c 	bl	8008ff0 <USBD_GetDescriptor>
          break;
 8008b78:	e024      	b.n	8008bc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008b7a:	6839      	ldr	r1, [r7, #0]
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 fba1 	bl	80092c4 <USBD_SetAddress>
          break;
 8008b82:	e01f      	b.n	8008bc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008b84:	6839      	ldr	r1, [r7, #0]
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fbe0 	bl	800934c <USBD_SetConfig>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	73fb      	strb	r3, [r7, #15]
          break;
 8008b90:	e018      	b.n	8008bc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008b92:	6839      	ldr	r1, [r7, #0]
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 fc83 	bl	80094a0 <USBD_GetConfig>
          break;
 8008b9a:	e013      	b.n	8008bc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008b9c:	6839      	ldr	r1, [r7, #0]
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 fcb4 	bl	800950c <USBD_GetStatus>
          break;
 8008ba4:	e00e      	b.n	8008bc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008ba6:	6839      	ldr	r1, [r7, #0]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fce3 	bl	8009574 <USBD_SetFeature>
          break;
 8008bae:	e009      	b.n	8008bc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 fd07 	bl	80095c6 <USBD_ClrFeature>
          break;
 8008bb8:	e004      	b.n	8008bc4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008bba:	6839      	ldr	r1, [r7, #0]
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 fd5e 	bl	800967e <USBD_CtlError>
          break;
 8008bc2:	bf00      	nop
      }
      break;
 8008bc4:	e004      	b.n	8008bd0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008bc6:	6839      	ldr	r1, [r7, #0]
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fd58 	bl	800967e <USBD_CtlError>
      break;
 8008bce:	bf00      	nop
  }

  return ret;
 8008bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop

08008bdc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008be6:	2300      	movs	r3, #0
 8008be8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008bf2:	2b40      	cmp	r3, #64	@ 0x40
 8008bf4:	d005      	beq.n	8008c02 <USBD_StdItfReq+0x26>
 8008bf6:	2b40      	cmp	r3, #64	@ 0x40
 8008bf8:	d852      	bhi.n	8008ca0 <USBD_StdItfReq+0xc4>
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d001      	beq.n	8008c02 <USBD_StdItfReq+0x26>
 8008bfe:	2b20      	cmp	r3, #32
 8008c00:	d14e      	bne.n	8008ca0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d840      	bhi.n	8008c92 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	889b      	ldrh	r3, [r3, #4]
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d836      	bhi.n	8008c88 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	889b      	ldrh	r3, [r3, #4]
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	4619      	mov	r1, r3
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f7ff fedb 	bl	80089de <USBD_CoreFindIF>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c2c:	7bbb      	ldrb	r3, [r7, #14]
 8008c2e:	2bff      	cmp	r3, #255	@ 0xff
 8008c30:	d01d      	beq.n	8008c6e <USBD_StdItfReq+0x92>
 8008c32:	7bbb      	ldrb	r3, [r7, #14]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d11a      	bne.n	8008c6e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008c38:	7bba      	ldrb	r2, [r7, #14]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	32ae      	adds	r2, #174	@ 0xae
 8008c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00f      	beq.n	8008c68 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008c48:	7bba      	ldrb	r2, [r7, #14]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008c50:	7bba      	ldrb	r2, [r7, #14]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	32ae      	adds	r2, #174	@ 0xae
 8008c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	6839      	ldr	r1, [r7, #0]
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	4798      	blx	r3
 8008c62:	4603      	mov	r3, r0
 8008c64:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008c66:	e004      	b.n	8008c72 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008c68:	2303      	movs	r3, #3
 8008c6a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008c6c:	e001      	b.n	8008c72 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	88db      	ldrh	r3, [r3, #6]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d110      	bne.n	8008c9c <USBD_StdItfReq+0xc0>
 8008c7a:	7bfb      	ldrb	r3, [r7, #15]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d10d      	bne.n	8008c9c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 fdd3 	bl	800982c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008c86:	e009      	b.n	8008c9c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008c88:	6839      	ldr	r1, [r7, #0]
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 fcf7 	bl	800967e <USBD_CtlError>
          break;
 8008c90:	e004      	b.n	8008c9c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008c92:	6839      	ldr	r1, [r7, #0]
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 fcf2 	bl	800967e <USBD_CtlError>
          break;
 8008c9a:	e000      	b.n	8008c9e <USBD_StdItfReq+0xc2>
          break;
 8008c9c:	bf00      	nop
      }
      break;
 8008c9e:	e004      	b.n	8008caa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 fceb 	bl	800967e <USBD_CtlError>
      break;
 8008ca8:	bf00      	nop
  }

  return ret;
 8008caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	889b      	ldrh	r3, [r3, #4]
 8008cc6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008cd0:	2b40      	cmp	r3, #64	@ 0x40
 8008cd2:	d007      	beq.n	8008ce4 <USBD_StdEPReq+0x30>
 8008cd4:	2b40      	cmp	r3, #64	@ 0x40
 8008cd6:	f200 817f 	bhi.w	8008fd8 <USBD_StdEPReq+0x324>
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d02a      	beq.n	8008d34 <USBD_StdEPReq+0x80>
 8008cde:	2b20      	cmp	r3, #32
 8008ce0:	f040 817a 	bne.w	8008fd8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008ce4:	7bbb      	ldrb	r3, [r7, #14]
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f7ff fe85 	bl	80089f8 <USBD_CoreFindEP>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008cf2:	7b7b      	ldrb	r3, [r7, #13]
 8008cf4:	2bff      	cmp	r3, #255	@ 0xff
 8008cf6:	f000 8174 	beq.w	8008fe2 <USBD_StdEPReq+0x32e>
 8008cfa:	7b7b      	ldrb	r3, [r7, #13]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f040 8170 	bne.w	8008fe2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008d02:	7b7a      	ldrb	r2, [r7, #13]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008d0a:	7b7a      	ldrb	r2, [r7, #13]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	32ae      	adds	r2, #174	@ 0xae
 8008d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f000 8163 	beq.w	8008fe2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008d1c:	7b7a      	ldrb	r2, [r7, #13]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	32ae      	adds	r2, #174	@ 0xae
 8008d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	6839      	ldr	r1, [r7, #0]
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	4798      	blx	r3
 8008d2e:	4603      	mov	r3, r0
 8008d30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008d32:	e156      	b.n	8008fe2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	785b      	ldrb	r3, [r3, #1]
 8008d38:	2b03      	cmp	r3, #3
 8008d3a:	d008      	beq.n	8008d4e <USBD_StdEPReq+0x9a>
 8008d3c:	2b03      	cmp	r3, #3
 8008d3e:	f300 8145 	bgt.w	8008fcc <USBD_StdEPReq+0x318>
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f000 809b 	beq.w	8008e7e <USBD_StdEPReq+0x1ca>
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d03c      	beq.n	8008dc6 <USBD_StdEPReq+0x112>
 8008d4c:	e13e      	b.n	8008fcc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d002      	beq.n	8008d60 <USBD_StdEPReq+0xac>
 8008d5a:	2b03      	cmp	r3, #3
 8008d5c:	d016      	beq.n	8008d8c <USBD_StdEPReq+0xd8>
 8008d5e:	e02c      	b.n	8008dba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d60:	7bbb      	ldrb	r3, [r7, #14]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d00d      	beq.n	8008d82 <USBD_StdEPReq+0xce>
 8008d66:	7bbb      	ldrb	r3, [r7, #14]
 8008d68:	2b80      	cmp	r3, #128	@ 0x80
 8008d6a:	d00a      	beq.n	8008d82 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d6c:	7bbb      	ldrb	r3, [r7, #14]
 8008d6e:	4619      	mov	r1, r3
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f7f8 fb71 	bl	8001458 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d76:	2180      	movs	r1, #128	@ 0x80
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f7f8 fb6d 	bl	8001458 <USBD_LL_StallEP>
 8008d7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d80:	e020      	b.n	8008dc4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008d82:	6839      	ldr	r1, [r7, #0]
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 fc7a 	bl	800967e <USBD_CtlError>
              break;
 8008d8a:	e01b      	b.n	8008dc4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	885b      	ldrh	r3, [r3, #2]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d10e      	bne.n	8008db2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008d94:	7bbb      	ldrb	r3, [r7, #14]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00b      	beq.n	8008db2 <USBD_StdEPReq+0xfe>
 8008d9a:	7bbb      	ldrb	r3, [r7, #14]
 8008d9c:	2b80      	cmp	r3, #128	@ 0x80
 8008d9e:	d008      	beq.n	8008db2 <USBD_StdEPReq+0xfe>
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	88db      	ldrh	r3, [r3, #6]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d104      	bne.n	8008db2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008da8:	7bbb      	ldrb	r3, [r7, #14]
 8008daa:	4619      	mov	r1, r3
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f7f8 fb53 	bl	8001458 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 fd3a 	bl	800982c <USBD_CtlSendStatus>

              break;
 8008db8:	e004      	b.n	8008dc4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008dba:	6839      	ldr	r1, [r7, #0]
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 fc5e 	bl	800967e <USBD_CtlError>
              break;
 8008dc2:	bf00      	nop
          }
          break;
 8008dc4:	e107      	b.n	8008fd6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d002      	beq.n	8008dd8 <USBD_StdEPReq+0x124>
 8008dd2:	2b03      	cmp	r3, #3
 8008dd4:	d016      	beq.n	8008e04 <USBD_StdEPReq+0x150>
 8008dd6:	e04b      	b.n	8008e70 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008dd8:	7bbb      	ldrb	r3, [r7, #14]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d00d      	beq.n	8008dfa <USBD_StdEPReq+0x146>
 8008dde:	7bbb      	ldrb	r3, [r7, #14]
 8008de0:	2b80      	cmp	r3, #128	@ 0x80
 8008de2:	d00a      	beq.n	8008dfa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008de4:	7bbb      	ldrb	r3, [r7, #14]
 8008de6:	4619      	mov	r1, r3
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f7f8 fb35 	bl	8001458 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008dee:	2180      	movs	r1, #128	@ 0x80
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f7f8 fb31 	bl	8001458 <USBD_LL_StallEP>
 8008df6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008df8:	e040      	b.n	8008e7c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008dfa:	6839      	ldr	r1, [r7, #0]
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fc3e 	bl	800967e <USBD_CtlError>
              break;
 8008e02:	e03b      	b.n	8008e7c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	885b      	ldrh	r3, [r3, #2]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d136      	bne.n	8008e7a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008e0c:	7bbb      	ldrb	r3, [r7, #14]
 8008e0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d004      	beq.n	8008e20 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008e16:	7bbb      	ldrb	r3, [r7, #14]
 8008e18:	4619      	mov	r1, r3
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f7f8 fb3b 	bl	8001496 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 fd03 	bl	800982c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008e26:	7bbb      	ldrb	r3, [r7, #14]
 8008e28:	4619      	mov	r1, r3
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f7ff fde4 	bl	80089f8 <USBD_CoreFindEP>
 8008e30:	4603      	mov	r3, r0
 8008e32:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e34:	7b7b      	ldrb	r3, [r7, #13]
 8008e36:	2bff      	cmp	r3, #255	@ 0xff
 8008e38:	d01f      	beq.n	8008e7a <USBD_StdEPReq+0x1c6>
 8008e3a:	7b7b      	ldrb	r3, [r7, #13]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d11c      	bne.n	8008e7a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008e40:	7b7a      	ldrb	r2, [r7, #13]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008e48:	7b7a      	ldrb	r2, [r7, #13]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	32ae      	adds	r2, #174	@ 0xae
 8008e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d010      	beq.n	8008e7a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008e58:	7b7a      	ldrb	r2, [r7, #13]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	32ae      	adds	r2, #174	@ 0xae
 8008e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	6839      	ldr	r1, [r7, #0]
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	4798      	blx	r3
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008e6e:	e004      	b.n	8008e7a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008e70:	6839      	ldr	r1, [r7, #0]
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 fc03 	bl	800967e <USBD_CtlError>
              break;
 8008e78:	e000      	b.n	8008e7c <USBD_StdEPReq+0x1c8>
              break;
 8008e7a:	bf00      	nop
          }
          break;
 8008e7c:	e0ab      	b.n	8008fd6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d002      	beq.n	8008e90 <USBD_StdEPReq+0x1dc>
 8008e8a:	2b03      	cmp	r3, #3
 8008e8c:	d032      	beq.n	8008ef4 <USBD_StdEPReq+0x240>
 8008e8e:	e097      	b.n	8008fc0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e90:	7bbb      	ldrb	r3, [r7, #14]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d007      	beq.n	8008ea6 <USBD_StdEPReq+0x1f2>
 8008e96:	7bbb      	ldrb	r3, [r7, #14]
 8008e98:	2b80      	cmp	r3, #128	@ 0x80
 8008e9a:	d004      	beq.n	8008ea6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008e9c:	6839      	ldr	r1, [r7, #0]
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fbed 	bl	800967e <USBD_CtlError>
                break;
 8008ea4:	e091      	b.n	8008fca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ea6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	da0b      	bge.n	8008ec6 <USBD_StdEPReq+0x212>
 8008eae:	7bbb      	ldrb	r3, [r7, #14]
 8008eb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	4413      	add	r3, r2
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	3310      	adds	r3, #16
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	3304      	adds	r3, #4
 8008ec4:	e00b      	b.n	8008ede <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ec6:	7bbb      	ldrb	r3, [r7, #14]
 8008ec8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ecc:	4613      	mov	r3, r2
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	4413      	add	r3, r2
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	4413      	add	r3, r2
 8008edc:	3304      	adds	r3, #4
 8008ede:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	2202      	movs	r2, #2
 8008eea:	4619      	mov	r1, r3
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 fc43 	bl	8009778 <USBD_CtlSendData>
              break;
 8008ef2:	e06a      	b.n	8008fca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008ef4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	da11      	bge.n	8008f20 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008efc:	7bbb      	ldrb	r3, [r7, #14]
 8008efe:	f003 020f 	and.w	r2, r3, #15
 8008f02:	6879      	ldr	r1, [r7, #4]
 8008f04:	4613      	mov	r3, r2
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	4413      	add	r3, r2
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	440b      	add	r3, r1
 8008f0e:	3324      	adds	r3, #36	@ 0x24
 8008f10:	881b      	ldrh	r3, [r3, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d117      	bne.n	8008f46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008f16:	6839      	ldr	r1, [r7, #0]
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 fbb0 	bl	800967e <USBD_CtlError>
                  break;
 8008f1e:	e054      	b.n	8008fca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f20:	7bbb      	ldrb	r3, [r7, #14]
 8008f22:	f003 020f 	and.w	r2, r3, #15
 8008f26:	6879      	ldr	r1, [r7, #4]
 8008f28:	4613      	mov	r3, r2
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	4413      	add	r3, r2
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	440b      	add	r3, r1
 8008f32:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008f36:	881b      	ldrh	r3, [r3, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d104      	bne.n	8008f46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 fb9d 	bl	800967e <USBD_CtlError>
                  break;
 8008f44:	e041      	b.n	8008fca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	da0b      	bge.n	8008f66 <USBD_StdEPReq+0x2b2>
 8008f4e:	7bbb      	ldrb	r3, [r7, #14]
 8008f50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f54:	4613      	mov	r3, r2
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	4413      	add	r3, r2
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	3310      	adds	r3, #16
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	4413      	add	r3, r2
 8008f62:	3304      	adds	r3, #4
 8008f64:	e00b      	b.n	8008f7e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f66:	7bbb      	ldrb	r3, [r7, #14]
 8008f68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	4413      	add	r3, r2
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	4413      	add	r3, r2
 8008f7c:	3304      	adds	r3, #4
 8008f7e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008f80:	7bbb      	ldrb	r3, [r7, #14]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d002      	beq.n	8008f8c <USBD_StdEPReq+0x2d8>
 8008f86:	7bbb      	ldrb	r3, [r7, #14]
 8008f88:	2b80      	cmp	r3, #128	@ 0x80
 8008f8a:	d103      	bne.n	8008f94 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	601a      	str	r2, [r3, #0]
 8008f92:	e00e      	b.n	8008fb2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008f94:	7bbb      	ldrb	r3, [r7, #14]
 8008f96:	4619      	mov	r1, r3
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f7f8 fa9b 	bl	80014d4 <USBD_LL_IsStallEP>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d003      	beq.n	8008fac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	601a      	str	r2, [r3, #0]
 8008faa:	e002      	b.n	8008fb2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	2202      	movs	r2, #2
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 fbdd 	bl	8009778 <USBD_CtlSendData>
              break;
 8008fbe:	e004      	b.n	8008fca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008fc0:	6839      	ldr	r1, [r7, #0]
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 fb5b 	bl	800967e <USBD_CtlError>
              break;
 8008fc8:	bf00      	nop
          }
          break;
 8008fca:	e004      	b.n	8008fd6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008fcc:	6839      	ldr	r1, [r7, #0]
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 fb55 	bl	800967e <USBD_CtlError>
          break;
 8008fd4:	bf00      	nop
      }
      break;
 8008fd6:	e005      	b.n	8008fe4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008fd8:	6839      	ldr	r1, [r7, #0]
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 fb4f 	bl	800967e <USBD_CtlError>
      break;
 8008fe0:	e000      	b.n	8008fe4 <USBD_StdEPReq+0x330>
      break;
 8008fe2:	bf00      	nop
  }

  return ret;
 8008fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
	...

08008ff0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008ffe:	2300      	movs	r3, #0
 8009000:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009002:	2300      	movs	r3, #0
 8009004:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	885b      	ldrh	r3, [r3, #2]
 800900a:	0a1b      	lsrs	r3, r3, #8
 800900c:	b29b      	uxth	r3, r3
 800900e:	3b01      	subs	r3, #1
 8009010:	2b06      	cmp	r3, #6
 8009012:	f200 8128 	bhi.w	8009266 <USBD_GetDescriptor+0x276>
 8009016:	a201      	add	r2, pc, #4	@ (adr r2, 800901c <USBD_GetDescriptor+0x2c>)
 8009018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800901c:	08009039 	.word	0x08009039
 8009020:	08009051 	.word	0x08009051
 8009024:	08009091 	.word	0x08009091
 8009028:	08009267 	.word	0x08009267
 800902c:	08009267 	.word	0x08009267
 8009030:	08009207 	.word	0x08009207
 8009034:	08009233 	.word	0x08009233
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	7c12      	ldrb	r2, [r2, #16]
 8009044:	f107 0108 	add.w	r1, r7, #8
 8009048:	4610      	mov	r0, r2
 800904a:	4798      	blx	r3
 800904c:	60f8      	str	r0, [r7, #12]
      break;
 800904e:	e112      	b.n	8009276 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	7c1b      	ldrb	r3, [r3, #16]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d10d      	bne.n	8009074 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800905e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009060:	f107 0208 	add.w	r2, r7, #8
 8009064:	4610      	mov	r0, r2
 8009066:	4798      	blx	r3
 8009068:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	3301      	adds	r3, #1
 800906e:	2202      	movs	r2, #2
 8009070:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009072:	e100      	b.n	8009276 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800907a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800907c:	f107 0208 	add.w	r2, r7, #8
 8009080:	4610      	mov	r0, r2
 8009082:	4798      	blx	r3
 8009084:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	3301      	adds	r3, #1
 800908a:	2202      	movs	r2, #2
 800908c:	701a      	strb	r2, [r3, #0]
      break;
 800908e:	e0f2      	b.n	8009276 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	885b      	ldrh	r3, [r3, #2]
 8009094:	b2db      	uxtb	r3, r3
 8009096:	2b05      	cmp	r3, #5
 8009098:	f200 80ac 	bhi.w	80091f4 <USBD_GetDescriptor+0x204>
 800909c:	a201      	add	r2, pc, #4	@ (adr r2, 80090a4 <USBD_GetDescriptor+0xb4>)
 800909e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a2:	bf00      	nop
 80090a4:	080090bd 	.word	0x080090bd
 80090a8:	080090f1 	.word	0x080090f1
 80090ac:	08009125 	.word	0x08009125
 80090b0:	08009159 	.word	0x08009159
 80090b4:	0800918d 	.word	0x0800918d
 80090b8:	080091c1 	.word	0x080091c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d00b      	beq.n	80090e0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	7c12      	ldrb	r2, [r2, #16]
 80090d4:	f107 0108 	add.w	r1, r7, #8
 80090d8:	4610      	mov	r0, r2
 80090da:	4798      	blx	r3
 80090dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090de:	e091      	b.n	8009204 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090e0:	6839      	ldr	r1, [r7, #0]
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 facb 	bl	800967e <USBD_CtlError>
            err++;
 80090e8:	7afb      	ldrb	r3, [r7, #11]
 80090ea:	3301      	adds	r3, #1
 80090ec:	72fb      	strb	r3, [r7, #11]
          break;
 80090ee:	e089      	b.n	8009204 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d00b      	beq.n	8009114 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	7c12      	ldrb	r2, [r2, #16]
 8009108:	f107 0108 	add.w	r1, r7, #8
 800910c:	4610      	mov	r0, r2
 800910e:	4798      	blx	r3
 8009110:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009112:	e077      	b.n	8009204 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009114:	6839      	ldr	r1, [r7, #0]
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fab1 	bl	800967e <USBD_CtlError>
            err++;
 800911c:	7afb      	ldrb	r3, [r7, #11]
 800911e:	3301      	adds	r3, #1
 8009120:	72fb      	strb	r3, [r7, #11]
          break;
 8009122:	e06f      	b.n	8009204 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00b      	beq.n	8009148 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	7c12      	ldrb	r2, [r2, #16]
 800913c:	f107 0108 	add.w	r1, r7, #8
 8009140:	4610      	mov	r0, r2
 8009142:	4798      	blx	r3
 8009144:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009146:	e05d      	b.n	8009204 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009148:	6839      	ldr	r1, [r7, #0]
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 fa97 	bl	800967e <USBD_CtlError>
            err++;
 8009150:	7afb      	ldrb	r3, [r7, #11]
 8009152:	3301      	adds	r3, #1
 8009154:	72fb      	strb	r3, [r7, #11]
          break;
 8009156:	e055      	b.n	8009204 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00b      	beq.n	800917c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800916a:	691b      	ldr	r3, [r3, #16]
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	7c12      	ldrb	r2, [r2, #16]
 8009170:	f107 0108 	add.w	r1, r7, #8
 8009174:	4610      	mov	r0, r2
 8009176:	4798      	blx	r3
 8009178:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800917a:	e043      	b.n	8009204 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800917c:	6839      	ldr	r1, [r7, #0]
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 fa7d 	bl	800967e <USBD_CtlError>
            err++;
 8009184:	7afb      	ldrb	r3, [r7, #11]
 8009186:	3301      	adds	r3, #1
 8009188:	72fb      	strb	r3, [r7, #11]
          break;
 800918a:	e03b      	b.n	8009204 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009192:	695b      	ldr	r3, [r3, #20]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00b      	beq.n	80091b0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800919e:	695b      	ldr	r3, [r3, #20]
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	7c12      	ldrb	r2, [r2, #16]
 80091a4:	f107 0108 	add.w	r1, r7, #8
 80091a8:	4610      	mov	r0, r2
 80091aa:	4798      	blx	r3
 80091ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091ae:	e029      	b.n	8009204 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091b0:	6839      	ldr	r1, [r7, #0]
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fa63 	bl	800967e <USBD_CtlError>
            err++;
 80091b8:	7afb      	ldrb	r3, [r7, #11]
 80091ba:	3301      	adds	r3, #1
 80091bc:	72fb      	strb	r3, [r7, #11]
          break;
 80091be:	e021      	b.n	8009204 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091c6:	699b      	ldr	r3, [r3, #24]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d00b      	beq.n	80091e4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091d2:	699b      	ldr	r3, [r3, #24]
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	7c12      	ldrb	r2, [r2, #16]
 80091d8:	f107 0108 	add.w	r1, r7, #8
 80091dc:	4610      	mov	r0, r2
 80091de:	4798      	blx	r3
 80091e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091e2:	e00f      	b.n	8009204 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091e4:	6839      	ldr	r1, [r7, #0]
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 fa49 	bl	800967e <USBD_CtlError>
            err++;
 80091ec:	7afb      	ldrb	r3, [r7, #11]
 80091ee:	3301      	adds	r3, #1
 80091f0:	72fb      	strb	r3, [r7, #11]
          break;
 80091f2:	e007      	b.n	8009204 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80091f4:	6839      	ldr	r1, [r7, #0]
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 fa41 	bl	800967e <USBD_CtlError>
          err++;
 80091fc:	7afb      	ldrb	r3, [r7, #11]
 80091fe:	3301      	adds	r3, #1
 8009200:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009202:	bf00      	nop
      }
      break;
 8009204:	e037      	b.n	8009276 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	7c1b      	ldrb	r3, [r3, #16]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d109      	bne.n	8009222 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009216:	f107 0208 	add.w	r2, r7, #8
 800921a:	4610      	mov	r0, r2
 800921c:	4798      	blx	r3
 800921e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009220:	e029      	b.n	8009276 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009222:	6839      	ldr	r1, [r7, #0]
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 fa2a 	bl	800967e <USBD_CtlError>
        err++;
 800922a:	7afb      	ldrb	r3, [r7, #11]
 800922c:	3301      	adds	r3, #1
 800922e:	72fb      	strb	r3, [r7, #11]
      break;
 8009230:	e021      	b.n	8009276 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	7c1b      	ldrb	r3, [r3, #16]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d10d      	bne.n	8009256 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009242:	f107 0208 	add.w	r2, r7, #8
 8009246:	4610      	mov	r0, r2
 8009248:	4798      	blx	r3
 800924a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	3301      	adds	r3, #1
 8009250:	2207      	movs	r2, #7
 8009252:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009254:	e00f      	b.n	8009276 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009256:	6839      	ldr	r1, [r7, #0]
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 fa10 	bl	800967e <USBD_CtlError>
        err++;
 800925e:	7afb      	ldrb	r3, [r7, #11]
 8009260:	3301      	adds	r3, #1
 8009262:	72fb      	strb	r3, [r7, #11]
      break;
 8009264:	e007      	b.n	8009276 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009266:	6839      	ldr	r1, [r7, #0]
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 fa08 	bl	800967e <USBD_CtlError>
      err++;
 800926e:	7afb      	ldrb	r3, [r7, #11]
 8009270:	3301      	adds	r3, #1
 8009272:	72fb      	strb	r3, [r7, #11]
      break;
 8009274:	bf00      	nop
  }

  if (err != 0U)
 8009276:	7afb      	ldrb	r3, [r7, #11]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d11e      	bne.n	80092ba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	88db      	ldrh	r3, [r3, #6]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d016      	beq.n	80092b2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009284:	893b      	ldrh	r3, [r7, #8]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00e      	beq.n	80092a8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	88da      	ldrh	r2, [r3, #6]
 800928e:	893b      	ldrh	r3, [r7, #8]
 8009290:	4293      	cmp	r3, r2
 8009292:	bf28      	it	cs
 8009294:	4613      	movcs	r3, r2
 8009296:	b29b      	uxth	r3, r3
 8009298:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800929a:	893b      	ldrh	r3, [r7, #8]
 800929c:	461a      	mov	r2, r3
 800929e:	68f9      	ldr	r1, [r7, #12]
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 fa69 	bl	8009778 <USBD_CtlSendData>
 80092a6:	e009      	b.n	80092bc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80092a8:	6839      	ldr	r1, [r7, #0]
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 f9e7 	bl	800967e <USBD_CtlError>
 80092b0:	e004      	b.n	80092bc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 faba 	bl	800982c <USBD_CtlSendStatus>
 80092b8:	e000      	b.n	80092bc <USBD_GetDescriptor+0x2cc>
    return;
 80092ba:	bf00      	nop
  }
}
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop

080092c4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	889b      	ldrh	r3, [r3, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d131      	bne.n	800933a <USBD_SetAddress+0x76>
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	88db      	ldrh	r3, [r3, #6]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d12d      	bne.n	800933a <USBD_SetAddress+0x76>
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	885b      	ldrh	r3, [r3, #2]
 80092e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80092e4:	d829      	bhi.n	800933a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	885b      	ldrh	r3, [r3, #2]
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	2b03      	cmp	r3, #3
 80092fc:	d104      	bne.n	8009308 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80092fe:	6839      	ldr	r1, [r7, #0]
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 f9bc 	bl	800967e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009306:	e01d      	b.n	8009344 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	7bfa      	ldrb	r2, [r7, #15]
 800930c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009310:	7bfb      	ldrb	r3, [r7, #15]
 8009312:	4619      	mov	r1, r3
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f7f8 f909 	bl	800152c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fa86 	bl	800982c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009320:	7bfb      	ldrb	r3, [r7, #15]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d004      	beq.n	8009330 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2202      	movs	r2, #2
 800932a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800932e:	e009      	b.n	8009344 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009338:	e004      	b.n	8009344 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800933a:	6839      	ldr	r1, [r7, #0]
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 f99e 	bl	800967e <USBD_CtlError>
  }
}
 8009342:	bf00      	nop
 8009344:	bf00      	nop
 8009346:	3710      	adds	r7, #16
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009356:	2300      	movs	r3, #0
 8009358:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	885b      	ldrh	r3, [r3, #2]
 800935e:	b2da      	uxtb	r2, r3
 8009360:	4b4e      	ldr	r3, [pc, #312]	@ (800949c <USBD_SetConfig+0x150>)
 8009362:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009364:	4b4d      	ldr	r3, [pc, #308]	@ (800949c <USBD_SetConfig+0x150>)
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	2b01      	cmp	r3, #1
 800936a:	d905      	bls.n	8009378 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800936c:	6839      	ldr	r1, [r7, #0]
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 f985 	bl	800967e <USBD_CtlError>
    return USBD_FAIL;
 8009374:	2303      	movs	r3, #3
 8009376:	e08c      	b.n	8009492 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800937e:	b2db      	uxtb	r3, r3
 8009380:	2b02      	cmp	r3, #2
 8009382:	d002      	beq.n	800938a <USBD_SetConfig+0x3e>
 8009384:	2b03      	cmp	r3, #3
 8009386:	d029      	beq.n	80093dc <USBD_SetConfig+0x90>
 8009388:	e075      	b.n	8009476 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800938a:	4b44      	ldr	r3, [pc, #272]	@ (800949c <USBD_SetConfig+0x150>)
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d020      	beq.n	80093d4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009392:	4b42      	ldr	r3, [pc, #264]	@ (800949c <USBD_SetConfig+0x150>)
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	461a      	mov	r2, r3
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800939c:	4b3f      	ldr	r3, [pc, #252]	@ (800949c <USBD_SetConfig+0x150>)
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	4619      	mov	r1, r3
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f7fe ffe3 	bl	800836e <USBD_SetClassConfig>
 80093a8:	4603      	mov	r3, r0
 80093aa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80093ac:	7bfb      	ldrb	r3, [r7, #15]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d008      	beq.n	80093c4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80093b2:	6839      	ldr	r1, [r7, #0]
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 f962 	bl	800967e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2202      	movs	r2, #2
 80093be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80093c2:	e065      	b.n	8009490 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 fa31 	bl	800982c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2203      	movs	r2, #3
 80093ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80093d2:	e05d      	b.n	8009490 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 fa29 	bl	800982c <USBD_CtlSendStatus>
      break;
 80093da:	e059      	b.n	8009490 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80093dc:	4b2f      	ldr	r3, [pc, #188]	@ (800949c <USBD_SetConfig+0x150>)
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d112      	bne.n	800940a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2202      	movs	r2, #2
 80093e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80093ec:	4b2b      	ldr	r3, [pc, #172]	@ (800949c <USBD_SetConfig+0x150>)
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	461a      	mov	r2, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80093f6:	4b29      	ldr	r3, [pc, #164]	@ (800949c <USBD_SetConfig+0x150>)
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	4619      	mov	r1, r3
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f7fe ffd2 	bl	80083a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fa12 	bl	800982c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009408:	e042      	b.n	8009490 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800940a:	4b24      	ldr	r3, [pc, #144]	@ (800949c <USBD_SetConfig+0x150>)
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	461a      	mov	r2, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	429a      	cmp	r2, r3
 8009416:	d02a      	beq.n	800946e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	b2db      	uxtb	r3, r3
 800941e:	4619      	mov	r1, r3
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f7fe ffc0 	bl	80083a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009426:	4b1d      	ldr	r3, [pc, #116]	@ (800949c <USBD_SetConfig+0x150>)
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	461a      	mov	r2, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009430:	4b1a      	ldr	r3, [pc, #104]	@ (800949c <USBD_SetConfig+0x150>)
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	4619      	mov	r1, r3
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f7fe ff99 	bl	800836e <USBD_SetClassConfig>
 800943c:	4603      	mov	r3, r0
 800943e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009440:	7bfb      	ldrb	r3, [r7, #15]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00f      	beq.n	8009466 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009446:	6839      	ldr	r1, [r7, #0]
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 f918 	bl	800967e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	b2db      	uxtb	r3, r3
 8009454:	4619      	mov	r1, r3
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f7fe ffa5 	bl	80083a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2202      	movs	r2, #2
 8009460:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009464:	e014      	b.n	8009490 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 f9e0 	bl	800982c <USBD_CtlSendStatus>
      break;
 800946c:	e010      	b.n	8009490 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 f9dc 	bl	800982c <USBD_CtlSendStatus>
      break;
 8009474:	e00c      	b.n	8009490 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009476:	6839      	ldr	r1, [r7, #0]
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 f900 	bl	800967e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800947e:	4b07      	ldr	r3, [pc, #28]	@ (800949c <USBD_SetConfig+0x150>)
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	4619      	mov	r1, r3
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f7fe ff8e 	bl	80083a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800948a:	2303      	movs	r3, #3
 800948c:	73fb      	strb	r3, [r7, #15]
      break;
 800948e:	bf00      	nop
  }

  return ret;
 8009490:	7bfb      	ldrb	r3, [r7, #15]
}
 8009492:	4618      	mov	r0, r3
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	20001e10 	.word	0x20001e10

080094a0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	88db      	ldrh	r3, [r3, #6]
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d004      	beq.n	80094bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80094b2:	6839      	ldr	r1, [r7, #0]
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 f8e2 	bl	800967e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80094ba:	e023      	b.n	8009504 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	2b02      	cmp	r3, #2
 80094c6:	dc02      	bgt.n	80094ce <USBD_GetConfig+0x2e>
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	dc03      	bgt.n	80094d4 <USBD_GetConfig+0x34>
 80094cc:	e015      	b.n	80094fa <USBD_GetConfig+0x5a>
 80094ce:	2b03      	cmp	r3, #3
 80094d0:	d00b      	beq.n	80094ea <USBD_GetConfig+0x4a>
 80094d2:	e012      	b.n	80094fa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	3308      	adds	r3, #8
 80094de:	2201      	movs	r2, #1
 80094e0:	4619      	mov	r1, r3
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f948 	bl	8009778 <USBD_CtlSendData>
        break;
 80094e8:	e00c      	b.n	8009504 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	3304      	adds	r3, #4
 80094ee:	2201      	movs	r2, #1
 80094f0:	4619      	mov	r1, r3
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 f940 	bl	8009778 <USBD_CtlSendData>
        break;
 80094f8:	e004      	b.n	8009504 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80094fa:	6839      	ldr	r1, [r7, #0]
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 f8be 	bl	800967e <USBD_CtlError>
        break;
 8009502:	bf00      	nop
}
 8009504:	bf00      	nop
 8009506:	3708      	adds	r7, #8
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800951c:	b2db      	uxtb	r3, r3
 800951e:	3b01      	subs	r3, #1
 8009520:	2b02      	cmp	r3, #2
 8009522:	d81e      	bhi.n	8009562 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	88db      	ldrh	r3, [r3, #6]
 8009528:	2b02      	cmp	r3, #2
 800952a:	d004      	beq.n	8009536 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800952c:	6839      	ldr	r1, [r7, #0]
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 f8a5 	bl	800967e <USBD_CtlError>
        break;
 8009534:	e01a      	b.n	800956c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2201      	movs	r2, #1
 800953a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009542:	2b00      	cmp	r3, #0
 8009544:	d005      	beq.n	8009552 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	f043 0202 	orr.w	r2, r3, #2
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	330c      	adds	r3, #12
 8009556:	2202      	movs	r2, #2
 8009558:	4619      	mov	r1, r3
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f90c 	bl	8009778 <USBD_CtlSendData>
      break;
 8009560:	e004      	b.n	800956c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009562:	6839      	ldr	r1, [r7, #0]
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 f88a 	bl	800967e <USBD_CtlError>
      break;
 800956a:	bf00      	nop
  }
}
 800956c:	bf00      	nop
 800956e:	3708      	adds	r7, #8
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	885b      	ldrh	r3, [r3, #2]
 8009582:	2b01      	cmp	r3, #1
 8009584:	d107      	bne.n	8009596 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2201      	movs	r2, #1
 800958a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 f94c 	bl	800982c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009594:	e013      	b.n	80095be <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	885b      	ldrh	r3, [r3, #2]
 800959a:	2b02      	cmp	r3, #2
 800959c:	d10b      	bne.n	80095b6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	889b      	ldrh	r3, [r3, #4]
 80095a2:	0a1b      	lsrs	r3, r3, #8
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	b2da      	uxtb	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 f93c 	bl	800982c <USBD_CtlSendStatus>
}
 80095b4:	e003      	b.n	80095be <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80095b6:	6839      	ldr	r1, [r7, #0]
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 f860 	bl	800967e <USBD_CtlError>
}
 80095be:	bf00      	nop
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b082      	sub	sp, #8
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
 80095ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	3b01      	subs	r3, #1
 80095da:	2b02      	cmp	r3, #2
 80095dc:	d80b      	bhi.n	80095f6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	885b      	ldrh	r3, [r3, #2]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d10c      	bne.n	8009600 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 f91c 	bl	800982c <USBD_CtlSendStatus>
      }
      break;
 80095f4:	e004      	b.n	8009600 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80095f6:	6839      	ldr	r1, [r7, #0]
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 f840 	bl	800967e <USBD_CtlError>
      break;
 80095fe:	e000      	b.n	8009602 <USBD_ClrFeature+0x3c>
      break;
 8009600:	bf00      	nop
  }
}
 8009602:	bf00      	nop
 8009604:	3708      	adds	r7, #8
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b084      	sub	sp, #16
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
 8009612:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	781a      	ldrb	r2, [r3, #0]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	3301      	adds	r3, #1
 8009624:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	781a      	ldrb	r2, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	3301      	adds	r3, #1
 8009632:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009634:	68f8      	ldr	r0, [r7, #12]
 8009636:	f7ff fa40 	bl	8008aba <SWAPBYTE>
 800963a:	4603      	mov	r3, r0
 800963c:	461a      	mov	r2, r3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	3301      	adds	r3, #1
 8009646:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	3301      	adds	r3, #1
 800964c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f7ff fa33 	bl	8008aba <SWAPBYTE>
 8009654:	4603      	mov	r3, r0
 8009656:	461a      	mov	r2, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	3301      	adds	r3, #1
 8009660:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	3301      	adds	r3, #1
 8009666:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f7ff fa26 	bl	8008aba <SWAPBYTE>
 800966e:	4603      	mov	r3, r0
 8009670:	461a      	mov	r2, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	80da      	strh	r2, [r3, #6]
}
 8009676:	bf00      	nop
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800967e:	b580      	push	{r7, lr}
 8009680:	b082      	sub	sp, #8
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
 8009686:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009688:	2180      	movs	r1, #128	@ 0x80
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f7f7 fee4 	bl	8001458 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009690:	2100      	movs	r1, #0
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f7f7 fee0 	bl	8001458 <USBD_LL_StallEP>
}
 8009698:	bf00      	nop
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80096ac:	2300      	movs	r3, #0
 80096ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d042      	beq.n	800973c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80096ba:	6938      	ldr	r0, [r7, #16]
 80096bc:	f000 f842 	bl	8009744 <USBD_GetLen>
 80096c0:	4603      	mov	r3, r0
 80096c2:	3301      	adds	r3, #1
 80096c4:	005b      	lsls	r3, r3, #1
 80096c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096ca:	d808      	bhi.n	80096de <USBD_GetString+0x3e>
 80096cc:	6938      	ldr	r0, [r7, #16]
 80096ce:	f000 f839 	bl	8009744 <USBD_GetLen>
 80096d2:	4603      	mov	r3, r0
 80096d4:	3301      	adds	r3, #1
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	005b      	lsls	r3, r3, #1
 80096da:	b29a      	uxth	r2, r3
 80096dc:	e001      	b.n	80096e2 <USBD_GetString+0x42>
 80096de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80096e6:	7dfb      	ldrb	r3, [r7, #23]
 80096e8:	68ba      	ldr	r2, [r7, #8]
 80096ea:	4413      	add	r3, r2
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	7812      	ldrb	r2, [r2, #0]
 80096f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80096f2:	7dfb      	ldrb	r3, [r7, #23]
 80096f4:	3301      	adds	r3, #1
 80096f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80096f8:	7dfb      	ldrb	r3, [r7, #23]
 80096fa:	68ba      	ldr	r2, [r7, #8]
 80096fc:	4413      	add	r3, r2
 80096fe:	2203      	movs	r2, #3
 8009700:	701a      	strb	r2, [r3, #0]
  idx++;
 8009702:	7dfb      	ldrb	r3, [r7, #23]
 8009704:	3301      	adds	r3, #1
 8009706:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009708:	e013      	b.n	8009732 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800970a:	7dfb      	ldrb	r3, [r7, #23]
 800970c:	68ba      	ldr	r2, [r7, #8]
 800970e:	4413      	add	r3, r2
 8009710:	693a      	ldr	r2, [r7, #16]
 8009712:	7812      	ldrb	r2, [r2, #0]
 8009714:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	3301      	adds	r3, #1
 800971a:	613b      	str	r3, [r7, #16]
    idx++;
 800971c:	7dfb      	ldrb	r3, [r7, #23]
 800971e:	3301      	adds	r3, #1
 8009720:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009722:	7dfb      	ldrb	r3, [r7, #23]
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	4413      	add	r3, r2
 8009728:	2200      	movs	r2, #0
 800972a:	701a      	strb	r2, [r3, #0]
    idx++;
 800972c:	7dfb      	ldrb	r3, [r7, #23]
 800972e:	3301      	adds	r3, #1
 8009730:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d1e7      	bne.n	800970a <USBD_GetString+0x6a>
 800973a:	e000      	b.n	800973e <USBD_GetString+0x9e>
    return;
 800973c:	bf00      	nop
  }
}
 800973e:	3718      	adds	r7, #24
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009744:	b480      	push	{r7}
 8009746:	b085      	sub	sp, #20
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800974c:	2300      	movs	r3, #0
 800974e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009754:	e005      	b.n	8009762 <USBD_GetLen+0x1e>
  {
    len++;
 8009756:	7bfb      	ldrb	r3, [r7, #15]
 8009758:	3301      	adds	r3, #1
 800975a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	3301      	adds	r3, #1
 8009760:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1f5      	bne.n	8009756 <USBD_GetLen+0x12>
  }

  return len;
 800976a:	7bfb      	ldrb	r3, [r7, #15]
}
 800976c:	4618      	mov	r0, r3
 800976e:	3714      	adds	r7, #20
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2202      	movs	r2, #2
 8009788:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	68ba      	ldr	r2, [r7, #8]
 800979c:	2100      	movs	r1, #0
 800979e:	68f8      	ldr	r0, [r7, #12]
 80097a0:	f7f7 fee3 	bl	800156a <USBD_LL_Transmit>

  return USBD_OK;
 80097a4:	2300      	movs	r3, #0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b084      	sub	sp, #16
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	60f8      	str	r0, [r7, #12]
 80097b6:	60b9      	str	r1, [r7, #8]
 80097b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	68ba      	ldr	r2, [r7, #8]
 80097be:	2100      	movs	r1, #0
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	f7f7 fed2 	bl	800156a <USBD_LL_Transmit>

  return USBD_OK;
 80097c6:	2300      	movs	r3, #0
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3710      	adds	r7, #16
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2203      	movs	r2, #3
 80097e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	68ba      	ldr	r2, [r7, #8]
 80097f8:	2100      	movs	r1, #0
 80097fa:	68f8      	ldr	r0, [r7, #12]
 80097fc:	f7f7 fed6 	bl	80015ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009800:	2300      	movs	r3, #0
}
 8009802:	4618      	mov	r0, r3
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b084      	sub	sp, #16
 800980e:	af00      	add	r7, sp, #0
 8009810:	60f8      	str	r0, [r7, #12]
 8009812:	60b9      	str	r1, [r7, #8]
 8009814:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	68ba      	ldr	r2, [r7, #8]
 800981a:	2100      	movs	r1, #0
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f7f7 fec5 	bl	80015ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2204      	movs	r2, #4
 8009838:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800983c:	2300      	movs	r3, #0
 800983e:	2200      	movs	r2, #0
 8009840:	2100      	movs	r1, #0
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f7f7 fe91 	bl	800156a <USBD_LL_Transmit>

  return USBD_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3708      	adds	r7, #8
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b082      	sub	sp, #8
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2205      	movs	r2, #5
 800985e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009862:	2300      	movs	r3, #0
 8009864:	2200      	movs	r2, #0
 8009866:	2100      	movs	r1, #0
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f7f7 fe9f 	bl	80015ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <memset>:
 8009878:	4402      	add	r2, r0
 800987a:	4603      	mov	r3, r0
 800987c:	4293      	cmp	r3, r2
 800987e:	d100      	bne.n	8009882 <memset+0xa>
 8009880:	4770      	bx	lr
 8009882:	f803 1b01 	strb.w	r1, [r3], #1
 8009886:	e7f9      	b.n	800987c <memset+0x4>

08009888 <__libc_init_array>:
 8009888:	b570      	push	{r4, r5, r6, lr}
 800988a:	4d0d      	ldr	r5, [pc, #52]	@ (80098c0 <__libc_init_array+0x38>)
 800988c:	4c0d      	ldr	r4, [pc, #52]	@ (80098c4 <__libc_init_array+0x3c>)
 800988e:	1b64      	subs	r4, r4, r5
 8009890:	10a4      	asrs	r4, r4, #2
 8009892:	2600      	movs	r6, #0
 8009894:	42a6      	cmp	r6, r4
 8009896:	d109      	bne.n	80098ac <__libc_init_array+0x24>
 8009898:	4d0b      	ldr	r5, [pc, #44]	@ (80098c8 <__libc_init_array+0x40>)
 800989a:	4c0c      	ldr	r4, [pc, #48]	@ (80098cc <__libc_init_array+0x44>)
 800989c:	f000 f818 	bl	80098d0 <_init>
 80098a0:	1b64      	subs	r4, r4, r5
 80098a2:	10a4      	asrs	r4, r4, #2
 80098a4:	2600      	movs	r6, #0
 80098a6:	42a6      	cmp	r6, r4
 80098a8:	d105      	bne.n	80098b6 <__libc_init_array+0x2e>
 80098aa:	bd70      	pop	{r4, r5, r6, pc}
 80098ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80098b0:	4798      	blx	r3
 80098b2:	3601      	adds	r6, #1
 80098b4:	e7ee      	b.n	8009894 <__libc_init_array+0xc>
 80098b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80098ba:	4798      	blx	r3
 80098bc:	3601      	adds	r6, #1
 80098be:	e7f2      	b.n	80098a6 <__libc_init_array+0x1e>
 80098c0:	08009c14 	.word	0x08009c14
 80098c4:	08009c14 	.word	0x08009c14
 80098c8:	08009c14 	.word	0x08009c14
 80098cc:	08009c18 	.word	0x08009c18

080098d0 <_init>:
 80098d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098d2:	bf00      	nop
 80098d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098d6:	bc08      	pop	{r3}
 80098d8:	469e      	mov	lr, r3
 80098da:	4770      	bx	lr

080098dc <_fini>:
 80098dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098de:	bf00      	nop
 80098e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098e2:	bc08      	pop	{r3}
 80098e4:	469e      	mov	lr, r3
 80098e6:	4770      	bx	lr
