
Dual_EveCore_Motherboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d234  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  0800d3c4  0800d3c4  0000e3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d970  0800d970  0000f1ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800d970  0800d970  0000e970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d978  0800d978  0000f1ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d978  0800d978  0000e978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d97c  0800d97c  0000e97c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ac  20000000  0800d980  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f1ac  2**0
                  CONTENTS
 10 .bss          00001ef8  200001ac  200001ac  0000f1ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200020a4  200020a4  0000f1ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c27b  00000000  00000000  0000f1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004445  00000000  00000000  0002b457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001918  00000000  00000000  0002f8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001364  00000000  00000000  000311b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002367f  00000000  00000000  0003251c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022c03  00000000  00000000  00055b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca0bd  00000000  00000000  0007879e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014285b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e60  00000000  00000000  001428a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000088  00000000  00000000  00149700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ac 	.word	0x200001ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d3ac 	.word	0x0800d3ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001b0 	.word	0x200001b0
 80001cc:	0800d3ac 	.word	0x0800d3ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f001 fb8c 	bl	8001c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f88a 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 fa14 	bl	80009a8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000580:	f000 f93c 	bl	80007fc <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000584:	f000 fe50 	bl	8001228 <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 8000588:	f000 f9e2 	bl	8000950 <MX_UART4_Init>
  MX_TIM2_Init();
 800058c:	f000 f96e 	bl	800086c <MX_TIM2_Init>
  MX_CAN2_Init();
 8000590:	f000 f8e8 	bl	8000764 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */


  TxData[0] = 50;
 8000594:	4b2d      	ldr	r3, [pc, #180]	@ (800064c <main+0xdc>)
 8000596:	2232      	movs	r2, #50	@ 0x32
 8000598:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0xAA;
 800059a:	4b2c      	ldr	r3, [pc, #176]	@ (800064c <main+0xdc>)
 800059c:	22aa      	movs	r2, #170	@ 0xaa
 800059e:	705a      	strb	r2, [r3, #1]

  HAL_TIM_OC_Start_IT(&htim2,TIM_CHANNEL_1);
 80005a0:	2100      	movs	r1, #0
 80005a2:	482b      	ldr	r0, [pc, #172]	@ (8000650 <main+0xe0>)
 80005a4:	f006 f9fe 	bl	80069a4 <HAL_TIM_OC_Start_IT>

  TxHeader.IDE = CAN_ID_STD;
 80005a8:	4b2a      	ldr	r3, [pc, #168]	@ (8000654 <main+0xe4>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x10;
 80005ae:	4b29      	ldr	r3, [pc, #164]	@ (8000654 <main+0xe4>)
 80005b0:	2210      	movs	r2, #16
 80005b2:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 80005b4:	4b27      	ldr	r3, [pc, #156]	@ (8000654 <main+0xe4>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 2;
 80005ba:	4b26      	ldr	r3, [pc, #152]	@ (8000654 <main+0xe4>)
 80005bc:	2202      	movs	r2, #2
 80005be:	611a      	str	r2, [r3, #16]
  while (1)
  {



   	if(timer1 >= 1000){
 80005c0:	4b25      	ldr	r3, [pc, #148]	@ (8000658 <main+0xe8>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80005c8:	db11      	blt.n	80005ee <main+0x7e>

   		timer1 = 0;
 80005ca:	4b23      	ldr	r3, [pc, #140]	@ (8000658 <main+0xe8>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
   		HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin); //Toggle LED
 80005d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005d4:	4821      	ldr	r0, [pc, #132]	@ (800065c <main+0xec>)
 80005d6:	f003 f99d 	bl	8003914 <HAL_GPIO_TogglePin>
   		HAL_UART_Transmit_IT(&huart4, tx_buff, 28);
 80005da:	221c      	movs	r2, #28
 80005dc:	4920      	ldr	r1, [pc, #128]	@ (8000660 <main+0xf0>)
 80005de:	4821      	ldr	r0, [pc, #132]	@ (8000664 <main+0xf4>)
 80005e0:	f007 ff8a 	bl	80084f8 <HAL_UART_Transmit_IT>
   	    HAL_UART_Receive_IT(&huart4, rx_buff, 1);
 80005e4:	2201      	movs	r2, #1
 80005e6:	4920      	ldr	r1, [pc, #128]	@ (8000668 <main+0xf8>)
 80005e8:	481e      	ldr	r0, [pc, #120]	@ (8000664 <main+0xf4>)
 80005ea:	f007 ffbb 	bl	8008564 <HAL_UART_Receive_IT>

   	}

   	if(timer2 >= 1200){
 80005ee:	4b1f      	ldr	r3, [pc, #124]	@ (800066c <main+0xfc>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80005f6:	db08      	blt.n	800060a <main+0x9a>

   		timer2 = 0;
 80005f8:	4b1c      	ldr	r3, [pc, #112]	@ (800066c <main+0xfc>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]

   		HAL_SPI_TransmitReceive_IT(&hspi1, SPI_TX_Buffer, SPI_RX_Buffer, 3); //Sending in Interrupt mode
 80005fe:	2303      	movs	r3, #3
 8000600:	4a1b      	ldr	r2, [pc, #108]	@ (8000670 <main+0x100>)
 8000602:	491c      	ldr	r1, [pc, #112]	@ (8000674 <main+0x104>)
 8000604:	481c      	ldr	r0, [pc, #112]	@ (8000678 <main+0x108>)
 8000606:	f005 fbcd 	bl	8005da4 <HAL_SPI_TransmitReceive_IT>
   	}


   	if(timer3 >= 1400){
 800060a:	4b1c      	ldr	r3, [pc, #112]	@ (800067c <main+0x10c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 8000612:	db0d      	blt.n	8000630 <main+0xc0>

   		timer3 = 0;
 8000614:	4b19      	ldr	r3, [pc, #100]	@ (800067c <main+0x10c>)
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]

   	   /* Start the Transmission process */
   	   if (HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 800061a:	4b19      	ldr	r3, [pc, #100]	@ (8000680 <main+0x110>)
 800061c:	4a0b      	ldr	r2, [pc, #44]	@ (800064c <main+0xdc>)
 800061e:	490d      	ldr	r1, [pc, #52]	@ (8000654 <main+0xe4>)
 8000620:	4818      	ldr	r0, [pc, #96]	@ (8000684 <main+0x114>)
 8000622:	f001 fe2d 	bl	8002280 <HAL_CAN_AddTxMessage>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <main+0xc0>
   	    {
   	    	/* Transmission request Error */
   	          Error_Handler();
 800062c:	f000 fb4e 	bl	8000ccc <Error_Handler>
   	    }


   	}

   	if(timer4 >= 1600){
 8000630:	4b15      	ldr	r3, [pc, #84]	@ (8000688 <main+0x118>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8000638:	dbc2      	blt.n	80005c0 <main+0x50>

   		timer4 = 0;
 800063a:	4b13      	ldr	r3, [pc, #76]	@ (8000688 <main+0x118>)
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]

   		CDC_Transmit_FS(firmwareMainMsg,34);
 8000640:	2122      	movs	r1, #34	@ 0x22
 8000642:	4812      	ldr	r0, [pc, #72]	@ (800068c <main+0x11c>)
 8000644:	f000 feb6 	bl	80013b4 <CDC_Transmit_FS>
   	if(timer1 >= 1000){
 8000648:	e7ba      	b.n	80005c0 <main+0x50>
 800064a:	bf00      	nop
 800064c:	2000030c 	.word	0x2000030c
 8000650:	20000248 	.word	0x20000248
 8000654:	200002d8 	.word	0x200002d8
 8000658:	20000050 	.word	0x20000050
 800065c:	40020800 	.word	0x40020800
 8000660:	20000028 	.word	0x20000028
 8000664:	20000290 	.word	0x20000290
 8000668:	20000320 	.word	0x20000320
 800066c:	20000054 	.word	0x20000054
 8000670:	20000340 	.word	0x20000340
 8000674:	20000048 	.word	0x20000048
 8000678:	200001f0 	.word	0x200001f0
 800067c:	20000058 	.word	0x20000058
 8000680:	2000031c 	.word	0x2000031c
 8000684:	200001c8 	.word	0x200001c8
 8000688:	2000005c 	.word	0x2000005c
 800068c:	20000000 	.word	0x20000000

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	@ 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	2230      	movs	r2, #48	@ 0x30
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f00c fa04 	bl	800caac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	4b28      	ldr	r3, [pc, #160]	@ (800075c <SystemClock_Config+0xcc>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006bc:	4a27      	ldr	r2, [pc, #156]	@ (800075c <SystemClock_Config+0xcc>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c4:	4b25      	ldr	r3, [pc, #148]	@ (800075c <SystemClock_Config+0xcc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	4b22      	ldr	r3, [pc, #136]	@ (8000760 <SystemClock_Config+0xd0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a21      	ldr	r2, [pc, #132]	@ (8000760 <SystemClock_Config+0xd0>)
 80006da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000760 <SystemClock_Config+0xd0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ec:	2301      	movs	r3, #1
 80006ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000700:	2304      	movs	r3, #4
 8000702:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000704:	23a8      	movs	r3, #168	@ 0xa8
 8000706:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800070c:	2307      	movs	r3, #7
 800070e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	4618      	mov	r0, r3
 8000716:	f004 fbc3 	bl	8004ea0 <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000720:	f000 fad4 	bl	8000ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000724:	230f      	movs	r3, #15
 8000726:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000728:	2302      	movs	r3, #2
 800072a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000730:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000734:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000736:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800073a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	2105      	movs	r1, #5
 8000742:	4618      	mov	r0, r3
 8000744:	f004 fed8 	bl	80054f8 <HAL_RCC_ClockConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800074e:	f000 fabd 	bl	8000ccc <Error_Handler>
  }
}
 8000752:	bf00      	nop
 8000754:	3750      	adds	r7, #80	@ 0x50
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	@ 0x28
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_Init 1 */

  CAN_FilterTypeDef  sFilterConfig;

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800076a:	4b22      	ldr	r3, [pc, #136]	@ (80007f4 <MX_CAN2_Init+0x90>)
 800076c:	4a22      	ldr	r2, [pc, #136]	@ (80007f8 <MX_CAN2_Init+0x94>)
 800076e:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 17;
 8000770:	4b20      	ldr	r3, [pc, #128]	@ (80007f4 <MX_CAN2_Init+0x90>)
 8000772:	2211      	movs	r2, #17
 8000774:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_SILENT_LOOPBACK;
 8000776:	4b1f      	ldr	r3, [pc, #124]	@ (80007f4 <MX_CAN2_Init+0x90>)
 8000778:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 800077c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800077e:	4b1d      	ldr	r3, [pc, #116]	@ (80007f4 <MX_CAN2_Init+0x90>)
 8000780:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000784:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000786:	4b1b      	ldr	r3, [pc, #108]	@ (80007f4 <MX_CAN2_Init+0x90>)
 8000788:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800078c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 800078e:	4b19      	ldr	r3, [pc, #100]	@ (80007f4 <MX_CAN2_Init+0x90>)
 8000790:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000794:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000796:	4b17      	ldr	r3, [pc, #92]	@ (80007f4 <MX_CAN2_Init+0x90>)
 8000798:	2200      	movs	r2, #0
 800079a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 800079c:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <MX_CAN2_Init+0x90>)
 800079e:	2201      	movs	r2, #1
 80007a0:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = ENABLE;
 80007a2:	4b14      	ldr	r3, [pc, #80]	@ (80007f4 <MX_CAN2_Init+0x90>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 80007a8:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <MX_CAN2_Init+0x90>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80007ae:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <MX_CAN2_Init+0x90>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <MX_CAN2_Init+0x90>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	775a      	strb	r2, [r3, #29]


  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80007ba:	480e      	ldr	r0, [pc, #56]	@ (80007f4 <MX_CAN2_Init+0x90>)
 80007bc:	f001 fafe 	bl	8001dbc <HAL_CAN_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_CAN2_Init+0x66>
  {
    Error_Handler();
 80007c6:	f000 fa81 	bl	8000ccc <Error_Handler>
  /* USER CODE BEGIN CAN2_Init 2 */



  /*##-3- Start the CAN peripheral ###########################################*/
 if (HAL_CAN_Start(&hcan2) != HAL_OK)
 80007ca:	480a      	ldr	r0, [pc, #40]	@ (80007f4 <MX_CAN2_Init+0x90>)
 80007cc:	f001 fd14 	bl	80021f8 <HAL_CAN_Start>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_CAN2_Init+0x76>
 {
    /* Start Error */
    Error_Handler();
 80007d6:	f000 fa79 	bl	8000ccc <Error_Handler>
 }

  /*##-4- Activate CAN RX notification #######################################*/
 if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80007da:	2102      	movs	r1, #2
 80007dc:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <MX_CAN2_Init+0x90>)
 80007de:	f001 ff97 	bl	8002710 <HAL_CAN_ActivateNotification>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_CAN2_Init+0x88>
 {
    /* Notification Error */
   Error_Handler();
 80007e8:	f000 fa70 	bl	8000ccc <Error_Handler>



  /* USER CODE END CAN2_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	3728      	adds	r7, #40	@ 0x28
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200001c8 	.word	0x200001c8
 80007f8:	40006800 	.word	0x40006800

080007fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000800:	4b18      	ldr	r3, [pc, #96]	@ (8000864 <MX_SPI1_Init+0x68>)
 8000802:	4a19      	ldr	r2, [pc, #100]	@ (8000868 <MX_SPI1_Init+0x6c>)
 8000804:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000806:	4b17      	ldr	r3, [pc, #92]	@ (8000864 <MX_SPI1_Init+0x68>)
 8000808:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800080c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800080e:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <MX_SPI1_Init+0x68>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000814:	4b13      	ldr	r3, [pc, #76]	@ (8000864 <MX_SPI1_Init+0x68>)
 8000816:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800081a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800081c:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <MX_SPI1_Init+0x68>)
 800081e:	2202      	movs	r2, #2
 8000820:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000822:	4b10      	ldr	r3, [pc, #64]	@ (8000864 <MX_SPI1_Init+0x68>)
 8000824:	2200      	movs	r2, #0
 8000826:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000828:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <MX_SPI1_Init+0x68>)
 800082a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800082e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000830:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <MX_SPI1_Init+0x68>)
 8000832:	2220      	movs	r2, #32
 8000834:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000836:	4b0b      	ldr	r3, [pc, #44]	@ (8000864 <MX_SPI1_Init+0x68>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800083c:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <MX_SPI1_Init+0x68>)
 800083e:	2200      	movs	r2, #0
 8000840:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000842:	4b08      	ldr	r3, [pc, #32]	@ (8000864 <MX_SPI1_Init+0x68>)
 8000844:	2200      	movs	r2, #0
 8000846:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000848:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <MX_SPI1_Init+0x68>)
 800084a:	220a      	movs	r2, #10
 800084c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	@ (8000864 <MX_SPI1_Init+0x68>)
 8000850:	f005 f91a 	bl	8005a88 <HAL_SPI_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800085a:	f000 fa37 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200001f0 	.word	0x200001f0
 8000868:	40013000 	.word	0x40013000

0800086c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08e      	sub	sp, #56	@ 0x38
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000872:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000880:	f107 0320 	add.w	r3, r7, #32
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
 8000898:	615a      	str	r2, [r3, #20]
 800089a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800089c:	4b2b      	ldr	r3, [pc, #172]	@ (800094c <MX_TIM2_Init+0xe0>)
 800089e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 80008a4:	4b29      	ldr	r3, [pc, #164]	@ (800094c <MX_TIM2_Init+0xe0>)
 80008a6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80008aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ac:	4b27      	ldr	r3, [pc, #156]	@ (800094c <MX_TIM2_Init+0xe0>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80008b2:	4b26      	ldr	r3, [pc, #152]	@ (800094c <MX_TIM2_Init+0xe0>)
 80008b4:	220a      	movs	r2, #10
 80008b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b8:	4b24      	ldr	r3, [pc, #144]	@ (800094c <MX_TIM2_Init+0xe0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008be:	4b23      	ldr	r3, [pc, #140]	@ (800094c <MX_TIM2_Init+0xe0>)
 80008c0:	2280      	movs	r2, #128	@ 0x80
 80008c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008c4:	4821      	ldr	r0, [pc, #132]	@ (800094c <MX_TIM2_Init+0xe0>)
 80008c6:	f005 fe33 	bl	8006530 <HAL_TIM_Base_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80008d0:	f000 f9fc 	bl	8000ccc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008de:	4619      	mov	r1, r3
 80008e0:	481a      	ldr	r0, [pc, #104]	@ (800094c <MX_TIM2_Init+0xe0>)
 80008e2:	f006 fc97 	bl	8007214 <HAL_TIM_ConfigClockSource>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80008ec:	f000 f9ee 	bl	8000ccc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80008f0:	4816      	ldr	r0, [pc, #88]	@ (800094c <MX_TIM2_Init+0xe0>)
 80008f2:	f005 ff35 	bl	8006760 <HAL_TIM_OC_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80008fc:	f000 f9e6 	bl	8000ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000908:	f107 0320 	add.w	r3, r7, #32
 800090c:	4619      	mov	r1, r3
 800090e:	480f      	ldr	r0, [pc, #60]	@ (800094c <MX_TIM2_Init+0xe0>)
 8000910:	f007 fc2c 	bl	800816c <HAL_TIMEx_MasterConfigSynchronization>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800091a:	f000 f9d7 	bl	8000ccc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2200      	movs	r2, #0
 8000932:	4619      	mov	r1, r3
 8000934:	4805      	ldr	r0, [pc, #20]	@ (800094c <MX_TIM2_Init+0xe0>)
 8000936:	f006 fafb 	bl	8006f30 <HAL_TIM_OC_ConfigChannel>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000940:	f000 f9c4 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	3738      	adds	r7, #56	@ 0x38
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000248 	.word	0x20000248

08000950 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000954:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <MX_UART4_Init+0x50>)
 8000956:	4a13      	ldr	r2, [pc, #76]	@ (80009a4 <MX_UART4_Init+0x54>)
 8000958:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <MX_UART4_Init+0x50>)
 800095c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000960:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 8000962:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <MX_UART4_Init+0x50>)
 8000964:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000968:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800096a:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <MX_UART4_Init+0x50>)
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8000970:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <MX_UART4_Init+0x50>)
 8000972:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000976:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000978:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <MX_UART4_Init+0x50>)
 800097a:	220c      	movs	r2, #12
 800097c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097e:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <MX_UART4_Init+0x50>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000984:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <MX_UART4_Init+0x50>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <MX_UART4_Init+0x50>)
 800098c:	f007 fce0 	bl	8008350 <HAL_UART_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_UART4_Init+0x4a>
  {
    Error_Handler();
 8000996:	f000 f999 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000290 	.word	0x20000290
 80009a4:	40004c00 	.word	0x40004c00

080009a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	@ 0x28
 80009ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	4b56      	ldr	r3, [pc, #344]	@ (8000b1c <MX_GPIO_Init+0x174>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a55      	ldr	r2, [pc, #340]	@ (8000b1c <MX_GPIO_Init+0x174>)
 80009c8:	f043 0304 	orr.w	r3, r3, #4
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b53      	ldr	r3, [pc, #332]	@ (8000b1c <MX_GPIO_Init+0x174>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	4b4f      	ldr	r3, [pc, #316]	@ (8000b1c <MX_GPIO_Init+0x174>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	4a4e      	ldr	r2, [pc, #312]	@ (8000b1c <MX_GPIO_Init+0x174>)
 80009e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ea:	4b4c      	ldr	r3, [pc, #304]	@ (8000b1c <MX_GPIO_Init+0x174>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	4b48      	ldr	r3, [pc, #288]	@ (8000b1c <MX_GPIO_Init+0x174>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a47      	ldr	r2, [pc, #284]	@ (8000b1c <MX_GPIO_Init+0x174>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b45      	ldr	r3, [pc, #276]	@ (8000b1c <MX_GPIO_Init+0x174>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b41      	ldr	r3, [pc, #260]	@ (8000b1c <MX_GPIO_Init+0x174>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	4a40      	ldr	r2, [pc, #256]	@ (8000b1c <MX_GPIO_Init+0x174>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a22:	4b3e      	ldr	r3, [pc, #248]	@ (8000b1c <MX_GPIO_Init+0x174>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST_CS2_Pin|ST_CS1_Pin, GPIO_PIN_SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2111      	movs	r1, #17
 8000a32:	483b      	ldr	r0, [pc, #236]	@ (8000b20 <MX_GPIO_Init+0x178>)
 8000a34:	f002 ff42 	bl	80038bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST_RST_GPIO_Port, ST_RST_Pin, GPIO_PIN_SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2110      	movs	r1, #16
 8000a3c:	4839      	ldr	r0, [pc, #228]	@ (8000b24 <MX_GPIO_Init+0x17c>)
 8000a3e:	f002 ff3d 	bl	80038bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8000a48:	4836      	ldr	r0, [pc, #216]	@ (8000b24 <MX_GPIO_Init+0x17c>)
 8000a4a:	f002 ff37 	bl	80038bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST_CS2_Pin ST_CS1_Pin */
  GPIO_InitStruct.Pin = ST_CS2_Pin|ST_CS1_Pin;
 8000a4e:	2311      	movs	r3, #17
 8000a50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	482e      	ldr	r0, [pc, #184]	@ (8000b20 <MX_GPIO_Init+0x178>)
 8000a66:	f002 fc55 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST_RST_Pin */
  GPIO_InitStruct.Pin = ST_RST_Pin;
 8000a6a:	2310      	movs	r3, #16
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a76:	2301      	movs	r3, #1
 8000a78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ST_RST_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4828      	ldr	r0, [pc, #160]	@ (8000b24 <MX_GPIO_Init+0x17c>)
 8000a82:	f002 fc47 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST_IRQ1_Pin */
  GPIO_InitStruct.Pin = ST_IRQ1_Pin;
 8000a86:	2320      	movs	r3, #32
 8000a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a8a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ST_IRQ1_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4822      	ldr	r0, [pc, #136]	@ (8000b24 <MX_GPIO_Init+0x17c>)
 8000a9c:	f002 fc3a 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST_IRQ2_Pin */
  GPIO_InitStruct.Pin = ST_IRQ2_Pin;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000aa4:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ST_IRQ2_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	481c      	ldr	r0, [pc, #112]	@ (8000b28 <MX_GPIO_Init+0x180>)
 8000ab6:	f002 fc2d 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST_SYNC11_Pin ST_SYNC01_Pin ST_SYNC12_Pin ST_SYNC02_Pin */
  GPIO_InitStruct.Pin = ST_SYNC11_Pin|ST_SYNC01_Pin|ST_SYNC12_Pin|ST_SYNC02_Pin;
 8000aba:	f641 4302 	movw	r3, #7170	@ 0x1c02
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	4816      	ldr	r0, [pc, #88]	@ (8000b28 <MX_GPIO_Init+0x180>)
 8000ad0:	f002 fc20 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED1_Pin;
 8000ad4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	480d      	ldr	r0, [pc, #52]	@ (8000b24 <MX_GPIO_Init+0x17c>)
 8000aee:	f002 fc11 	bl	8003314 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2100      	movs	r1, #0
 8000af6:	2006      	movs	r0, #6
 8000af8:	f002 f95c 	bl	8002db4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000afc:	2006      	movs	r0, #6
 8000afe:	f002 f985 	bl	8002e0c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2100      	movs	r1, #0
 8000b06:	2017      	movs	r0, #23
 8000b08:	f002 f954 	bl	8002db4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b0c:	2017      	movs	r0, #23
 8000b0e:	f002 f97d 	bl	8002e0c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b12:	bf00      	nop
 8000b14:	3728      	adds	r7, #40	@ 0x28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40020800 	.word	0x40020800
 8000b28:	40020400 	.word	0x40020400

08000b2c <HAL_SPI_TxRxCpltCallback>:
    // when usb data receive do....
}


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b09e      	sub	sp, #120	@ 0x78
 8000b30:	af02      	add	r7, sp, #8
 8000b32:	6078      	str	r0, [r7, #4]
  	newData = 1;
 8000b34:	4b17      	ldr	r3, [pc, #92]	@ (8000b94 <HAL_SPI_TxRxCpltCallback+0x68>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	601a      	str	r2, [r3, #0]

    if (hspi == &hspi1) {
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a16      	ldr	r2, [pc, #88]	@ (8000b98 <HAL_SPI_TxRxCpltCallback+0x6c>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d123      	bne.n	8000b8a <HAL_SPI_TxRxCpltCallback+0x5e>

    	char msg[100] = {0};
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	f107 0310 	add.w	r3, r7, #16
 8000b4a:	2260      	movs	r2, #96	@ 0x60
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f00b ffac 	bl	800caac <memset>

        sprintf(msg, "New SPI Data Received: %d: %d: %d\n", SPI_RX_Buffer[0] , SPI_RX_Buffer[1] , SPI_RX_Buffer[2] );
 8000b54:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <HAL_SPI_TxRxCpltCallback+0x70>)
 8000b56:	881b      	ldrh	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <HAL_SPI_TxRxCpltCallback+0x70>)
 8000b5c:	885b      	ldrh	r3, [r3, #2]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <HAL_SPI_TxRxCpltCallback+0x70>)
 8000b62:	889b      	ldrh	r3, [r3, #4]
 8000b64:	f107 000c 	add.w	r0, r7, #12
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	490c      	ldr	r1, [pc, #48]	@ (8000ba0 <HAL_SPI_TxRxCpltCallback+0x74>)
 8000b6e:	f00b ff7d 	bl	800ca6c <siprintf>
        CDC_Transmit_FS(msg, strlen(msg));
 8000b72:	f107 030c 	add.w	r3, r7, #12
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fb2a 	bl	80001d0 <strlen>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	4611      	mov	r1, r2
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 fc15 	bl	80013b4 <CDC_Transmit_FS>

    }

}
 8000b8a:	bf00      	nop
 8000b8c:	3770      	adds	r7, #112	@ 0x70
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000348 	.word	0x20000348
 8000b98:	200001f0 	.word	0x200001f0
 8000b9c:	20000340 	.word	0x20000340
 8000ba0:	0800d3c4 	.word	0x0800d3c4

08000ba4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]

  if (huart == &huart4) {
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a08      	ldr	r2, [pc, #32]	@ (8000bd0 <HAL_UART_RxCpltCallback+0x2c>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d108      	bne.n	8000bc6 <HAL_UART_RxCpltCallback+0x22>
    // Enable reception for the next character
    HAL_UART_Receive_IT(&huart4, rx_buff, 1);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	4907      	ldr	r1, [pc, #28]	@ (8000bd4 <HAL_UART_RxCpltCallback+0x30>)
 8000bb8:	4805      	ldr	r0, [pc, #20]	@ (8000bd0 <HAL_UART_RxCpltCallback+0x2c>)
 8000bba:	f007 fcd3 	bl	8008564 <HAL_UART_Receive_IT>
    CDC_Transmit_FS(rx_buff,1);
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	4804      	ldr	r0, [pc, #16]	@ (8000bd4 <HAL_UART_RxCpltCallback+0x30>)
 8000bc2:	f000 fbf7 	bl	80013b4 <CDC_Transmit_FS>

  }
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000290 	.word	0x20000290
 8000bd4:	20000320 	.word	0x20000320

08000bd8 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000be8:	d11c      	bne.n	8000c24 <HAL_TIM_OC_DelayElapsedCallback+0x4c>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	7f1b      	ldrb	r3, [r3, #28]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d118      	bne.n	8000c24 <HAL_TIM_OC_DelayElapsedCallback+0x4c>
    {
    	timer++;
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c30 <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8000bfa:	6013      	str	r3, [r2, #0]
    	timer1++;
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c34 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	3301      	adds	r3, #1
 8000c02:	4a0c      	ldr	r2, [pc, #48]	@ (8000c34 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000c04:	6013      	str	r3, [r2, #0]
    	timer2++;
 8000c06:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c38 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 8000c0e:	6013      	str	r3, [r2, #0]
    	timer3++;
 8000c10:	4b0a      	ldr	r3, [pc, #40]	@ (8000c3c <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	3301      	adds	r3, #1
 8000c16:	4a09      	ldr	r2, [pc, #36]	@ (8000c3c <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 8000c18:	6013      	str	r3, [r2, #0]
    	timer4++;
 8000c1a:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	4a07      	ldr	r2, [pc, #28]	@ (8000c40 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000c22:	6013      	str	r3, [r2, #0]

     }
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	2000034c 	.word	0x2000034c
 8000c34:	20000050 	.word	0x20000050
 8000c38:	20000054 	.word	0x20000054
 8000c3c:	20000058 	.word	0x20000058
 8000c40:	2000005c 	.word	0x2000005c

08000c44 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @retval None
  */


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b0b6      	sub	sp, #216	@ 0xd8
 8000c48:	af02      	add	r7, sp, #8
 8000c4a:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000c4e:	4a1d      	ldr	r2, [pc, #116]	@ (8000cc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000c50:	2100      	movs	r1, #0
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f001 fc2e 	bl	80024b4 <HAL_CAN_GetRxMessage>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d002      	beq.n	8000c64 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
  {
    Error_Handler();
 8000c5e:	f000 f835 	bl	8000ccc <Error_Handler>
 8000c62:	e020      	b.n	8000ca6 <HAL_CAN_RxFifo0MsgPendingCallback+0x62>

  }
	else{

		char msg[200] = {0};
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	f107 030c 	add.w	r3, r7, #12
 8000c6c:	22c4      	movs	r2, #196	@ 0xc4
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f00b ff1b 	bl	800caac <memset>

		sprintf(msg, "New CAN Message Received\n ID: %d\n SIZE: %d\n Value: %d\n", RxHeader.StdId , RxHeader.DLC , RxData[0] );
 8000c76:	4b13      	ldr	r3, [pc, #76]	@ (8000cc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000c7c:	691b      	ldr	r3, [r3, #16]
 8000c7e:	4910      	ldr	r1, [pc, #64]	@ (8000cc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8000c80:	7809      	ldrb	r1, [r1, #0]
 8000c82:	f107 0008 	add.w	r0, r7, #8
 8000c86:	9100      	str	r1, [sp, #0]
 8000c88:	490f      	ldr	r1, [pc, #60]	@ (8000cc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000c8a:	f00b feef 	bl	800ca6c <siprintf>
		CDC_Transmit_FS(msg, strlen(msg));
 8000c8e:	f107 0308 	add.w	r3, r7, #8
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fa9c 	bl	80001d0 <strlen>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	f107 0308 	add.w	r3, r7, #8
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 fb87 	bl	80013b4 <CDC_Transmit_FS>
  if ((RxHeader.StdId == 0x103))
  {
	  //////////////////////////////////////
  }
  /* Display LEDx */
   if ((RxHeader.StdId == 0x321) && (RxHeader.IDE == CAN_ID_STD) && (RxHeader.DLC == 2))
 8000ca6:	4b07      	ldr	r3, [pc, #28]	@ (8000cc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f240 3221 	movw	r2, #801	@ 0x321
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d102      	bne.n	8000cb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
 8000cb2:	4b04      	ldr	r3, [pc, #16]	@ (8000cc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	2b00      	cmp	r3, #0
   {

   }
}
 8000cb8:	bf00      	nop
 8000cba:	37d0      	adds	r7, #208	@ 0xd0
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000314 	.word	0x20000314
 8000cc4:	200002f0 	.word	0x200002f0
 8000cc8:	0800d3e8 	.word	0x0800d3e8

08000ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd0:	b672      	cpsid	i
}
 8000cd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <Error_Handler+0x8>

08000cd8 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8000d78 <HAL_MspInit+0x88>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8000d78 <HAL_MspInit+0x88>)
 8000d00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d06:	4b1c      	ldr	r3, [pc, #112]	@ (8000d78 <HAL_MspInit+0x88>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	4b18      	ldr	r3, [pc, #96]	@ (8000d78 <HAL_MspInit+0x88>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1a:	4a17      	ldr	r2, [pc, #92]	@ (8000d78 <HAL_MspInit+0x88>)
 8000d1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d22:	4b15      	ldr	r3, [pc, #84]	@ (8000d78 <HAL_MspInit+0x88>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	2001      	movs	r0, #1
 8000d34:	f002 f83e 	bl	8002db4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f002 f867 	bl	8002e0c <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	2004      	movs	r0, #4
 8000d44:	f002 f836 	bl	8002db4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8000d48:	2004      	movs	r0, #4
 8000d4a:	f002 f85f 	bl	8002e0c <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2100      	movs	r1, #0
 8000d52:	2005      	movs	r0, #5
 8000d54:	f002 f82e 	bl	8002db4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000d58:	2005      	movs	r0, #5
 8000d5a:	f002 f857 	bl	8002e0c <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2100      	movs	r1, #0
 8000d62:	2051      	movs	r0, #81	@ 0x51
 8000d64:	f002 f826 	bl	8002db4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8000d68:	2051      	movs	r0, #81	@ 0x51
 8000d6a:	f002 f84f 	bl	8002e0c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40023800 	.word	0x40023800

08000d7c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	@ 0x28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a30      	ldr	r2, [pc, #192]	@ (8000e5c <HAL_CAN_MspInit+0xe0>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d15a      	bne.n	8000e54 <HAL_CAN_MspInit+0xd8>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	4b2f      	ldr	r3, [pc, #188]	@ (8000e60 <HAL_CAN_MspInit+0xe4>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da6:	4a2e      	ldr	r2, [pc, #184]	@ (8000e60 <HAL_CAN_MspInit+0xe4>)
 8000da8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000dac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dae:	4b2c      	ldr	r3, [pc, #176]	@ (8000e60 <HAL_CAN_MspInit+0xe4>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	4b28      	ldr	r3, [pc, #160]	@ (8000e60 <HAL_CAN_MspInit+0xe4>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc2:	4a27      	ldr	r2, [pc, #156]	@ (8000e60 <HAL_CAN_MspInit+0xe4>)
 8000dc4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dca:	4b25      	ldr	r3, [pc, #148]	@ (8000e60 <HAL_CAN_MspInit+0xe4>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	4b21      	ldr	r3, [pc, #132]	@ (8000e60 <HAL_CAN_MspInit+0xe4>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	4a20      	ldr	r2, [pc, #128]	@ (8000e60 <HAL_CAN_MspInit+0xe4>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e60 <HAL_CAN_MspInit+0xe4>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB13     ------> CAN2_TX
    PB5     ------> CAN2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8000df2:	f242 0320 	movw	r3, #8224	@ 0x2020
 8000df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000e04:	2309      	movs	r3, #9
 8000e06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4815      	ldr	r0, [pc, #84]	@ (8000e64 <HAL_CAN_MspInit+0xe8>)
 8000e10:	f002 fa80 	bl	8003314 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2100      	movs	r1, #0
 8000e18:	203f      	movs	r0, #63	@ 0x3f
 8000e1a:	f001 ffcb 	bl	8002db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8000e1e:	203f      	movs	r0, #63	@ 0x3f
 8000e20:	f001 fff4 	bl	8002e0c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2100      	movs	r1, #0
 8000e28:	2040      	movs	r0, #64	@ 0x40
 8000e2a:	f001 ffc3 	bl	8002db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000e2e:	2040      	movs	r0, #64	@ 0x40
 8000e30:	f001 ffec 	bl	8002e0c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2100      	movs	r1, #0
 8000e38:	2041      	movs	r0, #65	@ 0x41
 8000e3a:	f001 ffbb 	bl	8002db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000e3e:	2041      	movs	r0, #65	@ 0x41
 8000e40:	f001 ffe4 	bl	8002e0c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2100      	movs	r1, #0
 8000e48:	2042      	movs	r0, #66	@ 0x42
 8000e4a:	f001 ffb3 	bl	8002db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 8000e4e:	2042      	movs	r0, #66	@ 0x42
 8000e50:	f001 ffdc 	bl	8002e0c <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN2_MspInit 1 */

  }

}
 8000e54:	bf00      	nop
 8000e56:	3728      	adds	r7, #40	@ 0x28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40006800 	.word	0x40006800
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020400 	.word	0x40020400

08000e68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	@ 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a1d      	ldr	r2, [pc, #116]	@ (8000efc <HAL_SPI_MspInit+0x94>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d133      	bne.n	8000ef2 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f00 <HAL_SPI_MspInit+0x98>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e92:	4a1b      	ldr	r2, [pc, #108]	@ (8000f00 <HAL_SPI_MspInit+0x98>)
 8000e94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e9a:	4b19      	ldr	r3, [pc, #100]	@ (8000f00 <HAL_SPI_MspInit+0x98>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <HAL_SPI_MspInit+0x98>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	4a14      	ldr	r2, [pc, #80]	@ (8000f00 <HAL_SPI_MspInit+0x98>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb6:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <HAL_SPI_MspInit+0x98>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ST_SCK_Pin|ST_MISO_Pin|ST_MOSI_Pin;
 8000ec2:	23e0      	movs	r3, #224	@ 0xe0
 8000ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ed2:	2305      	movs	r3, #5
 8000ed4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	4809      	ldr	r0, [pc, #36]	@ (8000f04 <HAL_SPI_MspInit+0x9c>)
 8000ede:	f002 fa19 	bl	8003314 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2023      	movs	r0, #35	@ 0x23
 8000ee8:	f001 ff64 	bl	8002db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000eec:	2023      	movs	r0, #35	@ 0x23
 8000eee:	f001 ff8d 	bl	8002e0c <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000ef2:	bf00      	nop
 8000ef4:	3728      	adds	r7, #40	@ 0x28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40013000 	.word	0x40013000
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020000 	.word	0x40020000

08000f08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f18:	d115      	bne.n	8000f46 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <HAL_TIM_Base_MspInit+0x48>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f22:	4a0b      	ldr	r2, [pc, #44]	@ (8000f50 <HAL_TIM_Base_MspInit+0x48>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f2a:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <HAL_TIM_Base_MspInit+0x48>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2100      	movs	r1, #0
 8000f3a:	201c      	movs	r0, #28
 8000f3c:	f001 ff3a 	bl	8002db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f40:	201c      	movs	r0, #28
 8000f42:	f001 ff63 	bl	8002e0c <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40023800 	.word	0x40023800

08000f54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08a      	sub	sp, #40	@ 0x28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a26      	ldr	r2, [pc, #152]	@ (800100c <HAL_UART_MspInit+0xb8>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d145      	bne.n	8001002 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	4b25      	ldr	r3, [pc, #148]	@ (8001010 <HAL_UART_MspInit+0xbc>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7e:	4a24      	ldr	r2, [pc, #144]	@ (8001010 <HAL_UART_MspInit+0xbc>)
 8000f80:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f86:	4b22      	ldr	r3, [pc, #136]	@ (8001010 <HAL_UART_MspInit+0xbc>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	4b1e      	ldr	r3, [pc, #120]	@ (8001010 <HAL_UART_MspInit+0xbc>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	4a1d      	ldr	r2, [pc, #116]	@ (8001010 <HAL_UART_MspInit+0xbc>)
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8001010 <HAL_UART_MspInit+0xbc>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000fc0:	2308      	movs	r3, #8
 8000fc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4812      	ldr	r0, [pc, #72]	@ (8001014 <HAL_UART_MspInit+0xc0>)
 8000fcc:	f002 f9a2 	bl	8003314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fd0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000fe2:	2308      	movs	r3, #8
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	4809      	ldr	r0, [pc, #36]	@ (8001014 <HAL_UART_MspInit+0xc0>)
 8000fee:	f002 f991 	bl	8003314 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2034      	movs	r0, #52	@ 0x34
 8000ff8:	f001 fedc 	bl	8002db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000ffc:	2034      	movs	r0, #52	@ 0x34
 8000ffe:	f001 ff05 	bl	8002e0c <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8001002:	bf00      	nop
 8001004:	3728      	adds	r7, #40	@ 0x28
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40004c00 	.word	0x40004c00
 8001010:	40023800 	.word	0x40023800
 8001014:	40020800 	.word	0x40020800

08001018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <NMI_Handler+0x4>

08001020 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <HardFault_Handler+0x4>

08001028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <MemManage_Handler+0x4>

08001030 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <BusFault_Handler+0x4>

08001038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <UsageFault_Handler+0x4>

08001040 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800106e:	f000 fe61 	bl	8001d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}

08001076 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800107a:	f003 fef7 	bl	8004e6c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}

08001082 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001086:	f001 ff77 	bl	8002f78 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}

0800108e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ST_IRQ2_Pin);
 80010a0:	2001      	movs	r0, #1
 80010a2:	f002 fc59 	bl	8003958 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}

080010aa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ST_IRQ1_Pin);
 80010ae:	2020      	movs	r0, #32
 80010b0:	f002 fc52 	bl	8003958 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010bc:	4802      	ldr	r0, [pc, #8]	@ (80010c8 <TIM2_IRQHandler+0x10>)
 80010be:	f005 fe47 	bl	8006d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000248 	.word	0x20000248

080010cc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80010d0:	4802      	ldr	r0, [pc, #8]	@ (80010dc <SPI1_IRQHandler+0x10>)
 80010d2:	f004 feff 	bl	8005ed4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200001f0 	.word	0x200001f0

080010e0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80010e4:	4802      	ldr	r0, [pc, #8]	@ (80010f0 <UART4_IRQHandler+0x10>)
 80010e6:	f007 fa63 	bl	80085b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000290 	.word	0x20000290

080010f4 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80010f8:	4802      	ldr	r0, [pc, #8]	@ (8001104 <CAN2_TX_IRQHandler+0x10>)
 80010fa:	f001 fb3b 	bl	8002774 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200001c8 	.word	0x200001c8

08001108 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800110c:	4802      	ldr	r0, [pc, #8]	@ (8001118 <CAN2_RX0_IRQHandler+0x10>)
 800110e:	f001 fb31 	bl	8002774 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200001c8 	.word	0x200001c8

0800111c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001120:	4802      	ldr	r0, [pc, #8]	@ (800112c <CAN2_RX1_IRQHandler+0x10>)
 8001122:	f001 fb27 	bl	8002774 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200001c8 	.word	0x200001c8

08001130 <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001134:	4802      	ldr	r0, [pc, #8]	@ (8001140 <CAN2_SCE_IRQHandler+0x10>)
 8001136:	f001 fb1d 	bl	8002774 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200001c8 	.word	0x200001c8

08001144 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001148:	4802      	ldr	r0, [pc, #8]	@ (8001154 <OTG_FS_IRQHandler+0x10>)
 800114a:	f002 fd80 	bl	8003c4e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20001830 	.word	0x20001830

08001158 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001170:	4a14      	ldr	r2, [pc, #80]	@ (80011c4 <_sbrk+0x5c>)
 8001172:	4b15      	ldr	r3, [pc, #84]	@ (80011c8 <_sbrk+0x60>)
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800117c:	4b13      	ldr	r3, [pc, #76]	@ (80011cc <_sbrk+0x64>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d102      	bne.n	800118a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001184:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <_sbrk+0x64>)
 8001186:	4a12      	ldr	r2, [pc, #72]	@ (80011d0 <_sbrk+0x68>)
 8001188:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800118a:	4b10      	ldr	r3, [pc, #64]	@ (80011cc <_sbrk+0x64>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	429a      	cmp	r2, r3
 8001196:	d207      	bcs.n	80011a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001198:	f00b fc90 	bl	800cabc <__errno>
 800119c:	4603      	mov	r3, r0
 800119e:	220c      	movs	r2, #12
 80011a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295
 80011a6:	e009      	b.n	80011bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a8:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <_sbrk+0x64>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ae:	4b07      	ldr	r3, [pc, #28]	@ (80011cc <_sbrk+0x64>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	4a05      	ldr	r2, [pc, #20]	@ (80011cc <_sbrk+0x64>)
 80011b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ba:	68fb      	ldr	r3, [r7, #12]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20020000 	.word	0x20020000
 80011c8:	00000400 	.word	0x00000400
 80011cc:	20000350 	.word	0x20000350
 80011d0:	200020a8 	.word	0x200020a8

080011d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800120c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011d8:	f000 fd48 	bl	8001c6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011dc:	480c      	ldr	r0, [pc, #48]	@ (8001210 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011de:	490d      	ldr	r1, [pc, #52]	@ (8001214 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001218 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e4:	e002      	b.n	80011ec <LoopCopyDataInit>

080011e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ea:	3304      	adds	r3, #4

080011ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f0:	d3f9      	bcc.n	80011e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f2:	4a0a      	ldr	r2, [pc, #40]	@ (800121c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001220 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f8:	e001      	b.n	80011fe <LoopFillZerobss>

080011fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011fc:	3204      	adds	r2, #4

080011fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001200:	d3fb      	bcc.n	80011fa <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001202:	f00b fc61 	bl	800cac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001206:	f7ff f9b3 	bl	8000570 <main>
  bx  lr    
 800120a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800120c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001214:	200001ac 	.word	0x200001ac
  ldr r2, =_sidata
 8001218:	0800d980 	.word	0x0800d980
  ldr r2, =_sbss
 800121c:	200001ac 	.word	0x200001ac
  ldr r4, =_ebss
 8001220:	200020a4 	.word	0x200020a4

08001224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC_IRQHandler>
	...

08001228 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800122c:	2200      	movs	r2, #0
 800122e:	4912      	ldr	r1, [pc, #72]	@ (8001278 <MX_USB_DEVICE_Init+0x50>)
 8001230:	4812      	ldr	r0, [pc, #72]	@ (800127c <MX_USB_DEVICE_Init+0x54>)
 8001232:	f00a f919 	bl	800b468 <USBD_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800123c:	f7ff fd46 	bl	8000ccc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8001240:	490f      	ldr	r1, [pc, #60]	@ (8001280 <MX_USB_DEVICE_Init+0x58>)
 8001242:	480e      	ldr	r0, [pc, #56]	@ (800127c <MX_USB_DEVICE_Init+0x54>)
 8001244:	f00a f940 	bl	800b4c8 <USBD_RegisterClass>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800124e:	f7ff fd3d 	bl	8000ccc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8001252:	490c      	ldr	r1, [pc, #48]	@ (8001284 <MX_USB_DEVICE_Init+0x5c>)
 8001254:	4809      	ldr	r0, [pc, #36]	@ (800127c <MX_USB_DEVICE_Init+0x54>)
 8001256:	f00a f837 	bl	800b2c8 <USBD_CDC_RegisterInterface>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8001260:	f7ff fd34 	bl	8000ccc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8001264:	4805      	ldr	r0, [pc, #20]	@ (800127c <MX_USB_DEVICE_Init+0x54>)
 8001266:	f00a f965 	bl	800b534 <USBD_Start>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8001270:	f7ff fd2c 	bl	8000ccc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000074 	.word	0x20000074
 800127c:	20000354 	.word	0x20000354
 8001280:	200000dc 	.word	0x200000dc
 8001284:	20000060 	.word	0x20000060

08001288 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800128c:	2200      	movs	r2, #0
 800128e:	4905      	ldr	r1, [pc, #20]	@ (80012a4 <CDC_Init_FS+0x1c>)
 8001290:	4805      	ldr	r0, [pc, #20]	@ (80012a8 <CDC_Init_FS+0x20>)
 8001292:	f00a f833 	bl	800b2fc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8001296:	4905      	ldr	r1, [pc, #20]	@ (80012ac <CDC_Init_FS+0x24>)
 8001298:	4803      	ldr	r0, [pc, #12]	@ (80012a8 <CDC_Init_FS+0x20>)
 800129a:	f00a f851 	bl	800b340 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800129e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000e30 	.word	0x20000e30
 80012a8:	20000354 	.word	0x20000354
 80012ac:	20000630 	.word	0x20000630

080012b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80012b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
 80012cc:	4613      	mov	r3, r2
 80012ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	2b23      	cmp	r3, #35	@ 0x23
 80012d4:	d84a      	bhi.n	800136c <CDC_Control_FS+0xac>
 80012d6:	a201      	add	r2, pc, #4	@ (adr r2, 80012dc <CDC_Control_FS+0x1c>)
 80012d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012dc:	0800136d 	.word	0x0800136d
 80012e0:	0800136d 	.word	0x0800136d
 80012e4:	0800136d 	.word	0x0800136d
 80012e8:	0800136d 	.word	0x0800136d
 80012ec:	0800136d 	.word	0x0800136d
 80012f0:	0800136d 	.word	0x0800136d
 80012f4:	0800136d 	.word	0x0800136d
 80012f8:	0800136d 	.word	0x0800136d
 80012fc:	0800136d 	.word	0x0800136d
 8001300:	0800136d 	.word	0x0800136d
 8001304:	0800136d 	.word	0x0800136d
 8001308:	0800136d 	.word	0x0800136d
 800130c:	0800136d 	.word	0x0800136d
 8001310:	0800136d 	.word	0x0800136d
 8001314:	0800136d 	.word	0x0800136d
 8001318:	0800136d 	.word	0x0800136d
 800131c:	0800136d 	.word	0x0800136d
 8001320:	0800136d 	.word	0x0800136d
 8001324:	0800136d 	.word	0x0800136d
 8001328:	0800136d 	.word	0x0800136d
 800132c:	0800136d 	.word	0x0800136d
 8001330:	0800136d 	.word	0x0800136d
 8001334:	0800136d 	.word	0x0800136d
 8001338:	0800136d 	.word	0x0800136d
 800133c:	0800136d 	.word	0x0800136d
 8001340:	0800136d 	.word	0x0800136d
 8001344:	0800136d 	.word	0x0800136d
 8001348:	0800136d 	.word	0x0800136d
 800134c:	0800136d 	.word	0x0800136d
 8001350:	0800136d 	.word	0x0800136d
 8001354:	0800136d 	.word	0x0800136d
 8001358:	0800136d 	.word	0x0800136d
 800135c:	0800136d 	.word	0x0800136d
 8001360:	0800136d 	.word	0x0800136d
 8001364:	0800136d 	.word	0x0800136d
 8001368:	0800136d 	.word	0x0800136d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800136c:	bf00      	nop
  }

  return (USBD_OK);
 800136e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	4808      	ldr	r0, [pc, #32]	@ (80013ac <CDC_Receive_FS+0x30>)
 800138a:	f009 ffd9 	bl	800b340 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800138e:	4807      	ldr	r0, [pc, #28]	@ (80013ac <CDC_Receive_FS+0x30>)
 8001390:	f00a f834 	bl	800b3fc <USBD_CDC_ReceivePacket>
  //USB_CDC_RxHandler(UserRxBufferFS, *Len);
  memset(UserRxBufferFS, '\0', *Len);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	2100      	movs	r1, #0
 800139c:	4804      	ldr	r0, [pc, #16]	@ (80013b0 <CDC_Receive_FS+0x34>)
 800139e:	f00b fb85 	bl	800caac <memset>
  return (USBD_OK);
 80013a2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000354 	.word	0x20000354
 80013b0:	20000630 	.word	0x20000630

080013b4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80013c4:	4b0d      	ldr	r3, [pc, #52]	@ (80013fc <CDC_Transmit_FS+0x48>)
 80013c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80013ca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00b      	b.n	80013f2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80013da:	887b      	ldrh	r3, [r7, #2]
 80013dc:	461a      	mov	r2, r3
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	4806      	ldr	r0, [pc, #24]	@ (80013fc <CDC_Transmit_FS+0x48>)
 80013e2:	f009 ff8b 	bl	800b2fc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80013e6:	4805      	ldr	r0, [pc, #20]	@ (80013fc <CDC_Transmit_FS+0x48>)
 80013e8:	f009 ffc8 	bl	800b37c <USBD_CDC_TransmitPacket>
 80013ec:	4603      	mov	r3, r0
 80013ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000354 	.word	0x20000354

08001400 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8001400:	b480      	push	{r7}
 8001402:	b087      	sub	sp, #28
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	4613      	mov	r3, r2
 800140c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8001412:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001416:	4618      	mov	r0, r3
 8001418:	371c      	adds	r7, #28
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	2212      	movs	r2, #18
 8001434:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8001436:	4b03      	ldr	r3, [pc, #12]	@ (8001444 <USBD_FS_DeviceDescriptor+0x20>)
}
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	20000090 	.word	0x20000090

08001448 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	2204      	movs	r2, #4
 8001458:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800145a:	4b03      	ldr	r3, [pc, #12]	@ (8001468 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	200000a4 	.word	0x200000a4

0800146c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d105      	bne.n	800148a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	4907      	ldr	r1, [pc, #28]	@ (80014a0 <USBD_FS_ProductStrDescriptor+0x34>)
 8001482:	4808      	ldr	r0, [pc, #32]	@ (80014a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8001484:	f00b fa06 	bl	800c894 <USBD_GetString>
 8001488:	e004      	b.n	8001494 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	4904      	ldr	r1, [pc, #16]	@ (80014a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800148e:	4805      	ldr	r0, [pc, #20]	@ (80014a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8001490:	f00b fa00 	bl	800c894 <USBD_GetString>
  }
  return USBD_StrDesc;
 8001494:	4b02      	ldr	r3, [pc, #8]	@ (80014a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20001630 	.word	0x20001630
 80014a4:	0800d420 	.word	0x0800d420

080014a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	6039      	str	r1, [r7, #0]
 80014b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	4904      	ldr	r1, [pc, #16]	@ (80014c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80014b8:	4804      	ldr	r0, [pc, #16]	@ (80014cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80014ba:	f00b f9eb 	bl	800c894 <USBD_GetString>
  return USBD_StrDesc;
 80014be:	4b02      	ldr	r3, [pc, #8]	@ (80014c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20001630 	.word	0x20001630
 80014cc:	0800d438 	.word	0x0800d438

080014d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	6039      	str	r1, [r7, #0]
 80014da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	221a      	movs	r2, #26
 80014e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80014e2:	f000 f843 	bl	800156c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80014e6:	4b02      	ldr	r3, [pc, #8]	@ (80014f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	200000a8 	.word	0x200000a8

080014f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	6039      	str	r1, [r7, #0]
 80014fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d105      	bne.n	8001512 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	4907      	ldr	r1, [pc, #28]	@ (8001528 <USBD_FS_ConfigStrDescriptor+0x34>)
 800150a:	4808      	ldr	r0, [pc, #32]	@ (800152c <USBD_FS_ConfigStrDescriptor+0x38>)
 800150c:	f00b f9c2 	bl	800c894 <USBD_GetString>
 8001510:	e004      	b.n	800151c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	4904      	ldr	r1, [pc, #16]	@ (8001528 <USBD_FS_ConfigStrDescriptor+0x34>)
 8001516:	4805      	ldr	r0, [pc, #20]	@ (800152c <USBD_FS_ConfigStrDescriptor+0x38>)
 8001518:	f00b f9bc 	bl	800c894 <USBD_GetString>
  }
  return USBD_StrDesc;
 800151c:	4b02      	ldr	r3, [pc, #8]	@ (8001528 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20001630 	.word	0x20001630
 800152c:	0800d44c 	.word	0x0800d44c

08001530 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	6039      	str	r1, [r7, #0]
 800153a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d105      	bne.n	800154e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	4907      	ldr	r1, [pc, #28]	@ (8001564 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8001546:	4808      	ldr	r0, [pc, #32]	@ (8001568 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8001548:	f00b f9a4 	bl	800c894 <USBD_GetString>
 800154c:	e004      	b.n	8001558 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	4904      	ldr	r1, [pc, #16]	@ (8001564 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8001552:	4805      	ldr	r0, [pc, #20]	@ (8001568 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8001554:	f00b f99e 	bl	800c894 <USBD_GetString>
  }
  return USBD_StrDesc;
 8001558:	4b02      	ldr	r3, [pc, #8]	@ (8001564 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20001630 	.word	0x20001630
 8001568:	0800d458 	.word	0x0800d458

0800156c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8001572:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <Get_SerialNum+0x44>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8001578:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <Get_SerialNum+0x48>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800157e:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <Get_SerialNum+0x4c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4413      	add	r3, r2
 800158a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d009      	beq.n	80015a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8001592:	2208      	movs	r2, #8
 8001594:	4909      	ldr	r1, [pc, #36]	@ (80015bc <Get_SerialNum+0x50>)
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f000 f814 	bl	80015c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800159c:	2204      	movs	r2, #4
 800159e:	4908      	ldr	r1, [pc, #32]	@ (80015c0 <Get_SerialNum+0x54>)
 80015a0:	68b8      	ldr	r0, [r7, #8]
 80015a2:	f000 f80f 	bl	80015c4 <IntToUnicode>
  }
}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	1fff7a10 	.word	0x1fff7a10
 80015b4:	1fff7a14 	.word	0x1fff7a14
 80015b8:	1fff7a18 	.word	0x1fff7a18
 80015bc:	200000aa 	.word	0x200000aa
 80015c0:	200000ba 	.word	0x200000ba

080015c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b087      	sub	sp, #28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	4613      	mov	r3, r2
 80015d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	75fb      	strb	r3, [r7, #23]
 80015da:	e027      	b.n	800162c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	0f1b      	lsrs	r3, r3, #28
 80015e0:	2b09      	cmp	r3, #9
 80015e2:	d80b      	bhi.n	80015fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	0f1b      	lsrs	r3, r3, #28
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	7dfb      	ldrb	r3, [r7, #23]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4619      	mov	r1, r3
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	440b      	add	r3, r1
 80015f4:	3230      	adds	r2, #48	@ 0x30
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	701a      	strb	r2, [r3, #0]
 80015fa:	e00a      	b.n	8001612 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	0f1b      	lsrs	r3, r3, #28
 8001600:	b2da      	uxtb	r2, r3
 8001602:	7dfb      	ldrb	r3, [r7, #23]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	4619      	mov	r1, r3
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	440b      	add	r3, r1
 800160c:	3237      	adds	r2, #55	@ 0x37
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	011b      	lsls	r3, r3, #4
 8001616:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8001618:	7dfb      	ldrb	r3, [r7, #23]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	3301      	adds	r3, #1
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	4413      	add	r3, r2
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8001626:	7dfb      	ldrb	r3, [r7, #23]
 8001628:	3301      	adds	r3, #1
 800162a:	75fb      	strb	r3, [r7, #23]
 800162c:	7dfa      	ldrb	r2, [r7, #23]
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	429a      	cmp	r2, r3
 8001632:	d3d3      	bcc.n	80015dc <IntToUnicode+0x18>
  }
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	371c      	adds	r7, #28
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	@ 0x28
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001664:	d13a      	bne.n	80016dc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	4b1e      	ldr	r3, [pc, #120]	@ (80016e4 <HAL_PCD_MspInit+0xa0>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	4a1d      	ldr	r2, [pc, #116]	@ (80016e4 <HAL_PCD_MspInit+0xa0>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6313      	str	r3, [r2, #48]	@ 0x30
 8001676:	4b1b      	ldr	r3, [pc, #108]	@ (80016e4 <HAL_PCD_MspInit+0xa0>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001682:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001694:	230a      	movs	r3, #10
 8001696:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	4812      	ldr	r0, [pc, #72]	@ (80016e8 <HAL_PCD_MspInit+0xa4>)
 80016a0:	f001 fe38 	bl	8003314 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016a4:	4b0f      	ldr	r3, [pc, #60]	@ (80016e4 <HAL_PCD_MspInit+0xa0>)
 80016a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016a8:	4a0e      	ldr	r2, [pc, #56]	@ (80016e4 <HAL_PCD_MspInit+0xa0>)
 80016aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016ae:	6353      	str	r3, [r2, #52]	@ 0x34
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	4b0b      	ldr	r3, [pc, #44]	@ (80016e4 <HAL_PCD_MspInit+0xa0>)
 80016b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b8:	4a0a      	ldr	r2, [pc, #40]	@ (80016e4 <HAL_PCD_MspInit+0xa0>)
 80016ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016be:	6453      	str	r3, [r2, #68]	@ 0x44
 80016c0:	4b08      	ldr	r3, [pc, #32]	@ (80016e4 <HAL_PCD_MspInit+0xa0>)
 80016c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2100      	movs	r1, #0
 80016d0:	2043      	movs	r0, #67	@ 0x43
 80016d2:	f001 fb6f 	bl	8002db4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80016d6:	2043      	movs	r0, #67	@ 0x43
 80016d8:	f001 fb98 	bl	8002e0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80016dc:	bf00      	nop
 80016de:	3728      	adds	r7, #40	@ 0x28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020000 	.word	0x40020000

080016ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001700:	4619      	mov	r1, r3
 8001702:	4610      	mov	r0, r2
 8001704:	f009 ff63 	bl	800b5ce <USBD_LL_SetupStage>
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8001722:	78fa      	ldrb	r2, [r7, #3]
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	4413      	add	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	440b      	add	r3, r1
 8001730:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	4619      	mov	r1, r3
 800173a:	f009 ff9d 	bl	800b678 <USBD_LL_DataOutStage>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	460b      	mov	r3, r1
 8001750:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8001758:	78fa      	ldrb	r2, [r7, #3]
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	4413      	add	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	3320      	adds	r3, #32
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	4619      	mov	r1, r3
 800176e:	f00a f836 	bl	800b7de <USBD_LL_DataInStage>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8001788:	4618      	mov	r0, r3
 800178a:	f00a f970 	bl	800ba6e <USBD_LL_SOF>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b084      	sub	sp, #16
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800179e:	2301      	movs	r3, #1
 80017a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	79db      	ldrb	r3, [r3, #7]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d102      	bne.n	80017b0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80017aa:	2300      	movs	r3, #0
 80017ac:	73fb      	strb	r3, [r7, #15]
 80017ae:	e008      	b.n	80017c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	79db      	ldrb	r3, [r3, #7]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d102      	bne.n	80017be <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80017b8:	2301      	movs	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
 80017bc:	e001      	b.n	80017c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80017be:	f7ff fa85 	bl	8000ccc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80017c8:	7bfa      	ldrb	r2, [r7, #15]
 80017ca:	4611      	mov	r1, r2
 80017cc:	4618      	mov	r0, r3
 80017ce:	f00a f90a 	bl	800b9e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80017d8:	4618      	mov	r0, r3
 80017da:	f00a f8b2 	bl	800b942 <USBD_LL_Reset>
}
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f00a f905 	bl	800ba06 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6812      	ldr	r2, [r2, #0]
 800180a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	7adb      	ldrb	r3, [r3, #11]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800181c:	4b04      	ldr	r3, [pc, #16]	@ (8001830 <HAL_PCD_SuspendCallback+0x48>)
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	4a03      	ldr	r2, [pc, #12]	@ (8001830 <HAL_PCD_SuspendCallback+0x48>)
 8001822:	f043 0306 	orr.w	r3, r3, #6
 8001826:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8001842:	4618      	mov	r0, r3
 8001844:	f00a f8fb 	bl	800ba3e <USBD_LL_Resume>
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8001862:	78fa      	ldrb	r2, [r7, #3]
 8001864:	4611      	mov	r1, r2
 8001866:	4618      	mov	r0, r3
 8001868:	f00a f953 	bl	800bb12 <USBD_LL_IsoOUTIncomplete>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8001886:	78fa      	ldrb	r2, [r7, #3]
 8001888:	4611      	mov	r1, r2
 800188a:	4618      	mov	r0, r3
 800188c:	f00a f90f 	bl	800baae <USBD_LL_IsoINIncomplete>
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f00a f965 	bl	800bb76 <USBD_LL_DevConnected>
}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f00a f962 	bl	800bb8c <USBD_LL_DevDisconnected>
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d13c      	bne.n	800195a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80018e0:	4a20      	ldr	r2, [pc, #128]	@ (8001964 <USBD_LL_Init+0x94>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001964 <USBD_LL_Init+0x94>)
 80018ec:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80018f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001964 <USBD_LL_Init+0x94>)
 80018f2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80018f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80018f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001964 <USBD_LL_Init+0x94>)
 80018fa:	2204      	movs	r2, #4
 80018fc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80018fe:	4b19      	ldr	r3, [pc, #100]	@ (8001964 <USBD_LL_Init+0x94>)
 8001900:	2202      	movs	r2, #2
 8001902:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001904:	4b17      	ldr	r3, [pc, #92]	@ (8001964 <USBD_LL_Init+0x94>)
 8001906:	2200      	movs	r2, #0
 8001908:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800190a:	4b16      	ldr	r3, [pc, #88]	@ (8001964 <USBD_LL_Init+0x94>)
 800190c:	2202      	movs	r2, #2
 800190e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001910:	4b14      	ldr	r3, [pc, #80]	@ (8001964 <USBD_LL_Init+0x94>)
 8001912:	2201      	movs	r2, #1
 8001914:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001916:	4b13      	ldr	r3, [pc, #76]	@ (8001964 <USBD_LL_Init+0x94>)
 8001918:	2200      	movs	r2, #0
 800191a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800191c:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <USBD_LL_Init+0x94>)
 800191e:	2200      	movs	r2, #0
 8001920:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001922:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <USBD_LL_Init+0x94>)
 8001924:	2200      	movs	r2, #0
 8001926:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001928:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <USBD_LL_Init+0x94>)
 800192a:	2200      	movs	r2, #0
 800192c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800192e:	480d      	ldr	r0, [pc, #52]	@ (8001964 <USBD_LL_Init+0x94>)
 8001930:	f002 f836 	bl	80039a0 <HAL_PCD_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800193a:	f7ff f9c7 	bl	8000ccc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800193e:	2180      	movs	r1, #128	@ 0x80
 8001940:	4808      	ldr	r0, [pc, #32]	@ (8001964 <USBD_LL_Init+0x94>)
 8001942:	f003 fa76 	bl	8004e32 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8001946:	2240      	movs	r2, #64	@ 0x40
 8001948:	2100      	movs	r1, #0
 800194a:	4806      	ldr	r0, [pc, #24]	@ (8001964 <USBD_LL_Init+0x94>)
 800194c:	f003 fa2a 	bl	8004da4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8001950:	2280      	movs	r2, #128	@ 0x80
 8001952:	2101      	movs	r1, #1
 8001954:	4803      	ldr	r0, [pc, #12]	@ (8001964 <USBD_LL_Init+0x94>)
 8001956:	f003 fa25 	bl	8004da4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20001830 	.word	0x20001830

08001968 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001970:	2300      	movs	r3, #0
 8001972:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001974:	2300      	movs	r3, #0
 8001976:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800197e:	4618      	mov	r0, r3
 8001980:	f002 f930 	bl	8003be4 <HAL_PCD_Start>
 8001984:	4603      	mov	r3, r0
 8001986:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	4618      	mov	r0, r3
 800198c:	f000 f942 	bl	8001c14 <USBD_Get_USB_Status>
 8001990:	4603      	mov	r3, r0
 8001992:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001994:	7bbb      	ldrb	r3, [r7, #14]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b084      	sub	sp, #16
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	4608      	mov	r0, r1
 80019a8:	4611      	mov	r1, r2
 80019aa:	461a      	mov	r2, r3
 80019ac:	4603      	mov	r3, r0
 80019ae:	70fb      	strb	r3, [r7, #3]
 80019b0:	460b      	mov	r3, r1
 80019b2:	70bb      	strb	r3, [r7, #2]
 80019b4:	4613      	mov	r3, r2
 80019b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80019bc:	2300      	movs	r3, #0
 80019be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80019c6:	78bb      	ldrb	r3, [r7, #2]
 80019c8:	883a      	ldrh	r2, [r7, #0]
 80019ca:	78f9      	ldrb	r1, [r7, #3]
 80019cc:	f002 fe04 	bl	80045d8 <HAL_PCD_EP_Open>
 80019d0:	4603      	mov	r3, r0
 80019d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 f91c 	bl	8001c14 <USBD_Get_USB_Status>
 80019dc:	4603      	mov	r3, r0
 80019de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80019e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b084      	sub	sp, #16
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	460b      	mov	r3, r1
 80019f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80019f6:	2300      	movs	r3, #0
 80019f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8001a04:	78fa      	ldrb	r2, [r7, #3]
 8001a06:	4611      	mov	r1, r2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f002 fe4f 	bl	80046ac <HAL_PCD_EP_Close>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f000 f8fd 	bl	8001c14 <USBD_Get_USB_Status>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001a1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8001a42:	78fa      	ldrb	r2, [r7, #3]
 8001a44:	4611      	mov	r1, r2
 8001a46:	4618      	mov	r0, r3
 8001a48:	f002 ff07 	bl	800485a <HAL_PCD_EP_SetStall>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 f8de 	bl	8001c14 <USBD_Get_USB_Status>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001a5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8001a80:	78fa      	ldrb	r2, [r7, #3]
 8001a82:	4611      	mov	r1, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f002 ff4b 	bl	8004920 <HAL_PCD_EP_ClrStall>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f000 f8bf 	bl	8001c14 <USBD_Get_USB_Status>
 8001a96:	4603      	mov	r3, r0
 8001a98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001a9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8001ab6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8001ab8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	da0b      	bge.n	8001ad8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8001ac0:	78fb      	ldrb	r3, [r7, #3]
 8001ac2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001ac6:	68f9      	ldr	r1, [r7, #12]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	3316      	adds	r3, #22
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	e00b      	b.n	8001af0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8001ad8:	78fb      	ldrb	r3, [r7, #3]
 8001ada:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001ade:	68f9      	ldr	r1, [r7, #12]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8001aee:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8001b16:	78fa      	ldrb	r2, [r7, #3]
 8001b18:	4611      	mov	r1, r2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f002 fd38 	bl	8004590 <HAL_PCD_SetAddress>
 8001b20:	4603      	mov	r3, r0
 8001b22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f874 	bl	8001c14 <USBD_Get_USB_Status>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001b30:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b086      	sub	sp, #24
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	607a      	str	r2, [r7, #4]
 8001b44:	603b      	str	r3, [r7, #0]
 8001b46:	460b      	mov	r3, r1
 8001b48:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8001b58:	7af9      	ldrb	r1, [r7, #11]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	f002 fe42 	bl	80047e6 <HAL_PCD_EP_Transmit>
 8001b62:	4603      	mov	r3, r0
 8001b64:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001b66:	7dfb      	ldrb	r3, [r7, #23]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f000 f853 	bl	8001c14 <USBD_Get_USB_Status>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8001b72:	7dbb      	ldrb	r3, [r7, #22]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	607a      	str	r2, [r7, #4]
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8001b9a:	7af9      	ldrb	r1, [r7, #11]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	f002 fdce 	bl	8004740 <HAL_PCD_EP_Receive>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001ba8:	7dfb      	ldrb	r3, [r7, #23]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 f832 	bl	8001c14 <USBD_Get_USB_Status>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8001bb4:	7dbb      	ldrb	r3, [r7, #22]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8001bd0:	78fa      	ldrb	r2, [r7, #3]
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f002 fdee 	bl	80047b6 <HAL_PCD_EP_GetRxCount>
 8001bda:	4603      	mov	r3, r0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8001bec:	4b03      	ldr	r3, [pc, #12]	@ (8001bfc <USBD_static_malloc+0x18>)
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	20001d14 	.word	0x20001d14

08001c00 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	2b03      	cmp	r3, #3
 8001c26:	d817      	bhi.n	8001c58 <USBD_Get_USB_Status+0x44>
 8001c28:	a201      	add	r2, pc, #4	@ (adr r2, 8001c30 <USBD_Get_USB_Status+0x1c>)
 8001c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2e:	bf00      	nop
 8001c30:	08001c41 	.word	0x08001c41
 8001c34:	08001c47 	.word	0x08001c47
 8001c38:	08001c4d 	.word	0x08001c4d
 8001c3c:	08001c53 	.word	0x08001c53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	73fb      	strb	r3, [r7, #15]
    break;
 8001c44:	e00b      	b.n	8001c5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8001c46:	2303      	movs	r3, #3
 8001c48:	73fb      	strb	r3, [r7, #15]
    break;
 8001c4a:	e008      	b.n	8001c5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]
    break;
 8001c50:	e005      	b.n	8001c5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8001c52:	2303      	movs	r3, #3
 8001c54:	73fb      	strb	r3, [r7, #15]
    break;
 8001c56:	e002      	b.n	8001c5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	73fb      	strb	r3, [r7, #15]
    break;
 8001c5c:	bf00      	nop
  }
  return usb_status;
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c70:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <SystemInit+0x20>)
 8001c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c76:	4a05      	ldr	r2, [pc, #20]	@ (8001c8c <SystemInit+0x20>)
 8001c78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c94:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd0 <HAL_Init+0x40>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd0 <HAL_Init+0x40>)
 8001c9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd0 <HAL_Init+0x40>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd0 <HAL_Init+0x40>)
 8001ca6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001caa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cac:	4b08      	ldr	r3, [pc, #32]	@ (8001cd0 <HAL_Init+0x40>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a07      	ldr	r2, [pc, #28]	@ (8001cd0 <HAL_Init+0x40>)
 8001cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb8:	2003      	movs	r0, #3
 8001cba:	f001 f85b 	bl	8002d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cbe:	200f      	movs	r0, #15
 8001cc0:	f000 f808 	bl	8001cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cc4:	f7ff f814 	bl	8000cf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40023c00 	.word	0x40023c00

08001cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cdc:	4b12      	ldr	r3, [pc, #72]	@ (8001d28 <HAL_InitTick+0x54>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4b12      	ldr	r3, [pc, #72]	@ (8001d2c <HAL_InitTick+0x58>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f001 f8a2 	bl	8002e3c <HAL_SYSTICK_Config>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e00e      	b.n	8001d20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b0f      	cmp	r3, #15
 8001d06:	d80a      	bhi.n	8001d1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d10:	f001 f850 	bl	8002db4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d14:	4a06      	ldr	r2, [pc, #24]	@ (8001d30 <HAL_InitTick+0x5c>)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	e000      	b.n	8001d20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	200000c4 	.word	0x200000c4
 8001d2c:	200000cc 	.word	0x200000cc
 8001d30:	200000c8 	.word	0x200000c8

08001d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d38:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <HAL_IncTick+0x20>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <HAL_IncTick+0x24>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4413      	add	r3, r2
 8001d44:	4a04      	ldr	r2, [pc, #16]	@ (8001d58 <HAL_IncTick+0x24>)
 8001d46:	6013      	str	r3, [r2, #0]
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	200000cc 	.word	0x200000cc
 8001d58:	20001f34 	.word	0x20001f34

08001d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d60:	4b03      	ldr	r3, [pc, #12]	@ (8001d70 <HAL_GetTick+0x14>)
 8001d62:	681b      	ldr	r3, [r3, #0]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	20001f34 	.word	0x20001f34

08001d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d7c:	f7ff ffee 	bl	8001d5c <HAL_GetTick>
 8001d80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d8c:	d005      	beq.n	8001d9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001db8 <HAL_Delay+0x44>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4413      	add	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d9a:	bf00      	nop
 8001d9c:	f7ff ffde 	bl	8001d5c <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d8f7      	bhi.n	8001d9c <HAL_Delay+0x28>
  {
  }
}
 8001dac:	bf00      	nop
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200000cc 	.word	0x200000cc

08001dbc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e20f      	b.n	80021ee <HAL_CAN_Init+0x432>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a91      	ldr	r2, [pc, #580]	@ (8002018 <HAL_CAN_Init+0x25c>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d009      	beq.n	8001dec <HAL_CAN_Init+0x30>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a8f      	ldr	r2, [pc, #572]	@ (800201c <HAL_CAN_Init+0x260>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d004      	beq.n	8001dec <HAL_CAN_Init+0x30>
 8001de2:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8001de6:	488e      	ldr	r0, [pc, #568]	@ (8002020 <HAL_CAN_Init+0x264>)
 8001de8:	f7fe ff76 	bl	8000cd8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	7e1b      	ldrb	r3, [r3, #24]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d008      	beq.n	8001e06 <HAL_CAN_Init+0x4a>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	7e1b      	ldrb	r3, [r3, #24]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d004      	beq.n	8001e06 <HAL_CAN_Init+0x4a>
 8001dfc:	f240 111f 	movw	r1, #287	@ 0x11f
 8001e00:	4887      	ldr	r0, [pc, #540]	@ (8002020 <HAL_CAN_Init+0x264>)
 8001e02:	f7fe ff69 	bl	8000cd8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	7e5b      	ldrb	r3, [r3, #25]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d008      	beq.n	8001e20 <HAL_CAN_Init+0x64>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	7e5b      	ldrb	r3, [r3, #25]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d004      	beq.n	8001e20 <HAL_CAN_Init+0x64>
 8001e16:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8001e1a:	4881      	ldr	r0, [pc, #516]	@ (8002020 <HAL_CAN_Init+0x264>)
 8001e1c:	f7fe ff5c 	bl	8000cd8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	7e9b      	ldrb	r3, [r3, #26]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d008      	beq.n	8001e3a <HAL_CAN_Init+0x7e>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	7e9b      	ldrb	r3, [r3, #26]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d004      	beq.n	8001e3a <HAL_CAN_Init+0x7e>
 8001e30:	f240 1121 	movw	r1, #289	@ 0x121
 8001e34:	487a      	ldr	r0, [pc, #488]	@ (8002020 <HAL_CAN_Init+0x264>)
 8001e36:	f7fe ff4f 	bl	8000cd8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	7edb      	ldrb	r3, [r3, #27]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d008      	beq.n	8001e54 <HAL_CAN_Init+0x98>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	7edb      	ldrb	r3, [r3, #27]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d004      	beq.n	8001e54 <HAL_CAN_Init+0x98>
 8001e4a:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8001e4e:	4874      	ldr	r0, [pc, #464]	@ (8002020 <HAL_CAN_Init+0x264>)
 8001e50:	f7fe ff42 	bl	8000cd8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	7f1b      	ldrb	r3, [r3, #28]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_CAN_Init+0xb2>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	7f1b      	ldrb	r3, [r3, #28]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d004      	beq.n	8001e6e <HAL_CAN_Init+0xb2>
 8001e64:	f240 1123 	movw	r1, #291	@ 0x123
 8001e68:	486d      	ldr	r0, [pc, #436]	@ (8002020 <HAL_CAN_Init+0x264>)
 8001e6a:	f7fe ff35 	bl	8000cd8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	7f5b      	ldrb	r3, [r3, #29]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d008      	beq.n	8001e88 <HAL_CAN_Init+0xcc>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	7f5b      	ldrb	r3, [r3, #29]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d004      	beq.n	8001e88 <HAL_CAN_Init+0xcc>
 8001e7e:	f44f 7192 	mov.w	r1, #292	@ 0x124
 8001e82:	4867      	ldr	r0, [pc, #412]	@ (8002020 <HAL_CAN_Init+0x264>)
 8001e84:	f7fe ff28 	bl	8000cd8 <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d013      	beq.n	8001eb8 <HAL_CAN_Init+0xfc>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e98:	d00e      	beq.n	8001eb8 <HAL_CAN_Init+0xfc>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001ea2:	d009      	beq.n	8001eb8 <HAL_CAN_Init+0xfc>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001eac:	d004      	beq.n	8001eb8 <HAL_CAN_Init+0xfc>
 8001eae:	f240 1125 	movw	r1, #293	@ 0x125
 8001eb2:	485b      	ldr	r0, [pc, #364]	@ (8002020 <HAL_CAN_Init+0x264>)
 8001eb4:	f7fe ff10 	bl	8000cd8 <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d013      	beq.n	8001ee8 <HAL_CAN_Init+0x12c>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ec8:	d00e      	beq.n	8001ee8 <HAL_CAN_Init+0x12c>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ed2:	d009      	beq.n	8001ee8 <HAL_CAN_Init+0x12c>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001edc:	d004      	beq.n	8001ee8 <HAL_CAN_Init+0x12c>
 8001ede:	f44f 7193 	mov.w	r1, #294	@ 0x126
 8001ee2:	484f      	ldr	r0, [pc, #316]	@ (8002020 <HAL_CAN_Init+0x264>)
 8001ee4:	f7fe fef8 	bl	8000cd8 <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d04f      	beq.n	8001f90 <HAL_CAN_Init+0x1d4>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ef8:	d04a      	beq.n	8001f90 <HAL_CAN_Init+0x1d4>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001f02:	d045      	beq.n	8001f90 <HAL_CAN_Init+0x1d4>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001f0c:	d040      	beq.n	8001f90 <HAL_CAN_Init+0x1d4>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001f16:	d03b      	beq.n	8001f90 <HAL_CAN_Init+0x1d4>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f20:	d036      	beq.n	8001f90 <HAL_CAN_Init+0x1d4>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8001f2a:	d031      	beq.n	8001f90 <HAL_CAN_Init+0x1d4>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
 8001f34:	d02c      	beq.n	8001f90 <HAL_CAN_Init+0x1d4>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001f3e:	d027      	beq.n	8001f90 <HAL_CAN_Init+0x1d4>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	f5b3 2f10 	cmp.w	r3, #589824	@ 0x90000
 8001f48:	d022      	beq.n	8001f90 <HAL_CAN_Init+0x1d4>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	f5b3 2f20 	cmp.w	r3, #655360	@ 0xa0000
 8001f52:	d01d      	beq.n	8001f90 <HAL_CAN_Init+0x1d4>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	f5b3 2f30 	cmp.w	r3, #720896	@ 0xb0000
 8001f5c:	d018      	beq.n	8001f90 <HAL_CAN_Init+0x1d4>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001f66:	d013      	beq.n	8001f90 <HAL_CAN_Init+0x1d4>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	f5b3 2f50 	cmp.w	r3, #851968	@ 0xd0000
 8001f70:	d00e      	beq.n	8001f90 <HAL_CAN_Init+0x1d4>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001f7a:	d009      	beq.n	8001f90 <HAL_CAN_Init+0x1d4>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	f5b3 2f70 	cmp.w	r3, #983040	@ 0xf0000
 8001f84:	d004      	beq.n	8001f90 <HAL_CAN_Init+0x1d4>
 8001f86:	f240 1127 	movw	r1, #295	@ 0x127
 8001f8a:	4825      	ldr	r0, [pc, #148]	@ (8002020 <HAL_CAN_Init+0x264>)
 8001f8c:	f7fe fea4 	bl	8000cd8 <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d027      	beq.n	8001fe8 <HAL_CAN_Init+0x22c>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001fa0:	d022      	beq.n	8001fe8 <HAL_CAN_Init+0x22c>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001faa:	d01d      	beq.n	8001fe8 <HAL_CAN_Init+0x22c>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8001fb4:	d018      	beq.n	8001fe8 <HAL_CAN_Init+0x22c>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fbe:	d013      	beq.n	8001fe8 <HAL_CAN_Init+0x22c>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8001fc8:	d00e      	beq.n	8001fe8 <HAL_CAN_Init+0x22c>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8001fd2:	d009      	beq.n	8001fe8 <HAL_CAN_Init+0x22c>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 8001fdc:	d004      	beq.n	8001fe8 <HAL_CAN_Init+0x22c>
 8001fde:	f44f 7194 	mov.w	r1, #296	@ 0x128
 8001fe2:	480f      	ldr	r0, [pc, #60]	@ (8002020 <HAL_CAN_Init+0x264>)
 8001fe4:	f7fe fe78 	bl	8000cd8 <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d004      	beq.n	8001ffa <HAL_CAN_Init+0x23e>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ff8:	d904      	bls.n	8002004 <HAL_CAN_Init+0x248>
 8001ffa:	f240 1129 	movw	r1, #297	@ 0x129
 8001ffe:	4808      	ldr	r0, [pc, #32]	@ (8002020 <HAL_CAN_Init+0x264>)
 8002000:	f7fe fe6a 	bl	8000cd8 <assert_failed>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 3020 	ldrb.w	r3, [r3, #32]
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	d109      	bne.n	8002024 <HAL_CAN_Init+0x268>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7fe feb3 	bl	8000d7c <HAL_CAN_MspInit>
 8002016:	e005      	b.n	8002024 <HAL_CAN_Init+0x268>
 8002018:	40006400 	.word	0x40006400
 800201c:	40006800 	.word	0x40006800
 8002020:	0800d468 	.word	0x0800d468
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0201 	orr.w	r2, r2, #1
 8002032:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002034:	f7ff fe92 	bl	8001d5c <HAL_GetTick>
 8002038:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800203a:	e012      	b.n	8002062 <HAL_CAN_Init+0x2a6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800203c:	f7ff fe8e 	bl	8001d5c <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b0a      	cmp	r3, #10
 8002048:	d90b      	bls.n	8002062 <HAL_CAN_Init+0x2a6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2205      	movs	r2, #5
 800205a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e0c5      	b.n	80021ee <HAL_CAN_Init+0x432>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0e5      	beq.n	800203c <HAL_CAN_Init+0x280>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0202 	bic.w	r2, r2, #2
 800207e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002080:	f7ff fe6c 	bl	8001d5c <HAL_GetTick>
 8002084:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002086:	e012      	b.n	80020ae <HAL_CAN_Init+0x2f2>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002088:	f7ff fe68 	bl	8001d5c <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b0a      	cmp	r3, #10
 8002094:	d90b      	bls.n	80020ae <HAL_CAN_Init+0x2f2>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2205      	movs	r2, #5
 80020a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e09f      	b.n	80021ee <HAL_CAN_Init+0x432>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1e5      	bne.n	8002088 <HAL_CAN_Init+0x2cc>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	7e1b      	ldrb	r3, [r3, #24]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d108      	bne.n	80020d6 <HAL_CAN_Init+0x31a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	e007      	b.n	80020e6 <HAL_CAN_Init+0x32a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	7e5b      	ldrb	r3, [r3, #25]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d108      	bne.n	8002100 <HAL_CAN_Init+0x344>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	e007      	b.n	8002110 <HAL_CAN_Init+0x354>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800210e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	7e9b      	ldrb	r3, [r3, #26]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d108      	bne.n	800212a <HAL_CAN_Init+0x36e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0220 	orr.w	r2, r2, #32
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	e007      	b.n	800213a <HAL_CAN_Init+0x37e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0220 	bic.w	r2, r2, #32
 8002138:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	7edb      	ldrb	r3, [r3, #27]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d108      	bne.n	8002154 <HAL_CAN_Init+0x398>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0210 	bic.w	r2, r2, #16
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	e007      	b.n	8002164 <HAL_CAN_Init+0x3a8>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0210 	orr.w	r2, r2, #16
 8002162:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	7f1b      	ldrb	r3, [r3, #28]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d108      	bne.n	800217e <HAL_CAN_Init+0x3c2>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0208 	orr.w	r2, r2, #8
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	e007      	b.n	800218e <HAL_CAN_Init+0x3d2>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0208 	bic.w	r2, r2, #8
 800218c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	7f5b      	ldrb	r3, [r3, #29]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d108      	bne.n	80021a8 <HAL_CAN_Init+0x3ec>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0204 	orr.w	r2, r2, #4
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	e007      	b.n	80021b8 <HAL_CAN_Init+0x3fc>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0204 	bic.w	r2, r2, #4
 80021b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	ea42 0103 	orr.w	r1, r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	1e5a      	subs	r2, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop

080021f8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b01      	cmp	r3, #1
 800220a:	d12e      	bne.n	800226a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0201 	bic.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002224:	f7ff fd9a 	bl	8001d5c <HAL_GetTick>
 8002228:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800222a:	e012      	b.n	8002252 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800222c:	f7ff fd96 	bl	8001d5c <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b0a      	cmp	r3, #10
 8002238:	d90b      	bls.n	8002252 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2205      	movs	r2, #5
 800224a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e012      	b.n	8002278 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1e5      	bne.n	800222c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002266:	2300      	movs	r3, #0
 8002268:	e006      	b.n	8002278 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
  }
}
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002294:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d008      	beq.n	80022b8 <HAL_CAN_AddTxMessage+0x38>
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d004      	beq.n	80022b8 <HAL_CAN_AddTxMessage+0x38>
 80022ae:	f240 41ea 	movw	r1, #1258	@ 0x4ea
 80022b2:	487f      	ldr	r0, [pc, #508]	@ (80024b0 <HAL_CAN_AddTxMessage+0x230>)
 80022b4:	f7fe fd10 	bl	8000cd8 <assert_failed>
  assert_param(IS_CAN_RTR(pHeader->RTR));
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d008      	beq.n	80022d2 <HAL_CAN_AddTxMessage+0x52>
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d004      	beq.n	80022d2 <HAL_CAN_AddTxMessage+0x52>
 80022c8:	f240 41eb 	movw	r1, #1259	@ 0x4eb
 80022cc:	4878      	ldr	r0, [pc, #480]	@ (80024b0 <HAL_CAN_AddTxMessage+0x230>)
 80022ce:	f7fe fd03 	bl	8000cd8 <assert_failed>
  assert_param(IS_CAN_DLC(pHeader->DLC));
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d904      	bls.n	80022e4 <HAL_CAN_AddTxMessage+0x64>
 80022da:	f240 41ec 	movw	r1, #1260	@ 0x4ec
 80022de:	4874      	ldr	r0, [pc, #464]	@ (80024b0 <HAL_CAN_AddTxMessage+0x230>)
 80022e0:	f7fe fcfa 	bl	8000cd8 <assert_failed>
  if (pHeader->IDE == CAN_ID_STD)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10a      	bne.n	8002302 <HAL_CAN_AddTxMessage+0x82>
  {
    assert_param(IS_CAN_STDID(pHeader->StdId));
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80022f4:	d30f      	bcc.n	8002316 <HAL_CAN_AddTxMessage+0x96>
 80022f6:	f240 41ef 	movw	r1, #1263	@ 0x4ef
 80022fa:	486d      	ldr	r0, [pc, #436]	@ (80024b0 <HAL_CAN_AddTxMessage+0x230>)
 80022fc:	f7fe fcec 	bl	8000cd8 <assert_failed>
 8002300:	e009      	b.n	8002316 <HAL_CAN_AddTxMessage+0x96>
  }
  else
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800230a:	d304      	bcc.n	8002316 <HAL_CAN_AddTxMessage+0x96>
 800230c:	f240 41f3 	movw	r1, #1267	@ 0x4f3
 8002310:	4867      	ldr	r0, [pc, #412]	@ (80024b0 <HAL_CAN_AddTxMessage+0x230>)
 8002312:	f7fe fce1 	bl	8000cd8 <assert_failed>
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	7d1b      	ldrb	r3, [r3, #20]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d008      	beq.n	8002330 <HAL_CAN_AddTxMessage+0xb0>
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	7d1b      	ldrb	r3, [r3, #20]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d004      	beq.n	8002330 <HAL_CAN_AddTxMessage+0xb0>
 8002326:	f240 41f5 	movw	r1, #1269	@ 0x4f5
 800232a:	4861      	ldr	r0, [pc, #388]	@ (80024b0 <HAL_CAN_AddTxMessage+0x230>)
 800232c:	f7fe fcd4 	bl	8000cd8 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8002330:	7ffb      	ldrb	r3, [r7, #31]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d003      	beq.n	800233e <HAL_CAN_AddTxMessage+0xbe>
 8002336:	7ffb      	ldrb	r3, [r7, #31]
 8002338:	2b02      	cmp	r3, #2
 800233a:	f040 80ad 	bne.w	8002498 <HAL_CAN_AddTxMessage+0x218>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10a      	bne.n	800235e <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800234e:	2b00      	cmp	r3, #0
 8002350:	d105      	bne.n	800235e <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 8095 	beq.w	8002488 <HAL_CAN_AddTxMessage+0x208>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	0e1b      	lsrs	r3, r3, #24
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002368:	2201      	movs	r2, #1
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	409a      	lsls	r2, r3
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10d      	bne.n	8002396 <HAL_CAN_AddTxMessage+0x116>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002384:	68f9      	ldr	r1, [r7, #12]
 8002386:	6809      	ldr	r1, [r1, #0]
 8002388:	431a      	orrs	r2, r3
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	3318      	adds	r3, #24
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	440b      	add	r3, r1
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	e00f      	b.n	80023b6 <HAL_CAN_AddTxMessage+0x136>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023a0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023a6:	68f9      	ldr	r1, [r7, #12]
 80023a8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80023aa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	3318      	adds	r3, #24
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	440b      	add	r3, r1
 80023b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6819      	ldr	r1, [r3, #0]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	691a      	ldr	r2, [r3, #16]
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	3318      	adds	r3, #24
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	440b      	add	r3, r1
 80023c6:	3304      	adds	r3, #4
 80023c8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	7d1b      	ldrb	r3, [r3, #20]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d111      	bne.n	80023f6 <HAL_CAN_AddTxMessage+0x176>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	3318      	adds	r3, #24
 80023da:	011b      	lsls	r3, r3, #4
 80023dc:	4413      	add	r3, r2
 80023de:	3304      	adds	r3, #4
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	6811      	ldr	r1, [r2, #0]
 80023e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	3318      	adds	r3, #24
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	440b      	add	r3, r1
 80023f2:	3304      	adds	r3, #4
 80023f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3307      	adds	r3, #7
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	061a      	lsls	r2, r3, #24
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3306      	adds	r3, #6
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	041b      	lsls	r3, r3, #16
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3305      	adds	r3, #5
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	021b      	lsls	r3, r3, #8
 8002410:	4313      	orrs	r3, r2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	3204      	adds	r2, #4
 8002416:	7812      	ldrb	r2, [r2, #0]
 8002418:	4610      	mov	r0, r2
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	6811      	ldr	r1, [r2, #0]
 800241e:	ea43 0200 	orr.w	r2, r3, r0
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	011b      	lsls	r3, r3, #4
 8002426:	440b      	add	r3, r1
 8002428:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800242c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3303      	adds	r3, #3
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	061a      	lsls	r2, r3, #24
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3302      	adds	r3, #2
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	041b      	lsls	r3, r3, #16
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3301      	adds	r3, #1
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	021b      	lsls	r3, r3, #8
 8002448:	4313      	orrs	r3, r2
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	7812      	ldrb	r2, [r2, #0]
 800244e:	4610      	mov	r0, r2
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	6811      	ldr	r1, [r2, #0]
 8002454:	ea43 0200 	orr.w	r2, r3, r0
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	440b      	add	r3, r1
 800245e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002462:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	3318      	adds	r3, #24
 800246c:	011b      	lsls	r3, r3, #4
 800246e:	4413      	add	r3, r2
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	6811      	ldr	r1, [r2, #0]
 8002476:	f043 0201 	orr.w	r2, r3, #1
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	3318      	adds	r3, #24
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	440b      	add	r3, r1
 8002482:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002484:	2300      	movs	r3, #0
 8002486:	e00e      	b.n	80024a6 <HAL_CAN_AddTxMessage+0x226>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e006      	b.n	80024a6 <HAL_CAN_AddTxMessage+0x226>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
  }
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3720      	adds	r7, #32
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	0800d468 	.word	0x0800d468

080024b4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
 80024c0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024c8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d007      	beq.n	80024e0 <HAL_CAN_GetRxMessage+0x2c>
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d004      	beq.n	80024e0 <HAL_CAN_GetRxMessage+0x2c>
 80024d6:	f240 51e9 	movw	r1, #1513	@ 0x5e9
 80024da:	488c      	ldr	r0, [pc, #560]	@ (800270c <HAL_CAN_GetRxMessage+0x258>)
 80024dc:	f7fe fbfc 	bl	8000cd8 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 80024e0:	7dfb      	ldrb	r3, [r7, #23]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d003      	beq.n	80024ee <HAL_CAN_GetRxMessage+0x3a>
 80024e6:	7dfb      	ldrb	r3, [r7, #23]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	f040 8103 	bne.w	80026f4 <HAL_CAN_GetRxMessage+0x240>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10e      	bne.n	8002512 <HAL_CAN_GetRxMessage+0x5e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d116      	bne.n	8002530 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002506:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e0f7      	b.n	8002702 <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	2b00      	cmp	r3, #0
 800251e:	d107      	bne.n	8002530 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002524:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0e8      	b.n	8002702 <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	331b      	adds	r3, #27
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	4413      	add	r3, r2
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0204 	and.w	r2, r3, #4
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10c      	bne.n	8002568 <HAL_CAN_GetRxMessage+0xb4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	331b      	adds	r3, #27
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	4413      	add	r3, r2
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	0d5b      	lsrs	r3, r3, #21
 800255e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	e00b      	b.n	8002580 <HAL_CAN_GetRxMessage+0xcc>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	331b      	adds	r3, #27
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	4413      	add	r3, r2
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	08db      	lsrs	r3, r3, #3
 8002578:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	331b      	adds	r3, #27
 8002588:	011b      	lsls	r3, r3, #4
 800258a:	4413      	add	r3, r2
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0202 	and.w	r2, r3, #2
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	331b      	adds	r3, #27
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	4413      	add	r3, r2
 80025a2:	3304      	adds	r3, #4
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_CAN_GetRxMessage+0x102>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2208      	movs	r2, #8
 80025b2:	611a      	str	r2, [r3, #16]
 80025b4:	e00b      	b.n	80025ce <HAL_CAN_GetRxMessage+0x11a>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	331b      	adds	r3, #27
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	4413      	add	r3, r2
 80025c2:	3304      	adds	r3, #4
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 020f 	and.w	r2, r3, #15
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	331b      	adds	r3, #27
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	4413      	add	r3, r2
 80025da:	3304      	adds	r3, #4
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	0a1b      	lsrs	r3, r3, #8
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	331b      	adds	r3, #27
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	4413      	add	r3, r2
 80025f2:	3304      	adds	r3, #4
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	0c1b      	lsrs	r3, r3, #16
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	4413      	add	r3, r2
 8002608:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	b2da      	uxtb	r2, r3
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	4413      	add	r3, r2
 800261e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	0a1a      	lsrs	r2, r3, #8
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	3301      	adds	r3, #1
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	4413      	add	r3, r2
 8002638:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	0c1a      	lsrs	r2, r3, #16
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	3302      	adds	r3, #2
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	4413      	add	r3, r2
 8002652:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	0e1a      	lsrs	r2, r3, #24
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	3303      	adds	r3, #3
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	4413      	add	r3, r2
 800266c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	3304      	adds	r3, #4
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	4413      	add	r3, r2
 8002684:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	0a1a      	lsrs	r2, r3, #8
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	3305      	adds	r3, #5
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	4413      	add	r3, r2
 800269e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	0c1a      	lsrs	r2, r3, #16
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	3306      	adds	r3, #6
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	0e1a      	lsrs	r2, r3, #24
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	3307      	adds	r3, #7
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d108      	bne.n	80026e0 <HAL_CAN_GetRxMessage+0x22c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f042 0220 	orr.w	r2, r2, #32
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	e007      	b.n	80026f0 <HAL_CAN_GetRxMessage+0x23c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691a      	ldr	r2, [r3, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0220 	orr.w	r2, r2, #32
 80026ee:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80026f0:	2300      	movs	r3, #0
 80026f2:	e006      	b.n	8002702 <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
  }
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	0800d468 	.word	0x0800d468

08002710 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002720:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	4a11      	ldr	r2, [pc, #68]	@ (800276c <HAL_CAN_ActivateNotification+0x5c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d904      	bls.n	8002734 <HAL_CAN_ActivateNotification+0x24>
 800272a:	f240 6182 	movw	r1, #1666	@ 0x682
 800272e:	4810      	ldr	r0, [pc, #64]	@ (8002770 <HAL_CAN_ActivateNotification+0x60>)
 8002730:	f7fe fad2 	bl	8000cd8 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8002734:	7bfb      	ldrb	r3, [r7, #15]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d002      	beq.n	8002740 <HAL_CAN_ActivateNotification+0x30>
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	2b02      	cmp	r3, #2
 800273e:	d109      	bne.n	8002754 <HAL_CAN_ActivateNotification+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6959      	ldr	r1, [r3, #20]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002750:	2300      	movs	r3, #0
 8002752:	e006      	b.n	8002762 <HAL_CAN_ActivateNotification+0x52>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002758:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
  }
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	00038f7f 	.word	0x00038f7f
 8002770:	0800d468 	.word	0x0800d468

08002774 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08a      	sub	sp, #40	@ 0x28
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800277c:	2300      	movs	r3, #0
 800277e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d07c      	beq.n	80028b4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d023      	beq.n	800280c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2201      	movs	r2, #1
 80027ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f983 	bl	8002ae2 <HAL_CAN_TxMailbox0CompleteCallback>
 80027dc:	e016      	b.n	800280c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d004      	beq.n	80027f2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80027e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80027ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80027f0:	e00c      	b.n	800280c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d004      	beq.n	8002806 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80027fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002802:	627b      	str	r3, [r7, #36]	@ 0x24
 8002804:	e002      	b.n	800280c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f989 	bl	8002b1e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002812:	2b00      	cmp	r3, #0
 8002814:	d024      	beq.n	8002860 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800281e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f963 	bl	8002af6 <HAL_CAN_TxMailbox1CompleteCallback>
 8002830:	e016      	b.n	8002860 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002838:	2b00      	cmp	r3, #0
 800283a:	d004      	beq.n	8002846 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800283c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002842:	627b      	str	r3, [r7, #36]	@ 0x24
 8002844:	e00c      	b.n	8002860 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800284c:	2b00      	cmp	r3, #0
 800284e:	d004      	beq.n	800285a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002852:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002856:	627b      	str	r3, [r7, #36]	@ 0x24
 8002858:	e002      	b.n	8002860 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f969 	bl	8002b32 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d024      	beq.n	80028b4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002872:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f943 	bl	8002b0a <HAL_CAN_TxMailbox2CompleteCallback>
 8002884:	e016      	b.n	80028b4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d004      	beq.n	800289a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002892:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002896:	627b      	str	r3, [r7, #36]	@ 0x24
 8002898:	e00c      	b.n	80028b4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d004      	beq.n	80028ae <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80028a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ac:	e002      	b.n	80028b4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f949 	bl	8002b46 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00c      	beq.n	80028d8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f003 0310 	and.w	r3, r3, #16
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d007      	beq.n	80028d8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80028c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028ce:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2210      	movs	r2, #16
 80028d6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00b      	beq.n	80028fa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f003 0308 	and.w	r3, r3, #8
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d006      	beq.n	80028fa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2208      	movs	r2, #8
 80028f2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f930 	bl	8002b5a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d009      	beq.n	8002918 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7fe f996 	bl	8000c44 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00c      	beq.n	800293c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	2b00      	cmp	r3, #0
 800292a:	d007      	beq.n	800293c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800292c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002932:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2210      	movs	r2, #16
 800293a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	f003 0320 	and.w	r3, r3, #32
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00b      	beq.n	800295e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d006      	beq.n	800295e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2208      	movs	r2, #8
 8002956:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f912 	bl	8002b82 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	f003 0310 	and.w	r3, r3, #16
 8002964:	2b00      	cmp	r3, #0
 8002966:	d009      	beq.n	800297c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d002      	beq.n	800297c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f8f9 	bl	8002b6e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00b      	beq.n	800299e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	f003 0310 	and.w	r3, r3, #16
 800298c:	2b00      	cmp	r3, #0
 800298e:	d006      	beq.n	800299e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2210      	movs	r2, #16
 8002996:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f8fc 	bl	8002b96 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800299e:	6a3b      	ldr	r3, [r7, #32]
 80029a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00b      	beq.n	80029c0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d006      	beq.n	80029c0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2208      	movs	r2, #8
 80029b8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f8f5 	bl	8002baa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80029c0:	6a3b      	ldr	r3, [r7, #32]
 80029c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d07b      	beq.n	8002ac2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d072      	beq.n	8002aba <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d008      	beq.n	80029f0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80029e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d008      	beq.n	8002a0c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a06:	f043 0302 	orr.w	r3, r3, #2
 8002a0a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d008      	beq.n	8002a28 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a22:	f043 0304 	orr.w	r3, r3, #4
 8002a26:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d043      	beq.n	8002aba <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d03e      	beq.n	8002aba <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a42:	2b60      	cmp	r3, #96	@ 0x60
 8002a44:	d02b      	beq.n	8002a9e <HAL_CAN_IRQHandler+0x32a>
 8002a46:	2b60      	cmp	r3, #96	@ 0x60
 8002a48:	d82e      	bhi.n	8002aa8 <HAL_CAN_IRQHandler+0x334>
 8002a4a:	2b50      	cmp	r3, #80	@ 0x50
 8002a4c:	d022      	beq.n	8002a94 <HAL_CAN_IRQHandler+0x320>
 8002a4e:	2b50      	cmp	r3, #80	@ 0x50
 8002a50:	d82a      	bhi.n	8002aa8 <HAL_CAN_IRQHandler+0x334>
 8002a52:	2b40      	cmp	r3, #64	@ 0x40
 8002a54:	d019      	beq.n	8002a8a <HAL_CAN_IRQHandler+0x316>
 8002a56:	2b40      	cmp	r3, #64	@ 0x40
 8002a58:	d826      	bhi.n	8002aa8 <HAL_CAN_IRQHandler+0x334>
 8002a5a:	2b30      	cmp	r3, #48	@ 0x30
 8002a5c:	d010      	beq.n	8002a80 <HAL_CAN_IRQHandler+0x30c>
 8002a5e:	2b30      	cmp	r3, #48	@ 0x30
 8002a60:	d822      	bhi.n	8002aa8 <HAL_CAN_IRQHandler+0x334>
 8002a62:	2b10      	cmp	r3, #16
 8002a64:	d002      	beq.n	8002a6c <HAL_CAN_IRQHandler+0x2f8>
 8002a66:	2b20      	cmp	r3, #32
 8002a68:	d005      	beq.n	8002a76 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002a6a:	e01d      	b.n	8002aa8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6e:	f043 0308 	orr.w	r3, r3, #8
 8002a72:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a74:	e019      	b.n	8002aaa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a78:	f043 0310 	orr.w	r3, r3, #16
 8002a7c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a7e:	e014      	b.n	8002aaa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a82:	f043 0320 	orr.w	r3, r3, #32
 8002a86:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a88:	e00f      	b.n	8002aaa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a90:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a92:	e00a      	b.n	8002aaa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a9a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a9c:	e005      	b.n	8002aaa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aa4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002aa6:	e000      	b.n	8002aaa <HAL_CAN_IRQHandler+0x336>
            break;
 8002aa8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	699a      	ldr	r2, [r3, #24]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002ab8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2204      	movs	r2, #4
 8002ac0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d008      	beq.n	8002ada <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 f872 	bl	8002bbe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002ada:	bf00      	nop
 8002adc:	3728      	adds	r7, #40	@ 0x28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
	...

08002bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002be4:	4b0c      	ldr	r3, [pc, #48]	@ (8002c18 <__NVIC_SetPriorityGrouping+0x44>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c06:	4a04      	ldr	r2, [pc, #16]	@ (8002c18 <__NVIC_SetPriorityGrouping+0x44>)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	60d3      	str	r3, [r2, #12]
}
 8002c0c:	bf00      	nop
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	e000ed00 	.word	0xe000ed00

08002c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c20:	4b04      	ldr	r3, [pc, #16]	@ (8002c34 <__NVIC_GetPriorityGrouping+0x18>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	0a1b      	lsrs	r3, r3, #8
 8002c26:	f003 0307 	and.w	r3, r3, #7
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	db0b      	blt.n	8002c62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	f003 021f 	and.w	r2, r3, #31
 8002c50:	4907      	ldr	r1, [pc, #28]	@ (8002c70 <__NVIC_EnableIRQ+0x38>)
 8002c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c56:	095b      	lsrs	r3, r3, #5
 8002c58:	2001      	movs	r0, #1
 8002c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	e000e100 	.word	0xe000e100

08002c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	6039      	str	r1, [r7, #0]
 8002c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	db0a      	blt.n	8002c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	490c      	ldr	r1, [pc, #48]	@ (8002cc0 <__NVIC_SetPriority+0x4c>)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	0112      	lsls	r2, r2, #4
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	440b      	add	r3, r1
 8002c98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c9c:	e00a      	b.n	8002cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	4908      	ldr	r1, [pc, #32]	@ (8002cc4 <__NVIC_SetPriority+0x50>)
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	3b04      	subs	r3, #4
 8002cac:	0112      	lsls	r2, r2, #4
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	761a      	strb	r2, [r3, #24]
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	e000e100 	.word	0xe000e100
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b089      	sub	sp, #36	@ 0x24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f1c3 0307 	rsb	r3, r3, #7
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	bf28      	it	cs
 8002ce6:	2304      	movcs	r3, #4
 8002ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	3304      	adds	r3, #4
 8002cee:	2b06      	cmp	r3, #6
 8002cf0:	d902      	bls.n	8002cf8 <NVIC_EncodePriority+0x30>
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	3b03      	subs	r3, #3
 8002cf6:	e000      	b.n	8002cfa <NVIC_EncodePriority+0x32>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43da      	mvns	r2, r3
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d10:	f04f 31ff 	mov.w	r1, #4294967295
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1a:	43d9      	mvns	r1, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d20:	4313      	orrs	r3, r2
         );
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3724      	adds	r7, #36	@ 0x24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
	...

08002d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d40:	d301      	bcc.n	8002d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d42:	2301      	movs	r3, #1
 8002d44:	e00f      	b.n	8002d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d46:	4a0a      	ldr	r2, [pc, #40]	@ (8002d70 <SysTick_Config+0x40>)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d4e:	210f      	movs	r1, #15
 8002d50:	f04f 30ff 	mov.w	r0, #4294967295
 8002d54:	f7ff ff8e 	bl	8002c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d58:	4b05      	ldr	r3, [pc, #20]	@ (8002d70 <SysTick_Config+0x40>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d5e:	4b04      	ldr	r3, [pc, #16]	@ (8002d70 <SysTick_Config+0x40>)
 8002d60:	2207      	movs	r2, #7
 8002d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	e000e010 	.word	0xe000e010

08002d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b07      	cmp	r3, #7
 8002d80:	d00f      	beq.n	8002da2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b06      	cmp	r3, #6
 8002d86:	d00c      	beq.n	8002da2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b05      	cmp	r3, #5
 8002d8c:	d009      	beq.n	8002da2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d006      	beq.n	8002da2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	d003      	beq.n	8002da2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002d9a:	2190      	movs	r1, #144	@ 0x90
 8002d9c:	4804      	ldr	r0, [pc, #16]	@ (8002db0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002d9e:	f7fd ff9b 	bl	8000cd8 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7ff ff16 	bl	8002bd4 <__NVIC_SetPriorityGrouping>
}
 8002da8:	bf00      	nop
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	0800d4e0 	.word	0x0800d4e0

08002db4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
 8002dc0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b0f      	cmp	r3, #15
 8002dca:	d903      	bls.n	8002dd4 <HAL_NVIC_SetPriority+0x20>
 8002dcc:	21a8      	movs	r1, #168	@ 0xa8
 8002dce:	480e      	ldr	r0, [pc, #56]	@ (8002e08 <HAL_NVIC_SetPriority+0x54>)
 8002dd0:	f7fd ff82 	bl	8000cd8 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b0f      	cmp	r3, #15
 8002dd8:	d903      	bls.n	8002de2 <HAL_NVIC_SetPriority+0x2e>
 8002dda:	21a9      	movs	r1, #169	@ 0xa9
 8002ddc:	480a      	ldr	r0, [pc, #40]	@ (8002e08 <HAL_NVIC_SetPriority+0x54>)
 8002dde:	f7fd ff7b 	bl	8000cd8 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002de2:	f7ff ff1b 	bl	8002c1c <__NVIC_GetPriorityGrouping>
 8002de6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	68b9      	ldr	r1, [r7, #8]
 8002dec:	6978      	ldr	r0, [r7, #20]
 8002dee:	f7ff ff6b 	bl	8002cc8 <NVIC_EncodePriority>
 8002df2:	4602      	mov	r2, r0
 8002df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002df8:	4611      	mov	r1, r2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff ff3a 	bl	8002c74 <__NVIC_SetPriority>
}
 8002e00:	bf00      	nop
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	0800d4e0 	.word	0x0800d4e0

08002e0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	da03      	bge.n	8002e26 <HAL_NVIC_EnableIRQ+0x1a>
 8002e1e:	21bc      	movs	r1, #188	@ 0xbc
 8002e20:	4805      	ldr	r0, [pc, #20]	@ (8002e38 <HAL_NVIC_EnableIRQ+0x2c>)
 8002e22:	f7fd ff59 	bl	8000cd8 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff ff04 	bl	8002c38 <__NVIC_EnableIRQ>
}
 8002e30:	bf00      	nop
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	0800d4e0 	.word	0x0800d4e0

08002e3c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff ff73 	bl	8002d30 <SysTick_Config>
 8002e4a:	4603      	mov	r3, r0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e60:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e62:	f7fe ff7b 	bl	8001d5c <HAL_GetTick>
 8002e66:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d008      	beq.n	8002e86 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2280      	movs	r2, #128	@ 0x80
 8002e78:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e052      	b.n	8002f2c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0216 	bic.w	r2, r2, #22
 8002e94:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	695a      	ldr	r2, [r3, #20]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ea4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d103      	bne.n	8002eb6 <HAL_DMA_Abort+0x62>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d007      	beq.n	8002ec6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0208 	bic.w	r2, r2, #8
 8002ec4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0201 	bic.w	r2, r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ed6:	e013      	b.n	8002f00 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ed8:	f7fe ff40 	bl	8001d5c <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b05      	cmp	r3, #5
 8002ee4:	d90c      	bls.n	8002f00 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2203      	movs	r2, #3
 8002ef0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e015      	b.n	8002f2c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1e4      	bne.n	8002ed8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f12:	223f      	movs	r2, #63	@ 0x3f
 8002f14:	409a      	lsls	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d004      	beq.n	8002f52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2280      	movs	r2, #128	@ 0x80
 8002f4c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e00c      	b.n	8002f6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2205      	movs	r2, #5
 8002f56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0201 	bic.w	r2, r2, #1
 8002f68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002f82:	4b49      	ldr	r3, [pc, #292]	@ (80030a8 <HAL_FLASH_IRQHandler+0x130>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d020      	beq.n	8002fd0 <HAL_FLASH_IRQHandler+0x58>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8002f8e:	4b47      	ldr	r3, [pc, #284]	@ (80030ac <HAL_FLASH_IRQHandler+0x134>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d107      	bne.n	8002fa8 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8002f98:	4b44      	ldr	r3, [pc, #272]	@ (80030ac <HAL_FLASH_IRQHandler+0x134>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8002f9e:	4b43      	ldr	r3, [pc, #268]	@ (80030ac <HAL_FLASH_IRQHandler+0x134>)
 8002fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa4:	60da      	str	r2, [r3, #12]
 8002fa6:	e00b      	b.n	8002fc0 <HAL_FLASH_IRQHandler+0x48>
    }
    else if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002fa8:	4b40      	ldr	r3, [pc, #256]	@ (80030ac <HAL_FLASH_IRQHandler+0x134>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d103      	bne.n	8002fba <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8002fb2:	4b3e      	ldr	r3, [pc, #248]	@ (80030ac <HAL_FLASH_IRQHandler+0x134>)
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	607b      	str	r3, [r7, #4]
 8002fb8:	e002      	b.n	8002fc0 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8002fba:	4b3c      	ldr	r3, [pc, #240]	@ (80030ac <HAL_FLASH_IRQHandler+0x134>)
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	607b      	str	r3, [r7, #4]
    }

    /*Save the Error code*/
    FLASH_SetErrorCode();
 8002fc0:	f000 f88a 	bl	80030d8 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f87d 	bl	80030c4 <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002fca:	4b38      	ldr	r3, [pc, #224]	@ (80030ac <HAL_FLASH_IRQHandler+0x134>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002fd0:	4b35      	ldr	r3, [pc, #212]	@ (80030a8 <HAL_FLASH_IRQHandler+0x130>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d04a      	beq.n	8003072 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002fdc:	4b32      	ldr	r3, [pc, #200]	@ (80030a8 <HAL_FLASH_IRQHandler+0x130>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	60da      	str	r2, [r3, #12]

    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8002fe2:	4b32      	ldr	r3, [pc, #200]	@ (80030ac <HAL_FLASH_IRQHandler+0x134>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d12d      	bne.n	8003048 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8002fec:	4b2f      	ldr	r3, [pc, #188]	@ (80030ac <HAL_FLASH_IRQHandler+0x134>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	4a2e      	ldr	r2, [pc, #184]	@ (80030ac <HAL_FLASH_IRQHandler+0x134>)
 8002ff4:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase*/
      if (pFlash.NbSectorsToErase != 0U)
 8002ff6:	4b2d      	ldr	r3, [pc, #180]	@ (80030ac <HAL_FLASH_IRQHandler+0x134>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d015      	beq.n	800302a <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8002ffe:	4b2b      	ldr	r3, [pc, #172]	@ (80030ac <HAL_FLASH_IRQHandler+0x134>)
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f853 	bl	80030b0 <HAL_FLASH_EndOfOperationCallback>

        /*Increment sector number*/
        pFlash.Sector++;
 800300a:	4b28      	ldr	r3, [pc, #160]	@ (80030ac <HAL_FLASH_IRQHandler+0x134>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	3301      	adds	r3, #1
 8003010:	4a26      	ldr	r2, [pc, #152]	@ (80030ac <HAL_FLASH_IRQHandler+0x134>)
 8003012:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8003014:	4b25      	ldr	r3, [pc, #148]	@ (80030ac <HAL_FLASH_IRQHandler+0x134>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 800301a:	4b24      	ldr	r3, [pc, #144]	@ (80030ac <HAL_FLASH_IRQHandler+0x134>)
 800301c:	7a1b      	ldrb	r3, [r3, #8]
 800301e:	b2db      	uxtb	r3, r3
 8003020:	4619      	mov	r1, r3
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f8ae 	bl	8003184 <FLASH_Erase_Sector>
 8003028:	e023      	b.n	8003072 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 800302a:	f04f 33ff 	mov.w	r3, #4294967295
 800302e:	607b      	str	r3, [r7, #4]
 8003030:	4a1e      	ldr	r2, [pc, #120]	@ (80030ac <HAL_FLASH_IRQHandler+0x134>)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003036:	4b1d      	ldr	r3, [pc, #116]	@ (80030ac <HAL_FLASH_IRQHandler+0x134>)
 8003038:	2200      	movs	r2, #0
 800303a:	701a      	strb	r2, [r3, #0]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 800303c:	f000 f924 	bl	8003288 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f835 	bl	80030b0 <HAL_FLASH_EndOfOperationCallback>
 8003046:	e014      	b.n	8003072 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else
    {
      if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8003048:	4b18      	ldr	r3, [pc, #96]	@ (80030ac <HAL_FLASH_IRQHandler+0x134>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d107      	bne.n	8003062 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 8003052:	f000 f919 	bl	8003288 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8003056:	4b15      	ldr	r3, [pc, #84]	@ (80030ac <HAL_FLASH_IRQHandler+0x134>)
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	4618      	mov	r0, r3
 800305c:	f000 f828 	bl	80030b0 <HAL_FLASH_EndOfOperationCallback>
 8003060:	e004      	b.n	800306c <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8003062:	4b12      	ldr	r3, [pc, #72]	@ (80030ac <HAL_FLASH_IRQHandler+0x134>)
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	4618      	mov	r0, r3
 8003068:	f000 f822 	bl	80030b0 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800306c:	4b0f      	ldr	r3, [pc, #60]	@ (80030ac <HAL_FLASH_IRQHandler+0x134>)
 800306e:	2200      	movs	r2, #0
 8003070:	701a      	strb	r2, [r3, #0]
    }
  }

  if (pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8003072:	4b0e      	ldr	r3, [pc, #56]	@ (80030ac <HAL_FLASH_IRQHandler+0x134>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d111      	bne.n	80030a0 <HAL_FLASH_IRQHandler+0x128>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 800307c:	4b0a      	ldr	r3, [pc, #40]	@ (80030a8 <HAL_FLASH_IRQHandler+0x130>)
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	4a09      	ldr	r2, [pc, #36]	@ (80030a8 <HAL_FLASH_IRQHandler+0x130>)
 8003082:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003086:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8003088:	4b07      	ldr	r3, [pc, #28]	@ (80030a8 <HAL_FLASH_IRQHandler+0x130>)
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	4a06      	ldr	r2, [pc, #24]	@ (80030a8 <HAL_FLASH_IRQHandler+0x130>)
 800308e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003092:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8003094:	4b04      	ldr	r3, [pc, #16]	@ (80030a8 <HAL_FLASH_IRQHandler+0x130>)
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	4a03      	ldr	r2, [pc, #12]	@ (80030a8 <HAL_FLASH_IRQHandler+0x130>)
 800309a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800309e:	6113      	str	r3, [r2, #16]
  }
}
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40023c00 	.word	0x40023c00
 80030ac:	20001f38 	.word	0x20001f38

080030b0 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80030dc:	4b27      	ldr	r3, [pc, #156]	@ (800317c <FLASH_SetErrorCode+0xa4>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d008      	beq.n	80030fa <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80030e8:	4b25      	ldr	r3, [pc, #148]	@ (8003180 <FLASH_SetErrorCode+0xa8>)
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	f043 0310 	orr.w	r3, r3, #16
 80030f0:	4a23      	ldr	r2, [pc, #140]	@ (8003180 <FLASH_SetErrorCode+0xa8>)
 80030f2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80030f4:	4b21      	ldr	r3, [pc, #132]	@ (800317c <FLASH_SetErrorCode+0xa4>)
 80030f6:	2210      	movs	r2, #16
 80030f8:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80030fa:	4b20      	ldr	r3, [pc, #128]	@ (800317c <FLASH_SetErrorCode+0xa4>)
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f003 0320 	and.w	r3, r3, #32
 8003102:	2b00      	cmp	r3, #0
 8003104:	d008      	beq.n	8003118 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003106:	4b1e      	ldr	r3, [pc, #120]	@ (8003180 <FLASH_SetErrorCode+0xa8>)
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f043 0308 	orr.w	r3, r3, #8
 800310e:	4a1c      	ldr	r2, [pc, #112]	@ (8003180 <FLASH_SetErrorCode+0xa8>)
 8003110:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003112:	4b1a      	ldr	r3, [pc, #104]	@ (800317c <FLASH_SetErrorCode+0xa4>)
 8003114:	2220      	movs	r2, #32
 8003116:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003118:	4b18      	ldr	r3, [pc, #96]	@ (800317c <FLASH_SetErrorCode+0xa4>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003120:	2b00      	cmp	r3, #0
 8003122:	d008      	beq.n	8003136 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003124:	4b16      	ldr	r3, [pc, #88]	@ (8003180 <FLASH_SetErrorCode+0xa8>)
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	f043 0304 	orr.w	r3, r3, #4
 800312c:	4a14      	ldr	r2, [pc, #80]	@ (8003180 <FLASH_SetErrorCode+0xa8>)
 800312e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003130:	4b12      	ldr	r3, [pc, #72]	@ (800317c <FLASH_SetErrorCode+0xa4>)
 8003132:	2240      	movs	r2, #64	@ 0x40
 8003134:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003136:	4b11      	ldr	r3, [pc, #68]	@ (800317c <FLASH_SetErrorCode+0xa4>)
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800313e:	2b00      	cmp	r3, #0
 8003140:	d008      	beq.n	8003154 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003142:	4b0f      	ldr	r3, [pc, #60]	@ (8003180 <FLASH_SetErrorCode+0xa8>)
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	f043 0302 	orr.w	r3, r3, #2
 800314a:	4a0d      	ldr	r2, [pc, #52]	@ (8003180 <FLASH_SetErrorCode+0xa8>)
 800314c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800314e:	4b0b      	ldr	r3, [pc, #44]	@ (800317c <FLASH_SetErrorCode+0xa4>)
 8003150:	2280      	movs	r2, #128	@ 0x80
 8003152:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003154:	4b09      	ldr	r3, [pc, #36]	@ (800317c <FLASH_SetErrorCode+0xa4>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d008      	beq.n	8003172 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003160:	4b07      	ldr	r3, [pc, #28]	@ (8003180 <FLASH_SetErrorCode+0xa8>)
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	f043 0320 	orr.w	r3, r3, #32
 8003168:	4a05      	ldr	r2, [pc, #20]	@ (8003180 <FLASH_SetErrorCode+0xa8>)
 800316a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800316c:	4b03      	ldr	r3, [pc, #12]	@ (800317c <FLASH_SetErrorCode+0xa4>)
 800316e:	2202      	movs	r2, #2
 8003170:	60da      	str	r2, [r3, #12]
  }
}
 8003172:	bf00      	nop
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	40023c00 	.word	0x40023c00
 8003180:	20001f38 	.word	0x20001f38

08003184 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d025      	beq.n	80031e6 <FLASH_Erase_Sector+0x62>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d022      	beq.n	80031e6 <FLASH_Erase_Sector+0x62>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d01f      	beq.n	80031e6 <FLASH_Erase_Sector+0x62>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b03      	cmp	r3, #3
 80031aa:	d01c      	beq.n	80031e6 <FLASH_Erase_Sector+0x62>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d019      	beq.n	80031e6 <FLASH_Erase_Sector+0x62>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b05      	cmp	r3, #5
 80031b6:	d016      	beq.n	80031e6 <FLASH_Erase_Sector+0x62>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b06      	cmp	r3, #6
 80031bc:	d013      	beq.n	80031e6 <FLASH_Erase_Sector+0x62>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b07      	cmp	r3, #7
 80031c2:	d010      	beq.n	80031e6 <FLASH_Erase_Sector+0x62>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d00d      	beq.n	80031e6 <FLASH_Erase_Sector+0x62>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b09      	cmp	r3, #9
 80031ce:	d00a      	beq.n	80031e6 <FLASH_Erase_Sector+0x62>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b0a      	cmp	r3, #10
 80031d4:	d007      	beq.n	80031e6 <FLASH_Erase_Sector+0x62>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b0b      	cmp	r3, #11
 80031da:	d004      	beq.n	80031e6 <FLASH_Erase_Sector+0x62>
 80031dc:	f240 31d6 	movw	r1, #982	@ 0x3d6
 80031e0:	4827      	ldr	r0, [pc, #156]	@ (8003280 <FLASH_Erase_Sector+0xfc>)
 80031e2:	f7fd fd79 	bl	8000cd8 <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 80031e6:	78fb      	ldrb	r3, [r7, #3]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00d      	beq.n	8003208 <FLASH_Erase_Sector+0x84>
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d00a      	beq.n	8003208 <FLASH_Erase_Sector+0x84>
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d007      	beq.n	8003208 <FLASH_Erase_Sector+0x84>
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	d004      	beq.n	8003208 <FLASH_Erase_Sector+0x84>
 80031fe:	f240 31d7 	movw	r1, #983	@ 0x3d7
 8003202:	481f      	ldr	r0, [pc, #124]	@ (8003280 <FLASH_Erase_Sector+0xfc>)
 8003204:	f7fd fd68 	bl	8000cd8 <assert_failed>

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003208:	78fb      	ldrb	r3, [r7, #3]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d102      	bne.n	8003214 <FLASH_Erase_Sector+0x90>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	e010      	b.n	8003236 <FLASH_Erase_Sector+0xb2>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d103      	bne.n	8003222 <FLASH_Erase_Sector+0x9e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800321a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	e009      	b.n	8003236 <FLASH_Erase_Sector+0xb2>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003222:	78fb      	ldrb	r3, [r7, #3]
 8003224:	2b02      	cmp	r3, #2
 8003226:	d103      	bne.n	8003230 <FLASH_Erase_Sector+0xac>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003228:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	e002      	b.n	8003236 <FLASH_Erase_Sector+0xb2>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003230:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003234:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003236:	4b13      	ldr	r3, [pc, #76]	@ (8003284 <FLASH_Erase_Sector+0x100>)
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	4a12      	ldr	r2, [pc, #72]	@ (8003284 <FLASH_Erase_Sector+0x100>)
 800323c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003240:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003242:	4b10      	ldr	r3, [pc, #64]	@ (8003284 <FLASH_Erase_Sector+0x100>)
 8003244:	691a      	ldr	r2, [r3, #16]
 8003246:	490f      	ldr	r1, [pc, #60]	@ (8003284 <FLASH_Erase_Sector+0x100>)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4313      	orrs	r3, r2
 800324c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800324e:	4b0d      	ldr	r3, [pc, #52]	@ (8003284 <FLASH_Erase_Sector+0x100>)
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	4a0c      	ldr	r2, [pc, #48]	@ (8003284 <FLASH_Erase_Sector+0x100>)
 8003254:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003258:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800325a:	4b0a      	ldr	r3, [pc, #40]	@ (8003284 <FLASH_Erase_Sector+0x100>)
 800325c:	691a      	ldr	r2, [r3, #16]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	4313      	orrs	r3, r2
 8003264:	4a07      	ldr	r2, [pc, #28]	@ (8003284 <FLASH_Erase_Sector+0x100>)
 8003266:	f043 0302 	orr.w	r3, r3, #2
 800326a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800326c:	4b05      	ldr	r3, [pc, #20]	@ (8003284 <FLASH_Erase_Sector+0x100>)
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	4a04      	ldr	r2, [pc, #16]	@ (8003284 <FLASH_Erase_Sector+0x100>)
 8003272:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003276:	6113      	str	r3, [r2, #16]
}
 8003278:	bf00      	nop
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	0800d55c 	.word	0x0800d55c
 8003284:	40023c00 	.word	0x40023c00

08003288 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800328c:	4b20      	ldr	r3, [pc, #128]	@ (8003310 <FLASH_FlushCaches+0x88>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003294:	2b00      	cmp	r3, #0
 8003296:	d017      	beq.n	80032c8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003298:	4b1d      	ldr	r3, [pc, #116]	@ (8003310 <FLASH_FlushCaches+0x88>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a1c      	ldr	r2, [pc, #112]	@ (8003310 <FLASH_FlushCaches+0x88>)
 800329e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80032a2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80032a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003310 <FLASH_FlushCaches+0x88>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a19      	ldr	r2, [pc, #100]	@ (8003310 <FLASH_FlushCaches+0x88>)
 80032aa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	4b17      	ldr	r3, [pc, #92]	@ (8003310 <FLASH_FlushCaches+0x88>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a16      	ldr	r2, [pc, #88]	@ (8003310 <FLASH_FlushCaches+0x88>)
 80032b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80032ba:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032bc:	4b14      	ldr	r3, [pc, #80]	@ (8003310 <FLASH_FlushCaches+0x88>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a13      	ldr	r2, [pc, #76]	@ (8003310 <FLASH_FlushCaches+0x88>)
 80032c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032c6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80032c8:	4b11      	ldr	r3, [pc, #68]	@ (8003310 <FLASH_FlushCaches+0x88>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d017      	beq.n	8003304 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80032d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003310 <FLASH_FlushCaches+0x88>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003310 <FLASH_FlushCaches+0x88>)
 80032da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80032de:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80032e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003310 <FLASH_FlushCaches+0x88>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003310 <FLASH_FlushCaches+0x88>)
 80032e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80032ea:	6013      	str	r3, [r2, #0]
 80032ec:	4b08      	ldr	r3, [pc, #32]	@ (8003310 <FLASH_FlushCaches+0x88>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a07      	ldr	r2, [pc, #28]	@ (8003310 <FLASH_FlushCaches+0x88>)
 80032f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032f6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80032f8:	4b05      	ldr	r3, [pc, #20]	@ (8003310 <FLASH_FlushCaches+0x88>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a04      	ldr	r2, [pc, #16]	@ (8003310 <FLASH_FlushCaches+0x88>)
 80032fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003302:	6013      	str	r3, [r2, #0]
  }
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	40023c00 	.word	0x40023c00

08003314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003322:	2300      	movs	r3, #0
 8003324:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003326:	2300      	movs	r3, #0
 8003328:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a38      	ldr	r2, [pc, #224]	@ (8003410 <HAL_GPIO_Init+0xfc>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d023      	beq.n	800337a <HAL_GPIO_Init+0x66>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a37      	ldr	r2, [pc, #220]	@ (8003414 <HAL_GPIO_Init+0x100>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d01f      	beq.n	800337a <HAL_GPIO_Init+0x66>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a36      	ldr	r2, [pc, #216]	@ (8003418 <HAL_GPIO_Init+0x104>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d01b      	beq.n	800337a <HAL_GPIO_Init+0x66>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a35      	ldr	r2, [pc, #212]	@ (800341c <HAL_GPIO_Init+0x108>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d017      	beq.n	800337a <HAL_GPIO_Init+0x66>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a34      	ldr	r2, [pc, #208]	@ (8003420 <HAL_GPIO_Init+0x10c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d013      	beq.n	800337a <HAL_GPIO_Init+0x66>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a33      	ldr	r2, [pc, #204]	@ (8003424 <HAL_GPIO_Init+0x110>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00f      	beq.n	800337a <HAL_GPIO_Init+0x66>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a32      	ldr	r2, [pc, #200]	@ (8003428 <HAL_GPIO_Init+0x114>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d00b      	beq.n	800337a <HAL_GPIO_Init+0x66>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a31      	ldr	r2, [pc, #196]	@ (800342c <HAL_GPIO_Init+0x118>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d007      	beq.n	800337a <HAL_GPIO_Init+0x66>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a30      	ldr	r2, [pc, #192]	@ (8003430 <HAL_GPIO_Init+0x11c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d003      	beq.n	800337a <HAL_GPIO_Init+0x66>
 8003372:	21ac      	movs	r1, #172	@ 0xac
 8003374:	482f      	ldr	r0, [pc, #188]	@ (8003434 <HAL_GPIO_Init+0x120>)
 8003376:	f7fd fcaf 	bl	8000cd8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	b29b      	uxth	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	d004      	beq.n	800338e <HAL_GPIO_Init+0x7a>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800338c:	d303      	bcc.n	8003396 <HAL_GPIO_Init+0x82>
 800338e:	21ad      	movs	r1, #173	@ 0xad
 8003390:	4828      	ldr	r0, [pc, #160]	@ (8003434 <HAL_GPIO_Init+0x120>)
 8003392:	f7fd fca1 	bl	8000cd8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d035      	beq.n	800340a <HAL_GPIO_Init+0xf6>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d031      	beq.n	800340a <HAL_GPIO_Init+0xf6>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b11      	cmp	r3, #17
 80033ac:	d02d      	beq.n	800340a <HAL_GPIO_Init+0xf6>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d029      	beq.n	800340a <HAL_GPIO_Init+0xf6>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b12      	cmp	r3, #18
 80033bc:	d025      	beq.n	800340a <HAL_GPIO_Init+0xf6>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 80033c6:	d020      	beq.n	800340a <HAL_GPIO_Init+0xf6>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80033d0:	d01b      	beq.n	800340a <HAL_GPIO_Init+0xf6>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 80033da:	d016      	beq.n	800340a <HAL_GPIO_Init+0xf6>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 80033e4:	d011      	beq.n	800340a <HAL_GPIO_Init+0xf6>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 80033ee:	d00c      	beq.n	800340a <HAL_GPIO_Init+0xf6>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 80033f8:	d007      	beq.n	800340a <HAL_GPIO_Init+0xf6>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d003      	beq.n	800340a <HAL_GPIO_Init+0xf6>
 8003402:	21ae      	movs	r1, #174	@ 0xae
 8003404:	480b      	ldr	r0, [pc, #44]	@ (8003434 <HAL_GPIO_Init+0x120>)
 8003406:	f7fd fc67 	bl	8000cd8 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800340a:	2300      	movs	r3, #0
 800340c:	61fb      	str	r3, [r7, #28]
 800340e:	e235      	b.n	800387c <HAL_GPIO_Init+0x568>
 8003410:	40020000 	.word	0x40020000
 8003414:	40020400 	.word	0x40020400
 8003418:	40020800 	.word	0x40020800
 800341c:	40020c00 	.word	0x40020c00
 8003420:	40021000 	.word	0x40021000
 8003424:	40021400 	.word	0x40021400
 8003428:	40021800 	.word	0x40021800
 800342c:	40021c00 	.word	0x40021c00
 8003430:	40022000 	.word	0x40022000
 8003434:	0800d5d8 	.word	0x0800d5d8
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003438:	2201      	movs	r2, #1
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	4013      	ands	r3, r2
 800344a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	429a      	cmp	r2, r3
 8003452:	f040 8210 	bne.w	8003876 <HAL_GPIO_Init+0x562>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	2b01      	cmp	r3, #1
 8003460:	d005      	beq.n	800346e <HAL_GPIO_Init+0x15a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800346a:	2b02      	cmp	r3, #2
 800346c:	d144      	bne.n	80034f8 <HAL_GPIO_Init+0x1e4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00f      	beq.n	8003496 <HAL_GPIO_Init+0x182>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d00b      	beq.n	8003496 <HAL_GPIO_Init+0x182>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d007      	beq.n	8003496 <HAL_GPIO_Init+0x182>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	2b03      	cmp	r3, #3
 800348c:	d003      	beq.n	8003496 <HAL_GPIO_Init+0x182>
 800348e:	21c0      	movs	r1, #192	@ 0xc0
 8003490:	488d      	ldr	r0, [pc, #564]	@ (80036c8 <HAL_GPIO_Init+0x3b4>)
 8003492:	f7fd fc21 	bl	8000cd8 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	2203      	movs	r2, #3
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43db      	mvns	r3, r3
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4013      	ands	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4313      	orrs	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034cc:	2201      	movs	r2, #1
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	43db      	mvns	r3, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4013      	ands	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	091b      	lsrs	r3, r3, #4
 80034e2:	f003 0201 	and.w	r2, r3, #1
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	2b03      	cmp	r3, #3
 8003502:	d027      	beq.n	8003554 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00b      	beq.n	8003524 <HAL_GPIO_Init+0x210>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d007      	beq.n	8003524 <HAL_GPIO_Init+0x210>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2b02      	cmp	r3, #2
 800351a:	d003      	beq.n	8003524 <HAL_GPIO_Init+0x210>
 800351c:	21d1      	movs	r1, #209	@ 0xd1
 800351e:	486a      	ldr	r0, [pc, #424]	@ (80036c8 <HAL_GPIO_Init+0x3b4>)
 8003520:	f7fd fbda 	bl	8000cd8 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	2203      	movs	r2, #3
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4013      	ands	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4313      	orrs	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 0303 	and.w	r3, r3, #3
 800355c:	2b02      	cmp	r3, #2
 800355e:	f040 80b5 	bne.w	80036cc <HAL_GPIO_Init+0x3b8>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 8089 	beq.w	800367e <HAL_GPIO_Init+0x36a>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	2b09      	cmp	r3, #9
 8003572:	f000 8084 	beq.w	800367e <HAL_GPIO_Init+0x36a>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d07f      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d07b      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d077      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d073      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d06f      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d06b      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d067      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d063      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d05f      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d05b      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	d057      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d053      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d04f      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	2b05      	cmp	r3, #5
 80035e4:	d04b      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	2b05      	cmp	r3, #5
 80035ec:	d047      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	2b09      	cmp	r3, #9
 80035f4:	d043      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	2b06      	cmp	r3, #6
 80035fc:	d03f      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	2b09      	cmp	r3, #9
 8003604:	d03b      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	2b07      	cmp	r3, #7
 800360c:	d037      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	2b07      	cmp	r3, #7
 8003614:	d033      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	2b07      	cmp	r3, #7
 800361c:	d02f      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	2b08      	cmp	r3, #8
 8003624:	d02b      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	2b08      	cmp	r3, #8
 800362c:	d027      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	2b08      	cmp	r3, #8
 8003634:	d023      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	2b09      	cmp	r3, #9
 800363c:	d01f      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	2b09      	cmp	r3, #9
 8003644:	d01b      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	2b0a      	cmp	r3, #10
 800364c:	d017      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	2b0a      	cmp	r3, #10
 8003654:	d013      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	2b0c      	cmp	r3, #12
 800365c:	d00f      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	2b0c      	cmp	r3, #12
 8003664:	d00b      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	2b0c      	cmp	r3, #12
 800366c:	d007      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	2b0f      	cmp	r3, #15
 8003674:	d003      	beq.n	800367e <HAL_GPIO_Init+0x36a>
 8003676:	21de      	movs	r1, #222	@ 0xde
 8003678:	4813      	ldr	r0, [pc, #76]	@ (80036c8 <HAL_GPIO_Init+0x3b4>)
 800367a:	f7fd fb2d 	bl	8000cd8 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	08da      	lsrs	r2, r3, #3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3208      	adds	r2, #8
 8003686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800368a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f003 0307 	and.w	r3, r3, #7
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	220f      	movs	r2, #15
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	43db      	mvns	r3, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4013      	ands	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	691a      	ldr	r2, [r3, #16]
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	08da      	lsrs	r2, r3, #3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3208      	adds	r2, #8
 80036c0:	69b9      	ldr	r1, [r7, #24]
 80036c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80036c6:	e001      	b.n	80036cc <HAL_GPIO_Init+0x3b8>
 80036c8:	0800d5d8 	.word	0x0800d5d8
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	2203      	movs	r2, #3
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4013      	ands	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 0203 	and.w	r2, r3, #3
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 80b4 	beq.w	8003876 <HAL_GPIO_Init+0x562>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800370e:	2300      	movs	r3, #0
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	4b5f      	ldr	r3, [pc, #380]	@ (8003890 <HAL_GPIO_Init+0x57c>)
 8003714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003716:	4a5e      	ldr	r2, [pc, #376]	@ (8003890 <HAL_GPIO_Init+0x57c>)
 8003718:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800371c:	6453      	str	r3, [r2, #68]	@ 0x44
 800371e:	4b5c      	ldr	r3, [pc, #368]	@ (8003890 <HAL_GPIO_Init+0x57c>)
 8003720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003722:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800372a:	4a5a      	ldr	r2, [pc, #360]	@ (8003894 <HAL_GPIO_Init+0x580>)
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	089b      	lsrs	r3, r3, #2
 8003730:	3302      	adds	r3, #2
 8003732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003736:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	220f      	movs	r2, #15
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43db      	mvns	r3, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4013      	ands	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a51      	ldr	r2, [pc, #324]	@ (8003898 <HAL_GPIO_Init+0x584>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d02b      	beq.n	80037ae <HAL_GPIO_Init+0x49a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a50      	ldr	r2, [pc, #320]	@ (800389c <HAL_GPIO_Init+0x588>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d025      	beq.n	80037aa <HAL_GPIO_Init+0x496>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a4f      	ldr	r2, [pc, #316]	@ (80038a0 <HAL_GPIO_Init+0x58c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d01f      	beq.n	80037a6 <HAL_GPIO_Init+0x492>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a4e      	ldr	r2, [pc, #312]	@ (80038a4 <HAL_GPIO_Init+0x590>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d019      	beq.n	80037a2 <HAL_GPIO_Init+0x48e>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a4d      	ldr	r2, [pc, #308]	@ (80038a8 <HAL_GPIO_Init+0x594>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d013      	beq.n	800379e <HAL_GPIO_Init+0x48a>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a4c      	ldr	r2, [pc, #304]	@ (80038ac <HAL_GPIO_Init+0x598>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d00d      	beq.n	800379a <HAL_GPIO_Init+0x486>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a4b      	ldr	r2, [pc, #300]	@ (80038b0 <HAL_GPIO_Init+0x59c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d007      	beq.n	8003796 <HAL_GPIO_Init+0x482>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a4a      	ldr	r2, [pc, #296]	@ (80038b4 <HAL_GPIO_Init+0x5a0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d101      	bne.n	8003792 <HAL_GPIO_Init+0x47e>
 800378e:	2307      	movs	r3, #7
 8003790:	e00e      	b.n	80037b0 <HAL_GPIO_Init+0x49c>
 8003792:	2308      	movs	r3, #8
 8003794:	e00c      	b.n	80037b0 <HAL_GPIO_Init+0x49c>
 8003796:	2306      	movs	r3, #6
 8003798:	e00a      	b.n	80037b0 <HAL_GPIO_Init+0x49c>
 800379a:	2305      	movs	r3, #5
 800379c:	e008      	b.n	80037b0 <HAL_GPIO_Init+0x49c>
 800379e:	2304      	movs	r3, #4
 80037a0:	e006      	b.n	80037b0 <HAL_GPIO_Init+0x49c>
 80037a2:	2303      	movs	r3, #3
 80037a4:	e004      	b.n	80037b0 <HAL_GPIO_Init+0x49c>
 80037a6:	2302      	movs	r3, #2
 80037a8:	e002      	b.n	80037b0 <HAL_GPIO_Init+0x49c>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <HAL_GPIO_Init+0x49c>
 80037ae:	2300      	movs	r3, #0
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	f002 0203 	and.w	r2, r2, #3
 80037b6:	0092      	lsls	r2, r2, #2
 80037b8:	4093      	lsls	r3, r2
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4313      	orrs	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037c0:	4934      	ldr	r1, [pc, #208]	@ (8003894 <HAL_GPIO_Init+0x580>)
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	089b      	lsrs	r3, r3, #2
 80037c6:	3302      	adds	r3, #2
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037ce:	4b3a      	ldr	r3, [pc, #232]	@ (80038b8 <HAL_GPIO_Init+0x5a4>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	43db      	mvns	r3, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4013      	ands	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_Init+0x4de>
        {
          temp |= iocurrent;
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037f2:	4a31      	ldr	r2, [pc, #196]	@ (80038b8 <HAL_GPIO_Init+0x5a4>)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037f8:	4b2f      	ldr	r3, [pc, #188]	@ (80038b8 <HAL_GPIO_Init+0x5a4>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	43db      	mvns	r3, r3
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4013      	ands	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_GPIO_Init+0x508>
        {
          temp |= iocurrent;
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	4313      	orrs	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800381c:	4a26      	ldr	r2, [pc, #152]	@ (80038b8 <HAL_GPIO_Init+0x5a4>)
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003822:	4b25      	ldr	r3, [pc, #148]	@ (80038b8 <HAL_GPIO_Init+0x5a4>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	43db      	mvns	r3, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4013      	ands	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_Init+0x532>
        {
          temp |= iocurrent;
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003846:	4a1c      	ldr	r2, [pc, #112]	@ (80038b8 <HAL_GPIO_Init+0x5a4>)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800384c:	4b1a      	ldr	r3, [pc, #104]	@ (80038b8 <HAL_GPIO_Init+0x5a4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	43db      	mvns	r3, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4013      	ands	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_GPIO_Init+0x55c>
        {
          temp |= iocurrent;
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003870:	4a11      	ldr	r2, [pc, #68]	@ (80038b8 <HAL_GPIO_Init+0x5a4>)
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	3301      	adds	r3, #1
 800387a:	61fb      	str	r3, [r7, #28]
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	2b0f      	cmp	r3, #15
 8003880:	f67f adda 	bls.w	8003438 <HAL_GPIO_Init+0x124>
      }
    }
  }
}
 8003884:	bf00      	nop
 8003886:	bf00      	nop
 8003888:	3720      	adds	r7, #32
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40023800 	.word	0x40023800
 8003894:	40013800 	.word	0x40013800
 8003898:	40020000 	.word	0x40020000
 800389c:	40020400 	.word	0x40020400
 80038a0:	40020800 	.word	0x40020800
 80038a4:	40020c00 	.word	0x40020c00
 80038a8:	40021000 	.word	0x40021000
 80038ac:	40021400 	.word	0x40021400
 80038b0:	40021800 	.word	0x40021800
 80038b4:	40021c00 	.word	0x40021c00
 80038b8:	40013c00 	.word	0x40013c00

080038bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	807b      	strh	r3, [r7, #2]
 80038c8:	4613      	mov	r3, r2
 80038ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80038cc:	887b      	ldrh	r3, [r7, #2]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d104      	bne.n	80038dc <HAL_GPIO_WritePin+0x20>
 80038d2:	f240 119d 	movw	r1, #413	@ 0x19d
 80038d6:	480e      	ldr	r0, [pc, #56]	@ (8003910 <HAL_GPIO_WritePin+0x54>)
 80038d8:	f7fd f9fe 	bl	8000cd8 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80038dc:	787b      	ldrb	r3, [r7, #1]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d007      	beq.n	80038f2 <HAL_GPIO_WritePin+0x36>
 80038e2:	787b      	ldrb	r3, [r7, #1]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d004      	beq.n	80038f2 <HAL_GPIO_WritePin+0x36>
 80038e8:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 80038ec:	4808      	ldr	r0, [pc, #32]	@ (8003910 <HAL_GPIO_WritePin+0x54>)
 80038ee:	f7fd f9f3 	bl	8000cd8 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80038f2:	787b      	ldrb	r3, [r7, #1]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038f8:	887a      	ldrh	r2, [r7, #2]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038fe:	e003      	b.n	8003908 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003900:	887b      	ldrh	r3, [r7, #2]
 8003902:	041a      	lsls	r2, r3, #16
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	619a      	str	r2, [r3, #24]
}
 8003908:	bf00      	nop
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	0800d5d8 	.word	0x0800d5d8

08003914 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003920:	887b      	ldrh	r3, [r7, #2]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d104      	bne.n	8003930 <HAL_GPIO_TogglePin+0x1c>
 8003926:	f44f 71db 	mov.w	r1, #438	@ 0x1b6
 800392a:	480a      	ldr	r0, [pc, #40]	@ (8003954 <HAL_GPIO_TogglePin+0x40>)
 800392c:	f7fd f9d4 	bl	8000cd8 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003936:	887a      	ldrh	r2, [r7, #2]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4013      	ands	r3, r2
 800393c:	041a      	lsls	r2, r3, #16
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	43d9      	mvns	r1, r3
 8003942:	887b      	ldrh	r3, [r7, #2]
 8003944:	400b      	ands	r3, r1
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	619a      	str	r2, [r3, #24]
}
 800394c:	bf00      	nop
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	0800d5d8 	.word	0x0800d5d8

08003958 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003962:	4b08      	ldr	r3, [pc, #32]	@ (8003984 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003964:	695a      	ldr	r2, [r3, #20]
 8003966:	88fb      	ldrh	r3, [r7, #6]
 8003968:	4013      	ands	r3, r2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d006      	beq.n	800397c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800396e:	4a05      	ldr	r2, [pc, #20]	@ (8003984 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003970:	88fb      	ldrh	r3, [r7, #6]
 8003972:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003974:	88fb      	ldrh	r3, [r7, #6]
 8003976:	4618      	mov	r0, r3
 8003978:	f000 f806 	bl	8003988 <HAL_GPIO_EXTI_Callback>
  }
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40013c00 	.word	0x40013c00

08003988 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
	...

080039a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af02      	add	r7, sp, #8
 80039a6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e10f      	b.n	8003bd2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039ba:	d008      	beq.n	80039ce <HAL_PCD_Init+0x2e>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a86      	ldr	r2, [pc, #536]	@ (8003bdc <HAL_PCD_Init+0x23c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d003      	beq.n	80039ce <HAL_PCD_Init+0x2e>
 80039c6:	2189      	movs	r1, #137	@ 0x89
 80039c8:	4885      	ldr	r0, [pc, #532]	@ (8003be0 <HAL_PCD_Init+0x240>)
 80039ca:	f7fd f985 	bl	8000cd8 <assert_failed>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d106      	bne.n	80039ee <HAL_PCD_Init+0x4e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7fd fe2b 	bl	8001644 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2203      	movs	r2, #3
 80039f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039fc:	d102      	bne.n	8003a04 <HAL_PCD_Init+0x64>
  {
    hpcd->Init.dma_enable = 0U;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f005 fe2c 	bl	8009666 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6818      	ldr	r0, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	7c1a      	ldrb	r2, [r3, #16]
 8003a16:	f88d 2000 	strb.w	r2, [sp]
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a1e:	f005 fd0b 	bl	8009438 <USB_CoreInit>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_PCD_Init+0x94>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e0ce      	b.n	8003bd2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2100      	movs	r1, #0
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f005 fe24 	bl	8009688 <USB_SetCurrentMode>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d005      	beq.n	8003a52 <HAL_PCD_Init+0xb2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2202      	movs	r2, #2
 8003a4a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e0bf      	b.n	8003bd2 <HAL_PCD_Init+0x232>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a52:	2300      	movs	r3, #0
 8003a54:	73fb      	strb	r3, [r7, #15]
 8003a56:	e04a      	b.n	8003aee <HAL_PCD_Init+0x14e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a58:	7bfa      	ldrb	r2, [r7, #15]
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	3315      	adds	r3, #21
 8003a68:	2201      	movs	r2, #1
 8003a6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a6c:	7bfa      	ldrb	r2, [r7, #15]
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	4413      	add	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	3314      	adds	r3, #20
 8003a7c:	7bfa      	ldrb	r2, [r7, #15]
 8003a7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a80:	7bfa      	ldrb	r2, [r7, #15]
 8003a82:	7bfb      	ldrb	r3, [r7, #15]
 8003a84:	b298      	uxth	r0, r3
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	332e      	adds	r3, #46	@ 0x2e
 8003a94:	4602      	mov	r2, r0
 8003a96:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a98:	7bfa      	ldrb	r2, [r7, #15]
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	4413      	add	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	3318      	adds	r3, #24
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003aac:	7bfa      	ldrb	r2, [r7, #15]
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	331c      	adds	r3, #28
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ac0:	7bfa      	ldrb	r2, [r7, #15]
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	3320      	adds	r3, #32
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ad4:	7bfa      	ldrb	r2, [r7, #15]
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	4413      	add	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	3324      	adds	r3, #36	@ 0x24
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	3301      	adds	r3, #1
 8003aec:	73fb      	strb	r3, [r7, #15]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	791b      	ldrb	r3, [r3, #4]
 8003af2:	7bfa      	ldrb	r2, [r7, #15]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d3af      	bcc.n	8003a58 <HAL_PCD_Init+0xb8>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003af8:	2300      	movs	r3, #0
 8003afa:	73fb      	strb	r3, [r7, #15]
 8003afc:	e044      	b.n	8003b88 <HAL_PCD_Init+0x1e8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003afe:	7bfa      	ldrb	r2, [r7, #15]
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	4613      	mov	r3, r2
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	4413      	add	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	440b      	add	r3, r1
 8003b0c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003b10:	2200      	movs	r2, #0
 8003b12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b14:	7bfa      	ldrb	r2, [r7, #15]
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003b26:	7bfa      	ldrb	r2, [r7, #15]
 8003b28:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b2a:	7bfa      	ldrb	r2, [r7, #15]
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	4413      	add	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	440b      	add	r3, r1
 8003b38:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b40:	7bfa      	ldrb	r2, [r7, #15]
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	4613      	mov	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b56:	7bfa      	ldrb	r2, [r7, #15]
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	4413      	add	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	440b      	add	r3, r1
 8003b64:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b6c:	7bfa      	ldrb	r2, [r7, #15]
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	4613      	mov	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	4413      	add	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
 8003b84:	3301      	adds	r3, #1
 8003b86:	73fb      	strb	r3, [r7, #15]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	791b      	ldrb	r3, [r3, #4]
 8003b8c:	7bfa      	ldrb	r2, [r7, #15]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d3b5      	bcc.n	8003afe <HAL_PCD_Init+0x15e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	7c1a      	ldrb	r2, [r3, #16]
 8003b9a:	f88d 2000 	strb.w	r2, [sp]
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ba2:	f005 fdbd 	bl	8009720 <USB_DevInit>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d005      	beq.n	8003bb8 <HAL_PCD_Init+0x218>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e00c      	b.n	8003bd2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f006 fe07 	bl	800a7de <USB_DevDisconnect>

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40040000 	.word	0x40040000
 8003be0:	0800d650 	.word	0x0800d650

08003be4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_PCD_Start+0x1c>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e022      	b.n	8003c46 <HAL_PCD_Start+0x62>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d009      	beq.n	8003c28 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d105      	bne.n	8003c28 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c20:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f005 fd09 	bl	8009644 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f006 fdb0 	bl	800a79c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c4e:	b590      	push	{r4, r7, lr}
 8003c50:	b08d      	sub	sp, #52	@ 0x34
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f006 fe6e 	bl	800a946 <USB_GetMode>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f040 848c 	bne.w	800458a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f006 fdd2 	bl	800a820 <USB_ReadInterrupts>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 8482 	beq.w	8004588 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	0a1b      	lsrs	r3, r3, #8
 8003c8e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f006 fdbf 	bl	800a820 <USB_ReadInterrupts>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d107      	bne.n	8003cbc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695a      	ldr	r2, [r3, #20]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f002 0202 	and.w	r2, r2, #2
 8003cba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f006 fdad 	bl	800a820 <USB_ReadInterrupts>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	f003 0310 	and.w	r3, r3, #16
 8003ccc:	2b10      	cmp	r3, #16
 8003cce:	d161      	bne.n	8003d94 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699a      	ldr	r2, [r3, #24]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0210 	bic.w	r2, r2, #16
 8003cde:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	f003 020f 	and.w	r2, r3, #15
 8003cec:	4613      	mov	r3, r2
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	4413      	add	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	0c5b      	lsrs	r3, r3, #17
 8003d04:	f003 030f 	and.w	r3, r3, #15
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d124      	bne.n	8003d56 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003d12:	4013      	ands	r3, r2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d035      	beq.n	8003d84 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	091b      	lsrs	r3, r3, #4
 8003d20:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	461a      	mov	r2, r3
 8003d2a:	6a38      	ldr	r0, [r7, #32]
 8003d2c:	f006 fbe4 	bl	800a4f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	68da      	ldr	r2, [r3, #12]
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	091b      	lsrs	r3, r3, #4
 8003d38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d3c:	441a      	add	r2, r3
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	695a      	ldr	r2, [r3, #20]
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	091b      	lsrs	r3, r3, #4
 8003d4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d4e:	441a      	add	r2, r3
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	615a      	str	r2, [r3, #20]
 8003d54:	e016      	b.n	8003d84 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	0c5b      	lsrs	r3, r3, #17
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	2b06      	cmp	r3, #6
 8003d60:	d110      	bne.n	8003d84 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d68:	2208      	movs	r2, #8
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	6a38      	ldr	r0, [r7, #32]
 8003d6e:	f006 fbc3 	bl	800a4f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	695a      	ldr	r2, [r3, #20]
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	091b      	lsrs	r3, r3, #4
 8003d7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d7e:	441a      	add	r2, r3
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699a      	ldr	r2, [r3, #24]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0210 	orr.w	r2, r2, #16
 8003d92:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f006 fd41 	bl	800a820 <USB_ReadInterrupts>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003da4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003da8:	f040 80a7 	bne.w	8003efa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f006 fd46 	bl	800a846 <USB_ReadDevAllOutEpInterrupt>
 8003dba:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003dbc:	e099      	b.n	8003ef2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 808e 	beq.w	8003ee6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dd0:	b2d2      	uxtb	r2, r2
 8003dd2:	4611      	mov	r1, r2
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f006 fd6a 	bl	800a8ae <USB_ReadDevOutEPInterrupt>
 8003dda:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00c      	beq.n	8003e00 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003df2:	461a      	mov	r2, r3
 8003df4:	2301      	movs	r3, #1
 8003df6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003df8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fea4 	bl	8004b48 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00c      	beq.n	8003e24 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0c:	015a      	lsls	r2, r3, #5
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e16:	461a      	mov	r2, r3
 8003e18:	2308      	movs	r3, #8
 8003e1a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003e1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 ff7a 	bl	8004d18 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f003 0310 	and.w	r3, r3, #16
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d008      	beq.n	8003e40 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	2310      	movs	r3, #16
 8003e3e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d030      	beq.n	8003eac <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e52:	2b80      	cmp	r3, #128	@ 0x80
 8003e54:	d109      	bne.n	8003e6a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	69fa      	ldr	r2, [r7, #28]
 8003e60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e68:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003e6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	4413      	add	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	78db      	ldrb	r3, [r3, #3]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d108      	bne.n	8003e9a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	4619      	mov	r1, r3
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7fd fcdb 	bl	8001850 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f003 0320 	and.w	r3, r3, #32
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d008      	beq.n	8003ec8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	2320      	movs	r3, #32
 8003ec6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d009      	beq.n	8003ee6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ede:	461a      	mov	r2, r3
 8003ee0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ee4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee8:	3301      	adds	r3, #1
 8003eea:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eee:	085b      	lsrs	r3, r3, #1
 8003ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f47f af62 	bne.w	8003dbe <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f006 fc8e 	bl	800a820 <USB_ReadInterrupts>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f0e:	f040 80db 	bne.w	80040c8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f006 fcaf 	bl	800a87a <USB_ReadDevAllInEpInterrupt>
 8003f1c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003f22:	e0cd      	b.n	80040c0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 80c2 	beq.w	80040b4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	4611      	mov	r1, r2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f006 fcd5 	bl	800a8ea <USB_ReadDevInEPInterrupt>
 8003f40:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d057      	beq.n	8003ffc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	2201      	movs	r2, #1
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	43db      	mvns	r3, r3
 8003f66:	69f9      	ldr	r1, [r7, #28]
 8003f68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f72:	015a      	lsls	r2, r3, #5
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	2301      	movs	r3, #1
 8003f80:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	799b      	ldrb	r3, [r3, #6]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d132      	bne.n	8003ff0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f8e:	4613      	mov	r3, r2
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	4413      	add	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	3320      	adds	r3, #32
 8003f9a:	6819      	ldr	r1, [r3, #0]
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4403      	add	r3, r0
 8003faa:	331c      	adds	r3, #28
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4419      	add	r1, r3
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4403      	add	r3, r0
 8003fbe:	3320      	adds	r3, #32
 8003fc0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d113      	bne.n	8003ff0 <HAL_PCD_IRQHandler+0x3a2>
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fcc:	4613      	mov	r3, r2
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	3324      	adds	r3, #36	@ 0x24
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d108      	bne.n	8003ff0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6818      	ldr	r0, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003fe8:	461a      	mov	r2, r3
 8003fea:	2101      	movs	r1, #1
 8003fec:	f006 fcdc 	bl	800a9a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7fd fba5 	bl	8001746 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d008      	beq.n	8004018 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004008:	015a      	lsls	r2, r3, #5
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	4413      	add	r3, r2
 800400e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004012:	461a      	mov	r2, r3
 8004014:	2308      	movs	r3, #8
 8004016:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f003 0310 	and.w	r3, r3, #16
 800401e:	2b00      	cmp	r3, #0
 8004020:	d008      	beq.n	8004034 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	4413      	add	r3, r2
 800402a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800402e:	461a      	mov	r2, r3
 8004030:	2310      	movs	r3, #16
 8004032:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	d008      	beq.n	8004050 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800403e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004040:	015a      	lsls	r2, r3, #5
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	4413      	add	r3, r2
 8004046:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800404a:	461a      	mov	r2, r3
 800404c:	2340      	movs	r3, #64	@ 0x40
 800404e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d023      	beq.n	80040a2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800405a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800405c:	6a38      	ldr	r0, [r7, #32]
 800405e:	f005 fcc3 	bl	80099e8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004064:	4613      	mov	r3, r2
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	4413      	add	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	3310      	adds	r3, #16
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	4413      	add	r3, r2
 8004072:	3304      	adds	r3, #4
 8004074:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	78db      	ldrb	r3, [r3, #3]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d108      	bne.n	8004090 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2200      	movs	r2, #0
 8004082:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004086:	b2db      	uxtb	r3, r3
 8004088:	4619      	mov	r1, r3
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fd fbf2 	bl	8001874 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	4413      	add	r3, r2
 8004098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800409c:	461a      	mov	r2, r3
 800409e:	2302      	movs	r3, #2
 80040a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80040ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fcbd 	bl	8004a2e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80040b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b6:	3301      	adds	r3, #1
 80040b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80040ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040bc:	085b      	lsrs	r3, r3, #1
 80040be:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80040c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f47f af2e 	bne.w	8003f24 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f006 fba7 	bl	800a820 <USB_ReadInterrupts>
 80040d2:	4603      	mov	r3, r0
 80040d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040dc:	d122      	bne.n	8004124 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	69fa      	ldr	r2, [r7, #28]
 80040e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040ec:	f023 0301 	bic.w	r3, r3, #1
 80040f0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d108      	bne.n	800410e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004104:	2100      	movs	r1, #0
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 fea4 	bl	8004e54 <HAL_PCDEx_LPM_Callback>
 800410c:	e002      	b.n	8004114 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7fd fb90 	bl	8001834 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	695a      	ldr	r2, [r3, #20]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004122:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f006 fb79 	bl	800a820 <USB_ReadInterrupts>
 800412e:	4603      	mov	r3, r0
 8004130:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004134:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004138:	d112      	bne.n	8004160 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b01      	cmp	r3, #1
 8004148:	d102      	bne.n	8004150 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fd fb4c 	bl	80017e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695a      	ldr	r2, [r3, #20]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800415e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4618      	mov	r0, r3
 8004166:	f006 fb5b 	bl	800a820 <USB_ReadInterrupts>
 800416a:	4603      	mov	r3, r0
 800416c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004170:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004174:	f040 80b7 	bne.w	80042e6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	69fa      	ldr	r2, [r7, #28]
 8004182:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004186:	f023 0301 	bic.w	r3, r3, #1
 800418a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2110      	movs	r1, #16
 8004192:	4618      	mov	r0, r3
 8004194:	f005 fc28 	bl	80099e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004198:	2300      	movs	r3, #0
 800419a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800419c:	e046      	b.n	800422c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800419e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041a0:	015a      	lsls	r2, r3, #5
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041aa:	461a      	mov	r2, r3
 80041ac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80041b0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80041b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b4:	015a      	lsls	r2, r3, #5
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	4413      	add	r3, r2
 80041ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041c2:	0151      	lsls	r1, r2, #5
 80041c4:	69fa      	ldr	r2, [r7, #28]
 80041c6:	440a      	add	r2, r1
 80041c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041cc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80041d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80041d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d4:	015a      	lsls	r2, r3, #5
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	4413      	add	r3, r2
 80041da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041de:	461a      	mov	r2, r3
 80041e0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80041e4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80041e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041f6:	0151      	lsls	r1, r2, #5
 80041f8:	69fa      	ldr	r2, [r7, #28]
 80041fa:	440a      	add	r2, r1
 80041fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004200:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004204:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004216:	0151      	lsls	r1, r2, #5
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	440a      	add	r2, r1
 800421c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004220:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004224:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004228:	3301      	adds	r3, #1
 800422a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	791b      	ldrb	r3, [r3, #4]
 8004230:	461a      	mov	r2, r3
 8004232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004234:	4293      	cmp	r3, r2
 8004236:	d3b2      	bcc.n	800419e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	69fa      	ldr	r2, [r7, #28]
 8004242:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004246:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800424a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	7bdb      	ldrb	r3, [r3, #15]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d016      	beq.n	8004282 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800425a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800425e:	69fa      	ldr	r2, [r7, #28]
 8004260:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004264:	f043 030b 	orr.w	r3, r3, #11
 8004268:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004274:	69fa      	ldr	r2, [r7, #28]
 8004276:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800427a:	f043 030b 	orr.w	r3, r3, #11
 800427e:	6453      	str	r3, [r2, #68]	@ 0x44
 8004280:	e015      	b.n	80042ae <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	69fa      	ldr	r2, [r7, #28]
 800428c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004290:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004294:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004298:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	69fa      	ldr	r2, [r7, #28]
 80042a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042a8:	f043 030b 	orr.w	r3, r3, #11
 80042ac:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	69fa      	ldr	r2, [r7, #28]
 80042b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042bc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80042c0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042d0:	461a      	mov	r2, r3
 80042d2:	f006 fb69 	bl	800a9a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695a      	ldr	r2, [r3, #20]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80042e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f006 fa98 	bl	800a820 <USB_ReadInterrupts>
 80042f0:	4603      	mov	r3, r0
 80042f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042fa:	d123      	bne.n	8004344 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f006 fb2e 	bl	800a962 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f005 fbe5 	bl	8009ada <USB_GetDevSpeed>
 8004310:	4603      	mov	r3, r0
 8004312:	461a      	mov	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681c      	ldr	r4, [r3, #0]
 800431c:	f001 fb80 	bl	8005a20 <HAL_RCC_GetHCLKFreq>
 8004320:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004326:	461a      	mov	r2, r3
 8004328:	4620      	mov	r0, r4
 800432a:	f005 f8e9 	bl	8009500 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7fd fa31 	bl	8001796 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	695a      	ldr	r2, [r3, #20]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004342:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f006 fa69 	bl	800a820 <USB_ReadInterrupts>
 800434e:	4603      	mov	r3, r0
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b08      	cmp	r3, #8
 8004356:	d10a      	bne.n	800436e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7fd fa0e 	bl	800177a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695a      	ldr	r2, [r3, #20]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f002 0208 	and.w	r2, r2, #8
 800436c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f006 fa54 	bl	800a820 <USB_ReadInterrupts>
 8004378:	4603      	mov	r3, r0
 800437a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800437e:	2b80      	cmp	r3, #128	@ 0x80
 8004380:	d123      	bne.n	80043ca <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800438e:	2301      	movs	r3, #1
 8004390:	627b      	str	r3, [r7, #36]	@ 0x24
 8004392:	e014      	b.n	80043be <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004398:	4613      	mov	r3, r2
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	4413      	add	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	440b      	add	r3, r1
 80043a2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d105      	bne.n	80043b8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80043ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	4619      	mov	r1, r3
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fb0a 	bl	80049cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ba:	3301      	adds	r3, #1
 80043bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	791b      	ldrb	r3, [r3, #4]
 80043c2:	461a      	mov	r2, r3
 80043c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d3e4      	bcc.n	8004394 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f006 fa26 	bl	800a820 <USB_ReadInterrupts>
 80043d4:	4603      	mov	r3, r0
 80043d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043de:	d13c      	bne.n	800445a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043e0:	2301      	movs	r3, #1
 80043e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80043e4:	e02b      	b.n	800443e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80043e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043fa:	4613      	mov	r3, r2
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	4413      	add	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	440b      	add	r3, r1
 8004404:	3318      	adds	r3, #24
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d115      	bne.n	8004438 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800440c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800440e:	2b00      	cmp	r3, #0
 8004410:	da12      	bge.n	8004438 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004416:	4613      	mov	r3, r2
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	4413      	add	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	440b      	add	r3, r1
 8004420:	3317      	adds	r3, #23
 8004422:	2201      	movs	r2, #1
 8004424:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004428:	b2db      	uxtb	r3, r3
 800442a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800442e:	b2db      	uxtb	r3, r3
 8004430:	4619      	mov	r1, r3
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 faca 	bl	80049cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443a:	3301      	adds	r3, #1
 800443c:	627b      	str	r3, [r7, #36]	@ 0x24
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	791b      	ldrb	r3, [r3, #4]
 8004442:	461a      	mov	r2, r3
 8004444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004446:	4293      	cmp	r3, r2
 8004448:	d3cd      	bcc.n	80043e6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	695a      	ldr	r2, [r3, #20]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004458:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f006 f9de 	bl	800a820 <USB_ReadInterrupts>
 8004464:	4603      	mov	r3, r0
 8004466:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800446a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800446e:	d156      	bne.n	800451e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004470:	2301      	movs	r3, #1
 8004472:	627b      	str	r3, [r7, #36]	@ 0x24
 8004474:	e045      	b.n	8004502 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004478:	015a      	lsls	r2, r3, #5
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	4413      	add	r3, r2
 800447e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800448a:	4613      	mov	r3, r2
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	4413      	add	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	440b      	add	r3, r1
 8004494:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d12e      	bne.n	80044fc <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800449e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	da2b      	bge.n	80044fc <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80044b0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d121      	bne.n	80044fc <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80044b8:	6879      	ldr	r1, [r7, #4]
 80044ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044bc:	4613      	mov	r3, r2
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	4413      	add	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	440b      	add	r3, r1
 80044c6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80044ca:	2201      	movs	r2, #1
 80044cc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10a      	bne.n	80044fc <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	69fa      	ldr	r2, [r7, #28]
 80044f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044f8:	6053      	str	r3, [r2, #4]
            break;
 80044fa:	e008      	b.n	800450e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fe:	3301      	adds	r3, #1
 8004500:	627b      	str	r3, [r7, #36]	@ 0x24
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	791b      	ldrb	r3, [r3, #4]
 8004506:	461a      	mov	r2, r3
 8004508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450a:	4293      	cmp	r3, r2
 800450c:	d3b3      	bcc.n	8004476 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695a      	ldr	r2, [r3, #20]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800451c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f006 f97c 	bl	800a820 <USB_ReadInterrupts>
 8004528:	4603      	mov	r3, r0
 800452a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800452e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004532:	d10a      	bne.n	800454a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7fd f9af 	bl	8001898 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695a      	ldr	r2, [r3, #20]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004548:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4618      	mov	r0, r3
 8004550:	f006 f966 	bl	800a820 <USB_ReadInterrupts>
 8004554:	4603      	mov	r3, r0
 8004556:	f003 0304 	and.w	r3, r3, #4
 800455a:	2b04      	cmp	r3, #4
 800455c:	d115      	bne.n	800458a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7fd f99f 	bl	80018b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6859      	ldr	r1, [r3, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	430a      	orrs	r2, r1
 8004584:	605a      	str	r2, [r3, #4]
 8004586:	e000      	b.n	800458a <HAL_PCD_IRQHandler+0x93c>
      return;
 8004588:	bf00      	nop
    }
  }
}
 800458a:	3734      	adds	r7, #52	@ 0x34
 800458c:	46bd      	mov	sp, r7
 800458e:	bd90      	pop	{r4, r7, pc}

08004590 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d101      	bne.n	80045aa <HAL_PCD_SetAddress+0x1a>
 80045a6:	2302      	movs	r3, #2
 80045a8:	e012      	b.n	80045d0 <HAL_PCD_SetAddress+0x40>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	78fa      	ldrb	r2, [r7, #3]
 80045b6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	78fa      	ldrb	r2, [r7, #3]
 80045be:	4611      	mov	r1, r2
 80045c0:	4618      	mov	r0, r3
 80045c2:	f006 f8c5 	bl	800a750 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3708      	adds	r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	4608      	mov	r0, r1
 80045e2:	4611      	mov	r1, r2
 80045e4:	461a      	mov	r2, r3
 80045e6:	4603      	mov	r3, r0
 80045e8:	70fb      	strb	r3, [r7, #3]
 80045ea:	460b      	mov	r3, r1
 80045ec:	803b      	strh	r3, [r7, #0]
 80045ee:	4613      	mov	r3, r2
 80045f0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80045f2:	2300      	movs	r3, #0
 80045f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	da0f      	bge.n	800461e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045fe:	78fb      	ldrb	r3, [r7, #3]
 8004600:	f003 020f 	and.w	r2, r3, #15
 8004604:	4613      	mov	r3, r2
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	4413      	add	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	3310      	adds	r3, #16
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	4413      	add	r3, r2
 8004612:	3304      	adds	r3, #4
 8004614:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2201      	movs	r2, #1
 800461a:	705a      	strb	r2, [r3, #1]
 800461c:	e00f      	b.n	800463e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800461e:	78fb      	ldrb	r3, [r7, #3]
 8004620:	f003 020f 	and.w	r2, r3, #15
 8004624:	4613      	mov	r3, r2
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	4413      	add	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	4413      	add	r3, r2
 8004634:	3304      	adds	r3, #4
 8004636:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800463e:	78fb      	ldrb	r3, [r7, #3]
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	b2da      	uxtb	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800464a:	883b      	ldrh	r3, [r7, #0]
 800464c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	78ba      	ldrb	r2, [r7, #2]
 8004658:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	785b      	ldrb	r3, [r3, #1]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d004      	beq.n	800466c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	461a      	mov	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800466c:	78bb      	ldrb	r3, [r7, #2]
 800466e:	2b02      	cmp	r3, #2
 8004670:	d102      	bne.n	8004678 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800467e:	2b01      	cmp	r3, #1
 8004680:	d101      	bne.n	8004686 <HAL_PCD_EP_Open+0xae>
 8004682:	2302      	movs	r3, #2
 8004684:	e00e      	b.n	80046a4 <HAL_PCD_EP_Open+0xcc>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68f9      	ldr	r1, [r7, #12]
 8004694:	4618      	mov	r0, r3
 8004696:	f005 fa45 	bl	8009b24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80046a2:	7afb      	ldrb	r3, [r7, #11]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	460b      	mov	r3, r1
 80046b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	da0f      	bge.n	80046e0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046c0:	78fb      	ldrb	r3, [r7, #3]
 80046c2:	f003 020f 	and.w	r2, r3, #15
 80046c6:	4613      	mov	r3, r2
 80046c8:	00db      	lsls	r3, r3, #3
 80046ca:	4413      	add	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	3310      	adds	r3, #16
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	4413      	add	r3, r2
 80046d4:	3304      	adds	r3, #4
 80046d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2201      	movs	r2, #1
 80046dc:	705a      	strb	r2, [r3, #1]
 80046de:	e00f      	b.n	8004700 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046e0:	78fb      	ldrb	r3, [r7, #3]
 80046e2:	f003 020f 	and.w	r2, r3, #15
 80046e6:	4613      	mov	r3, r2
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	4413      	add	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	4413      	add	r3, r2
 80046f6:	3304      	adds	r3, #4
 80046f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	b2da      	uxtb	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004712:	2b01      	cmp	r3, #1
 8004714:	d101      	bne.n	800471a <HAL_PCD_EP_Close+0x6e>
 8004716:	2302      	movs	r3, #2
 8004718:	e00e      	b.n	8004738 <HAL_PCD_EP_Close+0x8c>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68f9      	ldr	r1, [r7, #12]
 8004728:	4618      	mov	r0, r3
 800472a:	f005 fa83 	bl	8009c34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	607a      	str	r2, [r7, #4]
 800474a:	603b      	str	r3, [r7, #0]
 800474c:	460b      	mov	r3, r1
 800474e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004750:	7afb      	ldrb	r3, [r7, #11]
 8004752:	f003 020f 	and.w	r2, r3, #15
 8004756:	4613      	mov	r3, r2
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	4413      	add	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	4413      	add	r3, r2
 8004766:	3304      	adds	r3, #4
 8004768:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2200      	movs	r2, #0
 800477a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	2200      	movs	r2, #0
 8004780:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004782:	7afb      	ldrb	r3, [r7, #11]
 8004784:	f003 030f 	and.w	r3, r3, #15
 8004788:	b2da      	uxtb	r2, r3
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	799b      	ldrb	r3, [r3, #6]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d102      	bne.n	800479c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6818      	ldr	r0, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	799b      	ldrb	r3, [r3, #6]
 80047a4:	461a      	mov	r2, r3
 80047a6:	6979      	ldr	r1, [r7, #20]
 80047a8:	f005 fb20 	bl	8009dec <USB_EPStartXfer>

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3718      	adds	r7, #24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
 80047be:	460b      	mov	r3, r1
 80047c0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80047c2:	78fb      	ldrb	r3, [r7, #3]
 80047c4:	f003 020f 	and.w	r2, r3, #15
 80047c8:	6879      	ldr	r1, [r7, #4]
 80047ca:	4613      	mov	r3, r2
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	4413      	add	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	440b      	add	r3, r1
 80047d4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80047d8:	681b      	ldr	r3, [r3, #0]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b086      	sub	sp, #24
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	60f8      	str	r0, [r7, #12]
 80047ee:	607a      	str	r2, [r7, #4]
 80047f0:	603b      	str	r3, [r7, #0]
 80047f2:	460b      	mov	r3, r1
 80047f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047f6:	7afb      	ldrb	r3, [r7, #11]
 80047f8:	f003 020f 	and.w	r2, r3, #15
 80047fc:	4613      	mov	r3, r2
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	4413      	add	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	3310      	adds	r3, #16
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	4413      	add	r3, r2
 800480a:	3304      	adds	r3, #4
 800480c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2200      	movs	r2, #0
 800481e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	2201      	movs	r2, #1
 8004824:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004826:	7afb      	ldrb	r3, [r7, #11]
 8004828:	f003 030f 	and.w	r3, r3, #15
 800482c:	b2da      	uxtb	r2, r3
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	799b      	ldrb	r3, [r3, #6]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d102      	bne.n	8004840 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6818      	ldr	r0, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	799b      	ldrb	r3, [r3, #6]
 8004848:	461a      	mov	r2, r3
 800484a:	6979      	ldr	r1, [r7, #20]
 800484c:	f005 face 	bl	8009dec <USB_EPStartXfer>

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b084      	sub	sp, #16
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
 8004862:	460b      	mov	r3, r1
 8004864:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004866:	78fb      	ldrb	r3, [r7, #3]
 8004868:	f003 030f 	and.w	r3, r3, #15
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	7912      	ldrb	r2, [r2, #4]
 8004870:	4293      	cmp	r3, r2
 8004872:	d901      	bls.n	8004878 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e04f      	b.n	8004918 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004878:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800487c:	2b00      	cmp	r3, #0
 800487e:	da0f      	bge.n	80048a0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	f003 020f 	and.w	r2, r3, #15
 8004886:	4613      	mov	r3, r2
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	4413      	add	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	3310      	adds	r3, #16
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	4413      	add	r3, r2
 8004894:	3304      	adds	r3, #4
 8004896:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2201      	movs	r2, #1
 800489c:	705a      	strb	r2, [r3, #1]
 800489e:	e00d      	b.n	80048bc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048a0:	78fa      	ldrb	r2, [r7, #3]
 80048a2:	4613      	mov	r3, r2
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	4413      	add	r3, r2
 80048b2:	3304      	adds	r3, #4
 80048b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2201      	movs	r2, #1
 80048c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048c2:	78fb      	ldrb	r3, [r7, #3]
 80048c4:	f003 030f 	and.w	r3, r3, #15
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_PCD_EP_SetStall+0x82>
 80048d8:	2302      	movs	r3, #2
 80048da:	e01d      	b.n	8004918 <HAL_PCD_EP_SetStall+0xbe>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68f9      	ldr	r1, [r7, #12]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f005 fe5c 	bl	800a5a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048f0:	78fb      	ldrb	r3, [r7, #3]
 80048f2:	f003 030f 	and.w	r3, r3, #15
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d109      	bne.n	800490e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6818      	ldr	r0, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	7999      	ldrb	r1, [r3, #6]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004908:	461a      	mov	r2, r3
 800490a:	f006 f84d 	bl	800a9a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	460b      	mov	r3, r1
 800492a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800492c:	78fb      	ldrb	r3, [r7, #3]
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	7912      	ldrb	r2, [r2, #4]
 8004936:	4293      	cmp	r3, r2
 8004938:	d901      	bls.n	800493e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e042      	b.n	80049c4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800493e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004942:	2b00      	cmp	r3, #0
 8004944:	da0f      	bge.n	8004966 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004946:	78fb      	ldrb	r3, [r7, #3]
 8004948:	f003 020f 	and.w	r2, r3, #15
 800494c:	4613      	mov	r3, r2
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	4413      	add	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	3310      	adds	r3, #16
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	4413      	add	r3, r2
 800495a:	3304      	adds	r3, #4
 800495c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2201      	movs	r2, #1
 8004962:	705a      	strb	r2, [r3, #1]
 8004964:	e00f      	b.n	8004986 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004966:	78fb      	ldrb	r3, [r7, #3]
 8004968:	f003 020f 	and.w	r2, r3, #15
 800496c:	4613      	mov	r3, r2
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	4413      	add	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	4413      	add	r3, r2
 800497c:	3304      	adds	r3, #4
 800497e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800498c:	78fb      	ldrb	r3, [r7, #3]
 800498e:	f003 030f 	and.w	r3, r3, #15
 8004992:	b2da      	uxtb	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d101      	bne.n	80049a6 <HAL_PCD_EP_ClrStall+0x86>
 80049a2:	2302      	movs	r3, #2
 80049a4:	e00e      	b.n	80049c4 <HAL_PCD_EP_ClrStall+0xa4>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68f9      	ldr	r1, [r7, #12]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f005 fe65 	bl	800a684 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	460b      	mov	r3, r1
 80049d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80049d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	da0c      	bge.n	80049fa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049e0:	78fb      	ldrb	r3, [r7, #3]
 80049e2:	f003 020f 	and.w	r2, r3, #15
 80049e6:	4613      	mov	r3, r2
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	4413      	add	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	3310      	adds	r3, #16
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	4413      	add	r3, r2
 80049f4:	3304      	adds	r3, #4
 80049f6:	60fb      	str	r3, [r7, #12]
 80049f8:	e00c      	b.n	8004a14 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049fa:	78fb      	ldrb	r3, [r7, #3]
 80049fc:	f003 020f 	and.w	r2, r3, #15
 8004a00:	4613      	mov	r3, r2
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	4413      	add	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	4413      	add	r3, r2
 8004a10:	3304      	adds	r3, #4
 8004a12:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68f9      	ldr	r1, [r7, #12]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f005 fc84 	bl	800a328 <USB_EPStopXfer>
 8004a20:	4603      	mov	r3, r0
 8004a22:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004a24:	7afb      	ldrb	r3, [r7, #11]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b08a      	sub	sp, #40	@ 0x28
 8004a32:	af02      	add	r7, sp, #8
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	4613      	mov	r3, r2
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	4413      	add	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	3310      	adds	r3, #16
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	4413      	add	r3, r2
 8004a52:	3304      	adds	r3, #4
 8004a54:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	695a      	ldr	r2, [r3, #20]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d901      	bls.n	8004a66 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e06b      	b.n	8004b3e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	691a      	ldr	r2, [r3, #16]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	69fa      	ldr	r2, [r7, #28]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d902      	bls.n	8004a82 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	3303      	adds	r3, #3
 8004a86:	089b      	lsrs	r3, r3, #2
 8004a88:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a8a:	e02a      	b.n	8004ae2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	691a      	ldr	r2, [r3, #16]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	69fa      	ldr	r2, [r7, #28]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d902      	bls.n	8004aa8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	3303      	adds	r3, #3
 8004aac:	089b      	lsrs	r3, r3, #2
 8004aae:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	68d9      	ldr	r1, [r3, #12]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	6978      	ldr	r0, [r7, #20]
 8004ac6:	f005 fcd9 	bl	800a47c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	441a      	add	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	695a      	ldr	r2, [r3, #20]
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	441a      	add	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	015a      	lsls	r2, r3, #5
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d809      	bhi.n	8004b0c <PCD_WriteEmptyTxFifo+0xde>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	695a      	ldr	r2, [r3, #20]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d203      	bcs.n	8004b0c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1bf      	bne.n	8004a8c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d811      	bhi.n	8004b3c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	2201      	movs	r2, #1
 8004b20:	fa02 f303 	lsl.w	r3, r2, r3
 8004b24:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	43db      	mvns	r3, r3
 8004b32:	6939      	ldr	r1, [r7, #16]
 8004b34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b38:	4013      	ands	r3, r2
 8004b3a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3720      	adds	r7, #32
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
	...

08004b48 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b088      	sub	sp, #32
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	333c      	adds	r3, #60	@ 0x3c
 8004b60:	3304      	adds	r3, #4
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	799b      	ldrb	r3, [r3, #6]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d17b      	bne.n	8004c76 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	f003 0308 	and.w	r3, r3, #8
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d015      	beq.n	8004bb4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	4a61      	ldr	r2, [pc, #388]	@ (8004d10 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	f240 80b9 	bls.w	8004d04 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 80b3 	beq.w	8004d04 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004baa:	461a      	mov	r2, r3
 8004bac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bb0:	6093      	str	r3, [r2, #8]
 8004bb2:	e0a7      	b.n	8004d04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	f003 0320 	and.w	r3, r3, #32
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d009      	beq.n	8004bd2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	015a      	lsls	r2, r3, #5
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bca:	461a      	mov	r2, r3
 8004bcc:	2320      	movs	r3, #32
 8004bce:	6093      	str	r3, [r2, #8]
 8004bd0:	e098      	b.n	8004d04 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f040 8093 	bne.w	8004d04 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	4a4b      	ldr	r2, [pc, #300]	@ (8004d10 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d90f      	bls.n	8004c06 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00a      	beq.n	8004c06 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c02:	6093      	str	r3, [r2, #8]
 8004c04:	e07e      	b.n	8004d04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	4413      	add	r3, r2
 8004c18:	3304      	adds	r3, #4
 8004c1a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6a1a      	ldr	r2, [r3, #32]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	0159      	lsls	r1, r3, #5
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	440b      	add	r3, r1
 8004c28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c32:	1ad2      	subs	r2, r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d114      	bne.n	8004c68 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d109      	bne.n	8004c5a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6818      	ldr	r0, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c50:	461a      	mov	r2, r3
 8004c52:	2101      	movs	r1, #1
 8004c54:	f005 fea8 	bl	800a9a8 <USB_EP0_OutStart>
 8004c58:	e006      	b.n	8004c68 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	441a      	add	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7fc fd4e 	bl	8001710 <HAL_PCD_DataOutStageCallback>
 8004c74:	e046      	b.n	8004d04 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	4a26      	ldr	r2, [pc, #152]	@ (8004d14 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d124      	bne.n	8004cc8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00a      	beq.n	8004c9e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c94:	461a      	mov	r2, r3
 8004c96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c9a:	6093      	str	r3, [r2, #8]
 8004c9c:	e032      	b.n	8004d04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	f003 0320 	and.w	r3, r3, #32
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d008      	beq.n	8004cba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	2320      	movs	r3, #32
 8004cb8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7fc fd25 	bl	8001710 <HAL_PCD_DataOutStageCallback>
 8004cc6:	e01d      	b.n	8004d04 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d114      	bne.n	8004cf8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	4413      	add	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	440b      	add	r3, r1
 8004cdc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d108      	bne.n	8004cf8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6818      	ldr	r0, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	f005 fe58 	bl	800a9a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fc fd06 	bl	8001710 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3720      	adds	r7, #32
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	4f54300a 	.word	0x4f54300a
 8004d14:	4f54310a 	.word	0x4f54310a

08004d18 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	333c      	adds	r3, #60	@ 0x3c
 8004d30:	3304      	adds	r3, #4
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	4a15      	ldr	r2, [pc, #84]	@ (8004da0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d90e      	bls.n	8004d6c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d009      	beq.n	8004d6c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d64:	461a      	mov	r2, r3
 8004d66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d6a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7fc fcbd 	bl	80016ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	4a0a      	ldr	r2, [pc, #40]	@ (8004da0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d90c      	bls.n	8004d94 <PCD_EP_OutSetupPacket_int+0x7c>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	799b      	ldrb	r3, [r3, #6]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d108      	bne.n	8004d94 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6818      	ldr	r0, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	2101      	movs	r1, #1
 8004d90:	f005 fe0a 	bl	800a9a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	4f54300a 	.word	0x4f54300a

08004da4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	70fb      	strb	r3, [r7, #3]
 8004db0:	4613      	mov	r3, r2
 8004db2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004dbc:	78fb      	ldrb	r3, [r7, #3]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d107      	bne.n	8004dd2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004dc2:	883b      	ldrh	r3, [r7, #0]
 8004dc4:	0419      	lsls	r1, r3, #16
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	629a      	str	r2, [r3, #40]	@ 0x28
 8004dd0:	e028      	b.n	8004e24 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd8:	0c1b      	lsrs	r3, r3, #16
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	4413      	add	r3, r2
 8004dde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004de0:	2300      	movs	r3, #0
 8004de2:	73fb      	strb	r3, [r7, #15]
 8004de4:	e00d      	b.n	8004e02 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	7bfb      	ldrb	r3, [r7, #15]
 8004dec:	3340      	adds	r3, #64	@ 0x40
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4413      	add	r3, r2
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	0c1b      	lsrs	r3, r3, #16
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	4413      	add	r3, r2
 8004dfa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	73fb      	strb	r3, [r7, #15]
 8004e02:	7bfa      	ldrb	r2, [r7, #15]
 8004e04:	78fb      	ldrb	r3, [r7, #3]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d3ec      	bcc.n	8004de6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004e0c:	883b      	ldrh	r3, [r7, #0]
 8004e0e:	0418      	lsls	r0, r3, #16
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6819      	ldr	r1, [r3, #0]
 8004e14:	78fb      	ldrb	r3, [r7, #3]
 8004e16:	3b01      	subs	r3, #1
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	4302      	orrs	r2, r0
 8004e1c:	3340      	adds	r3, #64	@ 0x40
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	440b      	add	r3, r1
 8004e22:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	887a      	ldrh	r2, [r7, #2]
 8004e44:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8004e70:	4b06      	ldr	r3, [pc, #24]	@ (8004e8c <HAL_PWR_PVD_IRQHandler+0x20>)
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d005      	beq.n	8004e88 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004e7c:	f000 f808 	bl	8004e90 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004e80:	4b02      	ldr	r3, [pc, #8]	@ (8004e8c <HAL_PWR_PVD_IRQHandler+0x20>)
 8004e82:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004e86:	615a      	str	r2, [r3, #20]
  }
}
 8004e88:	bf00      	nop
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40013c00 	.word	0x40013c00

08004e90 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8004e94:	bf00      	nop
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
	...

08004ea0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e318      	b.n	80054e4 <HAL_RCC_OscConfig+0x644>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b0f      	cmp	r3, #15
 8004eb8:	d903      	bls.n	8004ec2 <HAL_RCC_OscConfig+0x22>
 8004eba:	21e6      	movs	r1, #230	@ 0xe6
 8004ebc:	4897      	ldr	r0, [pc, #604]	@ (800511c <HAL_RCC_OscConfig+0x27c>)
 8004ebe:	f7fb ff0b 	bl	8000cd8 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f000 8088 	beq.w	8004fe0 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00d      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x54>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ee0:	d008      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x54>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004eea:	d003      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x54>
 8004eec:	21eb      	movs	r1, #235	@ 0xeb
 8004eee:	488b      	ldr	r0, [pc, #556]	@ (800511c <HAL_RCC_OscConfig+0x27c>)
 8004ef0:	f7fb fef2 	bl	8000cd8 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004ef4:	4b8a      	ldr	r3, [pc, #552]	@ (8005120 <HAL_RCC_OscConfig+0x280>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f003 030c 	and.w	r3, r3, #12
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d00c      	beq.n	8004f1a <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f00:	4b87      	ldr	r3, [pc, #540]	@ (8005120 <HAL_RCC_OscConfig+0x280>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	d112      	bne.n	8004f32 <HAL_RCC_OscConfig+0x92>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f0c:	4b84      	ldr	r3, [pc, #528]	@ (8005120 <HAL_RCC_OscConfig+0x280>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f18:	d10b      	bne.n	8004f32 <HAL_RCC_OscConfig+0x92>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f1a:	4b81      	ldr	r3, [pc, #516]	@ (8005120 <HAL_RCC_OscConfig+0x280>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d05b      	beq.n	8004fde <HAL_RCC_OscConfig+0x13e>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d157      	bne.n	8004fde <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e2d8      	b.n	80054e4 <HAL_RCC_OscConfig+0x644>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f3a:	d106      	bne.n	8004f4a <HAL_RCC_OscConfig+0xaa>
 8004f3c:	4b78      	ldr	r3, [pc, #480]	@ (8005120 <HAL_RCC_OscConfig+0x280>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a77      	ldr	r2, [pc, #476]	@ (8005120 <HAL_RCC_OscConfig+0x280>)
 8004f42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f46:	6013      	str	r3, [r2, #0]
 8004f48:	e01d      	b.n	8004f86 <HAL_RCC_OscConfig+0xe6>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f52:	d10c      	bne.n	8004f6e <HAL_RCC_OscConfig+0xce>
 8004f54:	4b72      	ldr	r3, [pc, #456]	@ (8005120 <HAL_RCC_OscConfig+0x280>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a71      	ldr	r2, [pc, #452]	@ (8005120 <HAL_RCC_OscConfig+0x280>)
 8004f5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f5e:	6013      	str	r3, [r2, #0]
 8004f60:	4b6f      	ldr	r3, [pc, #444]	@ (8005120 <HAL_RCC_OscConfig+0x280>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a6e      	ldr	r2, [pc, #440]	@ (8005120 <HAL_RCC_OscConfig+0x280>)
 8004f66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	e00b      	b.n	8004f86 <HAL_RCC_OscConfig+0xe6>
 8004f6e:	4b6c      	ldr	r3, [pc, #432]	@ (8005120 <HAL_RCC_OscConfig+0x280>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a6b      	ldr	r2, [pc, #428]	@ (8005120 <HAL_RCC_OscConfig+0x280>)
 8004f74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f78:	6013      	str	r3, [r2, #0]
 8004f7a:	4b69      	ldr	r3, [pc, #420]	@ (8005120 <HAL_RCC_OscConfig+0x280>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a68      	ldr	r2, [pc, #416]	@ (8005120 <HAL_RCC_OscConfig+0x280>)
 8004f80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f84:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d013      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f8e:	f7fc fee5 	bl	8001d5c <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f94:	e008      	b.n	8004fa8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f96:	f7fc fee1 	bl	8001d5c <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b64      	cmp	r3, #100	@ 0x64
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e29d      	b.n	80054e4 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fa8:	4b5d      	ldr	r3, [pc, #372]	@ (8005120 <HAL_RCC_OscConfig+0x280>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0f0      	beq.n	8004f96 <HAL_RCC_OscConfig+0xf6>
 8004fb4:	e014      	b.n	8004fe0 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb6:	f7fc fed1 	bl	8001d5c <HAL_GetTick>
 8004fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fbe:	f7fc fecd 	bl	8001d5c <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b64      	cmp	r3, #100	@ 0x64
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e289      	b.n	80054e4 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fd0:	4b53      	ldr	r3, [pc, #332]	@ (8005120 <HAL_RCC_OscConfig+0x280>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1f0      	bne.n	8004fbe <HAL_RCC_OscConfig+0x11e>
 8004fdc:	e000      	b.n	8004fe0 <HAL_RCC_OscConfig+0x140>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fde:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d079      	beq.n	80050e0 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d008      	beq.n	8005006 <HAL_RCC_OscConfig+0x166>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d004      	beq.n	8005006 <HAL_RCC_OscConfig+0x166>
 8004ffc:	f240 111d 	movw	r1, #285	@ 0x11d
 8005000:	4846      	ldr	r0, [pc, #280]	@ (800511c <HAL_RCC_OscConfig+0x27c>)
 8005002:	f7fb fe69 	bl	8000cd8 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	2b1f      	cmp	r3, #31
 800500c:	d904      	bls.n	8005018 <HAL_RCC_OscConfig+0x178>
 800500e:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8005012:	4842      	ldr	r0, [pc, #264]	@ (800511c <HAL_RCC_OscConfig+0x27c>)
 8005014:	f7fb fe60 	bl	8000cd8 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005018:	4b41      	ldr	r3, [pc, #260]	@ (8005120 <HAL_RCC_OscConfig+0x280>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f003 030c 	and.w	r3, r3, #12
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00b      	beq.n	800503c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005024:	4b3e      	ldr	r3, [pc, #248]	@ (8005120 <HAL_RCC_OscConfig+0x280>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800502c:	2b08      	cmp	r3, #8
 800502e:	d11c      	bne.n	800506a <HAL_RCC_OscConfig+0x1ca>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005030:	4b3b      	ldr	r3, [pc, #236]	@ (8005120 <HAL_RCC_OscConfig+0x280>)
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d116      	bne.n	800506a <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800503c:	4b38      	ldr	r3, [pc, #224]	@ (8005120 <HAL_RCC_OscConfig+0x280>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d005      	beq.n	8005054 <HAL_RCC_OscConfig+0x1b4>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d001      	beq.n	8005054 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e247      	b.n	80054e4 <HAL_RCC_OscConfig+0x644>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005054:	4b32      	ldr	r3, [pc, #200]	@ (8005120 <HAL_RCC_OscConfig+0x280>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	492f      	ldr	r1, [pc, #188]	@ (8005120 <HAL_RCC_OscConfig+0x280>)
 8005064:	4313      	orrs	r3, r2
 8005066:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005068:	e03a      	b.n	80050e0 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d020      	beq.n	80050b4 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005072:	4b2c      	ldr	r3, [pc, #176]	@ (8005124 <HAL_RCC_OscConfig+0x284>)
 8005074:	2201      	movs	r2, #1
 8005076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005078:	f7fc fe70 	bl	8001d5c <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800507e:	e008      	b.n	8005092 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005080:	f7fc fe6c 	bl	8001d5c <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e228      	b.n	80054e4 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005092:	4b23      	ldr	r3, [pc, #140]	@ (8005120 <HAL_RCC_OscConfig+0x280>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0f0      	beq.n	8005080 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800509e:	4b20      	ldr	r3, [pc, #128]	@ (8005120 <HAL_RCC_OscConfig+0x280>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	491c      	ldr	r1, [pc, #112]	@ (8005120 <HAL_RCC_OscConfig+0x280>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	600b      	str	r3, [r1, #0]
 80050b2:	e015      	b.n	80050e0 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005124 <HAL_RCC_OscConfig+0x284>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ba:	f7fc fe4f 	bl	8001d5c <HAL_GetTick>
 80050be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050c0:	e008      	b.n	80050d4 <HAL_RCC_OscConfig+0x234>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050c2:	f7fc fe4b 	bl	8001d5c <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e207      	b.n	80054e4 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050d4:	4b12      	ldr	r3, [pc, #72]	@ (8005120 <HAL_RCC_OscConfig+0x280>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1f0      	bne.n	80050c2 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0308 	and.w	r3, r3, #8
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d045      	beq.n	8005178 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d008      	beq.n	8005106 <HAL_RCC_OscConfig+0x266>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d004      	beq.n	8005106 <HAL_RCC_OscConfig+0x266>
 80050fc:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8005100:	4806      	ldr	r0, [pc, #24]	@ (800511c <HAL_RCC_OscConfig+0x27c>)
 8005102:	f7fb fde9 	bl	8000cd8 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d01e      	beq.n	800514c <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800510e:	4b06      	ldr	r3, [pc, #24]	@ (8005128 <HAL_RCC_OscConfig+0x288>)
 8005110:	2201      	movs	r2, #1
 8005112:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005114:	f7fc fe22 	bl	8001d5c <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800511a:	e010      	b.n	800513e <HAL_RCC_OscConfig+0x29e>
 800511c:	0800d6c8 	.word	0x0800d6c8
 8005120:	40023800 	.word	0x40023800
 8005124:	42470000 	.word	0x42470000
 8005128:	42470e80 	.word	0x42470e80
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800512c:	f7fc fe16 	bl	8001d5c <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b02      	cmp	r3, #2
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e1d2      	b.n	80054e4 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800513e:	4b5e      	ldr	r3, [pc, #376]	@ (80052b8 <HAL_RCC_OscConfig+0x418>)
 8005140:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0f0      	beq.n	800512c <HAL_RCC_OscConfig+0x28c>
 800514a:	e015      	b.n	8005178 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800514c:	4b5b      	ldr	r3, [pc, #364]	@ (80052bc <HAL_RCC_OscConfig+0x41c>)
 800514e:	2200      	movs	r2, #0
 8005150:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005152:	f7fc fe03 	bl	8001d5c <HAL_GetTick>
 8005156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005158:	e008      	b.n	800516c <HAL_RCC_OscConfig+0x2cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800515a:	f7fc fdff 	bl	8001d5c <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e1bb      	b.n	80054e4 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800516c:	4b52      	ldr	r3, [pc, #328]	@ (80052b8 <HAL_RCC_OscConfig+0x418>)
 800516e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1f0      	bne.n	800515a <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0304 	and.w	r3, r3, #4
 8005180:	2b00      	cmp	r3, #0
 8005182:	f000 80b0 	beq.w	80052e6 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005186:	2300      	movs	r3, #0
 8005188:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00c      	beq.n	80051ac <HAL_RCC_OscConfig+0x30c>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	2b01      	cmp	r3, #1
 8005198:	d008      	beq.n	80051ac <HAL_RCC_OscConfig+0x30c>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	2b05      	cmp	r3, #5
 80051a0:	d004      	beq.n	80051ac <HAL_RCC_OscConfig+0x30c>
 80051a2:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 80051a6:	4846      	ldr	r0, [pc, #280]	@ (80052c0 <HAL_RCC_OscConfig+0x420>)
 80051a8:	f7fb fd96 	bl	8000cd8 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ac:	4b42      	ldr	r3, [pc, #264]	@ (80052b8 <HAL_RCC_OscConfig+0x418>)
 80051ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10f      	bne.n	80051d8 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051b8:	2300      	movs	r3, #0
 80051ba:	60bb      	str	r3, [r7, #8]
 80051bc:	4b3e      	ldr	r3, [pc, #248]	@ (80052b8 <HAL_RCC_OscConfig+0x418>)
 80051be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c0:	4a3d      	ldr	r2, [pc, #244]	@ (80052b8 <HAL_RCC_OscConfig+0x418>)
 80051c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80051c8:	4b3b      	ldr	r3, [pc, #236]	@ (80052b8 <HAL_RCC_OscConfig+0x418>)
 80051ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051d0:	60bb      	str	r3, [r7, #8]
 80051d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051d4:	2301      	movs	r3, #1
 80051d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d8:	4b3a      	ldr	r3, [pc, #232]	@ (80052c4 <HAL_RCC_OscConfig+0x424>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d118      	bne.n	8005216 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051e4:	4b37      	ldr	r3, [pc, #220]	@ (80052c4 <HAL_RCC_OscConfig+0x424>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a36      	ldr	r2, [pc, #216]	@ (80052c4 <HAL_RCC_OscConfig+0x424>)
 80051ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051f0:	f7fc fdb4 	bl	8001d5c <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x36a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051f8:	f7fc fdb0 	bl	8001d5c <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e16c      	b.n	80054e4 <HAL_RCC_OscConfig+0x644>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800520a:	4b2e      	ldr	r3, [pc, #184]	@ (80052c4 <HAL_RCC_OscConfig+0x424>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0f0      	beq.n	80051f8 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d106      	bne.n	800522c <HAL_RCC_OscConfig+0x38c>
 800521e:	4b26      	ldr	r3, [pc, #152]	@ (80052b8 <HAL_RCC_OscConfig+0x418>)
 8005220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005222:	4a25      	ldr	r2, [pc, #148]	@ (80052b8 <HAL_RCC_OscConfig+0x418>)
 8005224:	f043 0301 	orr.w	r3, r3, #1
 8005228:	6713      	str	r3, [r2, #112]	@ 0x70
 800522a:	e01c      	b.n	8005266 <HAL_RCC_OscConfig+0x3c6>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	2b05      	cmp	r3, #5
 8005232:	d10c      	bne.n	800524e <HAL_RCC_OscConfig+0x3ae>
 8005234:	4b20      	ldr	r3, [pc, #128]	@ (80052b8 <HAL_RCC_OscConfig+0x418>)
 8005236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005238:	4a1f      	ldr	r2, [pc, #124]	@ (80052b8 <HAL_RCC_OscConfig+0x418>)
 800523a:	f043 0304 	orr.w	r3, r3, #4
 800523e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005240:	4b1d      	ldr	r3, [pc, #116]	@ (80052b8 <HAL_RCC_OscConfig+0x418>)
 8005242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005244:	4a1c      	ldr	r2, [pc, #112]	@ (80052b8 <HAL_RCC_OscConfig+0x418>)
 8005246:	f043 0301 	orr.w	r3, r3, #1
 800524a:	6713      	str	r3, [r2, #112]	@ 0x70
 800524c:	e00b      	b.n	8005266 <HAL_RCC_OscConfig+0x3c6>
 800524e:	4b1a      	ldr	r3, [pc, #104]	@ (80052b8 <HAL_RCC_OscConfig+0x418>)
 8005250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005252:	4a19      	ldr	r2, [pc, #100]	@ (80052b8 <HAL_RCC_OscConfig+0x418>)
 8005254:	f023 0301 	bic.w	r3, r3, #1
 8005258:	6713      	str	r3, [r2, #112]	@ 0x70
 800525a:	4b17      	ldr	r3, [pc, #92]	@ (80052b8 <HAL_RCC_OscConfig+0x418>)
 800525c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800525e:	4a16      	ldr	r2, [pc, #88]	@ (80052b8 <HAL_RCC_OscConfig+0x418>)
 8005260:	f023 0304 	bic.w	r3, r3, #4
 8005264:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d015      	beq.n	800529a <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800526e:	f7fc fd75 	bl	8001d5c <HAL_GetTick>
 8005272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005274:	e00a      	b.n	800528c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005276:	f7fc fd71 	bl	8001d5c <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005284:	4293      	cmp	r3, r2
 8005286:	d901      	bls.n	800528c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e12b      	b.n	80054e4 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800528c:	4b0a      	ldr	r3, [pc, #40]	@ (80052b8 <HAL_RCC_OscConfig+0x418>)
 800528e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0ee      	beq.n	8005276 <HAL_RCC_OscConfig+0x3d6>
 8005298:	e01c      	b.n	80052d4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800529a:	f7fc fd5f 	bl	8001d5c <HAL_GetTick>
 800529e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052a0:	e012      	b.n	80052c8 <HAL_RCC_OscConfig+0x428>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052a2:	f7fc fd5b 	bl	8001d5c <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d909      	bls.n	80052c8 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e115      	b.n	80054e4 <HAL_RCC_OscConfig+0x644>
 80052b8:	40023800 	.word	0x40023800
 80052bc:	42470e80 	.word	0x42470e80
 80052c0:	0800d6c8 	.word	0x0800d6c8
 80052c4:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052c8:	4b88      	ldr	r3, [pc, #544]	@ (80054ec <HAL_RCC_OscConfig+0x64c>)
 80052ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e6      	bne.n	80052a2 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052d4:	7dfb      	ldrb	r3, [r7, #23]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d105      	bne.n	80052e6 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052da:	4b84      	ldr	r3, [pc, #528]	@ (80054ec <HAL_RCC_OscConfig+0x64c>)
 80052dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052de:	4a83      	ldr	r2, [pc, #524]	@ (80054ec <HAL_RCC_OscConfig+0x64c>)
 80052e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052e4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00c      	beq.n	8005308 <HAL_RCC_OscConfig+0x468>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d008      	beq.n	8005308 <HAL_RCC_OscConfig+0x468>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d004      	beq.n	8005308 <HAL_RCC_OscConfig+0x468>
 80052fe:	f240 11cd 	movw	r1, #461	@ 0x1cd
 8005302:	487b      	ldr	r0, [pc, #492]	@ (80054f0 <HAL_RCC_OscConfig+0x650>)
 8005304:	f7fb fce8 	bl	8000cd8 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 80e8 	beq.w	80054e2 <HAL_RCC_OscConfig+0x642>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005312:	4b76      	ldr	r3, [pc, #472]	@ (80054ec <HAL_RCC_OscConfig+0x64c>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f003 030c 	and.w	r3, r3, #12
 800531a:	2b08      	cmp	r3, #8
 800531c:	f000 80a9 	beq.w	8005472 <HAL_RCC_OscConfig+0x5d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	2b02      	cmp	r3, #2
 8005326:	f040 808d 	bne.w	8005444 <HAL_RCC_OscConfig+0x5a4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d009      	beq.n	8005346 <HAL_RCC_OscConfig+0x4a6>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800533a:	d004      	beq.n	8005346 <HAL_RCC_OscConfig+0x4a6>
 800533c:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
 8005340:	486b      	ldr	r0, [pc, #428]	@ (80054f0 <HAL_RCC_OscConfig+0x650>)
 8005342:	f7fb fcc9 	bl	8000cd8 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d903      	bls.n	8005356 <HAL_RCC_OscConfig+0x4b6>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	2b3f      	cmp	r3, #63	@ 0x3f
 8005354:	d904      	bls.n	8005360 <HAL_RCC_OscConfig+0x4c0>
 8005356:	f240 11d7 	movw	r1, #471	@ 0x1d7
 800535a:	4865      	ldr	r0, [pc, #404]	@ (80054f0 <HAL_RCC_OscConfig+0x650>)
 800535c:	f7fb fcbc 	bl	8000cd8 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005364:	2b31      	cmp	r3, #49	@ 0x31
 8005366:	d904      	bls.n	8005372 <HAL_RCC_OscConfig+0x4d2>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536c:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8005370:	d904      	bls.n	800537c <HAL_RCC_OscConfig+0x4dc>
 8005372:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 8005376:	485e      	ldr	r0, [pc, #376]	@ (80054f0 <HAL_RCC_OscConfig+0x650>)
 8005378:	f7fb fcae 	bl	8000cd8 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005380:	2b02      	cmp	r3, #2
 8005382:	d010      	beq.n	80053a6 <HAL_RCC_OscConfig+0x506>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005388:	2b04      	cmp	r3, #4
 800538a:	d00c      	beq.n	80053a6 <HAL_RCC_OscConfig+0x506>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005390:	2b06      	cmp	r3, #6
 8005392:	d008      	beq.n	80053a6 <HAL_RCC_OscConfig+0x506>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005398:	2b08      	cmp	r3, #8
 800539a:	d004      	beq.n	80053a6 <HAL_RCC_OscConfig+0x506>
 800539c:	f240 11d9 	movw	r1, #473	@ 0x1d9
 80053a0:	4853      	ldr	r0, [pc, #332]	@ (80054f0 <HAL_RCC_OscConfig+0x650>)
 80053a2:	f7fb fc99 	bl	8000cd8 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d903      	bls.n	80053b6 <HAL_RCC_OscConfig+0x516>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b2:	2b0f      	cmp	r3, #15
 80053b4:	d904      	bls.n	80053c0 <HAL_RCC_OscConfig+0x520>
 80053b6:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 80053ba:	484d      	ldr	r0, [pc, #308]	@ (80054f0 <HAL_RCC_OscConfig+0x650>)
 80053bc:	f7fb fc8c 	bl	8000cd8 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053c0:	4b4c      	ldr	r3, [pc, #304]	@ (80054f4 <HAL_RCC_OscConfig+0x654>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c6:	f7fc fcc9 	bl	8001d5c <HAL_GetTick>
 80053ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053cc:	e008      	b.n	80053e0 <HAL_RCC_OscConfig+0x540>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ce:	f7fc fcc5 	bl	8001d5c <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d901      	bls.n	80053e0 <HAL_RCC_OscConfig+0x540>
          {
            return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e081      	b.n	80054e4 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053e0:	4b42      	ldr	r3, [pc, #264]	@ (80054ec <HAL_RCC_OscConfig+0x64c>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1f0      	bne.n	80053ce <HAL_RCC_OscConfig+0x52e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	69da      	ldr	r2, [r3, #28]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	431a      	orrs	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fa:	019b      	lsls	r3, r3, #6
 80053fc:	431a      	orrs	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005402:	085b      	lsrs	r3, r3, #1
 8005404:	3b01      	subs	r3, #1
 8005406:	041b      	lsls	r3, r3, #16
 8005408:	431a      	orrs	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540e:	061b      	lsls	r3, r3, #24
 8005410:	4936      	ldr	r1, [pc, #216]	@ (80054ec <HAL_RCC_OscConfig+0x64c>)
 8005412:	4313      	orrs	r3, r2
 8005414:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005416:	4b37      	ldr	r3, [pc, #220]	@ (80054f4 <HAL_RCC_OscConfig+0x654>)
 8005418:	2201      	movs	r2, #1
 800541a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800541c:	f7fc fc9e 	bl	8001d5c <HAL_GetTick>
 8005420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005422:	e008      	b.n	8005436 <HAL_RCC_OscConfig+0x596>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005424:	f7fc fc9a 	bl	8001d5c <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e056      	b.n	80054e4 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005436:	4b2d      	ldr	r3, [pc, #180]	@ (80054ec <HAL_RCC_OscConfig+0x64c>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d0f0      	beq.n	8005424 <HAL_RCC_OscConfig+0x584>
 8005442:	e04e      	b.n	80054e2 <HAL_RCC_OscConfig+0x642>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005444:	4b2b      	ldr	r3, [pc, #172]	@ (80054f4 <HAL_RCC_OscConfig+0x654>)
 8005446:	2200      	movs	r2, #0
 8005448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800544a:	f7fc fc87 	bl	8001d5c <HAL_GetTick>
 800544e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005450:	e008      	b.n	8005464 <HAL_RCC_OscConfig+0x5c4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005452:	f7fc fc83 	bl	8001d5c <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b02      	cmp	r3, #2
 800545e:	d901      	bls.n	8005464 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e03f      	b.n	80054e4 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005464:	4b21      	ldr	r3, [pc, #132]	@ (80054ec <HAL_RCC_OscConfig+0x64c>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1f0      	bne.n	8005452 <HAL_RCC_OscConfig+0x5b2>
 8005470:	e037      	b.n	80054e2 <HAL_RCC_OscConfig+0x642>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d101      	bne.n	800547e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e032      	b.n	80054e4 <HAL_RCC_OscConfig+0x644>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800547e:	4b1b      	ldr	r3, [pc, #108]	@ (80054ec <HAL_RCC_OscConfig+0x64c>)
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d028      	beq.n	80054de <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005496:	429a      	cmp	r2, r3
 8005498:	d121      	bne.n	80054de <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d11a      	bne.n	80054de <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80054ae:	4013      	ands	r3, r2
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054b4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d111      	bne.n	80054de <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c4:	085b      	lsrs	r3, r3, #1
 80054c6:	3b01      	subs	r3, #1
 80054c8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d107      	bne.n	80054de <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054da:	429a      	cmp	r2, r3
 80054dc:	d001      	beq.n	80054e2 <HAL_RCC_OscConfig+0x642>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e000      	b.n	80054e4 <HAL_RCC_OscConfig+0x644>
        }
      }
    }
  }
  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3718      	adds	r7, #24
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40023800 	.word	0x40023800
 80054f0:	0800d6c8 	.word	0x0800d6c8
 80054f4:	42470060 	.word	0x42470060

080054f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d101      	bne.n	800550c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e174      	b.n	80057f6 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d003      	beq.n	800551c <HAL_RCC_ClockConfig+0x24>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b0f      	cmp	r3, #15
 800551a:	d904      	bls.n	8005526 <HAL_RCC_ClockConfig+0x2e>
 800551c:	f240 215a 	movw	r1, #602	@ 0x25a
 8005520:	487b      	ldr	r0, [pc, #492]	@ (8005710 <HAL_RCC_ClockConfig+0x218>)
 8005522:	f7fb fbd9 	bl	8000cd8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d019      	beq.n	8005560 <HAL_RCC_ClockConfig+0x68>
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d016      	beq.n	8005560 <HAL_RCC_ClockConfig+0x68>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b02      	cmp	r3, #2
 8005536:	d013      	beq.n	8005560 <HAL_RCC_ClockConfig+0x68>
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	2b03      	cmp	r3, #3
 800553c:	d010      	beq.n	8005560 <HAL_RCC_ClockConfig+0x68>
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b04      	cmp	r3, #4
 8005542:	d00d      	beq.n	8005560 <HAL_RCC_ClockConfig+0x68>
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	2b05      	cmp	r3, #5
 8005548:	d00a      	beq.n	8005560 <HAL_RCC_ClockConfig+0x68>
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b06      	cmp	r3, #6
 800554e:	d007      	beq.n	8005560 <HAL_RCC_ClockConfig+0x68>
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	2b07      	cmp	r3, #7
 8005554:	d004      	beq.n	8005560 <HAL_RCC_ClockConfig+0x68>
 8005556:	f240 215b 	movw	r1, #603	@ 0x25b
 800555a:	486d      	ldr	r0, [pc, #436]	@ (8005710 <HAL_RCC_ClockConfig+0x218>)
 800555c:	f7fb fbbc 	bl	8000cd8 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005560:	4b6c      	ldr	r3, [pc, #432]	@ (8005714 <HAL_RCC_ClockConfig+0x21c>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0307 	and.w	r3, r3, #7
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	429a      	cmp	r2, r3
 800556c:	d90c      	bls.n	8005588 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800556e:	4b69      	ldr	r3, [pc, #420]	@ (8005714 <HAL_RCC_ClockConfig+0x21c>)
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	b2d2      	uxtb	r2, r2
 8005574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005576:	4b67      	ldr	r3, [pc, #412]	@ (8005714 <HAL_RCC_ClockConfig+0x21c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0307 	and.w	r3, r3, #7
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	429a      	cmp	r2, r3
 8005582:	d001      	beq.n	8005588 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e136      	b.n	80057f6 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d049      	beq.n	8005628 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b00      	cmp	r3, #0
 800559e:	d005      	beq.n	80055ac <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055a0:	4b5d      	ldr	r3, [pc, #372]	@ (8005718 <HAL_RCC_ClockConfig+0x220>)
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	4a5c      	ldr	r2, [pc, #368]	@ (8005718 <HAL_RCC_ClockConfig+0x220>)
 80055a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80055aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d005      	beq.n	80055c4 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055b8:	4b57      	ldr	r3, [pc, #348]	@ (8005718 <HAL_RCC_ClockConfig+0x220>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	4a56      	ldr	r2, [pc, #344]	@ (8005718 <HAL_RCC_ClockConfig+0x220>)
 80055be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80055c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d024      	beq.n	8005616 <HAL_RCC_ClockConfig+0x11e>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	2b80      	cmp	r3, #128	@ 0x80
 80055d2:	d020      	beq.n	8005616 <HAL_RCC_ClockConfig+0x11e>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	2b90      	cmp	r3, #144	@ 0x90
 80055da:	d01c      	beq.n	8005616 <HAL_RCC_ClockConfig+0x11e>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	2ba0      	cmp	r3, #160	@ 0xa0
 80055e2:	d018      	beq.n	8005616 <HAL_RCC_ClockConfig+0x11e>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	2bb0      	cmp	r3, #176	@ 0xb0
 80055ea:	d014      	beq.n	8005616 <HAL_RCC_ClockConfig+0x11e>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	2bc0      	cmp	r3, #192	@ 0xc0
 80055f2:	d010      	beq.n	8005616 <HAL_RCC_ClockConfig+0x11e>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	2bd0      	cmp	r3, #208	@ 0xd0
 80055fa:	d00c      	beq.n	8005616 <HAL_RCC_ClockConfig+0x11e>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	2be0      	cmp	r3, #224	@ 0xe0
 8005602:	d008      	beq.n	8005616 <HAL_RCC_ClockConfig+0x11e>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	2bf0      	cmp	r3, #240	@ 0xf0
 800560a:	d004      	beq.n	8005616 <HAL_RCC_ClockConfig+0x11e>
 800560c:	f240 217e 	movw	r1, #638	@ 0x27e
 8005610:	483f      	ldr	r0, [pc, #252]	@ (8005710 <HAL_RCC_ClockConfig+0x218>)
 8005612:	f7fb fb61 	bl	8000cd8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005616:	4b40      	ldr	r3, [pc, #256]	@ (8005718 <HAL_RCC_ClockConfig+0x220>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	493d      	ldr	r1, [pc, #244]	@ (8005718 <HAL_RCC_ClockConfig+0x220>)
 8005624:	4313      	orrs	r3, r2
 8005626:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	d059      	beq.n	80056e8 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d010      	beq.n	800565e <HAL_RCC_ClockConfig+0x166>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d00c      	beq.n	800565e <HAL_RCC_ClockConfig+0x166>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	2b02      	cmp	r3, #2
 800564a:	d008      	beq.n	800565e <HAL_RCC_ClockConfig+0x166>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	2b03      	cmp	r3, #3
 8005652:	d004      	beq.n	800565e <HAL_RCC_ClockConfig+0x166>
 8005654:	f240 2185 	movw	r1, #645	@ 0x285
 8005658:	482d      	ldr	r0, [pc, #180]	@ (8005710 <HAL_RCC_ClockConfig+0x218>)
 800565a:	f7fb fb3d 	bl	8000cd8 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d107      	bne.n	8005676 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005666:	4b2c      	ldr	r3, [pc, #176]	@ (8005718 <HAL_RCC_ClockConfig+0x220>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d119      	bne.n	80056a6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e0bf      	b.n	80057f6 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	2b02      	cmp	r3, #2
 800567c:	d003      	beq.n	8005686 <HAL_RCC_ClockConfig+0x18e>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005682:	2b03      	cmp	r3, #3
 8005684:	d107      	bne.n	8005696 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005686:	4b24      	ldr	r3, [pc, #144]	@ (8005718 <HAL_RCC_ClockConfig+0x220>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d109      	bne.n	80056a6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e0af      	b.n	80057f6 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005696:	4b20      	ldr	r3, [pc, #128]	@ (8005718 <HAL_RCC_ClockConfig+0x220>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e0a7      	b.n	80057f6 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056a6:	4b1c      	ldr	r3, [pc, #112]	@ (8005718 <HAL_RCC_ClockConfig+0x220>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f023 0203 	bic.w	r2, r3, #3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	4919      	ldr	r1, [pc, #100]	@ (8005718 <HAL_RCC_ClockConfig+0x220>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056b8:	f7fc fb50 	bl	8001d5c <HAL_GetTick>
 80056bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056be:	e00a      	b.n	80056d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056c0:	f7fc fb4c 	bl	8001d5c <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e08f      	b.n	80057f6 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056d6:	4b10      	ldr	r3, [pc, #64]	@ (8005718 <HAL_RCC_ClockConfig+0x220>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f003 020c 	and.w	r2, r3, #12
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d1eb      	bne.n	80056c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005714 <HAL_RCC_ClockConfig+0x21c>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0307 	and.w	r3, r3, #7
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d212      	bcs.n	800571c <HAL_RCC_ClockConfig+0x224>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056f6:	4b07      	ldr	r3, [pc, #28]	@ (8005714 <HAL_RCC_ClockConfig+0x21c>)
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056fe:	4b05      	ldr	r3, [pc, #20]	@ (8005714 <HAL_RCC_ClockConfig+0x21c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0307 	and.w	r3, r3, #7
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	429a      	cmp	r2, r3
 800570a:	d007      	beq.n	800571c <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e072      	b.n	80057f6 <HAL_RCC_ClockConfig+0x2fe>
 8005710:	0800d6c8 	.word	0x0800d6c8
 8005714:	40023c00 	.word	0x40023c00
 8005718:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0304 	and.w	r3, r3, #4
 8005724:	2b00      	cmp	r3, #0
 8005726:	d025      	beq.n	8005774 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d018      	beq.n	8005762 <HAL_RCC_ClockConfig+0x26a>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005738:	d013      	beq.n	8005762 <HAL_RCC_ClockConfig+0x26a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005742:	d00e      	beq.n	8005762 <HAL_RCC_ClockConfig+0x26a>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 800574c:	d009      	beq.n	8005762 <HAL_RCC_ClockConfig+0x26a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8005756:	d004      	beq.n	8005762 <HAL_RCC_ClockConfig+0x26a>
 8005758:	f240 21c3 	movw	r1, #707	@ 0x2c3
 800575c:	4828      	ldr	r0, [pc, #160]	@ (8005800 <HAL_RCC_ClockConfig+0x308>)
 800575e:	f7fb fabb 	bl	8000cd8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005762:	4b28      	ldr	r3, [pc, #160]	@ (8005804 <HAL_RCC_ClockConfig+0x30c>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	4925      	ldr	r1, [pc, #148]	@ (8005804 <HAL_RCC_ClockConfig+0x30c>)
 8005770:	4313      	orrs	r3, r2
 8005772:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0308 	and.w	r3, r3, #8
 800577c:	2b00      	cmp	r3, #0
 800577e:	d026      	beq.n	80057ce <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d018      	beq.n	80057ba <HAL_RCC_ClockConfig+0x2c2>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005790:	d013      	beq.n	80057ba <HAL_RCC_ClockConfig+0x2c2>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800579a:	d00e      	beq.n	80057ba <HAL_RCC_ClockConfig+0x2c2>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80057a4:	d009      	beq.n	80057ba <HAL_RCC_ClockConfig+0x2c2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 80057ae:	d004      	beq.n	80057ba <HAL_RCC_ClockConfig+0x2c2>
 80057b0:	f240 21ca 	movw	r1, #714	@ 0x2ca
 80057b4:	4812      	ldr	r0, [pc, #72]	@ (8005800 <HAL_RCC_ClockConfig+0x308>)
 80057b6:	f7fb fa8f 	bl	8000cd8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057ba:	4b12      	ldr	r3, [pc, #72]	@ (8005804 <HAL_RCC_ClockConfig+0x30c>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	490e      	ldr	r1, [pc, #56]	@ (8005804 <HAL_RCC_ClockConfig+0x30c>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80057ce:	f000 f821 	bl	8005814 <HAL_RCC_GetSysClockFreq>
 80057d2:	4602      	mov	r2, r0
 80057d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005804 <HAL_RCC_ClockConfig+0x30c>)
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	091b      	lsrs	r3, r3, #4
 80057da:	f003 030f 	and.w	r3, r3, #15
 80057de:	490a      	ldr	r1, [pc, #40]	@ (8005808 <HAL_RCC_ClockConfig+0x310>)
 80057e0:	5ccb      	ldrb	r3, [r1, r3]
 80057e2:	fa22 f303 	lsr.w	r3, r2, r3
 80057e6:	4a09      	ldr	r2, [pc, #36]	@ (800580c <HAL_RCC_ClockConfig+0x314>)
 80057e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80057ea:	4b09      	ldr	r3, [pc, #36]	@ (8005810 <HAL_RCC_ClockConfig+0x318>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fc fa70 	bl	8001cd4 <HAL_InitTick>

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	0800d6c8 	.word	0x0800d6c8
 8005804:	40023800 	.word	0x40023800
 8005808:	0800d924 	.word	0x0800d924
 800580c:	200000c4 	.word	0x200000c4
 8005810:	200000c8 	.word	0x200000c8

08005814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005818:	b094      	sub	sp, #80	@ 0x50
 800581a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005828:	2300      	movs	r3, #0
 800582a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800582c:	4b79      	ldr	r3, [pc, #484]	@ (8005a14 <HAL_RCC_GetSysClockFreq+0x200>)
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f003 030c 	and.w	r3, r3, #12
 8005834:	2b08      	cmp	r3, #8
 8005836:	d00d      	beq.n	8005854 <HAL_RCC_GetSysClockFreq+0x40>
 8005838:	2b08      	cmp	r3, #8
 800583a:	f200 80e1 	bhi.w	8005a00 <HAL_RCC_GetSysClockFreq+0x1ec>
 800583e:	2b00      	cmp	r3, #0
 8005840:	d002      	beq.n	8005848 <HAL_RCC_GetSysClockFreq+0x34>
 8005842:	2b04      	cmp	r3, #4
 8005844:	d003      	beq.n	800584e <HAL_RCC_GetSysClockFreq+0x3a>
 8005846:	e0db      	b.n	8005a00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005848:	4b73      	ldr	r3, [pc, #460]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0x204>)
 800584a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800584c:	e0db      	b.n	8005a06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800584e:	4b73      	ldr	r3, [pc, #460]	@ (8005a1c <HAL_RCC_GetSysClockFreq+0x208>)
 8005850:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005852:	e0d8      	b.n	8005a06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005854:	4b6f      	ldr	r3, [pc, #444]	@ (8005a14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800585c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800585e:	4b6d      	ldr	r3, [pc, #436]	@ (8005a14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d063      	beq.n	8005932 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800586a:	4b6a      	ldr	r3, [pc, #424]	@ (8005a14 <HAL_RCC_GetSysClockFreq+0x200>)
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	099b      	lsrs	r3, r3, #6
 8005870:	2200      	movs	r2, #0
 8005872:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005874:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800587c:	633b      	str	r3, [r7, #48]	@ 0x30
 800587e:	2300      	movs	r3, #0
 8005880:	637b      	str	r3, [r7, #52]	@ 0x34
 8005882:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005886:	4622      	mov	r2, r4
 8005888:	462b      	mov	r3, r5
 800588a:	f04f 0000 	mov.w	r0, #0
 800588e:	f04f 0100 	mov.w	r1, #0
 8005892:	0159      	lsls	r1, r3, #5
 8005894:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005898:	0150      	lsls	r0, r2, #5
 800589a:	4602      	mov	r2, r0
 800589c:	460b      	mov	r3, r1
 800589e:	4621      	mov	r1, r4
 80058a0:	1a51      	subs	r1, r2, r1
 80058a2:	6139      	str	r1, [r7, #16]
 80058a4:	4629      	mov	r1, r5
 80058a6:	eb63 0301 	sbc.w	r3, r3, r1
 80058aa:	617b      	str	r3, [r7, #20]
 80058ac:	f04f 0200 	mov.w	r2, #0
 80058b0:	f04f 0300 	mov.w	r3, #0
 80058b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058b8:	4659      	mov	r1, fp
 80058ba:	018b      	lsls	r3, r1, #6
 80058bc:	4651      	mov	r1, sl
 80058be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058c2:	4651      	mov	r1, sl
 80058c4:	018a      	lsls	r2, r1, #6
 80058c6:	4651      	mov	r1, sl
 80058c8:	ebb2 0801 	subs.w	r8, r2, r1
 80058cc:	4659      	mov	r1, fp
 80058ce:	eb63 0901 	sbc.w	r9, r3, r1
 80058d2:	f04f 0200 	mov.w	r2, #0
 80058d6:	f04f 0300 	mov.w	r3, #0
 80058da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058e6:	4690      	mov	r8, r2
 80058e8:	4699      	mov	r9, r3
 80058ea:	4623      	mov	r3, r4
 80058ec:	eb18 0303 	adds.w	r3, r8, r3
 80058f0:	60bb      	str	r3, [r7, #8]
 80058f2:	462b      	mov	r3, r5
 80058f4:	eb49 0303 	adc.w	r3, r9, r3
 80058f8:	60fb      	str	r3, [r7, #12]
 80058fa:	f04f 0200 	mov.w	r2, #0
 80058fe:	f04f 0300 	mov.w	r3, #0
 8005902:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005906:	4629      	mov	r1, r5
 8005908:	024b      	lsls	r3, r1, #9
 800590a:	4621      	mov	r1, r4
 800590c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005910:	4621      	mov	r1, r4
 8005912:	024a      	lsls	r2, r1, #9
 8005914:	4610      	mov	r0, r2
 8005916:	4619      	mov	r1, r3
 8005918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800591a:	2200      	movs	r2, #0
 800591c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800591e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005920:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005924:	f7fa fcac 	bl	8000280 <__aeabi_uldivmod>
 8005928:	4602      	mov	r2, r0
 800592a:	460b      	mov	r3, r1
 800592c:	4613      	mov	r3, r2
 800592e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005930:	e058      	b.n	80059e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005932:	4b38      	ldr	r3, [pc, #224]	@ (8005a14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	099b      	lsrs	r3, r3, #6
 8005938:	2200      	movs	r2, #0
 800593a:	4618      	mov	r0, r3
 800593c:	4611      	mov	r1, r2
 800593e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005942:	623b      	str	r3, [r7, #32]
 8005944:	2300      	movs	r3, #0
 8005946:	627b      	str	r3, [r7, #36]	@ 0x24
 8005948:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800594c:	4642      	mov	r2, r8
 800594e:	464b      	mov	r3, r9
 8005950:	f04f 0000 	mov.w	r0, #0
 8005954:	f04f 0100 	mov.w	r1, #0
 8005958:	0159      	lsls	r1, r3, #5
 800595a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800595e:	0150      	lsls	r0, r2, #5
 8005960:	4602      	mov	r2, r0
 8005962:	460b      	mov	r3, r1
 8005964:	4641      	mov	r1, r8
 8005966:	ebb2 0a01 	subs.w	sl, r2, r1
 800596a:	4649      	mov	r1, r9
 800596c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005970:	f04f 0200 	mov.w	r2, #0
 8005974:	f04f 0300 	mov.w	r3, #0
 8005978:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800597c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005980:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005984:	ebb2 040a 	subs.w	r4, r2, sl
 8005988:	eb63 050b 	sbc.w	r5, r3, fp
 800598c:	f04f 0200 	mov.w	r2, #0
 8005990:	f04f 0300 	mov.w	r3, #0
 8005994:	00eb      	lsls	r3, r5, #3
 8005996:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800599a:	00e2      	lsls	r2, r4, #3
 800599c:	4614      	mov	r4, r2
 800599e:	461d      	mov	r5, r3
 80059a0:	4643      	mov	r3, r8
 80059a2:	18e3      	adds	r3, r4, r3
 80059a4:	603b      	str	r3, [r7, #0]
 80059a6:	464b      	mov	r3, r9
 80059a8:	eb45 0303 	adc.w	r3, r5, r3
 80059ac:	607b      	str	r3, [r7, #4]
 80059ae:	f04f 0200 	mov.w	r2, #0
 80059b2:	f04f 0300 	mov.w	r3, #0
 80059b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059ba:	4629      	mov	r1, r5
 80059bc:	028b      	lsls	r3, r1, #10
 80059be:	4621      	mov	r1, r4
 80059c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059c4:	4621      	mov	r1, r4
 80059c6:	028a      	lsls	r2, r1, #10
 80059c8:	4610      	mov	r0, r2
 80059ca:	4619      	mov	r1, r3
 80059cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059ce:	2200      	movs	r2, #0
 80059d0:	61bb      	str	r3, [r7, #24]
 80059d2:	61fa      	str	r2, [r7, #28]
 80059d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059d8:	f7fa fc52 	bl	8000280 <__aeabi_uldivmod>
 80059dc:	4602      	mov	r2, r0
 80059de:	460b      	mov	r3, r1
 80059e0:	4613      	mov	r3, r2
 80059e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80059e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005a14 <HAL_RCC_GetSysClockFreq+0x200>)
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	0c1b      	lsrs	r3, r3, #16
 80059ea:	f003 0303 	and.w	r3, r3, #3
 80059ee:	3301      	adds	r3, #1
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80059f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80059f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80059fe:	e002      	b.n	8005a06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a00:	4b05      	ldr	r3, [pc, #20]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3750      	adds	r7, #80	@ 0x50
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a12:	bf00      	nop
 8005a14:	40023800 	.word	0x40023800
 8005a18:	00f42400 	.word	0x00f42400
 8005a1c:	007a1200 	.word	0x007a1200

08005a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a20:	b480      	push	{r7}
 8005a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a24:	4b03      	ldr	r3, [pc, #12]	@ (8005a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a26:	681b      	ldr	r3, [r3, #0]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	200000c4 	.word	0x200000c4

08005a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a3c:	f7ff fff0 	bl	8005a20 <HAL_RCC_GetHCLKFreq>
 8005a40:	4602      	mov	r2, r0
 8005a42:	4b05      	ldr	r3, [pc, #20]	@ (8005a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	0a9b      	lsrs	r3, r3, #10
 8005a48:	f003 0307 	and.w	r3, r3, #7
 8005a4c:	4903      	ldr	r1, [pc, #12]	@ (8005a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a4e:	5ccb      	ldrb	r3, [r1, r3]
 8005a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	40023800 	.word	0x40023800
 8005a5c:	0800d934 	.word	0x0800d934

08005a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005a64:	f7ff ffdc 	bl	8005a20 <HAL_RCC_GetHCLKFreq>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	4b05      	ldr	r3, [pc, #20]	@ (8005a80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	0b5b      	lsrs	r3, r3, #13
 8005a70:	f003 0307 	and.w	r3, r3, #7
 8005a74:	4903      	ldr	r1, [pc, #12]	@ (8005a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a76:	5ccb      	ldrb	r3, [r1, r3]
 8005a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	40023800 	.word	0x40023800
 8005a84:	0800d934 	.word	0x0800d934

08005a88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e17e      	b.n	8005d98 <HAL_SPI_Init+0x310>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a70      	ldr	r2, [pc, #448]	@ (8005c60 <HAL_SPI_Init+0x1d8>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d00e      	beq.n	8005ac2 <HAL_SPI_Init+0x3a>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a6e      	ldr	r2, [pc, #440]	@ (8005c64 <HAL_SPI_Init+0x1dc>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d009      	beq.n	8005ac2 <HAL_SPI_Init+0x3a>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a6d      	ldr	r2, [pc, #436]	@ (8005c68 <HAL_SPI_Init+0x1e0>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d004      	beq.n	8005ac2 <HAL_SPI_Init+0x3a>
 8005ab8:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8005abc:	486b      	ldr	r0, [pc, #428]	@ (8005c6c <HAL_SPI_Init+0x1e4>)
 8005abe:	f7fb f90b 	bl	8000cd8 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d009      	beq.n	8005ade <HAL_SPI_Init+0x56>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ad2:	d004      	beq.n	8005ade <HAL_SPI_Init+0x56>
 8005ad4:	f240 1141 	movw	r1, #321	@ 0x141
 8005ad8:	4864      	ldr	r0, [pc, #400]	@ (8005c6c <HAL_SPI_Init+0x1e4>)
 8005ada:	f7fb f8fd 	bl	8000cd8 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00e      	beq.n	8005b04 <HAL_SPI_Init+0x7c>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005aee:	d009      	beq.n	8005b04 <HAL_SPI_Init+0x7c>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005af8:	d004      	beq.n	8005b04 <HAL_SPI_Init+0x7c>
 8005afa:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 8005afe:	485b      	ldr	r0, [pc, #364]	@ (8005c6c <HAL_SPI_Init+0x1e4>)
 8005b00:	f7fb f8ea 	bl	8000cd8 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b0c:	d008      	beq.n	8005b20 <HAL_SPI_Init+0x98>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d004      	beq.n	8005b20 <HAL_SPI_Init+0x98>
 8005b16:	f240 1143 	movw	r1, #323	@ 0x143
 8005b1a:	4854      	ldr	r0, [pc, #336]	@ (8005c6c <HAL_SPI_Init+0x1e4>)
 8005b1c:	f7fb f8dc 	bl	8000cd8 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b28:	d00d      	beq.n	8005b46 <HAL_SPI_Init+0xbe>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d009      	beq.n	8005b46 <HAL_SPI_Init+0xbe>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b3a:	d004      	beq.n	8005b46 <HAL_SPI_Init+0xbe>
 8005b3c:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8005b40:	484a      	ldr	r0, [pc, #296]	@ (8005c6c <HAL_SPI_Init+0x1e4>)
 8005b42:	f7fb f8c9 	bl	8000cd8 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d020      	beq.n	8005b90 <HAL_SPI_Init+0x108>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	2b08      	cmp	r3, #8
 8005b54:	d01c      	beq.n	8005b90 <HAL_SPI_Init+0x108>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	2b10      	cmp	r3, #16
 8005b5c:	d018      	beq.n	8005b90 <HAL_SPI_Init+0x108>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	2b18      	cmp	r3, #24
 8005b64:	d014      	beq.n	8005b90 <HAL_SPI_Init+0x108>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	2b20      	cmp	r3, #32
 8005b6c:	d010      	beq.n	8005b90 <HAL_SPI_Init+0x108>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	2b28      	cmp	r3, #40	@ 0x28
 8005b74:	d00c      	beq.n	8005b90 <HAL_SPI_Init+0x108>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	2b30      	cmp	r3, #48	@ 0x30
 8005b7c:	d008      	beq.n	8005b90 <HAL_SPI_Init+0x108>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	2b38      	cmp	r3, #56	@ 0x38
 8005b84:	d004      	beq.n	8005b90 <HAL_SPI_Init+0x108>
 8005b86:	f240 1145 	movw	r1, #325	@ 0x145
 8005b8a:	4838      	ldr	r0, [pc, #224]	@ (8005c6c <HAL_SPI_Init+0x1e4>)
 8005b8c:	f7fb f8a4 	bl	8000cd8 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d008      	beq.n	8005baa <HAL_SPI_Init+0x122>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	2b80      	cmp	r3, #128	@ 0x80
 8005b9e:	d004      	beq.n	8005baa <HAL_SPI_Init+0x122>
 8005ba0:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 8005ba4:	4831      	ldr	r0, [pc, #196]	@ (8005c6c <HAL_SPI_Init+0x1e4>)
 8005ba6:	f7fb f897 	bl	8000cd8 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d008      	beq.n	8005bc4 <HAL_SPI_Init+0x13c>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb6:	2b10      	cmp	r3, #16
 8005bb8:	d004      	beq.n	8005bc4 <HAL_SPI_Init+0x13c>
 8005bba:	f240 1147 	movw	r1, #327	@ 0x147
 8005bbe:	482b      	ldr	r0, [pc, #172]	@ (8005c6c <HAL_SPI_Init+0x1e4>)
 8005bc0:	f7fb f88a 	bl	8000cd8 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d151      	bne.n	8005c70 <HAL_SPI_Init+0x1e8>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d008      	beq.n	8005be6 <HAL_SPI_Init+0x15e>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d004      	beq.n	8005be6 <HAL_SPI_Init+0x15e>
 8005bdc:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8005be0:	4822      	ldr	r0, [pc, #136]	@ (8005c6c <HAL_SPI_Init+0x1e4>)
 8005be2:	f7fb f879 	bl	8000cd8 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d008      	beq.n	8005c00 <HAL_SPI_Init+0x178>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d004      	beq.n	8005c00 <HAL_SPI_Init+0x178>
 8005bf6:	f240 114b 	movw	r1, #331	@ 0x14b
 8005bfa:	481c      	ldr	r0, [pc, #112]	@ (8005c6c <HAL_SPI_Init+0x1e4>)
 8005bfc:	f7fb f86c 	bl	8000cd8 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c08:	d125      	bne.n	8005c56 <HAL_SPI_Init+0x1ce>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d059      	beq.n	8005cc6 <HAL_SPI_Init+0x23e>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	2b08      	cmp	r3, #8
 8005c18:	d055      	beq.n	8005cc6 <HAL_SPI_Init+0x23e>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	2b10      	cmp	r3, #16
 8005c20:	d051      	beq.n	8005cc6 <HAL_SPI_Init+0x23e>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	2b18      	cmp	r3, #24
 8005c28:	d04d      	beq.n	8005cc6 <HAL_SPI_Init+0x23e>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	2b20      	cmp	r3, #32
 8005c30:	d049      	beq.n	8005cc6 <HAL_SPI_Init+0x23e>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	69db      	ldr	r3, [r3, #28]
 8005c36:	2b28      	cmp	r3, #40	@ 0x28
 8005c38:	d045      	beq.n	8005cc6 <HAL_SPI_Init+0x23e>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	2b30      	cmp	r3, #48	@ 0x30
 8005c40:	d041      	beq.n	8005cc6 <HAL_SPI_Init+0x23e>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	2b38      	cmp	r3, #56	@ 0x38
 8005c48:	d03d      	beq.n	8005cc6 <HAL_SPI_Init+0x23e>
 8005c4a:	f240 114f 	movw	r1, #335	@ 0x14f
 8005c4e:	4807      	ldr	r0, [pc, #28]	@ (8005c6c <HAL_SPI_Init+0x1e4>)
 8005c50:	f7fb f842 	bl	8000cd8 <assert_failed>
 8005c54:	e037      	b.n	8005cc6 <HAL_SPI_Init+0x23e>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	61da      	str	r2, [r3, #28]
 8005c5c:	e033      	b.n	8005cc6 <HAL_SPI_Init+0x23e>
 8005c5e:	bf00      	nop
 8005c60:	40013000 	.word	0x40013000
 8005c64:	40003800 	.word	0x40003800
 8005c68:	40003c00 	.word	0x40003c00
 8005c6c:	0800d740 	.word	0x0800d740
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d020      	beq.n	8005cba <HAL_SPI_Init+0x232>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	2b08      	cmp	r3, #8
 8005c7e:	d01c      	beq.n	8005cba <HAL_SPI_Init+0x232>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	69db      	ldr	r3, [r3, #28]
 8005c84:	2b10      	cmp	r3, #16
 8005c86:	d018      	beq.n	8005cba <HAL_SPI_Init+0x232>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	69db      	ldr	r3, [r3, #28]
 8005c8c:	2b18      	cmp	r3, #24
 8005c8e:	d014      	beq.n	8005cba <HAL_SPI_Init+0x232>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	2b20      	cmp	r3, #32
 8005c96:	d010      	beq.n	8005cba <HAL_SPI_Init+0x232>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	2b28      	cmp	r3, #40	@ 0x28
 8005c9e:	d00c      	beq.n	8005cba <HAL_SPI_Init+0x232>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	2b30      	cmp	r3, #48	@ 0x30
 8005ca6:	d008      	beq.n	8005cba <HAL_SPI_Init+0x232>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	2b38      	cmp	r3, #56	@ 0x38
 8005cae:	d004      	beq.n	8005cba <HAL_SPI_Init+0x232>
 8005cb0:	f240 1159 	movw	r1, #345	@ 0x159
 8005cb4:	483a      	ldr	r0, [pc, #232]	@ (8005da0 <HAL_SPI_Init+0x318>)
 8005cb6:	f7fb f80f 	bl	8000cd8 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d106      	bne.n	8005ce6 <HAL_SPI_Init+0x25e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7fb f8c1 	bl	8000e68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2202      	movs	r2, #2
 8005cea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cfc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	431a      	orrs	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	431a      	orrs	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d36:	431a      	orrs	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d40:	431a      	orrs	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d4a:	ea42 0103 	orr.w	r1, r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d52:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	0c1b      	lsrs	r3, r3, #16
 8005d64:	f003 0104 	and.w	r1, r3, #4
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6c:	f003 0210 	and.w	r2, r3, #16
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	69da      	ldr	r2, [r3, #28]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d86:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3708      	adds	r7, #8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	0800d740 	.word	0x0800d740

08005da4 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
 8005db0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d004      	beq.n	8005dc4 <HAL_SPI_TransmitReceive_IT+0x20>
 8005dba:	f240 611d 	movw	r1, #1565	@ 0x61d
 8005dbe:	4840      	ldr	r0, [pc, #256]	@ (8005ec0 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8005dc0:	f7fa ff8a 	bl	8000cd8 <assert_failed>

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005dca:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005dd2:	7dfb      	ldrb	r3, [r7, #23]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d00c      	beq.n	8005df2 <HAL_SPI_TransmitReceive_IT+0x4e>
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dde:	d106      	bne.n	8005dee <HAL_SPI_TransmitReceive_IT+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d102      	bne.n	8005dee <HAL_SPI_TransmitReceive_IT+0x4a>
 8005de8:	7dfb      	ldrb	r3, [r7, #23]
 8005dea:	2b04      	cmp	r3, #4
 8005dec:	d001      	beq.n	8005df2 <HAL_SPI_TransmitReceive_IT+0x4e>
  {
    return HAL_BUSY;
 8005dee:	2302      	movs	r3, #2
 8005df0:	e061      	b.n	8005eb6 <HAL_SPI_TransmitReceive_IT+0x112>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d005      	beq.n	8005e04 <HAL_SPI_TransmitReceive_IT+0x60>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d002      	beq.n	8005e04 <HAL_SPI_TransmitReceive_IT+0x60>
 8005dfe:	887b      	ldrh	r3, [r7, #2]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <HAL_SPI_TransmitReceive_IT+0x64>
  {
    return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e056      	b.n	8005eb6 <HAL_SPI_TransmitReceive_IT+0x112>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d101      	bne.n	8005e16 <HAL_SPI_TransmitReceive_IT+0x72>
 8005e12:	2302      	movs	r3, #2
 8005e14:	e04f      	b.n	8005eb6 <HAL_SPI_TransmitReceive_IT+0x112>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b04      	cmp	r3, #4
 8005e28:	d003      	beq.n	8005e32 <HAL_SPI_TransmitReceive_IT+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2205      	movs	r2, #5
 8005e2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	887a      	ldrh	r2, [r7, #2]
 8005e42:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	887a      	ldrh	r2, [r7, #2]
 8005e48:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	887a      	ldrh	r2, [r7, #2]
 8005e54:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	887a      	ldrh	r2, [r7, #2]
 8005e5a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d006      	beq.n	8005e72 <HAL_SPI_TransmitReceive_IT+0xce>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4a17      	ldr	r2, [pc, #92]	@ (8005ec4 <HAL_SPI_TransmitReceive_IT+0x120>)
 8005e68:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	4a16      	ldr	r2, [pc, #88]	@ (8005ec8 <HAL_SPI_TransmitReceive_IT+0x124>)
 8005e6e:	645a      	str	r2, [r3, #68]	@ 0x44
 8005e70:	e005      	b.n	8005e7e <HAL_SPI_TransmitReceive_IT+0xda>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4a15      	ldr	r2, [pc, #84]	@ (8005ecc <HAL_SPI_TransmitReceive_IT+0x128>)
 8005e76:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4a15      	ldr	r2, [pc, #84]	@ (8005ed0 <HAL_SPI_TransmitReceive_IT+0x12c>)
 8005e7c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e88:	2b40      	cmp	r3, #64	@ 0x40
 8005e8a:	d007      	beq.n	8005e9c <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e9a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8005eb2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3718      	adds	r7, #24
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	0800d740 	.word	0x0800d740
 8005ec4:	080061d1 	.word	0x080061d1
 8005ec8:	08006231 	.word	0x08006231
 8005ecc:	0800610d 	.word	0x0800610d
 8005ed0:	08006171 	.word	0x08006171

08005ed4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b088      	sub	sp, #32
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10e      	bne.n	8005f14 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d009      	beq.n	8005f14 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d004      	beq.n	8005f14 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	4798      	blx	r3
    return;
 8005f12:	e0ce      	b.n	80060b2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d009      	beq.n	8005f32 <HAL_SPI_IRQHandler+0x5e>
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d004      	beq.n	8005f32 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	4798      	blx	r3
    return;
 8005f30:	e0bf      	b.n	80060b2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	f003 0320 	and.w	r3, r3, #32
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10a      	bne.n	8005f52 <HAL_SPI_IRQHandler+0x7e>
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d105      	bne.n	8005f52 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f000 80b0 	beq.w	80060b2 <HAL_SPI_IRQHandler+0x1de>
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	f003 0320 	and.w	r3, r3, #32
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 80aa 	beq.w	80060b2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d023      	beq.n	8005fb0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b03      	cmp	r3, #3
 8005f72:	d011      	beq.n	8005f98 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f78:	f043 0204 	orr.w	r2, r3, #4
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f80:	2300      	movs	r3, #0
 8005f82:	617b      	str	r3, [r7, #20]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	617b      	str	r3, [r7, #20]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	617b      	str	r3, [r7, #20]
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	e00b      	b.n	8005fb0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f98:	2300      	movs	r3, #0
 8005f9a:	613b      	str	r3, [r7, #16]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	613b      	str	r3, [r7, #16]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	613b      	str	r3, [r7, #16]
 8005fac:	693b      	ldr	r3, [r7, #16]
        return;
 8005fae:	e080      	b.n	80060b2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	f003 0320 	and.w	r3, r3, #32
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d014      	beq.n	8005fe4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fbe:	f043 0201 	orr.w	r2, r3, #1
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00c      	beq.n	8006008 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ff2:	f043 0208 	orr.w	r2, r3, #8
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60bb      	str	r3, [r7, #8]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	60bb      	str	r3, [r7, #8]
 8006006:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800600c:	2b00      	cmp	r3, #0
 800600e:	d04f      	beq.n	80060b0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800601e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b00      	cmp	r3, #0
 8006030:	d104      	bne.n	800603c <HAL_SPI_IRQHandler+0x168>
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b00      	cmp	r3, #0
 800603a:	d034      	beq.n	80060a6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 0203 	bic.w	r2, r2, #3
 800604a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006050:	2b00      	cmp	r3, #0
 8006052:	d011      	beq.n	8006078 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006058:	4a17      	ldr	r2, [pc, #92]	@ (80060b8 <HAL_SPI_IRQHandler+0x1e4>)
 800605a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006060:	4618      	mov	r0, r3
 8006062:	f7fc ff67 	bl	8002f34 <HAL_DMA_Abort_IT>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d005      	beq.n	8006078 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006070:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800607c:	2b00      	cmp	r3, #0
 800607e:	d016      	beq.n	80060ae <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006084:	4a0c      	ldr	r2, [pc, #48]	@ (80060b8 <HAL_SPI_IRQHandler+0x1e4>)
 8006086:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800608c:	4618      	mov	r0, r3
 800608e:	f7fc ff51 	bl	8002f34 <HAL_DMA_Abort_IT>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00a      	beq.n	80060ae <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800609c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80060a4:	e003      	b.n	80060ae <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f812 	bl	80060d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80060ac:	e000      	b.n	80060b0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80060ae:	bf00      	nop
    return;
 80060b0:	bf00      	nop
  }
}
 80060b2:	3720      	adds	r7, #32
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	080060e5 	.word	0x080060e5

080060bc <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f7ff ffe6 	bl	80060d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006104:	bf00      	nop
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f103 020c 	add.w	r2, r3, #12
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006120:	7812      	ldrb	r2, [r2, #0]
 8006122:	b2d2      	uxtb	r2, r2
 8006124:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006134:	b29b      	uxth	r3, r3
 8006136:	3b01      	subs	r3, #1
 8006138:	b29a      	uxth	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006142:	b29b      	uxth	r3, r3
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10f      	bne.n	8006168 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006156:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800615c:	b29b      	uxth	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d102      	bne.n	8006168 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f970 	bl	8006448 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006168:	bf00      	nop
 800616a:	3708      	adds	r7, #8
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	330c      	adds	r3, #12
 8006182:	7812      	ldrb	r2, [r2, #0]
 8006184:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006194:	b29b      	uxth	r3, r3
 8006196:	3b01      	subs	r3, #1
 8006198:	b29a      	uxth	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10f      	bne.n	80061c8 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685a      	ldr	r2, [r3, #4]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80061b6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061bc:	b29b      	uxth	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d102      	bne.n	80061c8 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f940 	bl	8006448 <SPI_CloseRxTx_ISR>
    }
  }
}
 80061c8:	bf00      	nop
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68da      	ldr	r2, [r3, #12]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e2:	b292      	uxth	r2, r2
 80061e4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ea:	1c9a      	adds	r2, r3, #2
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	3b01      	subs	r3, #1
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006202:	b29b      	uxth	r3, r3
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10f      	bne.n	8006228 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006216:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800621c:	b29b      	uxth	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d102      	bne.n	8006228 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f910 	bl	8006448 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006228:	bf00      	nop
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800623c:	881a      	ldrh	r2, [r3, #0]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006248:	1c9a      	adds	r2, r3, #2
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006252:	b29b      	uxth	r3, r3
 8006254:	3b01      	subs	r3, #1
 8006256:	b29a      	uxth	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006260:	b29b      	uxth	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10f      	bne.n	8006286 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006274:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800627a:	b29b      	uxth	r3, r3
 800627c:	2b00      	cmp	r3, #0
 800627e:	d102      	bne.n	8006286 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f8e1 	bl	8006448 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006286:	bf00      	nop
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
	...

08006290 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b088      	sub	sp, #32
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	603b      	str	r3, [r7, #0]
 800629c:	4613      	mov	r3, r2
 800629e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062a0:	f7fb fd5c 	bl	8001d5c <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a8:	1a9b      	subs	r3, r3, r2
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	4413      	add	r3, r2
 80062ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062b0:	f7fb fd54 	bl	8001d5c <HAL_GetTick>
 80062b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062b6:	4b39      	ldr	r3, [pc, #228]	@ (800639c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	015b      	lsls	r3, r3, #5
 80062bc:	0d1b      	lsrs	r3, r3, #20
 80062be:	69fa      	ldr	r2, [r7, #28]
 80062c0:	fb02 f303 	mul.w	r3, r2, r3
 80062c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062c6:	e054      	b.n	8006372 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ce:	d050      	beq.n	8006372 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062d0:	f7fb fd44 	bl	8001d5c <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	69fa      	ldr	r2, [r7, #28]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d902      	bls.n	80062e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d13d      	bne.n	8006362 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80062f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062fe:	d111      	bne.n	8006324 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006308:	d004      	beq.n	8006314 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006312:	d107      	bne.n	8006324 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006322:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006328:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800632c:	d10f      	bne.n	800634e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800633c:	601a      	str	r2, [r3, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800634c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e017      	b.n	8006392 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006368:	2300      	movs	r3, #0
 800636a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	3b01      	subs	r3, #1
 8006370:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	4013      	ands	r3, r2
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	429a      	cmp	r2, r3
 8006380:	bf0c      	ite	eq
 8006382:	2301      	moveq	r3, #1
 8006384:	2300      	movne	r3, #0
 8006386:	b2db      	uxtb	r3, r3
 8006388:	461a      	mov	r2, r3
 800638a:	79fb      	ldrb	r3, [r7, #7]
 800638c:	429a      	cmp	r2, r3
 800638e:	d19b      	bne.n	80062c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3720      	adds	r7, #32
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	200000c4 	.word	0x200000c4

080063a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b088      	sub	sp, #32
 80063a4:	af02      	add	r7, sp, #8
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2201      	movs	r2, #1
 80063b4:	2102      	movs	r1, #2
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f7ff ff6a 	bl	8006290 <SPI_WaitFlagStateUntilTimeout>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d007      	beq.n	80063d2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063c6:	f043 0220 	orr.w	r2, r3, #32
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e032      	b.n	8006438 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80063d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006440 <SPI_EndRxTxTransaction+0xa0>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a1b      	ldr	r2, [pc, #108]	@ (8006444 <SPI_EndRxTxTransaction+0xa4>)
 80063d8:	fba2 2303 	umull	r2, r3, r2, r3
 80063dc:	0d5b      	lsrs	r3, r3, #21
 80063de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80063e2:	fb02 f303 	mul.w	r3, r2, r3
 80063e6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063f0:	d112      	bne.n	8006418 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	2200      	movs	r2, #0
 80063fa:	2180      	movs	r1, #128	@ 0x80
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f7ff ff47 	bl	8006290 <SPI_WaitFlagStateUntilTimeout>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d016      	beq.n	8006436 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800640c:	f043 0220 	orr.w	r2, r3, #32
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e00f      	b.n	8006438 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	3b01      	subs	r3, #1
 8006422:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800642e:	2b80      	cmp	r3, #128	@ 0x80
 8006430:	d0f2      	beq.n	8006418 <SPI_EndRxTxTransaction+0x78>
 8006432:	e000      	b.n	8006436 <SPI_EndRxTxTransaction+0x96>
        break;
 8006434:	bf00      	nop
  }

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3718      	adds	r7, #24
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	200000c4 	.word	0x200000c4
 8006444:	165e9f81 	.word	0x165e9f81

08006448 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8006450:	4b35      	ldr	r3, [pc, #212]	@ (8006528 <SPI_CloseRxTx_ISR+0xe0>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a35      	ldr	r2, [pc, #212]	@ (800652c <SPI_CloseRxTx_ISR+0xe4>)
 8006456:	fba2 2303 	umull	r2, r3, r2, r3
 800645a:	0a5b      	lsrs	r3, r3, #9
 800645c:	2264      	movs	r2, #100	@ 0x64
 800645e:	fb02 f303 	mul.w	r3, r2, r3
 8006462:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006464:	f7fb fc7a 	bl	8001d5c <HAL_GetTick>
 8006468:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f022 0220 	bic.w	r2, r2, #32
 8006478:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d106      	bne.n	800648e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006484:	f043 0220 	orr.w	r2, r3, #32
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800648c:	e009      	b.n	80064a2 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	3b01      	subs	r3, #1
 8006492:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f003 0302 	and.w	r3, r3, #2
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d0eb      	beq.n	800647a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	2164      	movs	r1, #100	@ 0x64
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7ff ff7a 	bl	80063a0 <SPI_EndRxTxTransaction>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d005      	beq.n	80064be <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064b6:	f043 0220 	orr.w	r2, r3, #32
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10a      	bne.n	80064dc <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064c6:	2300      	movs	r3, #0
 80064c8:	60fb      	str	r3, [r7, #12]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	60fb      	str	r3, [r7, #12]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	60fb      	str	r3, [r7, #12]
 80064da:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d115      	bne.n	8006510 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b04      	cmp	r3, #4
 80064ee:	d107      	bne.n	8006500 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f7ff fddf 	bl	80060bc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80064fe:	e00e      	b.n	800651e <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f7fa fb0f 	bl	8000b2c <HAL_SPI_TxRxCpltCallback>
}
 800650e:	e006      	b.n	800651e <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f7ff fdd9 	bl	80060d0 <HAL_SPI_ErrorCallback>
}
 800651e:	bf00      	nop
 8006520:	3718      	adds	r7, #24
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	200000c4 	.word	0x200000c4
 800652c:	057619f1 	.word	0x057619f1

08006530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d101      	bne.n	8006542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e0ed      	b.n	800671e <HAL_TIM_Base_Init+0x1ee>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a78      	ldr	r2, [pc, #480]	@ (8006728 <HAL_TIM_Base_Init+0x1f8>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d045      	beq.n	80065d8 <HAL_TIM_Base_Init+0xa8>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006554:	d040      	beq.n	80065d8 <HAL_TIM_Base_Init+0xa8>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a74      	ldr	r2, [pc, #464]	@ (800672c <HAL_TIM_Base_Init+0x1fc>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d03b      	beq.n	80065d8 <HAL_TIM_Base_Init+0xa8>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a72      	ldr	r2, [pc, #456]	@ (8006730 <HAL_TIM_Base_Init+0x200>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d036      	beq.n	80065d8 <HAL_TIM_Base_Init+0xa8>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a71      	ldr	r2, [pc, #452]	@ (8006734 <HAL_TIM_Base_Init+0x204>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d031      	beq.n	80065d8 <HAL_TIM_Base_Init+0xa8>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a6f      	ldr	r2, [pc, #444]	@ (8006738 <HAL_TIM_Base_Init+0x208>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d02c      	beq.n	80065d8 <HAL_TIM_Base_Init+0xa8>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a6e      	ldr	r2, [pc, #440]	@ (800673c <HAL_TIM_Base_Init+0x20c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d027      	beq.n	80065d8 <HAL_TIM_Base_Init+0xa8>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a6c      	ldr	r2, [pc, #432]	@ (8006740 <HAL_TIM_Base_Init+0x210>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d022      	beq.n	80065d8 <HAL_TIM_Base_Init+0xa8>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a6b      	ldr	r2, [pc, #428]	@ (8006744 <HAL_TIM_Base_Init+0x214>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d01d      	beq.n	80065d8 <HAL_TIM_Base_Init+0xa8>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a69      	ldr	r2, [pc, #420]	@ (8006748 <HAL_TIM_Base_Init+0x218>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d018      	beq.n	80065d8 <HAL_TIM_Base_Init+0xa8>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a68      	ldr	r2, [pc, #416]	@ (800674c <HAL_TIM_Base_Init+0x21c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d013      	beq.n	80065d8 <HAL_TIM_Base_Init+0xa8>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a66      	ldr	r2, [pc, #408]	@ (8006750 <HAL_TIM_Base_Init+0x220>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d00e      	beq.n	80065d8 <HAL_TIM_Base_Init+0xa8>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a65      	ldr	r2, [pc, #404]	@ (8006754 <HAL_TIM_Base_Init+0x224>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d009      	beq.n	80065d8 <HAL_TIM_Base_Init+0xa8>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a63      	ldr	r2, [pc, #396]	@ (8006758 <HAL_TIM_Base_Init+0x228>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d004      	beq.n	80065d8 <HAL_TIM_Base_Init+0xa8>
 80065ce:	f240 1113 	movw	r1, #275	@ 0x113
 80065d2:	4862      	ldr	r0, [pc, #392]	@ (800675c <HAL_TIM_Base_Init+0x22c>)
 80065d4:	f7fa fb80 	bl	8000cd8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d014      	beq.n	800660a <HAL_TIM_Base_Init+0xda>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	2b10      	cmp	r3, #16
 80065e6:	d010      	beq.n	800660a <HAL_TIM_Base_Init+0xda>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	2b20      	cmp	r3, #32
 80065ee:	d00c      	beq.n	800660a <HAL_TIM_Base_Init+0xda>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	2b40      	cmp	r3, #64	@ 0x40
 80065f6:	d008      	beq.n	800660a <HAL_TIM_Base_Init+0xda>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	2b60      	cmp	r3, #96	@ 0x60
 80065fe:	d004      	beq.n	800660a <HAL_TIM_Base_Init+0xda>
 8006600:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8006604:	4855      	ldr	r0, [pc, #340]	@ (800675c <HAL_TIM_Base_Init+0x22c>)
 8006606:	f7fa fb67 	bl	8000cd8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00e      	beq.n	8006630 <HAL_TIM_Base_Init+0x100>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800661a:	d009      	beq.n	8006630 <HAL_TIM_Base_Init+0x100>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006624:	d004      	beq.n	8006630 <HAL_TIM_Base_Init+0x100>
 8006626:	f240 1115 	movw	r1, #277	@ 0x115
 800662a:	484c      	ldr	r0, [pc, #304]	@ (800675c <HAL_TIM_Base_Init+0x22c>)
 800662c:	f7fa fb54 	bl	8000cd8 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006638:	d004      	beq.n	8006644 <HAL_TIM_Base_Init+0x114>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a3d      	ldr	r2, [pc, #244]	@ (8006734 <HAL_TIM_Base_Init+0x204>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d107      	bne.n	8006654 <HAL_TIM_Base_Init+0x124>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	2b00      	cmp	r3, #0
 800664a:	bf14      	ite	ne
 800664c:	2301      	movne	r3, #1
 800664e:	2300      	moveq	r3, #0
 8006650:	b2db      	uxtb	r3, r3
 8006652:	e00e      	b.n	8006672 <HAL_TIM_Base_Init+0x142>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d006      	beq.n	800666a <HAL_TIM_Base_Init+0x13a>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006664:	d201      	bcs.n	800666a <HAL_TIM_Base_Init+0x13a>
 8006666:	2301      	movs	r3, #1
 8006668:	e000      	b.n	800666c <HAL_TIM_Base_Init+0x13c>
 800666a:	2300      	movs	r3, #0
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d104      	bne.n	8006680 <HAL_TIM_Base_Init+0x150>
 8006676:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800667a:	4838      	ldr	r0, [pc, #224]	@ (800675c <HAL_TIM_Base_Init+0x22c>)
 800667c:	f7fa fb2c 	bl	8000cd8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d008      	beq.n	800669a <HAL_TIM_Base_Init+0x16a>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	2b80      	cmp	r3, #128	@ 0x80
 800668e:	d004      	beq.n	800669a <HAL_TIM_Base_Init+0x16a>
 8006690:	f240 1117 	movw	r1, #279	@ 0x117
 8006694:	4831      	ldr	r0, [pc, #196]	@ (800675c <HAL_TIM_Base_Init+0x22c>)
 8006696:	f7fa fb1f 	bl	8000cd8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d106      	bne.n	80066b4 <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7fa fc2a 	bl	8000f08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2202      	movs	r2, #2
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	3304      	adds	r3, #4
 80066c4:	4619      	mov	r1, r3
 80066c6:	4610      	mov	r0, r2
 80066c8:	f001 f94c 	bl	8007964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3708      	adds	r7, #8
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	40010000 	.word	0x40010000
 800672c:	40000400 	.word	0x40000400
 8006730:	40000800 	.word	0x40000800
 8006734:	40000c00 	.word	0x40000c00
 8006738:	40001000 	.word	0x40001000
 800673c:	40001400 	.word	0x40001400
 8006740:	40010400 	.word	0x40010400
 8006744:	40014000 	.word	0x40014000
 8006748:	40014400 	.word	0x40014400
 800674c:	40014800 	.word	0x40014800
 8006750:	40001800 	.word	0x40001800
 8006754:	40001c00 	.word	0x40001c00
 8006758:	40002000 	.word	0x40002000
 800675c:	0800d7b8 	.word	0x0800d7b8

08006760 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e0ed      	b.n	800694e <HAL_TIM_OC_Init+0x1ee>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a78      	ldr	r2, [pc, #480]	@ (8006958 <HAL_TIM_OC_Init+0x1f8>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d045      	beq.n	8006808 <HAL_TIM_OC_Init+0xa8>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006784:	d040      	beq.n	8006808 <HAL_TIM_OC_Init+0xa8>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a74      	ldr	r2, [pc, #464]	@ (800695c <HAL_TIM_OC_Init+0x1fc>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d03b      	beq.n	8006808 <HAL_TIM_OC_Init+0xa8>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a72      	ldr	r2, [pc, #456]	@ (8006960 <HAL_TIM_OC_Init+0x200>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d036      	beq.n	8006808 <HAL_TIM_OC_Init+0xa8>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a71      	ldr	r2, [pc, #452]	@ (8006964 <HAL_TIM_OC_Init+0x204>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d031      	beq.n	8006808 <HAL_TIM_OC_Init+0xa8>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a6f      	ldr	r2, [pc, #444]	@ (8006968 <HAL_TIM_OC_Init+0x208>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d02c      	beq.n	8006808 <HAL_TIM_OC_Init+0xa8>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a6e      	ldr	r2, [pc, #440]	@ (800696c <HAL_TIM_OC_Init+0x20c>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d027      	beq.n	8006808 <HAL_TIM_OC_Init+0xa8>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a6c      	ldr	r2, [pc, #432]	@ (8006970 <HAL_TIM_OC_Init+0x210>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d022      	beq.n	8006808 <HAL_TIM_OC_Init+0xa8>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a6b      	ldr	r2, [pc, #428]	@ (8006974 <HAL_TIM_OC_Init+0x214>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d01d      	beq.n	8006808 <HAL_TIM_OC_Init+0xa8>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a69      	ldr	r2, [pc, #420]	@ (8006978 <HAL_TIM_OC_Init+0x218>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d018      	beq.n	8006808 <HAL_TIM_OC_Init+0xa8>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a68      	ldr	r2, [pc, #416]	@ (800697c <HAL_TIM_OC_Init+0x21c>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d013      	beq.n	8006808 <HAL_TIM_OC_Init+0xa8>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a66      	ldr	r2, [pc, #408]	@ (8006980 <HAL_TIM_OC_Init+0x220>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d00e      	beq.n	8006808 <HAL_TIM_OC_Init+0xa8>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a65      	ldr	r2, [pc, #404]	@ (8006984 <HAL_TIM_OC_Init+0x224>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d009      	beq.n	8006808 <HAL_TIM_OC_Init+0xa8>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a63      	ldr	r2, [pc, #396]	@ (8006988 <HAL_TIM_OC_Init+0x228>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d004      	beq.n	8006808 <HAL_TIM_OC_Init+0xa8>
 80067fe:	f240 2193 	movw	r1, #659	@ 0x293
 8006802:	4862      	ldr	r0, [pc, #392]	@ (800698c <HAL_TIM_OC_Init+0x22c>)
 8006804:	f7fa fa68 	bl	8000cd8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d014      	beq.n	800683a <HAL_TIM_OC_Init+0xda>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	2b10      	cmp	r3, #16
 8006816:	d010      	beq.n	800683a <HAL_TIM_OC_Init+0xda>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	2b20      	cmp	r3, #32
 800681e:	d00c      	beq.n	800683a <HAL_TIM_OC_Init+0xda>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	2b40      	cmp	r3, #64	@ 0x40
 8006826:	d008      	beq.n	800683a <HAL_TIM_OC_Init+0xda>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	2b60      	cmp	r3, #96	@ 0x60
 800682e:	d004      	beq.n	800683a <HAL_TIM_OC_Init+0xda>
 8006830:	f44f 7125 	mov.w	r1, #660	@ 0x294
 8006834:	4855      	ldr	r0, [pc, #340]	@ (800698c <HAL_TIM_OC_Init+0x22c>)
 8006836:	f7fa fa4f 	bl	8000cd8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00e      	beq.n	8006860 <HAL_TIM_OC_Init+0x100>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800684a:	d009      	beq.n	8006860 <HAL_TIM_OC_Init+0x100>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006854:	d004      	beq.n	8006860 <HAL_TIM_OC_Init+0x100>
 8006856:	f240 2195 	movw	r1, #661	@ 0x295
 800685a:	484c      	ldr	r0, [pc, #304]	@ (800698c <HAL_TIM_OC_Init+0x22c>)
 800685c:	f7fa fa3c 	bl	8000cd8 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006868:	d004      	beq.n	8006874 <HAL_TIM_OC_Init+0x114>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a3d      	ldr	r2, [pc, #244]	@ (8006964 <HAL_TIM_OC_Init+0x204>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d107      	bne.n	8006884 <HAL_TIM_OC_Init+0x124>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	2b00      	cmp	r3, #0
 800687a:	bf14      	ite	ne
 800687c:	2301      	movne	r3, #1
 800687e:	2300      	moveq	r3, #0
 8006880:	b2db      	uxtb	r3, r3
 8006882:	e00e      	b.n	80068a2 <HAL_TIM_OC_Init+0x142>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d006      	beq.n	800689a <HAL_TIM_OC_Init+0x13a>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006894:	d201      	bcs.n	800689a <HAL_TIM_OC_Init+0x13a>
 8006896:	2301      	movs	r3, #1
 8006898:	e000      	b.n	800689c <HAL_TIM_OC_Init+0x13c>
 800689a:	2300      	movs	r3, #0
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d104      	bne.n	80068b0 <HAL_TIM_OC_Init+0x150>
 80068a6:	f240 2196 	movw	r1, #662	@ 0x296
 80068aa:	4838      	ldr	r0, [pc, #224]	@ (800698c <HAL_TIM_OC_Init+0x22c>)
 80068ac:	f7fa fa14 	bl	8000cd8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d008      	beq.n	80068ca <HAL_TIM_OC_Init+0x16a>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	2b80      	cmp	r3, #128	@ 0x80
 80068be:	d004      	beq.n	80068ca <HAL_TIM_OC_Init+0x16a>
 80068c0:	f240 2197 	movw	r1, #663	@ 0x297
 80068c4:	4831      	ldr	r0, [pc, #196]	@ (800698c <HAL_TIM_OC_Init+0x22c>)
 80068c6:	f7fa fa07 	bl	8000cd8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d106      	bne.n	80068e4 <HAL_TIM_OC_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 f856 	bl	8006990 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2202      	movs	r2, #2
 80068e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	3304      	adds	r3, #4
 80068f4:	4619      	mov	r1, r3
 80068f6:	4610      	mov	r0, r2
 80068f8:	f001 f834 	bl	8007964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3708      	adds	r7, #8
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	40010000 	.word	0x40010000
 800695c:	40000400 	.word	0x40000400
 8006960:	40000800 	.word	0x40000800
 8006964:	40000c00 	.word	0x40000c00
 8006968:	40001000 	.word	0x40001000
 800696c:	40001400 	.word	0x40001400
 8006970:	40010400 	.word	0x40010400
 8006974:	40014000 	.word	0x40014000
 8006978:	40014400 	.word	0x40014400
 800697c:	40014800 	.word	0x40014800
 8006980:	40001800 	.word	0x40001800
 8006984:	40001c00 	.word	0x40001c00
 8006988:	40002000 	.word	0x40002000
 800698c:	0800d7b8 	.word	0x0800d7b8

08006990 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069ae:	2300      	movs	r3, #0
 80069b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a90      	ldr	r2, [pc, #576]	@ (8006bf8 <HAL_TIM_OC_Start_IT+0x254>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d10f      	bne.n	80069dc <HAL_TIM_OC_Start_IT+0x38>
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f000 809f 	beq.w	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	2b04      	cmp	r3, #4
 80069c8:	f000 809b 	beq.w	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	2b08      	cmp	r3, #8
 80069d0:	f000 8097 	beq.w	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	2b0c      	cmp	r3, #12
 80069d8:	f000 8093 	beq.w	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069e4:	d10e      	bne.n	8006a04 <HAL_TIM_OC_Start_IT+0x60>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f000 808a 	beq.w	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b04      	cmp	r3, #4
 80069f2:	f000 8086 	beq.w	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b08      	cmp	r3, #8
 80069fa:	f000 8082 	beq.w	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b0c      	cmp	r3, #12
 8006a02:	d07e      	beq.n	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a7c      	ldr	r2, [pc, #496]	@ (8006bfc <HAL_TIM_OC_Start_IT+0x258>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d10b      	bne.n	8006a26 <HAL_TIM_OC_Start_IT+0x82>
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d076      	beq.n	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	2b04      	cmp	r3, #4
 8006a18:	d073      	beq.n	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	2b08      	cmp	r3, #8
 8006a1e:	d070      	beq.n	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	2b0c      	cmp	r3, #12
 8006a24:	d06d      	beq.n	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a75      	ldr	r2, [pc, #468]	@ (8006c00 <HAL_TIM_OC_Start_IT+0x25c>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d10b      	bne.n	8006a48 <HAL_TIM_OC_Start_IT+0xa4>
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d065      	beq.n	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	2b04      	cmp	r3, #4
 8006a3a:	d062      	beq.n	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	2b08      	cmp	r3, #8
 8006a40:	d05f      	beq.n	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	2b0c      	cmp	r3, #12
 8006a46:	d05c      	beq.n	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a6d      	ldr	r2, [pc, #436]	@ (8006c04 <HAL_TIM_OC_Start_IT+0x260>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d10b      	bne.n	8006a6a <HAL_TIM_OC_Start_IT+0xc6>
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d054      	beq.n	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	2b04      	cmp	r3, #4
 8006a5c:	d051      	beq.n	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	2b08      	cmp	r3, #8
 8006a62:	d04e      	beq.n	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	2b0c      	cmp	r3, #12
 8006a68:	d04b      	beq.n	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a66      	ldr	r2, [pc, #408]	@ (8006c08 <HAL_TIM_OC_Start_IT+0x264>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d10b      	bne.n	8006a8c <HAL_TIM_OC_Start_IT+0xe8>
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d043      	beq.n	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	d040      	beq.n	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	2b08      	cmp	r3, #8
 8006a84:	d03d      	beq.n	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	2b0c      	cmp	r3, #12
 8006a8a:	d03a      	beq.n	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a5e      	ldr	r2, [pc, #376]	@ (8006c0c <HAL_TIM_OC_Start_IT+0x268>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d105      	bne.n	8006aa2 <HAL_TIM_OC_Start_IT+0xfe>
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d032      	beq.n	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	2b04      	cmp	r3, #4
 8006aa0:	d02f      	beq.n	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a5a      	ldr	r2, [pc, #360]	@ (8006c10 <HAL_TIM_OC_Start_IT+0x26c>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d102      	bne.n	8006ab2 <HAL_TIM_OC_Start_IT+0x10e>
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d027      	beq.n	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a57      	ldr	r2, [pc, #348]	@ (8006c14 <HAL_TIM_OC_Start_IT+0x270>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d102      	bne.n	8006ac2 <HAL_TIM_OC_Start_IT+0x11e>
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d01f      	beq.n	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a54      	ldr	r2, [pc, #336]	@ (8006c18 <HAL_TIM_OC_Start_IT+0x274>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d105      	bne.n	8006ad8 <HAL_TIM_OC_Start_IT+0x134>
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d017      	beq.n	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	2b04      	cmp	r3, #4
 8006ad6:	d014      	beq.n	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a4f      	ldr	r2, [pc, #316]	@ (8006c1c <HAL_TIM_OC_Start_IT+0x278>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d102      	bne.n	8006ae8 <HAL_TIM_OC_Start_IT+0x144>
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00c      	beq.n	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a4c      	ldr	r2, [pc, #304]	@ (8006c20 <HAL_TIM_OC_Start_IT+0x27c>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d102      	bne.n	8006af8 <HAL_TIM_OC_Start_IT+0x154>
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d004      	beq.n	8006b02 <HAL_TIM_OC_Start_IT+0x15e>
 8006af8:	f44f 715d 	mov.w	r1, #884	@ 0x374
 8006afc:	4849      	ldr	r0, [pc, #292]	@ (8006c24 <HAL_TIM_OC_Start_IT+0x280>)
 8006afe:	f7fa f8eb 	bl	8000cd8 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d109      	bne.n	8006b1c <HAL_TIM_OC_Start_IT+0x178>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	bf14      	ite	ne
 8006b14:	2301      	movne	r3, #1
 8006b16:	2300      	moveq	r3, #0
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	e022      	b.n	8006b62 <HAL_TIM_OC_Start_IT+0x1be>
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	2b04      	cmp	r3, #4
 8006b20:	d109      	bne.n	8006b36 <HAL_TIM_OC_Start_IT+0x192>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	bf14      	ite	ne
 8006b2e:	2301      	movne	r3, #1
 8006b30:	2300      	moveq	r3, #0
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	e015      	b.n	8006b62 <HAL_TIM_OC_Start_IT+0x1be>
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	2b08      	cmp	r3, #8
 8006b3a:	d109      	bne.n	8006b50 <HAL_TIM_OC_Start_IT+0x1ac>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	bf14      	ite	ne
 8006b48:	2301      	movne	r3, #1
 8006b4a:	2300      	moveq	r3, #0
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	e008      	b.n	8006b62 <HAL_TIM_OC_Start_IT+0x1be>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	bf14      	ite	ne
 8006b5c:	2301      	movne	r3, #1
 8006b5e:	2300      	moveq	r3, #0
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d001      	beq.n	8006b6a <HAL_TIM_OC_Start_IT+0x1c6>
  {
    return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e0e0      	b.n	8006d2c <HAL_TIM_OC_Start_IT+0x388>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d104      	bne.n	8006b7a <HAL_TIM_OC_Start_IT+0x1d6>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2202      	movs	r2, #2
 8006b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b78:	e013      	b.n	8006ba2 <HAL_TIM_OC_Start_IT+0x1fe>
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	2b04      	cmp	r3, #4
 8006b7e:	d104      	bne.n	8006b8a <HAL_TIM_OC_Start_IT+0x1e6>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2202      	movs	r2, #2
 8006b84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b88:	e00b      	b.n	8006ba2 <HAL_TIM_OC_Start_IT+0x1fe>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2b08      	cmp	r3, #8
 8006b8e:	d104      	bne.n	8006b9a <HAL_TIM_OC_Start_IT+0x1f6>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2202      	movs	r2, #2
 8006b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b98:	e003      	b.n	8006ba2 <HAL_TIM_OC_Start_IT+0x1fe>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2202      	movs	r2, #2
 8006b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b0c      	cmp	r3, #12
 8006ba6:	d85a      	bhi.n	8006c5e <HAL_TIM_OC_Start_IT+0x2ba>
 8006ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8006bb0 <HAL_TIM_OC_Start_IT+0x20c>)
 8006baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bae:	bf00      	nop
 8006bb0:	08006be5 	.word	0x08006be5
 8006bb4:	08006c5f 	.word	0x08006c5f
 8006bb8:	08006c5f 	.word	0x08006c5f
 8006bbc:	08006c5f 	.word	0x08006c5f
 8006bc0:	08006c29 	.word	0x08006c29
 8006bc4:	08006c5f 	.word	0x08006c5f
 8006bc8:	08006c5f 	.word	0x08006c5f
 8006bcc:	08006c5f 	.word	0x08006c5f
 8006bd0:	08006c3b 	.word	0x08006c3b
 8006bd4:	08006c5f 	.word	0x08006c5f
 8006bd8:	08006c5f 	.word	0x08006c5f
 8006bdc:	08006c5f 	.word	0x08006c5f
 8006be0:	08006c4d 	.word	0x08006c4d
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68da      	ldr	r2, [r3, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f042 0202 	orr.w	r2, r2, #2
 8006bf2:	60da      	str	r2, [r3, #12]
      break;
 8006bf4:	e036      	b.n	8006c64 <HAL_TIM_OC_Start_IT+0x2c0>
 8006bf6:	bf00      	nop
 8006bf8:	40010000 	.word	0x40010000
 8006bfc:	40000400 	.word	0x40000400
 8006c00:	40000800 	.word	0x40000800
 8006c04:	40000c00 	.word	0x40000c00
 8006c08:	40010400 	.word	0x40010400
 8006c0c:	40014000 	.word	0x40014000
 8006c10:	40014400 	.word	0x40014400
 8006c14:	40014800 	.word	0x40014800
 8006c18:	40001800 	.word	0x40001800
 8006c1c:	40001c00 	.word	0x40001c00
 8006c20:	40002000 	.word	0x40002000
 8006c24:	0800d7b8 	.word	0x0800d7b8
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68da      	ldr	r2, [r3, #12]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f042 0204 	orr.w	r2, r2, #4
 8006c36:	60da      	str	r2, [r3, #12]
      break;
 8006c38:	e014      	b.n	8006c64 <HAL_TIM_OC_Start_IT+0x2c0>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68da      	ldr	r2, [r3, #12]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f042 0208 	orr.w	r2, r2, #8
 8006c48:	60da      	str	r2, [r3, #12]
      break;
 8006c4a:	e00b      	b.n	8006c64 <HAL_TIM_OC_Start_IT+0x2c0>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68da      	ldr	r2, [r3, #12]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f042 0210 	orr.w	r2, r2, #16
 8006c5a:	60da      	str	r2, [r3, #12]
      break;
 8006c5c:	e002      	b.n	8006c64 <HAL_TIM_OC_Start_IT+0x2c0>
    }

    default:
      status = HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	73fb      	strb	r3, [r7, #15]
      break;
 8006c62:	bf00      	nop
  }

  if (status == HAL_OK)
 8006c64:	7bfb      	ldrb	r3, [r7, #15]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d15f      	bne.n	8006d2a <HAL_TIM_OC_Start_IT+0x386>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	4618      	mov	r0, r3
 8006c74:	f001 f9f6 	bl	8008064 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a2d      	ldr	r2, [pc, #180]	@ (8006d34 <HAL_TIM_OC_Start_IT+0x390>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d004      	beq.n	8006c8c <HAL_TIM_OC_Start_IT+0x2e8>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a2c      	ldr	r2, [pc, #176]	@ (8006d38 <HAL_TIM_OC_Start_IT+0x394>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d101      	bne.n	8006c90 <HAL_TIM_OC_Start_IT+0x2ec>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e000      	b.n	8006c92 <HAL_TIM_OC_Start_IT+0x2ee>
 8006c90:	2300      	movs	r3, #0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d007      	beq.n	8006ca6 <HAL_TIM_OC_Start_IT+0x302>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006ca4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a22      	ldr	r2, [pc, #136]	@ (8006d34 <HAL_TIM_OC_Start_IT+0x390>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d022      	beq.n	8006cf6 <HAL_TIM_OC_Start_IT+0x352>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cb8:	d01d      	beq.n	8006cf6 <HAL_TIM_OC_Start_IT+0x352>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8006d3c <HAL_TIM_OC_Start_IT+0x398>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d018      	beq.n	8006cf6 <HAL_TIM_OC_Start_IT+0x352>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8006d40 <HAL_TIM_OC_Start_IT+0x39c>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d013      	beq.n	8006cf6 <HAL_TIM_OC_Start_IT+0x352>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a1c      	ldr	r2, [pc, #112]	@ (8006d44 <HAL_TIM_OC_Start_IT+0x3a0>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d00e      	beq.n	8006cf6 <HAL_TIM_OC_Start_IT+0x352>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a16      	ldr	r2, [pc, #88]	@ (8006d38 <HAL_TIM_OC_Start_IT+0x394>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d009      	beq.n	8006cf6 <HAL_TIM_OC_Start_IT+0x352>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a18      	ldr	r2, [pc, #96]	@ (8006d48 <HAL_TIM_OC_Start_IT+0x3a4>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d004      	beq.n	8006cf6 <HAL_TIM_OC_Start_IT+0x352>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a16      	ldr	r2, [pc, #88]	@ (8006d4c <HAL_TIM_OC_Start_IT+0x3a8>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d111      	bne.n	8006d1a <HAL_TIM_OC_Start_IT+0x376>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	f003 0307 	and.w	r3, r3, #7
 8006d00:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	2b06      	cmp	r3, #6
 8006d06:	d010      	beq.n	8006d2a <HAL_TIM_OC_Start_IT+0x386>
      {
        __HAL_TIM_ENABLE(htim);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f042 0201 	orr.w	r2, r2, #1
 8006d16:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d18:	e007      	b.n	8006d2a <HAL_TIM_OC_Start_IT+0x386>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f042 0201 	orr.w	r2, r2, #1
 8006d28:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	40010000 	.word	0x40010000
 8006d38:	40010400 	.word	0x40010400
 8006d3c:	40000400 	.word	0x40000400
 8006d40:	40000800 	.word	0x40000800
 8006d44:	40000c00 	.word	0x40000c00
 8006d48:	40014000 	.word	0x40014000
 8006d4c:	40001800 	.word	0x40001800

08006d50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d020      	beq.n	8006db4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f003 0302 	and.w	r3, r3, #2
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d01b      	beq.n	8006db4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f06f 0202 	mvn.w	r2, #2
 8006d84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	f003 0303 	and.w	r3, r3, #3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fdc4 	bl	8007928 <HAL_TIM_IC_CaptureCallback>
 8006da0:	e005      	b.n	8006dae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7f9 ff18 	bl	8000bd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 fdc7 	bl	800793c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	f003 0304 	and.w	r3, r3, #4
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d020      	beq.n	8006e00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f003 0304 	and.w	r3, r3, #4
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d01b      	beq.n	8006e00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f06f 0204 	mvn.w	r2, #4
 8006dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d003      	beq.n	8006dee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fd9e 	bl	8007928 <HAL_TIM_IC_CaptureCallback>
 8006dec:	e005      	b.n	8006dfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7f9 fef2 	bl	8000bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 fda1 	bl	800793c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	f003 0308 	and.w	r3, r3, #8
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d020      	beq.n	8006e4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f003 0308 	and.w	r3, r3, #8
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d01b      	beq.n	8006e4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f06f 0208 	mvn.w	r2, #8
 8006e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2204      	movs	r2, #4
 8006e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	69db      	ldr	r3, [r3, #28]
 8006e2a:	f003 0303 	and.w	r3, r3, #3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d003      	beq.n	8006e3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 fd78 	bl	8007928 <HAL_TIM_IC_CaptureCallback>
 8006e38:	e005      	b.n	8006e46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7f9 fecc 	bl	8000bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fd7b 	bl	800793c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	f003 0310 	and.w	r3, r3, #16
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d020      	beq.n	8006e98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f003 0310 	and.w	r3, r3, #16
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d01b      	beq.n	8006e98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f06f 0210 	mvn.w	r2, #16
 8006e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2208      	movs	r2, #8
 8006e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d003      	beq.n	8006e86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fd52 	bl	8007928 <HAL_TIM_IC_CaptureCallback>
 8006e84:	e005      	b.n	8006e92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7f9 fea6 	bl	8000bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fd55 	bl	800793c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f003 0301 	and.w	r3, r3, #1
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00c      	beq.n	8006ebc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d007      	beq.n	8006ebc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f06f 0201 	mvn.w	r2, #1
 8006eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fd2c 	bl	8007914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00c      	beq.n	8006ee0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d007      	beq.n	8006ee0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f001 fa2e 	bl	800833c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00c      	beq.n	8006f04 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d007      	beq.n	8006f04 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fd26 	bl	8007950 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f003 0320 	and.w	r3, r3, #32
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00c      	beq.n	8006f28 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f003 0320 	and.w	r3, r3, #32
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d007      	beq.n	8006f28 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f06f 0220 	mvn.w	r2, #32
 8006f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f001 fa00 	bl	8008328 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f28:	bf00      	nop
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d010      	beq.n	8006f68 <HAL_TIM_OC_ConfigChannel+0x38>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b04      	cmp	r3, #4
 8006f4a:	d00d      	beq.n	8006f68 <HAL_TIM_OC_ConfigChannel+0x38>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b08      	cmp	r3, #8
 8006f50:	d00a      	beq.n	8006f68 <HAL_TIM_OC_ConfigChannel+0x38>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2b0c      	cmp	r3, #12
 8006f56:	d007      	beq.n	8006f68 <HAL_TIM_OC_ConfigChannel+0x38>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b3c      	cmp	r3, #60	@ 0x3c
 8006f5c:	d004      	beq.n	8006f68 <HAL_TIM_OC_ConfigChannel+0x38>
 8006f5e:	f44f 617d 	mov.w	r1, #4048	@ 0xfd0
 8006f62:	487f      	ldr	r0, [pc, #508]	@ (8007160 <HAL_TIM_OC_ConfigChannel+0x230>)
 8006f64:	f7f9 feb8 	bl	8000cd8 <assert_failed>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d018      	beq.n	8006fa2 <HAL_TIM_OC_ConfigChannel+0x72>
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b10      	cmp	r3, #16
 8006f76:	d014      	beq.n	8006fa2 <HAL_TIM_OC_ConfigChannel+0x72>
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b20      	cmp	r3, #32
 8006f7e:	d010      	beq.n	8006fa2 <HAL_TIM_OC_ConfigChannel+0x72>
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2b30      	cmp	r3, #48	@ 0x30
 8006f86:	d00c      	beq.n	8006fa2 <HAL_TIM_OC_ConfigChannel+0x72>
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2b50      	cmp	r3, #80	@ 0x50
 8006f8e:	d008      	beq.n	8006fa2 <HAL_TIM_OC_ConfigChannel+0x72>
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2b40      	cmp	r3, #64	@ 0x40
 8006f96:	d004      	beq.n	8006fa2 <HAL_TIM_OC_ConfigChannel+0x72>
 8006f98:	f640 71d1 	movw	r1, #4049	@ 0xfd1
 8006f9c:	4870      	ldr	r0, [pc, #448]	@ (8007160 <HAL_TIM_OC_ConfigChannel+0x230>)
 8006f9e:	f7f9 fe9b 	bl	8000cd8 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d008      	beq.n	8006fbc <HAL_TIM_OC_ConfigChannel+0x8c>
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d004      	beq.n	8006fbc <HAL_TIM_OC_ConfigChannel+0x8c>
 8006fb2:	f640 71d2 	movw	r1, #4050	@ 0xfd2
 8006fb6:	486a      	ldr	r0, [pc, #424]	@ (8007160 <HAL_TIM_OC_ConfigChannel+0x230>)
 8006fb8:	f7f9 fe8e 	bl	8000cd8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d101      	bne.n	8006fca <HAL_TIM_OC_ConfigChannel+0x9a>
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	e114      	b.n	80071f4 <HAL_TIM_OC_ConfigChannel+0x2c4>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2b0c      	cmp	r3, #12
 8006fd6:	f200 8105 	bhi.w	80071e4 <HAL_TIM_OC_ConfigChannel+0x2b4>
 8006fda:	a201      	add	r2, pc, #4	@ (adr r2, 8006fe0 <HAL_TIM_OC_ConfigChannel+0xb0>)
 8006fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe0:	08007015 	.word	0x08007015
 8006fe4:	080071e5 	.word	0x080071e5
 8006fe8:	080071e5 	.word	0x080071e5
 8006fec:	080071e5 	.word	0x080071e5
 8006ff0:	080070a5 	.word	0x080070a5
 8006ff4:	080071e5 	.word	0x080071e5
 8006ff8:	080071e5 	.word	0x080071e5
 8006ffc:	080071e5 	.word	0x080071e5
 8007000:	0800710d 	.word	0x0800710d
 8007004:	080071e5 	.word	0x080071e5
 8007008:	080071e5 	.word	0x080071e5
 800700c:	080071e5 	.word	0x080071e5
 8007010:	08007191 	.word	0x08007191
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a52      	ldr	r2, [pc, #328]	@ (8007164 <HAL_TIM_OC_ConfigChannel+0x234>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d03b      	beq.n	8007096 <HAL_TIM_OC_ConfigChannel+0x166>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007026:	d036      	beq.n	8007096 <HAL_TIM_OC_ConfigChannel+0x166>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a4e      	ldr	r2, [pc, #312]	@ (8007168 <HAL_TIM_OC_ConfigChannel+0x238>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d031      	beq.n	8007096 <HAL_TIM_OC_ConfigChannel+0x166>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a4d      	ldr	r2, [pc, #308]	@ (800716c <HAL_TIM_OC_ConfigChannel+0x23c>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d02c      	beq.n	8007096 <HAL_TIM_OC_ConfigChannel+0x166>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a4b      	ldr	r2, [pc, #300]	@ (8007170 <HAL_TIM_OC_ConfigChannel+0x240>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d027      	beq.n	8007096 <HAL_TIM_OC_ConfigChannel+0x166>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a4a      	ldr	r2, [pc, #296]	@ (8007174 <HAL_TIM_OC_ConfigChannel+0x244>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d022      	beq.n	8007096 <HAL_TIM_OC_ConfigChannel+0x166>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a48      	ldr	r2, [pc, #288]	@ (8007178 <HAL_TIM_OC_ConfigChannel+0x248>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d01d      	beq.n	8007096 <HAL_TIM_OC_ConfigChannel+0x166>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a47      	ldr	r2, [pc, #284]	@ (800717c <HAL_TIM_OC_ConfigChannel+0x24c>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d018      	beq.n	8007096 <HAL_TIM_OC_ConfigChannel+0x166>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a45      	ldr	r2, [pc, #276]	@ (8007180 <HAL_TIM_OC_ConfigChannel+0x250>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d013      	beq.n	8007096 <HAL_TIM_OC_ConfigChannel+0x166>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a44      	ldr	r2, [pc, #272]	@ (8007184 <HAL_TIM_OC_ConfigChannel+0x254>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d00e      	beq.n	8007096 <HAL_TIM_OC_ConfigChannel+0x166>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a42      	ldr	r2, [pc, #264]	@ (8007188 <HAL_TIM_OC_ConfigChannel+0x258>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d009      	beq.n	8007096 <HAL_TIM_OC_ConfigChannel+0x166>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a41      	ldr	r2, [pc, #260]	@ (800718c <HAL_TIM_OC_ConfigChannel+0x25c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d004      	beq.n	8007096 <HAL_TIM_OC_ConfigChannel+0x166>
 800708c:	f640 71dc 	movw	r1, #4060	@ 0xfdc
 8007090:	4833      	ldr	r0, [pc, #204]	@ (8007160 <HAL_TIM_OC_ConfigChannel+0x230>)
 8007092:	f7f9 fe21 	bl	8000cd8 <assert_failed>

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68b9      	ldr	r1, [r7, #8]
 800709c:	4618      	mov	r0, r3
 800709e:	f000 fd0d 	bl	8007abc <TIM_OC1_SetConfig>
      break;
 80070a2:	e0a2      	b.n	80071ea <HAL_TIM_OC_ConfigChannel+0x2ba>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a2e      	ldr	r2, [pc, #184]	@ (8007164 <HAL_TIM_OC_ConfigChannel+0x234>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d027      	beq.n	80070fe <HAL_TIM_OC_ConfigChannel+0x1ce>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070b6:	d022      	beq.n	80070fe <HAL_TIM_OC_ConfigChannel+0x1ce>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a2a      	ldr	r2, [pc, #168]	@ (8007168 <HAL_TIM_OC_ConfigChannel+0x238>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d01d      	beq.n	80070fe <HAL_TIM_OC_ConfigChannel+0x1ce>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a29      	ldr	r2, [pc, #164]	@ (800716c <HAL_TIM_OC_ConfigChannel+0x23c>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d018      	beq.n	80070fe <HAL_TIM_OC_ConfigChannel+0x1ce>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a27      	ldr	r2, [pc, #156]	@ (8007170 <HAL_TIM_OC_ConfigChannel+0x240>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d013      	beq.n	80070fe <HAL_TIM_OC_ConfigChannel+0x1ce>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a26      	ldr	r2, [pc, #152]	@ (8007174 <HAL_TIM_OC_ConfigChannel+0x244>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d00e      	beq.n	80070fe <HAL_TIM_OC_ConfigChannel+0x1ce>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a24      	ldr	r2, [pc, #144]	@ (8007178 <HAL_TIM_OC_ConfigChannel+0x248>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d009      	beq.n	80070fe <HAL_TIM_OC_ConfigChannel+0x1ce>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a25      	ldr	r2, [pc, #148]	@ (8007184 <HAL_TIM_OC_ConfigChannel+0x254>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d004      	beq.n	80070fe <HAL_TIM_OC_ConfigChannel+0x1ce>
 80070f4:	f640 71e6 	movw	r1, #4070	@ 0xfe6
 80070f8:	4819      	ldr	r0, [pc, #100]	@ (8007160 <HAL_TIM_OC_ConfigChannel+0x230>)
 80070fa:	f7f9 fded 	bl	8000cd8 <assert_failed>

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68b9      	ldr	r1, [r7, #8]
 8007104:	4618      	mov	r0, r3
 8007106:	f000 fd73 	bl	8007bf0 <TIM_OC2_SetConfig>
      break;
 800710a:	e06e      	b.n	80071ea <HAL_TIM_OC_ConfigChannel+0x2ba>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a14      	ldr	r2, [pc, #80]	@ (8007164 <HAL_TIM_OC_ConfigChannel+0x234>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d01d      	beq.n	8007152 <HAL_TIM_OC_ConfigChannel+0x222>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800711e:	d018      	beq.n	8007152 <HAL_TIM_OC_ConfigChannel+0x222>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a10      	ldr	r2, [pc, #64]	@ (8007168 <HAL_TIM_OC_ConfigChannel+0x238>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d013      	beq.n	8007152 <HAL_TIM_OC_ConfigChannel+0x222>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a0f      	ldr	r2, [pc, #60]	@ (800716c <HAL_TIM_OC_ConfigChannel+0x23c>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d00e      	beq.n	8007152 <HAL_TIM_OC_ConfigChannel+0x222>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a0d      	ldr	r2, [pc, #52]	@ (8007170 <HAL_TIM_OC_ConfigChannel+0x240>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d009      	beq.n	8007152 <HAL_TIM_OC_ConfigChannel+0x222>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a0c      	ldr	r2, [pc, #48]	@ (8007174 <HAL_TIM_OC_ConfigChannel+0x244>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d004      	beq.n	8007152 <HAL_TIM_OC_ConfigChannel+0x222>
 8007148:	f44f 617f 	mov.w	r1, #4080	@ 0xff0
 800714c:	4804      	ldr	r0, [pc, #16]	@ (8007160 <HAL_TIM_OC_ConfigChannel+0x230>)
 800714e:	f7f9 fdc3 	bl	8000cd8 <assert_failed>

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68b9      	ldr	r1, [r7, #8]
 8007158:	4618      	mov	r0, r3
 800715a:	f000 fde7 	bl	8007d2c <TIM_OC3_SetConfig>
      break;
 800715e:	e044      	b.n	80071ea <HAL_TIM_OC_ConfigChannel+0x2ba>
 8007160:	0800d7b8 	.word	0x0800d7b8
 8007164:	40010000 	.word	0x40010000
 8007168:	40000400 	.word	0x40000400
 800716c:	40000800 	.word	0x40000800
 8007170:	40000c00 	.word	0x40000c00
 8007174:	40010400 	.word	0x40010400
 8007178:	40014000 	.word	0x40014000
 800717c:	40014400 	.word	0x40014400
 8007180:	40014800 	.word	0x40014800
 8007184:	40001800 	.word	0x40001800
 8007188:	40001c00 	.word	0x40001c00
 800718c:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a19      	ldr	r2, [pc, #100]	@ (80071fc <HAL_TIM_OC_ConfigChannel+0x2cc>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d01d      	beq.n	80071d6 <HAL_TIM_OC_ConfigChannel+0x2a6>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071a2:	d018      	beq.n	80071d6 <HAL_TIM_OC_ConfigChannel+0x2a6>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a15      	ldr	r2, [pc, #84]	@ (8007200 <HAL_TIM_OC_ConfigChannel+0x2d0>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d013      	beq.n	80071d6 <HAL_TIM_OC_ConfigChannel+0x2a6>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a14      	ldr	r2, [pc, #80]	@ (8007204 <HAL_TIM_OC_ConfigChannel+0x2d4>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d00e      	beq.n	80071d6 <HAL_TIM_OC_ConfigChannel+0x2a6>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a12      	ldr	r2, [pc, #72]	@ (8007208 <HAL_TIM_OC_ConfigChannel+0x2d8>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d009      	beq.n	80071d6 <HAL_TIM_OC_ConfigChannel+0x2a6>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a11      	ldr	r2, [pc, #68]	@ (800720c <HAL_TIM_OC_ConfigChannel+0x2dc>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d004      	beq.n	80071d6 <HAL_TIM_OC_ConfigChannel+0x2a6>
 80071cc:	f640 71fa 	movw	r1, #4090	@ 0xffa
 80071d0:	480f      	ldr	r0, [pc, #60]	@ (8007210 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 80071d2:	f7f9 fd81 	bl	8000cd8 <assert_failed>

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68b9      	ldr	r1, [r7, #8]
 80071dc:	4618      	mov	r0, r3
 80071de:	f000 fe43 	bl	8007e68 <TIM_OC4_SetConfig>
      break;
 80071e2:	e002      	b.n	80071ea <HAL_TIM_OC_ConfigChannel+0x2ba>
    }

    default:
      status = HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	75fb      	strb	r3, [r7, #23]
      break;
 80071e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80071f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3718      	adds	r7, #24
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	40010000 	.word	0x40010000
 8007200:	40000400 	.word	0x40000400
 8007204:	40000800 	.word	0x40000800
 8007208:	40000c00 	.word	0x40000c00
 800720c:	40010400 	.word	0x40010400
 8007210:	0800d7b8 	.word	0x0800d7b8

08007214 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800721e:	2300      	movs	r3, #0
 8007220:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007228:	2b01      	cmp	r3, #1
 800722a:	d101      	bne.n	8007230 <HAL_TIM_ConfigClockSource+0x1c>
 800722c:	2302      	movs	r3, #2
 800722e:	e35c      	b.n	80078ea <HAL_TIM_ConfigClockSource+0x6d6>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2202      	movs	r2, #2
 800723c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007248:	d029      	beq.n	800729e <HAL_TIM_ConfigClockSource+0x8a>
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2b70      	cmp	r3, #112	@ 0x70
 8007250:	d025      	beq.n	800729e <HAL_TIM_ConfigClockSource+0x8a>
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800725a:	d020      	beq.n	800729e <HAL_TIM_ConfigClockSource+0x8a>
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2b40      	cmp	r3, #64	@ 0x40
 8007262:	d01c      	beq.n	800729e <HAL_TIM_ConfigClockSource+0x8a>
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b50      	cmp	r3, #80	@ 0x50
 800726a:	d018      	beq.n	800729e <HAL_TIM_ConfigClockSource+0x8a>
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2b60      	cmp	r3, #96	@ 0x60
 8007272:	d014      	beq.n	800729e <HAL_TIM_ConfigClockSource+0x8a>
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d010      	beq.n	800729e <HAL_TIM_ConfigClockSource+0x8a>
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b10      	cmp	r3, #16
 8007282:	d00c      	beq.n	800729e <HAL_TIM_ConfigClockSource+0x8a>
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2b20      	cmp	r3, #32
 800728a:	d008      	beq.n	800729e <HAL_TIM_ConfigClockSource+0x8a>
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b30      	cmp	r3, #48	@ 0x30
 8007292:	d004      	beq.n	800729e <HAL_TIM_ConfigClockSource+0x8a>
 8007294:	f241 41c3 	movw	r1, #5315	@ 0x14c3
 8007298:	4893      	ldr	r0, [pc, #588]	@ (80074e8 <HAL_TIM_ConfigClockSource+0x2d4>)
 800729a:	f7f9 fd1d 	bl	8000cd8 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80072ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072b4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072c6:	f000 812b 	beq.w	8007520 <HAL_TIM_ConfigClockSource+0x30c>
 80072ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072ce:	f200 82ff 	bhi.w	80078d0 <HAL_TIM_ConfigClockSource+0x6bc>
 80072d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072d6:	d02e      	beq.n	8007336 <HAL_TIM_ConfigClockSource+0x122>
 80072d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072dc:	f200 82f8 	bhi.w	80078d0 <HAL_TIM_ConfigClockSource+0x6bc>
 80072e0:	2b70      	cmp	r3, #112	@ 0x70
 80072e2:	f000 8082 	beq.w	80073ea <HAL_TIM_ConfigClockSource+0x1d6>
 80072e6:	2b70      	cmp	r3, #112	@ 0x70
 80072e8:	f200 82f2 	bhi.w	80078d0 <HAL_TIM_ConfigClockSource+0x6bc>
 80072ec:	2b60      	cmp	r3, #96	@ 0x60
 80072ee:	f000 81f9 	beq.w	80076e4 <HAL_TIM_ConfigClockSource+0x4d0>
 80072f2:	2b60      	cmp	r3, #96	@ 0x60
 80072f4:	f200 82ec 	bhi.w	80078d0 <HAL_TIM_ConfigClockSource+0x6bc>
 80072f8:	2b50      	cmp	r3, #80	@ 0x50
 80072fa:	f000 8182 	beq.w	8007602 <HAL_TIM_ConfigClockSource+0x3ee>
 80072fe:	2b50      	cmp	r3, #80	@ 0x50
 8007300:	f200 82e6 	bhi.w	80078d0 <HAL_TIM_ConfigClockSource+0x6bc>
 8007304:	2b40      	cmp	r3, #64	@ 0x40
 8007306:	f000 824d 	beq.w	80077a4 <HAL_TIM_ConfigClockSource+0x590>
 800730a:	2b40      	cmp	r3, #64	@ 0x40
 800730c:	f200 82e0 	bhi.w	80078d0 <HAL_TIM_ConfigClockSource+0x6bc>
 8007310:	2b30      	cmp	r3, #48	@ 0x30
 8007312:	f000 82a7 	beq.w	8007864 <HAL_TIM_ConfigClockSource+0x650>
 8007316:	2b30      	cmp	r3, #48	@ 0x30
 8007318:	f200 82da 	bhi.w	80078d0 <HAL_TIM_ConfigClockSource+0x6bc>
 800731c:	2b20      	cmp	r3, #32
 800731e:	f000 82a1 	beq.w	8007864 <HAL_TIM_ConfigClockSource+0x650>
 8007322:	2b20      	cmp	r3, #32
 8007324:	f200 82d4 	bhi.w	80078d0 <HAL_TIM_ConfigClockSource+0x6bc>
 8007328:	2b00      	cmp	r3, #0
 800732a:	f000 829b 	beq.w	8007864 <HAL_TIM_ConfigClockSource+0x650>
 800732e:	2b10      	cmp	r3, #16
 8007330:	f000 8298 	beq.w	8007864 <HAL_TIM_ConfigClockSource+0x650>
 8007334:	e2cc      	b.n	80078d0 <HAL_TIM_ConfigClockSource+0x6bc>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a6c      	ldr	r2, [pc, #432]	@ (80074ec <HAL_TIM_ConfigClockSource+0x2d8>)
 800733c:	4293      	cmp	r3, r2
 800733e:	f000 82ca 	beq.w	80078d6 <HAL_TIM_ConfigClockSource+0x6c2>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800734a:	f000 82c4 	beq.w	80078d6 <HAL_TIM_ConfigClockSource+0x6c2>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a67      	ldr	r2, [pc, #412]	@ (80074f0 <HAL_TIM_ConfigClockSource+0x2dc>)
 8007354:	4293      	cmp	r3, r2
 8007356:	f000 82be 	beq.w	80078d6 <HAL_TIM_ConfigClockSource+0x6c2>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a65      	ldr	r2, [pc, #404]	@ (80074f4 <HAL_TIM_ConfigClockSource+0x2e0>)
 8007360:	4293      	cmp	r3, r2
 8007362:	f000 82b8 	beq.w	80078d6 <HAL_TIM_ConfigClockSource+0x6c2>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a63      	ldr	r2, [pc, #396]	@ (80074f8 <HAL_TIM_ConfigClockSource+0x2e4>)
 800736c:	4293      	cmp	r3, r2
 800736e:	f000 82b2 	beq.w	80078d6 <HAL_TIM_ConfigClockSource+0x6c2>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a61      	ldr	r2, [pc, #388]	@ (80074fc <HAL_TIM_ConfigClockSource+0x2e8>)
 8007378:	4293      	cmp	r3, r2
 800737a:	f000 82ac 	beq.w	80078d6 <HAL_TIM_ConfigClockSource+0x6c2>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a5f      	ldr	r2, [pc, #380]	@ (8007500 <HAL_TIM_ConfigClockSource+0x2ec>)
 8007384:	4293      	cmp	r3, r2
 8007386:	f000 82a6 	beq.w	80078d6 <HAL_TIM_ConfigClockSource+0x6c2>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a5d      	ldr	r2, [pc, #372]	@ (8007504 <HAL_TIM_ConfigClockSource+0x2f0>)
 8007390:	4293      	cmp	r3, r2
 8007392:	f000 82a0 	beq.w	80078d6 <HAL_TIM_ConfigClockSource+0x6c2>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a5b      	ldr	r2, [pc, #364]	@ (8007508 <HAL_TIM_ConfigClockSource+0x2f4>)
 800739c:	4293      	cmp	r3, r2
 800739e:	f000 829a 	beq.w	80078d6 <HAL_TIM_ConfigClockSource+0x6c2>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a59      	ldr	r2, [pc, #356]	@ (800750c <HAL_TIM_ConfigClockSource+0x2f8>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	f000 8294 	beq.w	80078d6 <HAL_TIM_ConfigClockSource+0x6c2>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a57      	ldr	r2, [pc, #348]	@ (8007510 <HAL_TIM_ConfigClockSource+0x2fc>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	f000 828e 	beq.w	80078d6 <HAL_TIM_ConfigClockSource+0x6c2>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a55      	ldr	r2, [pc, #340]	@ (8007514 <HAL_TIM_ConfigClockSource+0x300>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	f000 8288 	beq.w	80078d6 <HAL_TIM_ConfigClockSource+0x6c2>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a53      	ldr	r2, [pc, #332]	@ (8007518 <HAL_TIM_ConfigClockSource+0x304>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	f000 8282 	beq.w	80078d6 <HAL_TIM_ConfigClockSource+0x6c2>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a51      	ldr	r2, [pc, #324]	@ (800751c <HAL_TIM_ConfigClockSource+0x308>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	f000 827c 	beq.w	80078d6 <HAL_TIM_ConfigClockSource+0x6c2>
 80073de:	f241 41cf 	movw	r1, #5327	@ 0x14cf
 80073e2:	4841      	ldr	r0, [pc, #260]	@ (80074e8 <HAL_TIM_ConfigClockSource+0x2d4>)
 80073e4:	f7f9 fc78 	bl	8000cd8 <assert_failed>
      break;
 80073e8:	e275      	b.n	80078d6 <HAL_TIM_ConfigClockSource+0x6c2>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a3f      	ldr	r2, [pc, #252]	@ (80074ec <HAL_TIM_ConfigClockSource+0x2d8>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d027      	beq.n	8007444 <HAL_TIM_ConfigClockSource+0x230>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073fc:	d022      	beq.n	8007444 <HAL_TIM_ConfigClockSource+0x230>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a3b      	ldr	r2, [pc, #236]	@ (80074f0 <HAL_TIM_ConfigClockSource+0x2dc>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d01d      	beq.n	8007444 <HAL_TIM_ConfigClockSource+0x230>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a39      	ldr	r2, [pc, #228]	@ (80074f4 <HAL_TIM_ConfigClockSource+0x2e0>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d018      	beq.n	8007444 <HAL_TIM_ConfigClockSource+0x230>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a38      	ldr	r2, [pc, #224]	@ (80074f8 <HAL_TIM_ConfigClockSource+0x2e4>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d013      	beq.n	8007444 <HAL_TIM_ConfigClockSource+0x230>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a38      	ldr	r2, [pc, #224]	@ (8007504 <HAL_TIM_ConfigClockSource+0x2f0>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d00e      	beq.n	8007444 <HAL_TIM_ConfigClockSource+0x230>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a37      	ldr	r2, [pc, #220]	@ (8007508 <HAL_TIM_ConfigClockSource+0x2f4>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d009      	beq.n	8007444 <HAL_TIM_ConfigClockSource+0x230>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a37      	ldr	r2, [pc, #220]	@ (8007514 <HAL_TIM_ConfigClockSource+0x300>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d004      	beq.n	8007444 <HAL_TIM_ConfigClockSource+0x230>
 800743a:	f241 41d6 	movw	r1, #5334	@ 0x14d6
 800743e:	482a      	ldr	r0, [pc, #168]	@ (80074e8 <HAL_TIM_ConfigClockSource+0x2d4>)
 8007440:	f7f9 fc4a 	bl	8000cd8 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d013      	beq.n	8007474 <HAL_TIM_ConfigClockSource+0x260>
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007454:	d00e      	beq.n	8007474 <HAL_TIM_ConfigClockSource+0x260>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800745e:	d009      	beq.n	8007474 <HAL_TIM_ConfigClockSource+0x260>
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007468:	d004      	beq.n	8007474 <HAL_TIM_ConfigClockSource+0x260>
 800746a:	f241 41d9 	movw	r1, #5337	@ 0x14d9
 800746e:	481e      	ldr	r0, [pc, #120]	@ (80074e8 <HAL_TIM_ConfigClockSource+0x2d4>)
 8007470:	f7f9 fc32 	bl	8000cd8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800747c:	d014      	beq.n	80074a8 <HAL_TIM_ConfigClockSource+0x294>
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d010      	beq.n	80074a8 <HAL_TIM_ConfigClockSource+0x294>
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00c      	beq.n	80074a8 <HAL_TIM_ConfigClockSource+0x294>
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	2b02      	cmp	r3, #2
 8007494:	d008      	beq.n	80074a8 <HAL_TIM_ConfigClockSource+0x294>
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	2b0a      	cmp	r3, #10
 800749c:	d004      	beq.n	80074a8 <HAL_TIM_ConfigClockSource+0x294>
 800749e:	f241 41da 	movw	r1, #5338	@ 0x14da
 80074a2:	4811      	ldr	r0, [pc, #68]	@ (80074e8 <HAL_TIM_ConfigClockSource+0x2d4>)
 80074a4:	f7f9 fc18 	bl	8000cd8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	2b0f      	cmp	r3, #15
 80074ae:	d904      	bls.n	80074ba <HAL_TIM_ConfigClockSource+0x2a6>
 80074b0:	f241 41db 	movw	r1, #5339	@ 0x14db
 80074b4:	480c      	ldr	r0, [pc, #48]	@ (80074e8 <HAL_TIM_ConfigClockSource+0x2d4>)
 80074b6:	f7f9 fc0f 	bl	8000cd8 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80074ca:	f000 fdab 	bl	8008024 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80074dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	609a      	str	r2, [r3, #8]
      break;
 80074e6:	e1f7      	b.n	80078d8 <HAL_TIM_ConfigClockSource+0x6c4>
 80074e8:	0800d7b8 	.word	0x0800d7b8
 80074ec:	40010000 	.word	0x40010000
 80074f0:	40000400 	.word	0x40000400
 80074f4:	40000800 	.word	0x40000800
 80074f8:	40000c00 	.word	0x40000c00
 80074fc:	40001000 	.word	0x40001000
 8007500:	40001400 	.word	0x40001400
 8007504:	40010400 	.word	0x40010400
 8007508:	40014000 	.word	0x40014000
 800750c:	40014400 	.word	0x40014400
 8007510:	40014800 	.word	0x40014800
 8007514:	40001800 	.word	0x40001800
 8007518:	40001c00 	.word	0x40001c00
 800751c:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a67      	ldr	r2, [pc, #412]	@ (80076c4 <HAL_TIM_ConfigClockSource+0x4b0>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d01d      	beq.n	8007566 <HAL_TIM_ConfigClockSource+0x352>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007532:	d018      	beq.n	8007566 <HAL_TIM_ConfigClockSource+0x352>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a63      	ldr	r2, [pc, #396]	@ (80076c8 <HAL_TIM_ConfigClockSource+0x4b4>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d013      	beq.n	8007566 <HAL_TIM_ConfigClockSource+0x352>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a62      	ldr	r2, [pc, #392]	@ (80076cc <HAL_TIM_ConfigClockSource+0x4b8>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d00e      	beq.n	8007566 <HAL_TIM_ConfigClockSource+0x352>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a60      	ldr	r2, [pc, #384]	@ (80076d0 <HAL_TIM_ConfigClockSource+0x4bc>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d009      	beq.n	8007566 <HAL_TIM_ConfigClockSource+0x352>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a5f      	ldr	r2, [pc, #380]	@ (80076d4 <HAL_TIM_ConfigClockSource+0x4c0>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d004      	beq.n	8007566 <HAL_TIM_ConfigClockSource+0x352>
 800755c:	f241 41ee 	movw	r1, #5358	@ 0x14ee
 8007560:	485d      	ldr	r0, [pc, #372]	@ (80076d8 <HAL_TIM_ConfigClockSource+0x4c4>)
 8007562:	f7f9 fbb9 	bl	8000cd8 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d013      	beq.n	8007596 <HAL_TIM_ConfigClockSource+0x382>
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007576:	d00e      	beq.n	8007596 <HAL_TIM_ConfigClockSource+0x382>
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007580:	d009      	beq.n	8007596 <HAL_TIM_ConfigClockSource+0x382>
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800758a:	d004      	beq.n	8007596 <HAL_TIM_ConfigClockSource+0x382>
 800758c:	f241 41f1 	movw	r1, #5361	@ 0x14f1
 8007590:	4851      	ldr	r0, [pc, #324]	@ (80076d8 <HAL_TIM_ConfigClockSource+0x4c4>)
 8007592:	f7f9 fba1 	bl	8000cd8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800759e:	d014      	beq.n	80075ca <HAL_TIM_ConfigClockSource+0x3b6>
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d010      	beq.n	80075ca <HAL_TIM_ConfigClockSource+0x3b6>
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00c      	beq.n	80075ca <HAL_TIM_ConfigClockSource+0x3b6>
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d008      	beq.n	80075ca <HAL_TIM_ConfigClockSource+0x3b6>
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	2b0a      	cmp	r3, #10
 80075be:	d004      	beq.n	80075ca <HAL_TIM_ConfigClockSource+0x3b6>
 80075c0:	f241 41f2 	movw	r1, #5362	@ 0x14f2
 80075c4:	4844      	ldr	r0, [pc, #272]	@ (80076d8 <HAL_TIM_ConfigClockSource+0x4c4>)
 80075c6:	f7f9 fb87 	bl	8000cd8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	2b0f      	cmp	r3, #15
 80075d0:	d904      	bls.n	80075dc <HAL_TIM_ConfigClockSource+0x3c8>
 80075d2:	f241 41f3 	movw	r1, #5363	@ 0x14f3
 80075d6:	4840      	ldr	r0, [pc, #256]	@ (80076d8 <HAL_TIM_ConfigClockSource+0x4c4>)
 80075d8:	f7f9 fb7e 	bl	8000cd8 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80075ec:	f000 fd1a 	bl	8008024 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	689a      	ldr	r2, [r3, #8]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80075fe:	609a      	str	r2, [r3, #8]
      break;
 8007600:	e16a      	b.n	80078d8 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a2f      	ldr	r2, [pc, #188]	@ (80076c4 <HAL_TIM_ConfigClockSource+0x4b0>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d027      	beq.n	800765c <HAL_TIM_ConfigClockSource+0x448>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007614:	d022      	beq.n	800765c <HAL_TIM_ConfigClockSource+0x448>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a2b      	ldr	r2, [pc, #172]	@ (80076c8 <HAL_TIM_ConfigClockSource+0x4b4>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d01d      	beq.n	800765c <HAL_TIM_ConfigClockSource+0x448>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a29      	ldr	r2, [pc, #164]	@ (80076cc <HAL_TIM_ConfigClockSource+0x4b8>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d018      	beq.n	800765c <HAL_TIM_ConfigClockSource+0x448>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a28      	ldr	r2, [pc, #160]	@ (80076d0 <HAL_TIM_ConfigClockSource+0x4bc>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d013      	beq.n	800765c <HAL_TIM_ConfigClockSource+0x448>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a26      	ldr	r2, [pc, #152]	@ (80076d4 <HAL_TIM_ConfigClockSource+0x4c0>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d00e      	beq.n	800765c <HAL_TIM_ConfigClockSource+0x448>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a26      	ldr	r2, [pc, #152]	@ (80076dc <HAL_TIM_ConfigClockSource+0x4c8>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d009      	beq.n	800765c <HAL_TIM_ConfigClockSource+0x448>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a24      	ldr	r2, [pc, #144]	@ (80076e0 <HAL_TIM_ConfigClockSource+0x4cc>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d004      	beq.n	800765c <HAL_TIM_ConfigClockSource+0x448>
 8007652:	f241 5102 	movw	r1, #5378	@ 0x1502
 8007656:	4820      	ldr	r0, [pc, #128]	@ (80076d8 <HAL_TIM_ConfigClockSource+0x4c4>)
 8007658:	f7f9 fb3e 	bl	8000cd8 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007664:	d014      	beq.n	8007690 <HAL_TIM_ConfigClockSource+0x47c>
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d010      	beq.n	8007690 <HAL_TIM_ConfigClockSource+0x47c>
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00c      	beq.n	8007690 <HAL_TIM_ConfigClockSource+0x47c>
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	2b02      	cmp	r3, #2
 800767c:	d008      	beq.n	8007690 <HAL_TIM_ConfigClockSource+0x47c>
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	2b0a      	cmp	r3, #10
 8007684:	d004      	beq.n	8007690 <HAL_TIM_ConfigClockSource+0x47c>
 8007686:	f241 5105 	movw	r1, #5381	@ 0x1505
 800768a:	4813      	ldr	r0, [pc, #76]	@ (80076d8 <HAL_TIM_ConfigClockSource+0x4c4>)
 800768c:	f7f9 fb24 	bl	8000cd8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	2b0f      	cmp	r3, #15
 8007696:	d904      	bls.n	80076a2 <HAL_TIM_ConfigClockSource+0x48e>
 8007698:	f241 5106 	movw	r1, #5382	@ 0x1506
 800769c:	480e      	ldr	r0, [pc, #56]	@ (80076d8 <HAL_TIM_ConfigClockSource+0x4c4>)
 800769e:	f7f9 fb1b 	bl	8000cd8 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076ae:	461a      	mov	r2, r3
 80076b0:	f000 fc3e 	bl	8007f30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2150      	movs	r1, #80	@ 0x50
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 fc97 	bl	8007fee <TIM_ITRx_SetConfig>
      break;
 80076c0:	e10a      	b.n	80078d8 <HAL_TIM_ConfigClockSource+0x6c4>
 80076c2:	bf00      	nop
 80076c4:	40010000 	.word	0x40010000
 80076c8:	40000400 	.word	0x40000400
 80076cc:	40000800 	.word	0x40000800
 80076d0:	40000c00 	.word	0x40000c00
 80076d4:	40010400 	.word	0x40010400
 80076d8:	0800d7b8 	.word	0x0800d7b8
 80076dc:	40014000 	.word	0x40014000
 80076e0:	40001800 	.word	0x40001800
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a82      	ldr	r2, [pc, #520]	@ (80078f4 <HAL_TIM_ConfigClockSource+0x6e0>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d027      	beq.n	800773e <HAL_TIM_ConfigClockSource+0x52a>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076f6:	d022      	beq.n	800773e <HAL_TIM_ConfigClockSource+0x52a>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a7e      	ldr	r2, [pc, #504]	@ (80078f8 <HAL_TIM_ConfigClockSource+0x6e4>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d01d      	beq.n	800773e <HAL_TIM_ConfigClockSource+0x52a>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a7d      	ldr	r2, [pc, #500]	@ (80078fc <HAL_TIM_ConfigClockSource+0x6e8>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d018      	beq.n	800773e <HAL_TIM_ConfigClockSource+0x52a>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a7b      	ldr	r2, [pc, #492]	@ (8007900 <HAL_TIM_ConfigClockSource+0x6ec>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d013      	beq.n	800773e <HAL_TIM_ConfigClockSource+0x52a>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a7a      	ldr	r2, [pc, #488]	@ (8007904 <HAL_TIM_ConfigClockSource+0x6f0>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d00e      	beq.n	800773e <HAL_TIM_ConfigClockSource+0x52a>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a78      	ldr	r2, [pc, #480]	@ (8007908 <HAL_TIM_ConfigClockSource+0x6f4>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d009      	beq.n	800773e <HAL_TIM_ConfigClockSource+0x52a>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a77      	ldr	r2, [pc, #476]	@ (800790c <HAL_TIM_ConfigClockSource+0x6f8>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d004      	beq.n	800773e <HAL_TIM_ConfigClockSource+0x52a>
 8007734:	f241 5112 	movw	r1, #5394	@ 0x1512
 8007738:	4875      	ldr	r0, [pc, #468]	@ (8007910 <HAL_TIM_ConfigClockSource+0x6fc>)
 800773a:	f7f9 facd 	bl	8000cd8 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007746:	d014      	beq.n	8007772 <HAL_TIM_ConfigClockSource+0x55e>
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d010      	beq.n	8007772 <HAL_TIM_ConfigClockSource+0x55e>
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00c      	beq.n	8007772 <HAL_TIM_ConfigClockSource+0x55e>
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	2b02      	cmp	r3, #2
 800775e:	d008      	beq.n	8007772 <HAL_TIM_ConfigClockSource+0x55e>
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	2b0a      	cmp	r3, #10
 8007766:	d004      	beq.n	8007772 <HAL_TIM_ConfigClockSource+0x55e>
 8007768:	f241 5115 	movw	r1, #5397	@ 0x1515
 800776c:	4868      	ldr	r0, [pc, #416]	@ (8007910 <HAL_TIM_ConfigClockSource+0x6fc>)
 800776e:	f7f9 fab3 	bl	8000cd8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	2b0f      	cmp	r3, #15
 8007778:	d904      	bls.n	8007784 <HAL_TIM_ConfigClockSource+0x570>
 800777a:	f241 5116 	movw	r1, #5398	@ 0x1516
 800777e:	4864      	ldr	r0, [pc, #400]	@ (8007910 <HAL_TIM_ConfigClockSource+0x6fc>)
 8007780:	f7f9 faaa 	bl	8000cd8 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007790:	461a      	mov	r2, r3
 8007792:	f000 fbfc 	bl	8007f8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2160      	movs	r1, #96	@ 0x60
 800779c:	4618      	mov	r0, r3
 800779e:	f000 fc26 	bl	8007fee <TIM_ITRx_SetConfig>
      break;
 80077a2:	e099      	b.n	80078d8 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a52      	ldr	r2, [pc, #328]	@ (80078f4 <HAL_TIM_ConfigClockSource+0x6e0>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d027      	beq.n	80077fe <HAL_TIM_ConfigClockSource+0x5ea>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077b6:	d022      	beq.n	80077fe <HAL_TIM_ConfigClockSource+0x5ea>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a4e      	ldr	r2, [pc, #312]	@ (80078f8 <HAL_TIM_ConfigClockSource+0x6e4>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d01d      	beq.n	80077fe <HAL_TIM_ConfigClockSource+0x5ea>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a4d      	ldr	r2, [pc, #308]	@ (80078fc <HAL_TIM_ConfigClockSource+0x6e8>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d018      	beq.n	80077fe <HAL_TIM_ConfigClockSource+0x5ea>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a4b      	ldr	r2, [pc, #300]	@ (8007900 <HAL_TIM_ConfigClockSource+0x6ec>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d013      	beq.n	80077fe <HAL_TIM_ConfigClockSource+0x5ea>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a4a      	ldr	r2, [pc, #296]	@ (8007904 <HAL_TIM_ConfigClockSource+0x6f0>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d00e      	beq.n	80077fe <HAL_TIM_ConfigClockSource+0x5ea>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a48      	ldr	r2, [pc, #288]	@ (8007908 <HAL_TIM_ConfigClockSource+0x6f4>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d009      	beq.n	80077fe <HAL_TIM_ConfigClockSource+0x5ea>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a47      	ldr	r2, [pc, #284]	@ (800790c <HAL_TIM_ConfigClockSource+0x6f8>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d004      	beq.n	80077fe <HAL_TIM_ConfigClockSource+0x5ea>
 80077f4:	f241 5122 	movw	r1, #5410	@ 0x1522
 80077f8:	4845      	ldr	r0, [pc, #276]	@ (8007910 <HAL_TIM_ConfigClockSource+0x6fc>)
 80077fa:	f7f9 fa6d 	bl	8000cd8 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007806:	d014      	beq.n	8007832 <HAL_TIM_ConfigClockSource+0x61e>
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d010      	beq.n	8007832 <HAL_TIM_ConfigClockSource+0x61e>
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00c      	beq.n	8007832 <HAL_TIM_ConfigClockSource+0x61e>
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	2b02      	cmp	r3, #2
 800781e:	d008      	beq.n	8007832 <HAL_TIM_ConfigClockSource+0x61e>
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	2b0a      	cmp	r3, #10
 8007826:	d004      	beq.n	8007832 <HAL_TIM_ConfigClockSource+0x61e>
 8007828:	f241 5125 	movw	r1, #5413	@ 0x1525
 800782c:	4838      	ldr	r0, [pc, #224]	@ (8007910 <HAL_TIM_ConfigClockSource+0x6fc>)
 800782e:	f7f9 fa53 	bl	8000cd8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	2b0f      	cmp	r3, #15
 8007838:	d904      	bls.n	8007844 <HAL_TIM_ConfigClockSource+0x630>
 800783a:	f241 5126 	movw	r1, #5414	@ 0x1526
 800783e:	4834      	ldr	r0, [pc, #208]	@ (8007910 <HAL_TIM_ConfigClockSource+0x6fc>)
 8007840:	f7f9 fa4a 	bl	8000cd8 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007850:	461a      	mov	r2, r3
 8007852:	f000 fb6d 	bl	8007f30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2140      	movs	r1, #64	@ 0x40
 800785c:	4618      	mov	r0, r3
 800785e:	f000 fbc6 	bl	8007fee <TIM_ITRx_SetConfig>
      break;
 8007862:	e039      	b.n	80078d8 <HAL_TIM_ConfigClockSource+0x6c4>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a22      	ldr	r2, [pc, #136]	@ (80078f4 <HAL_TIM_ConfigClockSource+0x6e0>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d027      	beq.n	80078be <HAL_TIM_ConfigClockSource+0x6aa>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007876:	d022      	beq.n	80078be <HAL_TIM_ConfigClockSource+0x6aa>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a1e      	ldr	r2, [pc, #120]	@ (80078f8 <HAL_TIM_ConfigClockSource+0x6e4>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d01d      	beq.n	80078be <HAL_TIM_ConfigClockSource+0x6aa>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a1d      	ldr	r2, [pc, #116]	@ (80078fc <HAL_TIM_ConfigClockSource+0x6e8>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d018      	beq.n	80078be <HAL_TIM_ConfigClockSource+0x6aa>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a1b      	ldr	r2, [pc, #108]	@ (8007900 <HAL_TIM_ConfigClockSource+0x6ec>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d013      	beq.n	80078be <HAL_TIM_ConfigClockSource+0x6aa>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a1a      	ldr	r2, [pc, #104]	@ (8007904 <HAL_TIM_ConfigClockSource+0x6f0>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d00e      	beq.n	80078be <HAL_TIM_ConfigClockSource+0x6aa>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a18      	ldr	r2, [pc, #96]	@ (8007908 <HAL_TIM_ConfigClockSource+0x6f4>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d009      	beq.n	80078be <HAL_TIM_ConfigClockSource+0x6aa>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a17      	ldr	r2, [pc, #92]	@ (800790c <HAL_TIM_ConfigClockSource+0x6f8>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d004      	beq.n	80078be <HAL_TIM_ConfigClockSource+0x6aa>
 80078b4:	f241 5135 	movw	r1, #5429	@ 0x1535
 80078b8:	4815      	ldr	r0, [pc, #84]	@ (8007910 <HAL_TIM_ConfigClockSource+0x6fc>)
 80078ba:	f7f9 fa0d 	bl	8000cd8 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4619      	mov	r1, r3
 80078c8:	4610      	mov	r0, r2
 80078ca:	f000 fb90 	bl	8007fee <TIM_ITRx_SetConfig>
      break;
 80078ce:	e003      	b.n	80078d8 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    default:
      status = HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	73fb      	strb	r3, [r7, #15]
      break;
 80078d4:	e000      	b.n	80078d8 <HAL_TIM_ConfigClockSource+0x6c4>
      break;
 80078d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	40010000 	.word	0x40010000
 80078f8:	40000400 	.word	0x40000400
 80078fc:	40000800 	.word	0x40000800
 8007900:	40000c00 	.word	0x40000c00
 8007904:	40010400 	.word	0x40010400
 8007908:	40014000 	.word	0x40014000
 800790c:	40001800 	.word	0x40001800
 8007910:	0800d7b8 	.word	0x0800d7b8

08007914 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800791c:	bf00      	nop
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007930:	bf00      	nop
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007944:	bf00      	nop
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a46      	ldr	r2, [pc, #280]	@ (8007a90 <TIM_Base_SetConfig+0x12c>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d013      	beq.n	80079a4 <TIM_Base_SetConfig+0x40>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007982:	d00f      	beq.n	80079a4 <TIM_Base_SetConfig+0x40>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a43      	ldr	r2, [pc, #268]	@ (8007a94 <TIM_Base_SetConfig+0x130>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d00b      	beq.n	80079a4 <TIM_Base_SetConfig+0x40>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a42      	ldr	r2, [pc, #264]	@ (8007a98 <TIM_Base_SetConfig+0x134>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d007      	beq.n	80079a4 <TIM_Base_SetConfig+0x40>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a41      	ldr	r2, [pc, #260]	@ (8007a9c <TIM_Base_SetConfig+0x138>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d003      	beq.n	80079a4 <TIM_Base_SetConfig+0x40>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a40      	ldr	r2, [pc, #256]	@ (8007aa0 <TIM_Base_SetConfig+0x13c>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d108      	bne.n	80079b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a35      	ldr	r2, [pc, #212]	@ (8007a90 <TIM_Base_SetConfig+0x12c>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d02b      	beq.n	8007a16 <TIM_Base_SetConfig+0xb2>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079c4:	d027      	beq.n	8007a16 <TIM_Base_SetConfig+0xb2>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a32      	ldr	r2, [pc, #200]	@ (8007a94 <TIM_Base_SetConfig+0x130>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d023      	beq.n	8007a16 <TIM_Base_SetConfig+0xb2>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a31      	ldr	r2, [pc, #196]	@ (8007a98 <TIM_Base_SetConfig+0x134>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d01f      	beq.n	8007a16 <TIM_Base_SetConfig+0xb2>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a30      	ldr	r2, [pc, #192]	@ (8007a9c <TIM_Base_SetConfig+0x138>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d01b      	beq.n	8007a16 <TIM_Base_SetConfig+0xb2>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a2f      	ldr	r2, [pc, #188]	@ (8007aa0 <TIM_Base_SetConfig+0x13c>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d017      	beq.n	8007a16 <TIM_Base_SetConfig+0xb2>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a2e      	ldr	r2, [pc, #184]	@ (8007aa4 <TIM_Base_SetConfig+0x140>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d013      	beq.n	8007a16 <TIM_Base_SetConfig+0xb2>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a2d      	ldr	r2, [pc, #180]	@ (8007aa8 <TIM_Base_SetConfig+0x144>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d00f      	beq.n	8007a16 <TIM_Base_SetConfig+0xb2>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a2c      	ldr	r2, [pc, #176]	@ (8007aac <TIM_Base_SetConfig+0x148>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d00b      	beq.n	8007a16 <TIM_Base_SetConfig+0xb2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a2b      	ldr	r2, [pc, #172]	@ (8007ab0 <TIM_Base_SetConfig+0x14c>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d007      	beq.n	8007a16 <TIM_Base_SetConfig+0xb2>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a2a      	ldr	r2, [pc, #168]	@ (8007ab4 <TIM_Base_SetConfig+0x150>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d003      	beq.n	8007a16 <TIM_Base_SetConfig+0xb2>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a29      	ldr	r2, [pc, #164]	@ (8007ab8 <TIM_Base_SetConfig+0x154>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d108      	bne.n	8007a28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	695b      	ldr	r3, [r3, #20]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	689a      	ldr	r2, [r3, #8]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a10      	ldr	r2, [pc, #64]	@ (8007a90 <TIM_Base_SetConfig+0x12c>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d003      	beq.n	8007a5c <TIM_Base_SetConfig+0xf8>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a12      	ldr	r2, [pc, #72]	@ (8007aa0 <TIM_Base_SetConfig+0x13c>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d103      	bne.n	8007a64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	691a      	ldr	r2, [r3, #16]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	f003 0301 	and.w	r3, r3, #1
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d105      	bne.n	8007a82 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	f023 0201 	bic.w	r2, r3, #1
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	611a      	str	r2, [r3, #16]
  }
}
 8007a82:	bf00      	nop
 8007a84:	3714      	adds	r7, #20
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	40010000 	.word	0x40010000
 8007a94:	40000400 	.word	0x40000400
 8007a98:	40000800 	.word	0x40000800
 8007a9c:	40000c00 	.word	0x40000c00
 8007aa0:	40010400 	.word	0x40010400
 8007aa4:	40014000 	.word	0x40014000
 8007aa8:	40014400 	.word	0x40014400
 8007aac:	40014800 	.word	0x40014800
 8007ab0:	40001800 	.word	0x40001800
 8007ab4:	40001c00 	.word	0x40001c00
 8007ab8:	40002000 	.word	0x40002000

08007abc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b086      	sub	sp, #24
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a1b      	ldr	r3, [r3, #32]
 8007aca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a1b      	ldr	r3, [r3, #32]
 8007ad0:	f023 0201 	bic.w	r2, r3, #1
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f023 0303 	bic.w	r3, r3, #3
 8007af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	f023 0302 	bic.w	r3, r3, #2
 8007b04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a34      	ldr	r2, [pc, #208]	@ (8007be4 <TIM_OC1_SetConfig+0x128>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d003      	beq.n	8007b20 <TIM_OC1_SetConfig+0x64>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a33      	ldr	r2, [pc, #204]	@ (8007be8 <TIM_OC1_SetConfig+0x12c>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d119      	bne.n	8007b54 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d008      	beq.n	8007b3a <TIM_OC1_SetConfig+0x7e>
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	2b08      	cmp	r3, #8
 8007b2e:	d004      	beq.n	8007b3a <TIM_OC1_SetConfig+0x7e>
 8007b30:	f641 21d0 	movw	r1, #6864	@ 0x1ad0
 8007b34:	482d      	ldr	r0, [pc, #180]	@ (8007bec <TIM_OC1_SetConfig+0x130>)
 8007b36:	f7f9 f8cf 	bl	8000cd8 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	f023 0308 	bic.w	r3, r3, #8
 8007b40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	f023 0304 	bic.w	r3, r3, #4
 8007b52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a23      	ldr	r2, [pc, #140]	@ (8007be4 <TIM_OC1_SetConfig+0x128>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d003      	beq.n	8007b64 <TIM_OC1_SetConfig+0xa8>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a22      	ldr	r2, [pc, #136]	@ (8007be8 <TIM_OC1_SetConfig+0x12c>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d12d      	bne.n	8007bc0 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b6c:	d008      	beq.n	8007b80 <TIM_OC1_SetConfig+0xc4>
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d004      	beq.n	8007b80 <TIM_OC1_SetConfig+0xc4>
 8007b76:	f641 21dd 	movw	r1, #6877	@ 0x1add
 8007b7a:	481c      	ldr	r0, [pc, #112]	@ (8007bec <TIM_OC1_SetConfig+0x130>)
 8007b7c:	f7f9 f8ac 	bl	8000cd8 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b88:	d008      	beq.n	8007b9c <TIM_OC1_SetConfig+0xe0>
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	695b      	ldr	r3, [r3, #20]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d004      	beq.n	8007b9c <TIM_OC1_SetConfig+0xe0>
 8007b92:	f641 21de 	movw	r1, #6878	@ 0x1ade
 8007b96:	4815      	ldr	r0, [pc, #84]	@ (8007bec <TIM_OC1_SetConfig+0x130>)
 8007b98:	f7f9 f89e 	bl	8000cd8 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ba2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007baa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	693a      	ldr	r2, [r7, #16]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	693a      	ldr	r2, [r7, #16]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	685a      	ldr	r2, [r3, #4]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	621a      	str	r2, [r3, #32]
}
 8007bda:	bf00      	nop
 8007bdc:	3718      	adds	r7, #24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	40010000 	.word	0x40010000
 8007be8:	40010400 	.word	0x40010400
 8007bec:	0800d7b8 	.word	0x0800d7b8

08007bf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a1b      	ldr	r3, [r3, #32]
 8007bfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a1b      	ldr	r3, [r3, #32]
 8007c04:	f023 0210 	bic.w	r2, r3, #16
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	021b      	lsls	r3, r3, #8
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	f023 0320 	bic.w	r3, r3, #32
 8007c3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	011b      	lsls	r3, r3, #4
 8007c42:	697a      	ldr	r2, [r7, #20]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a35      	ldr	r2, [pc, #212]	@ (8007d20 <TIM_OC2_SetConfig+0x130>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d003      	beq.n	8007c58 <TIM_OC2_SetConfig+0x68>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a34      	ldr	r2, [pc, #208]	@ (8007d24 <TIM_OC2_SetConfig+0x134>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d11a      	bne.n	8007c8e <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d008      	beq.n	8007c72 <TIM_OC2_SetConfig+0x82>
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	2b08      	cmp	r3, #8
 8007c66:	d004      	beq.n	8007c72 <TIM_OC2_SetConfig+0x82>
 8007c68:	f641 311c 	movw	r1, #6940	@ 0x1b1c
 8007c6c:	482e      	ldr	r0, [pc, #184]	@ (8007d28 <TIM_OC2_SetConfig+0x138>)
 8007c6e:	f7f9 f833 	bl	8000cd8 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	011b      	lsls	r3, r3, #4
 8007c80:	697a      	ldr	r2, [r7, #20]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a23      	ldr	r2, [pc, #140]	@ (8007d20 <TIM_OC2_SetConfig+0x130>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d003      	beq.n	8007c9e <TIM_OC2_SetConfig+0xae>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a22      	ldr	r2, [pc, #136]	@ (8007d24 <TIM_OC2_SetConfig+0x134>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d12f      	bne.n	8007cfe <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	699b      	ldr	r3, [r3, #24]
 8007ca2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ca6:	d008      	beq.n	8007cba <TIM_OC2_SetConfig+0xca>
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d004      	beq.n	8007cba <TIM_OC2_SetConfig+0xca>
 8007cb0:	f641 3129 	movw	r1, #6953	@ 0x1b29
 8007cb4:	481c      	ldr	r0, [pc, #112]	@ (8007d28 <TIM_OC2_SetConfig+0x138>)
 8007cb6:	f7f9 f80f 	bl	8000cd8 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cc2:	d008      	beq.n	8007cd6 <TIM_OC2_SetConfig+0xe6>
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	695b      	ldr	r3, [r3, #20]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d004      	beq.n	8007cd6 <TIM_OC2_SetConfig+0xe6>
 8007ccc:	f641 312a 	movw	r1, #6954	@ 0x1b2a
 8007cd0:	4815      	ldr	r0, [pc, #84]	@ (8007d28 <TIM_OC2_SetConfig+0x138>)
 8007cd2:	f7f9 f801 	bl	8000cd8 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007cdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	695b      	ldr	r3, [r3, #20]
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	693a      	ldr	r2, [r7, #16]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	693a      	ldr	r2, [r7, #16]
 8007d02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	685a      	ldr	r2, [r3, #4]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	621a      	str	r2, [r3, #32]
}
 8007d18:	bf00      	nop
 8007d1a:	3718      	adds	r7, #24
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	40010000 	.word	0x40010000
 8007d24:	40010400 	.word	0x40010400
 8007d28:	0800d7b8 	.word	0x0800d7b8

08007d2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a1b      	ldr	r3, [r3, #32]
 8007d3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a1b      	ldr	r3, [r3, #32]
 8007d40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	69db      	ldr	r3, [r3, #28]
 8007d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f023 0303 	bic.w	r3, r3, #3
 8007d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	021b      	lsls	r3, r3, #8
 8007d7c:	697a      	ldr	r2, [r7, #20]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a35      	ldr	r2, [pc, #212]	@ (8007e5c <TIM_OC3_SetConfig+0x130>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d003      	beq.n	8007d92 <TIM_OC3_SetConfig+0x66>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a34      	ldr	r2, [pc, #208]	@ (8007e60 <TIM_OC3_SetConfig+0x134>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d11a      	bne.n	8007dc8 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d008      	beq.n	8007dac <TIM_OC3_SetConfig+0x80>
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	2b08      	cmp	r3, #8
 8007da0:	d004      	beq.n	8007dac <TIM_OC3_SetConfig+0x80>
 8007da2:	f641 3167 	movw	r1, #7015	@ 0x1b67
 8007da6:	482f      	ldr	r0, [pc, #188]	@ (8007e64 <TIM_OC3_SetConfig+0x138>)
 8007da8:	f7f8 ff96 	bl	8000cd8 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007db2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	021b      	lsls	r3, r3, #8
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007dc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a24      	ldr	r2, [pc, #144]	@ (8007e5c <TIM_OC3_SetConfig+0x130>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d003      	beq.n	8007dd8 <TIM_OC3_SetConfig+0xac>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a23      	ldr	r2, [pc, #140]	@ (8007e60 <TIM_OC3_SetConfig+0x134>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d12f      	bne.n	8007e38 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	699b      	ldr	r3, [r3, #24]
 8007ddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007de0:	d008      	beq.n	8007df4 <TIM_OC3_SetConfig+0xc8>
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	699b      	ldr	r3, [r3, #24]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d004      	beq.n	8007df4 <TIM_OC3_SetConfig+0xc8>
 8007dea:	f641 3174 	movw	r1, #7028	@ 0x1b74
 8007dee:	481d      	ldr	r0, [pc, #116]	@ (8007e64 <TIM_OC3_SetConfig+0x138>)
 8007df0:	f7f8 ff72 	bl	8000cd8 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	695b      	ldr	r3, [r3, #20]
 8007df8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dfc:	d008      	beq.n	8007e10 <TIM_OC3_SetConfig+0xe4>
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	695b      	ldr	r3, [r3, #20]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d004      	beq.n	8007e10 <TIM_OC3_SetConfig+0xe4>
 8007e06:	f641 3175 	movw	r1, #7029	@ 0x1b75
 8007e0a:	4816      	ldr	r0, [pc, #88]	@ (8007e64 <TIM_OC3_SetConfig+0x138>)
 8007e0c:	f7f8 ff64 	bl	8000cd8 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	695b      	ldr	r3, [r3, #20]
 8007e24:	011b      	lsls	r3, r3, #4
 8007e26:	693a      	ldr	r2, [r7, #16]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	699b      	ldr	r3, [r3, #24]
 8007e30:	011b      	lsls	r3, r3, #4
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	693a      	ldr	r2, [r7, #16]
 8007e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	685a      	ldr	r2, [r3, #4]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	697a      	ldr	r2, [r7, #20]
 8007e50:	621a      	str	r2, [r3, #32]
}
 8007e52:	bf00      	nop
 8007e54:	3718      	adds	r7, #24
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	40010000 	.word	0x40010000
 8007e60:	40010400 	.word	0x40010400
 8007e64:	0800d7b8 	.word	0x0800d7b8

08007e68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a1b      	ldr	r3, [r3, #32]
 8007e76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a1b      	ldr	r3, [r3, #32]
 8007e7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	69db      	ldr	r3, [r3, #28]
 8007e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	021b      	lsls	r3, r3, #8
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007eb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	031b      	lsls	r3, r3, #12
 8007eba:	693a      	ldr	r2, [r7, #16]
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a18      	ldr	r2, [pc, #96]	@ (8007f24 <TIM_OC4_SetConfig+0xbc>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d003      	beq.n	8007ed0 <TIM_OC4_SetConfig+0x68>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4a17      	ldr	r2, [pc, #92]	@ (8007f28 <TIM_OC4_SetConfig+0xc0>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d117      	bne.n	8007f00 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	695b      	ldr	r3, [r3, #20]
 8007ed4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ed8:	d008      	beq.n	8007eec <TIM_OC4_SetConfig+0x84>
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d004      	beq.n	8007eec <TIM_OC4_SetConfig+0x84>
 8007ee2:	f641 31b4 	movw	r1, #7092	@ 0x1bb4
 8007ee6:	4811      	ldr	r0, [pc, #68]	@ (8007f2c <TIM_OC4_SetConfig+0xc4>)
 8007ee8:	f7f8 fef6 	bl	8000cd8 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ef2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	695b      	ldr	r3, [r3, #20]
 8007ef8:	019b      	lsls	r3, r3, #6
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	685a      	ldr	r2, [r3, #4]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	693a      	ldr	r2, [r7, #16]
 8007f18:	621a      	str	r2, [r3, #32]
}
 8007f1a:	bf00      	nop
 8007f1c:	3718      	adds	r7, #24
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	40010000 	.word	0x40010000
 8007f28:	40010400 	.word	0x40010400
 8007f2c:	0800d7b8 	.word	0x0800d7b8

08007f30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b087      	sub	sp, #28
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6a1b      	ldr	r3, [r3, #32]
 8007f40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6a1b      	ldr	r3, [r3, #32]
 8007f46:	f023 0201 	bic.w	r2, r3, #1
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	011b      	lsls	r3, r3, #4
 8007f60:	693a      	ldr	r2, [r7, #16]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	f023 030a 	bic.w	r3, r3, #10
 8007f6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	693a      	ldr	r2, [r7, #16]
 8007f7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	697a      	ldr	r2, [r7, #20]
 8007f80:	621a      	str	r2, [r3, #32]
}
 8007f82:	bf00      	nop
 8007f84:	371c      	adds	r7, #28
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr

08007f8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f8e:	b480      	push	{r7}
 8007f90:	b087      	sub	sp, #28
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	60f8      	str	r0, [r7, #12]
 8007f96:	60b9      	str	r1, [r7, #8]
 8007f98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6a1b      	ldr	r3, [r3, #32]
 8007f9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6a1b      	ldr	r3, [r3, #32]
 8007fa4:	f023 0210 	bic.w	r2, r3, #16
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	699b      	ldr	r3, [r3, #24]
 8007fb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007fb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	031b      	lsls	r3, r3, #12
 8007fbe:	693a      	ldr	r2, [r7, #16]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007fca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	011b      	lsls	r3, r3, #4
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	693a      	ldr	r2, [r7, #16]
 8007fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	697a      	ldr	r2, [r7, #20]
 8007fe0:	621a      	str	r2, [r3, #32]
}
 8007fe2:	bf00      	nop
 8007fe4:	371c      	adds	r7, #28
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b085      	sub	sp, #20
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008004:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008006:	683a      	ldr	r2, [r7, #0]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	4313      	orrs	r3, r2
 800800c:	f043 0307 	orr.w	r3, r3, #7
 8008010:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	609a      	str	r2, [r3, #8]
}
 8008018:	bf00      	nop
 800801a:	3714      	adds	r7, #20
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008024:	b480      	push	{r7}
 8008026:	b087      	sub	sp, #28
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
 8008030:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800803e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	021a      	lsls	r2, r3, #8
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	431a      	orrs	r2, r3
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	4313      	orrs	r3, r2
 800804c:	697a      	ldr	r2, [r7, #20]
 800804e:	4313      	orrs	r3, r2
 8008050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	697a      	ldr	r2, [r7, #20]
 8008056:	609a      	str	r2, [r3, #8]
}
 8008058:	bf00      	nop
 800805a:	371c      	adds	r7, #28
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	4a32      	ldr	r2, [pc, #200]	@ (800813c <TIM_CCxChannelCmd+0xd8>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d030      	beq.n	80080da <TIM_CCxChannelCmd+0x76>
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800807e:	d02c      	beq.n	80080da <TIM_CCxChannelCmd+0x76>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	4a2f      	ldr	r2, [pc, #188]	@ (8008140 <TIM_CCxChannelCmd+0xdc>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d028      	beq.n	80080da <TIM_CCxChannelCmd+0x76>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	4a2e      	ldr	r2, [pc, #184]	@ (8008144 <TIM_CCxChannelCmd+0xe0>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d024      	beq.n	80080da <TIM_CCxChannelCmd+0x76>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	4a2d      	ldr	r2, [pc, #180]	@ (8008148 <TIM_CCxChannelCmd+0xe4>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d020      	beq.n	80080da <TIM_CCxChannelCmd+0x76>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	4a2c      	ldr	r2, [pc, #176]	@ (800814c <TIM_CCxChannelCmd+0xe8>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d01c      	beq.n	80080da <TIM_CCxChannelCmd+0x76>
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	4a2b      	ldr	r2, [pc, #172]	@ (8008150 <TIM_CCxChannelCmd+0xec>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d018      	beq.n	80080da <TIM_CCxChannelCmd+0x76>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	4a2a      	ldr	r2, [pc, #168]	@ (8008154 <TIM_CCxChannelCmd+0xf0>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d014      	beq.n	80080da <TIM_CCxChannelCmd+0x76>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	4a29      	ldr	r2, [pc, #164]	@ (8008158 <TIM_CCxChannelCmd+0xf4>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d010      	beq.n	80080da <TIM_CCxChannelCmd+0x76>
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	4a28      	ldr	r2, [pc, #160]	@ (800815c <TIM_CCxChannelCmd+0xf8>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d00c      	beq.n	80080da <TIM_CCxChannelCmd+0x76>
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	4a27      	ldr	r2, [pc, #156]	@ (8008160 <TIM_CCxChannelCmd+0xfc>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d008      	beq.n	80080da <TIM_CCxChannelCmd+0x76>
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	4a26      	ldr	r2, [pc, #152]	@ (8008164 <TIM_CCxChannelCmd+0x100>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d004      	beq.n	80080da <TIM_CCxChannelCmd+0x76>
 80080d0:	f641 519f 	movw	r1, #7583	@ 0x1d9f
 80080d4:	4824      	ldr	r0, [pc, #144]	@ (8008168 <TIM_CCxChannelCmd+0x104>)
 80080d6:	f7f8 fdff 	bl	8000cd8 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d010      	beq.n	8008102 <TIM_CCxChannelCmd+0x9e>
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	2b04      	cmp	r3, #4
 80080e4:	d00d      	beq.n	8008102 <TIM_CCxChannelCmd+0x9e>
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	2b08      	cmp	r3, #8
 80080ea:	d00a      	beq.n	8008102 <TIM_CCxChannelCmd+0x9e>
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	2b0c      	cmp	r3, #12
 80080f0:	d007      	beq.n	8008102 <TIM_CCxChannelCmd+0x9e>
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	2b3c      	cmp	r3, #60	@ 0x3c
 80080f6:	d004      	beq.n	8008102 <TIM_CCxChannelCmd+0x9e>
 80080f8:	f44f 51ed 	mov.w	r1, #7584	@ 0x1da0
 80080fc:	481a      	ldr	r0, [pc, #104]	@ (8008168 <TIM_CCxChannelCmd+0x104>)
 80080fe:	f7f8 fdeb 	bl	8000cd8 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	f003 031f 	and.w	r3, r3, #31
 8008108:	2201      	movs	r2, #1
 800810a:	fa02 f303 	lsl.w	r3, r2, r3
 800810e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6a1a      	ldr	r2, [r3, #32]
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	43db      	mvns	r3, r3
 8008118:	401a      	ands	r2, r3
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6a1a      	ldr	r2, [r3, #32]
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	f003 031f 	and.w	r3, r3, #31
 8008128:	6879      	ldr	r1, [r7, #4]
 800812a:	fa01 f303 	lsl.w	r3, r1, r3
 800812e:	431a      	orrs	r2, r3
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	621a      	str	r2, [r3, #32]
}
 8008134:	bf00      	nop
 8008136:	3718      	adds	r7, #24
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	40010000 	.word	0x40010000
 8008140:	40000400 	.word	0x40000400
 8008144:	40000800 	.word	0x40000800
 8008148:	40000c00 	.word	0x40000c00
 800814c:	40010400 	.word	0x40010400
 8008150:	40014000 	.word	0x40014000
 8008154:	40014400 	.word	0x40014400
 8008158:	40014800 	.word	0x40014800
 800815c:	40001800 	.word	0x40001800
 8008160:	40001c00 	.word	0x40001c00
 8008164:	40002000 	.word	0x40002000
 8008168:	0800d7b8 	.word	0x0800d7b8

0800816c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a61      	ldr	r2, [pc, #388]	@ (8008300 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d027      	beq.n	80081d0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008188:	d022      	beq.n	80081d0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a5d      	ldr	r2, [pc, #372]	@ (8008304 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d01d      	beq.n	80081d0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a5b      	ldr	r2, [pc, #364]	@ (8008308 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d018      	beq.n	80081d0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a5a      	ldr	r2, [pc, #360]	@ (800830c <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d013      	beq.n	80081d0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a58      	ldr	r2, [pc, #352]	@ (8008310 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d00e      	beq.n	80081d0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a57      	ldr	r2, [pc, #348]	@ (8008314 <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d009      	beq.n	80081d0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a55      	ldr	r2, [pc, #340]	@ (8008318 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d004      	beq.n	80081d0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80081c6:	f240 71a9 	movw	r1, #1961	@ 0x7a9
 80081ca:	4854      	ldr	r0, [pc, #336]	@ (800831c <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 80081cc:	f7f8 fd84 	bl	8000cd8 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d020      	beq.n	800821a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2b10      	cmp	r3, #16
 80081de:	d01c      	beq.n	800821a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2b20      	cmp	r3, #32
 80081e6:	d018      	beq.n	800821a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b30      	cmp	r3, #48	@ 0x30
 80081ee:	d014      	beq.n	800821a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2b40      	cmp	r3, #64	@ 0x40
 80081f6:	d010      	beq.n	800821a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2b50      	cmp	r3, #80	@ 0x50
 80081fe:	d00c      	beq.n	800821a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2b60      	cmp	r3, #96	@ 0x60
 8008206:	d008      	beq.n	800821a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2b70      	cmp	r3, #112	@ 0x70
 800820e:	d004      	beq.n	800821a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008210:	f240 71aa 	movw	r1, #1962	@ 0x7aa
 8008214:	4841      	ldr	r0, [pc, #260]	@ (800831c <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8008216:	f7f8 fd5f 	bl	8000cd8 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	2b80      	cmp	r3, #128	@ 0x80
 8008220:	d008      	beq.n	8008234 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d004      	beq.n	8008234 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800822a:	f240 71ab 	movw	r1, #1963	@ 0x7ab
 800822e:	483b      	ldr	r0, [pc, #236]	@ (800831c <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8008230:	f7f8 fd52 	bl	8000cd8 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800823a:	2b01      	cmp	r3, #1
 800823c:	d101      	bne.n	8008242 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800823e:	2302      	movs	r3, #2
 8008240:	e05a      	b.n	80082f8 <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2202      	movs	r2, #2
 800824e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008268:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	4313      	orrs	r3, r2
 8008272:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a1f      	ldr	r2, [pc, #124]	@ (8008300 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d022      	beq.n	80082cc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800828e:	d01d      	beq.n	80082cc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a1b      	ldr	r2, [pc, #108]	@ (8008304 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d018      	beq.n	80082cc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a1a      	ldr	r2, [pc, #104]	@ (8008308 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d013      	beq.n	80082cc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a18      	ldr	r2, [pc, #96]	@ (800830c <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d00e      	beq.n	80082cc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a19      	ldr	r2, [pc, #100]	@ (8008318 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d009      	beq.n	80082cc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a18      	ldr	r2, [pc, #96]	@ (8008320 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d004      	beq.n	80082cc <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a17      	ldr	r2, [pc, #92]	@ (8008324 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d10c      	bne.n	80082e6 <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	4313      	orrs	r3, r2
 80082dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	40010000 	.word	0x40010000
 8008304:	40000400 	.word	0x40000400
 8008308:	40000800 	.word	0x40000800
 800830c:	40000c00 	.word	0x40000c00
 8008310:	40001000 	.word	0x40001000
 8008314:	40001400 	.word	0x40001400
 8008318:	40010400 	.word	0x40010400
 800831c:	0800d830 	.word	0x0800d830
 8008320:	40014000 	.word	0x40014000
 8008324:	40001800 	.word	0x40001800

08008328 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008330:	bf00      	nop
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008344:	bf00      	nop
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d101      	bne.n	8008362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e0b7      	b.n	80084d2 <HAL_UART_Init+0x182>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d031      	beq.n	80083ce <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a5b      	ldr	r2, [pc, #364]	@ (80084dc <HAL_UART_Init+0x18c>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d013      	beq.n	800839c <HAL_UART_Init+0x4c>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a59      	ldr	r2, [pc, #356]	@ (80084e0 <HAL_UART_Init+0x190>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d00e      	beq.n	800839c <HAL_UART_Init+0x4c>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a58      	ldr	r2, [pc, #352]	@ (80084e4 <HAL_UART_Init+0x194>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d009      	beq.n	800839c <HAL_UART_Init+0x4c>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a56      	ldr	r2, [pc, #344]	@ (80084e8 <HAL_UART_Init+0x198>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d004      	beq.n	800839c <HAL_UART_Init+0x4c>
 8008392:	f240 1173 	movw	r1, #371	@ 0x173
 8008396:	4855      	ldr	r0, [pc, #340]	@ (80084ec <HAL_UART_Init+0x19c>)
 8008398:	f7f8 fc9e 	bl	8000cd8 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	699b      	ldr	r3, [r3, #24]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d037      	beq.n	8008414 <HAL_UART_Init+0xc4>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083ac:	d032      	beq.n	8008414 <HAL_UART_Init+0xc4>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	699b      	ldr	r3, [r3, #24]
 80083b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083b6:	d02d      	beq.n	8008414 <HAL_UART_Init+0xc4>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083c0:	d028      	beq.n	8008414 <HAL_UART_Init+0xc4>
 80083c2:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 80083c6:	4849      	ldr	r0, [pc, #292]	@ (80084ec <HAL_UART_Init+0x19c>)
 80083c8:	f7f8 fc86 	bl	8000cd8 <assert_failed>
 80083cc:	e022      	b.n	8008414 <HAL_UART_Init+0xc4>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a42      	ldr	r2, [pc, #264]	@ (80084dc <HAL_UART_Init+0x18c>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d01d      	beq.n	8008414 <HAL_UART_Init+0xc4>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a40      	ldr	r2, [pc, #256]	@ (80084e0 <HAL_UART_Init+0x190>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d018      	beq.n	8008414 <HAL_UART_Init+0xc4>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a3f      	ldr	r2, [pc, #252]	@ (80084e4 <HAL_UART_Init+0x194>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d013      	beq.n	8008414 <HAL_UART_Init+0xc4>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a3f      	ldr	r2, [pc, #252]	@ (80084f0 <HAL_UART_Init+0x1a0>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d00e      	beq.n	8008414 <HAL_UART_Init+0xc4>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a3e      	ldr	r2, [pc, #248]	@ (80084f4 <HAL_UART_Init+0x1a4>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d009      	beq.n	8008414 <HAL_UART_Init+0xc4>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a38      	ldr	r2, [pc, #224]	@ (80084e8 <HAL_UART_Init+0x198>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d004      	beq.n	8008414 <HAL_UART_Init+0xc4>
 800840a:	f44f 71bc 	mov.w	r1, #376	@ 0x178
 800840e:	4837      	ldr	r0, [pc, #220]	@ (80084ec <HAL_UART_Init+0x19c>)
 8008410:	f7f8 fc62 	bl	8000cd8 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d009      	beq.n	8008430 <HAL_UART_Init+0xe0>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008424:	d004      	beq.n	8008430 <HAL_UART_Init+0xe0>
 8008426:	f44f 71bd 	mov.w	r1, #378	@ 0x17a
 800842a:	4830      	ldr	r0, [pc, #192]	@ (80084ec <HAL_UART_Init+0x19c>)
 800842c:	f7f8 fc54 	bl	8000cd8 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	69db      	ldr	r3, [r3, #28]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d009      	beq.n	800844c <HAL_UART_Init+0xfc>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	69db      	ldr	r3, [r3, #28]
 800843c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008440:	d004      	beq.n	800844c <HAL_UART_Init+0xfc>
 8008442:	f240 117b 	movw	r1, #379	@ 0x17b
 8008446:	4829      	ldr	r0, [pc, #164]	@ (80084ec <HAL_UART_Init+0x19c>)
 8008448:	f7f8 fc46 	bl	8000cd8 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008452:	b2db      	uxtb	r3, r3
 8008454:	2b00      	cmp	r3, #0
 8008456:	d106      	bne.n	8008466 <HAL_UART_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f7f8 fd77 	bl	8000f54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2224      	movs	r2, #36	@ 0x24
 800846a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68da      	ldr	r2, [r3, #12]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800847c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 fd20 	bl	8008ec4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	691a      	ldr	r2, [r3, #16]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008492:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	695a      	ldr	r2, [r3, #20]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80084a2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68da      	ldr	r2, [r3, #12]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80084b2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2220      	movs	r2, #32
 80084be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2220      	movs	r2, #32
 80084c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3708      	adds	r7, #8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	40011000 	.word	0x40011000
 80084e0:	40004400 	.word	0x40004400
 80084e4:	40004800 	.word	0x40004800
 80084e8:	40011400 	.word	0x40011400
 80084ec:	0800d8ac 	.word	0x0800d8ac
 80084f0:	40004c00 	.word	0x40004c00
 80084f4:	40005000 	.word	0x40005000

080084f8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	4613      	mov	r3, r2
 8008504:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800850c:	b2db      	uxtb	r3, r3
 800850e:	2b20      	cmp	r3, #32
 8008510:	d121      	bne.n	8008556 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d002      	beq.n	800851e <HAL_UART_Transmit_IT+0x26>
 8008518:	88fb      	ldrh	r3, [r7, #6]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d101      	bne.n	8008522 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e01a      	b.n	8008558 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	68ba      	ldr	r2, [r7, #8]
 8008526:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	88fa      	ldrh	r2, [r7, #6]
 800852c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	88fa      	ldrh	r2, [r7, #6]
 8008532:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2221      	movs	r2, #33	@ 0x21
 800853e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	68da      	ldr	r2, [r3, #12]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008550:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	e000      	b.n	8008558 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8008556:	2302      	movs	r3, #2
  }
}
 8008558:	4618      	mov	r0, r3
 800855a:	3714      	adds	r7, #20
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	4613      	mov	r3, r2
 8008570:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008578:	b2db      	uxtb	r3, r3
 800857a:	2b20      	cmp	r3, #32
 800857c:	d112      	bne.n	80085a4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d002      	beq.n	800858a <HAL_UART_Receive_IT+0x26>
 8008584:	88fb      	ldrh	r3, [r7, #6]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e00b      	b.n	80085a6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008594:	88fb      	ldrh	r3, [r7, #6]
 8008596:	461a      	mov	r2, r3
 8008598:	68b9      	ldr	r1, [r7, #8]
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	f000 faba 	bl	8008b14 <UART_Start_Receive_IT>
 80085a0:	4603      	mov	r3, r0
 80085a2:	e000      	b.n	80085a6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80085a4:	2302      	movs	r3, #2
  }
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3710      	adds	r7, #16
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
	...

080085b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b0ba      	sub	sp, #232	@ 0xe8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80085d6:	2300      	movs	r3, #0
 80085d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80085dc:	2300      	movs	r3, #0
 80085de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80085e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085e6:	f003 030f 	and.w	r3, r3, #15
 80085ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80085ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d10f      	bne.n	8008616 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085fa:	f003 0320 	and.w	r3, r3, #32
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d009      	beq.n	8008616 <HAL_UART_IRQHandler+0x66>
 8008602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008606:	f003 0320 	and.w	r3, r3, #32
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 fb99 	bl	8008d46 <UART_Receive_IT>
      return;
 8008614:	e25b      	b.n	8008ace <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008616:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800861a:	2b00      	cmp	r3, #0
 800861c:	f000 80de 	beq.w	80087dc <HAL_UART_IRQHandler+0x22c>
 8008620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008624:	f003 0301 	and.w	r3, r3, #1
 8008628:	2b00      	cmp	r3, #0
 800862a:	d106      	bne.n	800863a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800862c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008630:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008634:	2b00      	cmp	r3, #0
 8008636:	f000 80d1 	beq.w	80087dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800863a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800863e:	f003 0301 	and.w	r3, r3, #1
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00b      	beq.n	800865e <HAL_UART_IRQHandler+0xae>
 8008646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800864a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800864e:	2b00      	cmp	r3, #0
 8008650:	d005      	beq.n	800865e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008656:	f043 0201 	orr.w	r2, r3, #1
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800865e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008662:	f003 0304 	and.w	r3, r3, #4
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00b      	beq.n	8008682 <HAL_UART_IRQHandler+0xd2>
 800866a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800866e:	f003 0301 	and.w	r3, r3, #1
 8008672:	2b00      	cmp	r3, #0
 8008674:	d005      	beq.n	8008682 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800867a:	f043 0202 	orr.w	r2, r3, #2
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008686:	f003 0302 	and.w	r3, r3, #2
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00b      	beq.n	80086a6 <HAL_UART_IRQHandler+0xf6>
 800868e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008692:	f003 0301 	and.w	r3, r3, #1
 8008696:	2b00      	cmp	r3, #0
 8008698:	d005      	beq.n	80086a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800869e:	f043 0204 	orr.w	r2, r3, #4
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80086a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086aa:	f003 0308 	and.w	r3, r3, #8
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d011      	beq.n	80086d6 <HAL_UART_IRQHandler+0x126>
 80086b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086b6:	f003 0320 	and.w	r3, r3, #32
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d105      	bne.n	80086ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80086be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086c2:	f003 0301 	and.w	r3, r3, #1
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d005      	beq.n	80086d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086ce:	f043 0208 	orr.w	r2, r3, #8
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086da:	2b00      	cmp	r3, #0
 80086dc:	f000 81f2 	beq.w	8008ac4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086e4:	f003 0320 	and.w	r3, r3, #32
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d008      	beq.n	80086fe <HAL_UART_IRQHandler+0x14e>
 80086ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086f0:	f003 0320 	and.w	r3, r3, #32
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d002      	beq.n	80086fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 fb24 	bl	8008d46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	695b      	ldr	r3, [r3, #20]
 8008704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008708:	2b40      	cmp	r3, #64	@ 0x40
 800870a:	bf0c      	ite	eq
 800870c:	2301      	moveq	r3, #1
 800870e:	2300      	movne	r3, #0
 8008710:	b2db      	uxtb	r3, r3
 8008712:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800871a:	f003 0308 	and.w	r3, r3, #8
 800871e:	2b00      	cmp	r3, #0
 8008720:	d103      	bne.n	800872a <HAL_UART_IRQHandler+0x17a>
 8008722:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008726:	2b00      	cmp	r3, #0
 8008728:	d04f      	beq.n	80087ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fa2c 	bl	8008b88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800873a:	2b40      	cmp	r3, #64	@ 0x40
 800873c:	d141      	bne.n	80087c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	3314      	adds	r3, #20
 8008744:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008748:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800874c:	e853 3f00 	ldrex	r3, [r3]
 8008750:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008754:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008758:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800875c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	3314      	adds	r3, #20
 8008766:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800876a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800876e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008772:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008776:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800877a:	e841 2300 	strex	r3, r2, [r1]
 800877e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008782:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1d9      	bne.n	800873e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800878e:	2b00      	cmp	r3, #0
 8008790:	d013      	beq.n	80087ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008796:	4a7e      	ldr	r2, [pc, #504]	@ (8008990 <HAL_UART_IRQHandler+0x3e0>)
 8008798:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fa fbc8 	bl	8002f34 <HAL_DMA_Abort_IT>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d016      	beq.n	80087d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80087b4:	4610      	mov	r0, r2
 80087b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b8:	e00e      	b.n	80087d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f994 	bl	8008ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087c0:	e00a      	b.n	80087d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f990 	bl	8008ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087c8:	e006      	b.n	80087d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f98c 	bl	8008ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80087d6:	e175      	b.n	8008ac4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087d8:	bf00      	nop
    return;
 80087da:	e173      	b.n	8008ac4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	f040 814f 	bne.w	8008a84 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80087e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087ea:	f003 0310 	and.w	r3, r3, #16
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f000 8148 	beq.w	8008a84 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80087f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087f8:	f003 0310 	and.w	r3, r3, #16
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f000 8141 	beq.w	8008a84 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008802:	2300      	movs	r3, #0
 8008804:	60bb      	str	r3, [r7, #8]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	60bb      	str	r3, [r7, #8]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	60bb      	str	r3, [r7, #8]
 8008816:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	695b      	ldr	r3, [r3, #20]
 800881e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008822:	2b40      	cmp	r3, #64	@ 0x40
 8008824:	f040 80b6 	bne.w	8008994 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008834:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008838:	2b00      	cmp	r3, #0
 800883a:	f000 8145 	beq.w	8008ac8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008842:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008846:	429a      	cmp	r2, r3
 8008848:	f080 813e 	bcs.w	8008ac8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008852:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008858:	69db      	ldr	r3, [r3, #28]
 800885a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800885e:	f000 8088 	beq.w	8008972 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	330c      	adds	r3, #12
 8008868:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008870:	e853 3f00 	ldrex	r3, [r3]
 8008874:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008878:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800887c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008880:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	330c      	adds	r3, #12
 800888a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800888e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008892:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008896:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800889a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800889e:	e841 2300 	strex	r3, r2, [r1]
 80088a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80088a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d1d9      	bne.n	8008862 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	3314      	adds	r3, #20
 80088b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80088b8:	e853 3f00 	ldrex	r3, [r3]
 80088bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80088be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80088c0:	f023 0301 	bic.w	r3, r3, #1
 80088c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	3314      	adds	r3, #20
 80088ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80088d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80088d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80088da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80088de:	e841 2300 	strex	r3, r2, [r1]
 80088e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80088e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1e1      	bne.n	80088ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	3314      	adds	r3, #20
 80088f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088f4:	e853 3f00 	ldrex	r3, [r3]
 80088f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80088fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008900:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	3314      	adds	r3, #20
 800890a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800890e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008910:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008912:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008914:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008916:	e841 2300 	strex	r3, r2, [r1]
 800891a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800891c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1e3      	bne.n	80088ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2220      	movs	r2, #32
 8008926:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	330c      	adds	r3, #12
 8008936:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008938:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800893a:	e853 3f00 	ldrex	r3, [r3]
 800893e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008940:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008942:	f023 0310 	bic.w	r3, r3, #16
 8008946:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	330c      	adds	r3, #12
 8008950:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008954:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008956:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008958:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800895a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800895c:	e841 2300 	strex	r3, r2, [r1]
 8008960:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008962:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1e3      	bne.n	8008930 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800896c:	4618      	mov	r0, r3
 800896e:	f7fa fa71 	bl	8002e54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2202      	movs	r2, #2
 8008976:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008980:	b29b      	uxth	r3, r3
 8008982:	1ad3      	subs	r3, r2, r3
 8008984:	b29b      	uxth	r3, r3
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 f8b7 	bl	8008afc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800898e:	e09b      	b.n	8008ac8 <HAL_UART_IRQHandler+0x518>
 8008990:	08008c4f 	.word	0x08008c4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800899c:	b29b      	uxth	r3, r3
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f000 808e 	beq.w	8008acc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80089b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f000 8089 	beq.w	8008acc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	330c      	adds	r3, #12
 80089c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c4:	e853 3f00 	ldrex	r3, [r3]
 80089c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80089ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	330c      	adds	r3, #12
 80089da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80089de:	647a      	str	r2, [r7, #68]	@ 0x44
 80089e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80089e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089e6:	e841 2300 	strex	r3, r2, [r1]
 80089ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80089ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1e3      	bne.n	80089ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	3314      	adds	r3, #20
 80089f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089fc:	e853 3f00 	ldrex	r3, [r3]
 8008a00:	623b      	str	r3, [r7, #32]
   return(result);
 8008a02:	6a3b      	ldr	r3, [r7, #32]
 8008a04:	f023 0301 	bic.w	r3, r3, #1
 8008a08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	3314      	adds	r3, #20
 8008a12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008a16:	633a      	str	r2, [r7, #48]	@ 0x30
 8008a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a1e:	e841 2300 	strex	r3, r2, [r1]
 8008a22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d1e3      	bne.n	80089f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2220      	movs	r2, #32
 8008a2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	330c      	adds	r3, #12
 8008a3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	e853 3f00 	ldrex	r3, [r3]
 8008a46:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f023 0310 	bic.w	r3, r3, #16
 8008a4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	330c      	adds	r3, #12
 8008a58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008a5c:	61fa      	str	r2, [r7, #28]
 8008a5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a60:	69b9      	ldr	r1, [r7, #24]
 8008a62:	69fa      	ldr	r2, [r7, #28]
 8008a64:	e841 2300 	strex	r3, r2, [r1]
 8008a68:	617b      	str	r3, [r7, #20]
   return(result);
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d1e3      	bne.n	8008a38 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2202      	movs	r2, #2
 8008a74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f83d 	bl	8008afc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a82:	e023      	b.n	8008acc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d009      	beq.n	8008aa4 <HAL_UART_IRQHandler+0x4f4>
 8008a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d003      	beq.n	8008aa4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 f8ea 	bl	8008c76 <UART_Transmit_IT>
    return;
 8008aa2:	e014      	b.n	8008ace <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00e      	beq.n	8008ace <HAL_UART_IRQHandler+0x51e>
 8008ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d008      	beq.n	8008ace <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 f92a 	bl	8008d16 <UART_EndTransmit_IT>
    return;
 8008ac2:	e004      	b.n	8008ace <HAL_UART_IRQHandler+0x51e>
    return;
 8008ac4:	bf00      	nop
 8008ac6:	e002      	b.n	8008ace <HAL_UART_IRQHandler+0x51e>
      return;
 8008ac8:	bf00      	nop
 8008aca:	e000      	b.n	8008ace <HAL_UART_IRQHandler+0x51e>
      return;
 8008acc:	bf00      	nop
  }
}
 8008ace:	37e8      	adds	r7, #232	@ 0xe8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008adc:	bf00      	nop
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008af0:	bf00      	nop
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	460b      	mov	r3, r1
 8008b06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b08:	bf00      	nop
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	4613      	mov	r3, r2
 8008b20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	68ba      	ldr	r2, [r7, #8]
 8008b26:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	88fa      	ldrh	r2, [r7, #6]
 8008b2c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	88fa      	ldrh	r2, [r7, #6]
 8008b32:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2222      	movs	r2, #34	@ 0x22
 8008b3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d007      	beq.n	8008b5a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68da      	ldr	r2, [r3, #12]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b58:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	695a      	ldr	r2, [r3, #20]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f042 0201 	orr.w	r2, r2, #1
 8008b68:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68da      	ldr	r2, [r3, #12]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f042 0220 	orr.w	r2, r2, #32
 8008b78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3714      	adds	r7, #20
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b095      	sub	sp, #84	@ 0x54
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	330c      	adds	r3, #12
 8008b96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b9a:	e853 3f00 	ldrex	r3, [r3]
 8008b9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	330c      	adds	r3, #12
 8008bae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008bb0:	643a      	str	r2, [r7, #64]	@ 0x40
 8008bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008bb6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008bb8:	e841 2300 	strex	r3, r2, [r1]
 8008bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d1e5      	bne.n	8008b90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	3314      	adds	r3, #20
 8008bca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bcc:	6a3b      	ldr	r3, [r7, #32]
 8008bce:	e853 3f00 	ldrex	r3, [r3]
 8008bd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	f023 0301 	bic.w	r3, r3, #1
 8008bda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	3314      	adds	r3, #20
 8008be2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008be4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008be6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008bea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008bec:	e841 2300 	strex	r3, r2, [r1]
 8008bf0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d1e5      	bne.n	8008bc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d119      	bne.n	8008c34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	330c      	adds	r3, #12
 8008c06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	e853 3f00 	ldrex	r3, [r3]
 8008c0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	f023 0310 	bic.w	r3, r3, #16
 8008c16:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	330c      	adds	r3, #12
 8008c1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c20:	61ba      	str	r2, [r7, #24]
 8008c22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c24:	6979      	ldr	r1, [r7, #20]
 8008c26:	69ba      	ldr	r2, [r7, #24]
 8008c28:	e841 2300 	strex	r3, r2, [r1]
 8008c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1e5      	bne.n	8008c00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2220      	movs	r2, #32
 8008c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008c42:	bf00      	nop
 8008c44:	3754      	adds	r7, #84	@ 0x54
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr

08008c4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b084      	sub	sp, #16
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2200      	movs	r2, #0
 8008c66:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f7ff ff3d 	bl	8008ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c6e:	bf00      	nop
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008c76:	b480      	push	{r7}
 8008c78:	b085      	sub	sp, #20
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	2b21      	cmp	r3, #33	@ 0x21
 8008c88:	d13e      	bne.n	8008d08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c92:	d114      	bne.n	8008cbe <UART_Transmit_IT+0x48>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	691b      	ldr	r3, [r3, #16]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d110      	bne.n	8008cbe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6a1b      	ldr	r3, [r3, #32]
 8008ca0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	881b      	ldrh	r3, [r3, #0]
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cb0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a1b      	ldr	r3, [r3, #32]
 8008cb6:	1c9a      	adds	r2, r3, #2
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	621a      	str	r2, [r3, #32]
 8008cbc:	e008      	b.n	8008cd0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a1b      	ldr	r3, [r3, #32]
 8008cc2:	1c59      	adds	r1, r3, #1
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	6211      	str	r1, [r2, #32]
 8008cc8:	781a      	ldrb	r2, [r3, #0]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	4619      	mov	r1, r3
 8008cde:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10f      	bne.n	8008d04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68da      	ldr	r2, [r3, #12]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008cf2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68da      	ldr	r2, [r3, #12]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008d04:	2300      	movs	r3, #0
 8008d06:	e000      	b.n	8008d0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008d08:	2302      	movs	r3, #2
  }
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr

08008d16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b082      	sub	sp, #8
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	68da      	ldr	r2, [r3, #12]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008d2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2220      	movs	r2, #32
 8008d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f7ff fecc 	bl	8008ad4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b08c      	sub	sp, #48	@ 0x30
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	2b22      	cmp	r3, #34	@ 0x22
 8008d58:	f040 80ae 	bne.w	8008eb8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d64:	d117      	bne.n	8008d96 <UART_Receive_IT+0x50>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	691b      	ldr	r3, [r3, #16]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d113      	bne.n	8008d96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d76:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d8e:	1c9a      	adds	r2, r3, #2
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	629a      	str	r2, [r3, #40]	@ 0x28
 8008d94:	e026      	b.n	8008de4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008da8:	d007      	beq.n	8008dba <UART_Receive_IT+0x74>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d10a      	bne.n	8008dc8 <UART_Receive_IT+0x82>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d106      	bne.n	8008dc8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	b2da      	uxtb	r2, r3
 8008dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc4:	701a      	strb	r2, [r3, #0]
 8008dc6:	e008      	b.n	8008dda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dd4:	b2da      	uxtb	r2, r3
 8008dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dde:	1c5a      	adds	r2, r3, #1
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	3b01      	subs	r3, #1
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	4619      	mov	r1, r3
 8008df2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d15d      	bne.n	8008eb4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	68da      	ldr	r2, [r3, #12]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f022 0220 	bic.w	r2, r2, #32
 8008e06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	68da      	ldr	r2, [r3, #12]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008e16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	695a      	ldr	r2, [r3, #20]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f022 0201 	bic.w	r2, r2, #1
 8008e26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2220      	movs	r2, #32
 8008e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d135      	bne.n	8008eaa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	330c      	adds	r3, #12
 8008e4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	e853 3f00 	ldrex	r3, [r3]
 8008e52:	613b      	str	r3, [r7, #16]
   return(result);
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	f023 0310 	bic.w	r3, r3, #16
 8008e5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	330c      	adds	r3, #12
 8008e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e64:	623a      	str	r2, [r7, #32]
 8008e66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e68:	69f9      	ldr	r1, [r7, #28]
 8008e6a:	6a3a      	ldr	r2, [r7, #32]
 8008e6c:	e841 2300 	strex	r3, r2, [r1]
 8008e70:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d1e5      	bne.n	8008e44 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 0310 	and.w	r3, r3, #16
 8008e82:	2b10      	cmp	r3, #16
 8008e84:	d10a      	bne.n	8008e9c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e86:	2300      	movs	r3, #0
 8008e88:	60fb      	str	r3, [r7, #12]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	60fb      	str	r3, [r7, #12]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	60fb      	str	r3, [r7, #12]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f7ff fe2a 	bl	8008afc <HAL_UARTEx_RxEventCallback>
 8008ea8:	e002      	b.n	8008eb0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f7f7 fe7a 	bl	8000ba4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	e002      	b.n	8008eba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	e000      	b.n	8008eba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008eb8:	2302      	movs	r3, #2
  }
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3730      	adds	r7, #48	@ 0x30
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
	...

08008ec4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ec8:	b0c0      	sub	sp, #256	@ 0x100
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ed4:	685a      	ldr	r2, [r3, #4]
 8008ed6:	4bcf      	ldr	r3, [pc, #828]	@ (8009214 <UART_SetConfig+0x350>)
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d904      	bls.n	8008ee6 <UART_SetConfig+0x22>
 8008edc:	f640 6175 	movw	r1, #3701	@ 0xe75
 8008ee0:	48cd      	ldr	r0, [pc, #820]	@ (8009218 <UART_SetConfig+0x354>)
 8008ee2:	f7f7 fef9 	bl	8000cd8 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00a      	beq.n	8008f06 <UART_SetConfig+0x42>
 8008ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008efa:	d004      	beq.n	8008f06 <UART_SetConfig+0x42>
 8008efc:	f640 6176 	movw	r1, #3702	@ 0xe76
 8008f00:	48c5      	ldr	r0, [pc, #788]	@ (8009218 <UART_SetConfig+0x354>)
 8008f02:	f7f7 fee9 	bl	8000cd8 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8008f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f0a:	691b      	ldr	r3, [r3, #16]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d010      	beq.n	8008f32 <UART_SetConfig+0x6e>
 8008f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f1a:	d00a      	beq.n	8008f32 <UART_SetConfig+0x6e>
 8008f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008f26:	d004      	beq.n	8008f32 <UART_SetConfig+0x6e>
 8008f28:	f640 6177 	movw	r1, #3703	@ 0xe77
 8008f2c:	48ba      	ldr	r0, [pc, #744]	@ (8009218 <UART_SetConfig+0x354>)
 8008f2e:	f7f7 fed3 	bl	8000cd8 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8008f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f36:	695a      	ldr	r2, [r3, #20]
 8008f38:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d104      	bne.n	8008f4c <UART_SetConfig+0x88>
 8008f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f46:	695b      	ldr	r3, [r3, #20]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d104      	bne.n	8008f56 <UART_SetConfig+0x92>
 8008f4c:	f640 6178 	movw	r1, #3704	@ 0xe78
 8008f50:	48b1      	ldr	r0, [pc, #708]	@ (8009218 <UART_SetConfig+0x354>)
 8008f52:	f7f7 fec1 	bl	8000cd8 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	691b      	ldr	r3, [r3, #16]
 8008f5e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f66:	68d9      	ldr	r1, [r3, #12]
 8008f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	ea40 0301 	orr.w	r3, r0, r1
 8008f72:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f78:	689a      	ldr	r2, [r3, #8]
 8008f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	431a      	orrs	r2, r3
 8008f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f86:	695b      	ldr	r3, [r3, #20]
 8008f88:	431a      	orrs	r2, r3
 8008f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f8e:	69db      	ldr	r3, [r3, #28]
 8008f90:	4313      	orrs	r3, r2
 8008f92:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008fa2:	f021 010c 	bic.w	r1, r1, #12
 8008fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008fb0:	430b      	orrs	r3, r1
 8008fb2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	695b      	ldr	r3, [r3, #20]
 8008fbc:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fc4:	6999      	ldr	r1, [r3, #24]
 8008fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	ea40 0301 	orr.w	r3, r0, r1
 8008fd0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	4b90      	ldr	r3, [pc, #576]	@ (800921c <UART_SetConfig+0x358>)
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d005      	beq.n	8008fea <UART_SetConfig+0x126>
 8008fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	4b8e      	ldr	r3, [pc, #568]	@ (8009220 <UART_SetConfig+0x35c>)
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d104      	bne.n	8008ff4 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008fea:	f7fc fd39 	bl	8005a60 <HAL_RCC_GetPCLK2Freq>
 8008fee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008ff2:	e003      	b.n	8008ffc <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ff4:	f7fc fd20 	bl	8005a38 <HAL_RCC_GetPCLK1Freq>
 8008ff8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009000:	69db      	ldr	r3, [r3, #28]
 8009002:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009006:	f040 810f 	bne.w	8009228 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800900a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800900e:	2200      	movs	r2, #0
 8009010:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009014:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009018:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800901c:	4622      	mov	r2, r4
 800901e:	462b      	mov	r3, r5
 8009020:	1891      	adds	r1, r2, r2
 8009022:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009024:	415b      	adcs	r3, r3
 8009026:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009028:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800902c:	4621      	mov	r1, r4
 800902e:	eb12 0801 	adds.w	r8, r2, r1
 8009032:	4629      	mov	r1, r5
 8009034:	eb43 0901 	adc.w	r9, r3, r1
 8009038:	f04f 0200 	mov.w	r2, #0
 800903c:	f04f 0300 	mov.w	r3, #0
 8009040:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009044:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009048:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800904c:	4690      	mov	r8, r2
 800904e:	4699      	mov	r9, r3
 8009050:	4623      	mov	r3, r4
 8009052:	eb18 0303 	adds.w	r3, r8, r3
 8009056:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800905a:	462b      	mov	r3, r5
 800905c:	eb49 0303 	adc.w	r3, r9, r3
 8009060:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009070:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009074:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009078:	460b      	mov	r3, r1
 800907a:	18db      	adds	r3, r3, r3
 800907c:	653b      	str	r3, [r7, #80]	@ 0x50
 800907e:	4613      	mov	r3, r2
 8009080:	eb42 0303 	adc.w	r3, r2, r3
 8009084:	657b      	str	r3, [r7, #84]	@ 0x54
 8009086:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800908a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800908e:	f7f7 f8f7 	bl	8000280 <__aeabi_uldivmod>
 8009092:	4602      	mov	r2, r0
 8009094:	460b      	mov	r3, r1
 8009096:	4b63      	ldr	r3, [pc, #396]	@ (8009224 <UART_SetConfig+0x360>)
 8009098:	fba3 2302 	umull	r2, r3, r3, r2
 800909c:	095b      	lsrs	r3, r3, #5
 800909e:	011c      	lsls	r4, r3, #4
 80090a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090a4:	2200      	movs	r2, #0
 80090a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80090aa:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80090ae:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80090b2:	4642      	mov	r2, r8
 80090b4:	464b      	mov	r3, r9
 80090b6:	1891      	adds	r1, r2, r2
 80090b8:	64b9      	str	r1, [r7, #72]	@ 0x48
 80090ba:	415b      	adcs	r3, r3
 80090bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80090be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80090c2:	4641      	mov	r1, r8
 80090c4:	eb12 0a01 	adds.w	sl, r2, r1
 80090c8:	4649      	mov	r1, r9
 80090ca:	eb43 0b01 	adc.w	fp, r3, r1
 80090ce:	f04f 0200 	mov.w	r2, #0
 80090d2:	f04f 0300 	mov.w	r3, #0
 80090d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80090da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80090de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80090e2:	4692      	mov	sl, r2
 80090e4:	469b      	mov	fp, r3
 80090e6:	4643      	mov	r3, r8
 80090e8:	eb1a 0303 	adds.w	r3, sl, r3
 80090ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80090f0:	464b      	mov	r3, r9
 80090f2:	eb4b 0303 	adc.w	r3, fp, r3
 80090f6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80090fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009106:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800910a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800910e:	460b      	mov	r3, r1
 8009110:	18db      	adds	r3, r3, r3
 8009112:	643b      	str	r3, [r7, #64]	@ 0x40
 8009114:	4613      	mov	r3, r2
 8009116:	eb42 0303 	adc.w	r3, r2, r3
 800911a:	647b      	str	r3, [r7, #68]	@ 0x44
 800911c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009120:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009124:	f7f7 f8ac 	bl	8000280 <__aeabi_uldivmod>
 8009128:	4602      	mov	r2, r0
 800912a:	460b      	mov	r3, r1
 800912c:	4611      	mov	r1, r2
 800912e:	4b3d      	ldr	r3, [pc, #244]	@ (8009224 <UART_SetConfig+0x360>)
 8009130:	fba3 2301 	umull	r2, r3, r3, r1
 8009134:	095b      	lsrs	r3, r3, #5
 8009136:	2264      	movs	r2, #100	@ 0x64
 8009138:	fb02 f303 	mul.w	r3, r2, r3
 800913c:	1acb      	subs	r3, r1, r3
 800913e:	00db      	lsls	r3, r3, #3
 8009140:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009144:	4b37      	ldr	r3, [pc, #220]	@ (8009224 <UART_SetConfig+0x360>)
 8009146:	fba3 2302 	umull	r2, r3, r3, r2
 800914a:	095b      	lsrs	r3, r3, #5
 800914c:	005b      	lsls	r3, r3, #1
 800914e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009152:	441c      	add	r4, r3
 8009154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009158:	2200      	movs	r2, #0
 800915a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800915e:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009162:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009166:	4642      	mov	r2, r8
 8009168:	464b      	mov	r3, r9
 800916a:	1891      	adds	r1, r2, r2
 800916c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800916e:	415b      	adcs	r3, r3
 8009170:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009172:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009176:	4641      	mov	r1, r8
 8009178:	1851      	adds	r1, r2, r1
 800917a:	6339      	str	r1, [r7, #48]	@ 0x30
 800917c:	4649      	mov	r1, r9
 800917e:	414b      	adcs	r3, r1
 8009180:	637b      	str	r3, [r7, #52]	@ 0x34
 8009182:	f04f 0200 	mov.w	r2, #0
 8009186:	f04f 0300 	mov.w	r3, #0
 800918a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800918e:	4659      	mov	r1, fp
 8009190:	00cb      	lsls	r3, r1, #3
 8009192:	4651      	mov	r1, sl
 8009194:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009198:	4651      	mov	r1, sl
 800919a:	00ca      	lsls	r2, r1, #3
 800919c:	4610      	mov	r0, r2
 800919e:	4619      	mov	r1, r3
 80091a0:	4603      	mov	r3, r0
 80091a2:	4642      	mov	r2, r8
 80091a4:	189b      	adds	r3, r3, r2
 80091a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80091aa:	464b      	mov	r3, r9
 80091ac:	460a      	mov	r2, r1
 80091ae:	eb42 0303 	adc.w	r3, r2, r3
 80091b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80091b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80091c2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80091c6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80091ca:	460b      	mov	r3, r1
 80091cc:	18db      	adds	r3, r3, r3
 80091ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80091d0:	4613      	mov	r3, r2
 80091d2:	eb42 0303 	adc.w	r3, r2, r3
 80091d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80091dc:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80091e0:	f7f7 f84e 	bl	8000280 <__aeabi_uldivmod>
 80091e4:	4602      	mov	r2, r0
 80091e6:	460b      	mov	r3, r1
 80091e8:	4b0e      	ldr	r3, [pc, #56]	@ (8009224 <UART_SetConfig+0x360>)
 80091ea:	fba3 1302 	umull	r1, r3, r3, r2
 80091ee:	095b      	lsrs	r3, r3, #5
 80091f0:	2164      	movs	r1, #100	@ 0x64
 80091f2:	fb01 f303 	mul.w	r3, r1, r3
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	00db      	lsls	r3, r3, #3
 80091fa:	3332      	adds	r3, #50	@ 0x32
 80091fc:	4a09      	ldr	r2, [pc, #36]	@ (8009224 <UART_SetConfig+0x360>)
 80091fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009202:	095b      	lsrs	r3, r3, #5
 8009204:	f003 0207 	and.w	r2, r3, #7
 8009208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4422      	add	r2, r4
 8009210:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009212:	e109      	b.n	8009428 <UART_SetConfig+0x564>
 8009214:	00a037a0 	.word	0x00a037a0
 8009218:	0800d8ac 	.word	0x0800d8ac
 800921c:	40011000 	.word	0x40011000
 8009220:	40011400 	.word	0x40011400
 8009224:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800922c:	2200      	movs	r2, #0
 800922e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009232:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009236:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800923a:	4642      	mov	r2, r8
 800923c:	464b      	mov	r3, r9
 800923e:	1891      	adds	r1, r2, r2
 8009240:	6239      	str	r1, [r7, #32]
 8009242:	415b      	adcs	r3, r3
 8009244:	627b      	str	r3, [r7, #36]	@ 0x24
 8009246:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800924a:	4641      	mov	r1, r8
 800924c:	1854      	adds	r4, r2, r1
 800924e:	4649      	mov	r1, r9
 8009250:	eb43 0501 	adc.w	r5, r3, r1
 8009254:	f04f 0200 	mov.w	r2, #0
 8009258:	f04f 0300 	mov.w	r3, #0
 800925c:	00eb      	lsls	r3, r5, #3
 800925e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009262:	00e2      	lsls	r2, r4, #3
 8009264:	4614      	mov	r4, r2
 8009266:	461d      	mov	r5, r3
 8009268:	4643      	mov	r3, r8
 800926a:	18e3      	adds	r3, r4, r3
 800926c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009270:	464b      	mov	r3, r9
 8009272:	eb45 0303 	adc.w	r3, r5, r3
 8009276:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800927a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009286:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800928a:	f04f 0200 	mov.w	r2, #0
 800928e:	f04f 0300 	mov.w	r3, #0
 8009292:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009296:	4629      	mov	r1, r5
 8009298:	008b      	lsls	r3, r1, #2
 800929a:	4621      	mov	r1, r4
 800929c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092a0:	4621      	mov	r1, r4
 80092a2:	008a      	lsls	r2, r1, #2
 80092a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80092a8:	f7f6 ffea 	bl	8000280 <__aeabi_uldivmod>
 80092ac:	4602      	mov	r2, r0
 80092ae:	460b      	mov	r3, r1
 80092b0:	4b60      	ldr	r3, [pc, #384]	@ (8009434 <UART_SetConfig+0x570>)
 80092b2:	fba3 2302 	umull	r2, r3, r3, r2
 80092b6:	095b      	lsrs	r3, r3, #5
 80092b8:	011c      	lsls	r4, r3, #4
 80092ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80092be:	2200      	movs	r2, #0
 80092c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80092c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80092c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80092cc:	4642      	mov	r2, r8
 80092ce:	464b      	mov	r3, r9
 80092d0:	1891      	adds	r1, r2, r2
 80092d2:	61b9      	str	r1, [r7, #24]
 80092d4:	415b      	adcs	r3, r3
 80092d6:	61fb      	str	r3, [r7, #28]
 80092d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80092dc:	4641      	mov	r1, r8
 80092de:	1851      	adds	r1, r2, r1
 80092e0:	6139      	str	r1, [r7, #16]
 80092e2:	4649      	mov	r1, r9
 80092e4:	414b      	adcs	r3, r1
 80092e6:	617b      	str	r3, [r7, #20]
 80092e8:	f04f 0200 	mov.w	r2, #0
 80092ec:	f04f 0300 	mov.w	r3, #0
 80092f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80092f4:	4659      	mov	r1, fp
 80092f6:	00cb      	lsls	r3, r1, #3
 80092f8:	4651      	mov	r1, sl
 80092fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092fe:	4651      	mov	r1, sl
 8009300:	00ca      	lsls	r2, r1, #3
 8009302:	4610      	mov	r0, r2
 8009304:	4619      	mov	r1, r3
 8009306:	4603      	mov	r3, r0
 8009308:	4642      	mov	r2, r8
 800930a:	189b      	adds	r3, r3, r2
 800930c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009310:	464b      	mov	r3, r9
 8009312:	460a      	mov	r2, r1
 8009314:	eb42 0303 	adc.w	r3, r2, r3
 8009318:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800931c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009326:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009328:	f04f 0200 	mov.w	r2, #0
 800932c:	f04f 0300 	mov.w	r3, #0
 8009330:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009334:	4649      	mov	r1, r9
 8009336:	008b      	lsls	r3, r1, #2
 8009338:	4641      	mov	r1, r8
 800933a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800933e:	4641      	mov	r1, r8
 8009340:	008a      	lsls	r2, r1, #2
 8009342:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009346:	f7f6 ff9b 	bl	8000280 <__aeabi_uldivmod>
 800934a:	4602      	mov	r2, r0
 800934c:	460b      	mov	r3, r1
 800934e:	4611      	mov	r1, r2
 8009350:	4b38      	ldr	r3, [pc, #224]	@ (8009434 <UART_SetConfig+0x570>)
 8009352:	fba3 2301 	umull	r2, r3, r3, r1
 8009356:	095b      	lsrs	r3, r3, #5
 8009358:	2264      	movs	r2, #100	@ 0x64
 800935a:	fb02 f303 	mul.w	r3, r2, r3
 800935e:	1acb      	subs	r3, r1, r3
 8009360:	011b      	lsls	r3, r3, #4
 8009362:	3332      	adds	r3, #50	@ 0x32
 8009364:	4a33      	ldr	r2, [pc, #204]	@ (8009434 <UART_SetConfig+0x570>)
 8009366:	fba2 2303 	umull	r2, r3, r2, r3
 800936a:	095b      	lsrs	r3, r3, #5
 800936c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009370:	441c      	add	r4, r3
 8009372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009376:	2200      	movs	r2, #0
 8009378:	673b      	str	r3, [r7, #112]	@ 0x70
 800937a:	677a      	str	r2, [r7, #116]	@ 0x74
 800937c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009380:	4642      	mov	r2, r8
 8009382:	464b      	mov	r3, r9
 8009384:	1891      	adds	r1, r2, r2
 8009386:	60b9      	str	r1, [r7, #8]
 8009388:	415b      	adcs	r3, r3
 800938a:	60fb      	str	r3, [r7, #12]
 800938c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009390:	4641      	mov	r1, r8
 8009392:	1851      	adds	r1, r2, r1
 8009394:	6039      	str	r1, [r7, #0]
 8009396:	4649      	mov	r1, r9
 8009398:	414b      	adcs	r3, r1
 800939a:	607b      	str	r3, [r7, #4]
 800939c:	f04f 0200 	mov.w	r2, #0
 80093a0:	f04f 0300 	mov.w	r3, #0
 80093a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80093a8:	4659      	mov	r1, fp
 80093aa:	00cb      	lsls	r3, r1, #3
 80093ac:	4651      	mov	r1, sl
 80093ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093b2:	4651      	mov	r1, sl
 80093b4:	00ca      	lsls	r2, r1, #3
 80093b6:	4610      	mov	r0, r2
 80093b8:	4619      	mov	r1, r3
 80093ba:	4603      	mov	r3, r0
 80093bc:	4642      	mov	r2, r8
 80093be:	189b      	adds	r3, r3, r2
 80093c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80093c2:	464b      	mov	r3, r9
 80093c4:	460a      	mov	r2, r1
 80093c6:	eb42 0303 	adc.w	r3, r2, r3
 80093ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80093cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80093d6:	667a      	str	r2, [r7, #100]	@ 0x64
 80093d8:	f04f 0200 	mov.w	r2, #0
 80093dc:	f04f 0300 	mov.w	r3, #0
 80093e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80093e4:	4649      	mov	r1, r9
 80093e6:	008b      	lsls	r3, r1, #2
 80093e8:	4641      	mov	r1, r8
 80093ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093ee:	4641      	mov	r1, r8
 80093f0:	008a      	lsls	r2, r1, #2
 80093f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80093f6:	f7f6 ff43 	bl	8000280 <__aeabi_uldivmod>
 80093fa:	4602      	mov	r2, r0
 80093fc:	460b      	mov	r3, r1
 80093fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009434 <UART_SetConfig+0x570>)
 8009400:	fba3 1302 	umull	r1, r3, r3, r2
 8009404:	095b      	lsrs	r3, r3, #5
 8009406:	2164      	movs	r1, #100	@ 0x64
 8009408:	fb01 f303 	mul.w	r3, r1, r3
 800940c:	1ad3      	subs	r3, r2, r3
 800940e:	011b      	lsls	r3, r3, #4
 8009410:	3332      	adds	r3, #50	@ 0x32
 8009412:	4a08      	ldr	r2, [pc, #32]	@ (8009434 <UART_SetConfig+0x570>)
 8009414:	fba2 2303 	umull	r2, r3, r2, r3
 8009418:	095b      	lsrs	r3, r3, #5
 800941a:	f003 020f 	and.w	r2, r3, #15
 800941e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4422      	add	r2, r4
 8009426:	609a      	str	r2, [r3, #8]
}
 8009428:	bf00      	nop
 800942a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800942e:	46bd      	mov	sp, r7
 8009430:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009434:	51eb851f 	.word	0x51eb851f

08009438 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009438:	b084      	sub	sp, #16
 800943a:	b580      	push	{r7, lr}
 800943c:	b084      	sub	sp, #16
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	f107 001c 	add.w	r0, r7, #28
 8009446:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800944a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800944e:	2b01      	cmp	r3, #1
 8009450:	d123      	bne.n	800949a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009456:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009466:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800947a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800947e:	2b01      	cmp	r3, #1
 8009480:	d105      	bne.n	800948e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f001 fae8 	bl	800aa64 <USB_CoreReset>
 8009494:	4603      	mov	r3, r0
 8009496:	73fb      	strb	r3, [r7, #15]
 8009498:	e01b      	b.n	80094d2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f001 fadc 	bl	800aa64 <USB_CoreReset>
 80094ac:	4603      	mov	r3, r0
 80094ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80094b0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d106      	bne.n	80094c6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094bc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80094c4:	e005      	b.n	80094d2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80094d2:	7fbb      	ldrb	r3, [r7, #30]
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d10b      	bne.n	80094f0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	f043 0206 	orr.w	r2, r3, #6
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	f043 0220 	orr.w	r2, r3, #32
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80094fc:	b004      	add	sp, #16
 80094fe:	4770      	bx	lr

08009500 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009500:	b480      	push	{r7}
 8009502:	b087      	sub	sp, #28
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	4613      	mov	r3, r2
 800950c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800950e:	79fb      	ldrb	r3, [r7, #7]
 8009510:	2b02      	cmp	r3, #2
 8009512:	d165      	bne.n	80095e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	4a41      	ldr	r2, [pc, #260]	@ (800961c <USB_SetTurnaroundTime+0x11c>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d906      	bls.n	800952a <USB_SetTurnaroundTime+0x2a>
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	4a40      	ldr	r2, [pc, #256]	@ (8009620 <USB_SetTurnaroundTime+0x120>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d202      	bcs.n	800952a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009524:	230f      	movs	r3, #15
 8009526:	617b      	str	r3, [r7, #20]
 8009528:	e062      	b.n	80095f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	4a3c      	ldr	r2, [pc, #240]	@ (8009620 <USB_SetTurnaroundTime+0x120>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d306      	bcc.n	8009540 <USB_SetTurnaroundTime+0x40>
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	4a3b      	ldr	r2, [pc, #236]	@ (8009624 <USB_SetTurnaroundTime+0x124>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d202      	bcs.n	8009540 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800953a:	230e      	movs	r3, #14
 800953c:	617b      	str	r3, [r7, #20]
 800953e:	e057      	b.n	80095f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	4a38      	ldr	r2, [pc, #224]	@ (8009624 <USB_SetTurnaroundTime+0x124>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d306      	bcc.n	8009556 <USB_SetTurnaroundTime+0x56>
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	4a37      	ldr	r2, [pc, #220]	@ (8009628 <USB_SetTurnaroundTime+0x128>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d202      	bcs.n	8009556 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009550:	230d      	movs	r3, #13
 8009552:	617b      	str	r3, [r7, #20]
 8009554:	e04c      	b.n	80095f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	4a33      	ldr	r2, [pc, #204]	@ (8009628 <USB_SetTurnaroundTime+0x128>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d306      	bcc.n	800956c <USB_SetTurnaroundTime+0x6c>
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	4a32      	ldr	r2, [pc, #200]	@ (800962c <USB_SetTurnaroundTime+0x12c>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d802      	bhi.n	800956c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009566:	230c      	movs	r3, #12
 8009568:	617b      	str	r3, [r7, #20]
 800956a:	e041      	b.n	80095f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	4a2f      	ldr	r2, [pc, #188]	@ (800962c <USB_SetTurnaroundTime+0x12c>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d906      	bls.n	8009582 <USB_SetTurnaroundTime+0x82>
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	4a2e      	ldr	r2, [pc, #184]	@ (8009630 <USB_SetTurnaroundTime+0x130>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d802      	bhi.n	8009582 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800957c:	230b      	movs	r3, #11
 800957e:	617b      	str	r3, [r7, #20]
 8009580:	e036      	b.n	80095f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	4a2a      	ldr	r2, [pc, #168]	@ (8009630 <USB_SetTurnaroundTime+0x130>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d906      	bls.n	8009598 <USB_SetTurnaroundTime+0x98>
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	4a29      	ldr	r2, [pc, #164]	@ (8009634 <USB_SetTurnaroundTime+0x134>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d802      	bhi.n	8009598 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009592:	230a      	movs	r3, #10
 8009594:	617b      	str	r3, [r7, #20]
 8009596:	e02b      	b.n	80095f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	4a26      	ldr	r2, [pc, #152]	@ (8009634 <USB_SetTurnaroundTime+0x134>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d906      	bls.n	80095ae <USB_SetTurnaroundTime+0xae>
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	4a25      	ldr	r2, [pc, #148]	@ (8009638 <USB_SetTurnaroundTime+0x138>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d202      	bcs.n	80095ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80095a8:	2309      	movs	r3, #9
 80095aa:	617b      	str	r3, [r7, #20]
 80095ac:	e020      	b.n	80095f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	4a21      	ldr	r2, [pc, #132]	@ (8009638 <USB_SetTurnaroundTime+0x138>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d306      	bcc.n	80095c4 <USB_SetTurnaroundTime+0xc4>
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	4a20      	ldr	r2, [pc, #128]	@ (800963c <USB_SetTurnaroundTime+0x13c>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d802      	bhi.n	80095c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80095be:	2308      	movs	r3, #8
 80095c0:	617b      	str	r3, [r7, #20]
 80095c2:	e015      	b.n	80095f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	4a1d      	ldr	r2, [pc, #116]	@ (800963c <USB_SetTurnaroundTime+0x13c>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d906      	bls.n	80095da <USB_SetTurnaroundTime+0xda>
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	4a1c      	ldr	r2, [pc, #112]	@ (8009640 <USB_SetTurnaroundTime+0x140>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d202      	bcs.n	80095da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80095d4:	2307      	movs	r3, #7
 80095d6:	617b      	str	r3, [r7, #20]
 80095d8:	e00a      	b.n	80095f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80095da:	2306      	movs	r3, #6
 80095dc:	617b      	str	r3, [r7, #20]
 80095de:	e007      	b.n	80095f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80095e0:	79fb      	ldrb	r3, [r7, #7]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d102      	bne.n	80095ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80095e6:	2309      	movs	r3, #9
 80095e8:	617b      	str	r3, [r7, #20]
 80095ea:	e001      	b.n	80095f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80095ec:	2309      	movs	r3, #9
 80095ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	68da      	ldr	r2, [r3, #12]
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	029b      	lsls	r3, r3, #10
 8009604:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009608:	431a      	orrs	r2, r3
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	371c      	adds	r7, #28
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr
 800961c:	00d8acbf 	.word	0x00d8acbf
 8009620:	00e4e1c0 	.word	0x00e4e1c0
 8009624:	00f42400 	.word	0x00f42400
 8009628:	01067380 	.word	0x01067380
 800962c:	011a499f 	.word	0x011a499f
 8009630:	01312cff 	.word	0x01312cff
 8009634:	014ca43f 	.word	0x014ca43f
 8009638:	016e3600 	.word	0x016e3600
 800963c:	01a6ab1f 	.word	0x01a6ab1f
 8009640:	01e84800 	.word	0x01e84800

08009644 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	f043 0201 	orr.w	r2, r3, #1
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	370c      	adds	r7, #12
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr

08009666 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009666:	b480      	push	{r7}
 8009668:	b083      	sub	sp, #12
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	f023 0201 	bic.w	r2, r3, #1
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	460b      	mov	r3, r1
 8009692:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009694:	2300      	movs	r3, #0
 8009696:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80096a4:	78fb      	ldrb	r3, [r7, #3]
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d115      	bne.n	80096d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80096b6:	200a      	movs	r0, #10
 80096b8:	f7f8 fb5c 	bl	8001d74 <HAL_Delay>
      ms += 10U;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	330a      	adds	r3, #10
 80096c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f001 f93f 	bl	800a946 <USB_GetMode>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	d01e      	beq.n	800970c <USB_SetCurrentMode+0x84>
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2bc7      	cmp	r3, #199	@ 0xc7
 80096d2:	d9f0      	bls.n	80096b6 <USB_SetCurrentMode+0x2e>
 80096d4:	e01a      	b.n	800970c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80096d6:	78fb      	ldrb	r3, [r7, #3]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d115      	bne.n	8009708 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80096e8:	200a      	movs	r0, #10
 80096ea:	f7f8 fb43 	bl	8001d74 <HAL_Delay>
      ms += 10U;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	330a      	adds	r3, #10
 80096f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f001 f926 	bl	800a946 <USB_GetMode>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d005      	beq.n	800970c <USB_SetCurrentMode+0x84>
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2bc7      	cmp	r3, #199	@ 0xc7
 8009704:	d9f0      	bls.n	80096e8 <USB_SetCurrentMode+0x60>
 8009706:	e001      	b.n	800970c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009708:	2301      	movs	r3, #1
 800970a:	e005      	b.n	8009718 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2bc8      	cmp	r3, #200	@ 0xc8
 8009710:	d101      	bne.n	8009716 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009712:	2301      	movs	r3, #1
 8009714:	e000      	b.n	8009718 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009720:	b084      	sub	sp, #16
 8009722:	b580      	push	{r7, lr}
 8009724:	b086      	sub	sp, #24
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
 800972a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800972e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009732:	2300      	movs	r3, #0
 8009734:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800973a:	2300      	movs	r3, #0
 800973c:	613b      	str	r3, [r7, #16]
 800973e:	e009      	b.n	8009754 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	3340      	adds	r3, #64	@ 0x40
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4413      	add	r3, r2
 800974a:	2200      	movs	r2, #0
 800974c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	3301      	adds	r3, #1
 8009752:	613b      	str	r3, [r7, #16]
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	2b0e      	cmp	r3, #14
 8009758:	d9f2      	bls.n	8009740 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800975a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800975e:	2b00      	cmp	r3, #0
 8009760:	d11c      	bne.n	800979c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009770:	f043 0302 	orr.w	r3, r3, #2
 8009774:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800977a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009786:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009792:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	639a      	str	r2, [r3, #56]	@ 0x38
 800979a:	e00b      	b.n	80097b4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097a0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ac:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80097ba:	461a      	mov	r2, r3
 80097bc:	2300      	movs	r3, #0
 80097be:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80097c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d10d      	bne.n	80097e4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80097c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d104      	bne.n	80097da <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80097d0:	2100      	movs	r1, #0
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 f968 	bl	8009aa8 <USB_SetDevSpeed>
 80097d8:	e008      	b.n	80097ec <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80097da:	2101      	movs	r1, #1
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 f963 	bl	8009aa8 <USB_SetDevSpeed>
 80097e2:	e003      	b.n	80097ec <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80097e4:	2103      	movs	r1, #3
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 f95e 	bl	8009aa8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80097ec:	2110      	movs	r1, #16
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f8fa 	bl	80099e8 <USB_FlushTxFifo>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d001      	beq.n	80097fe <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 f924 	bl	8009a4c <USB_FlushRxFifo>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d001      	beq.n	800980e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009814:	461a      	mov	r2, r3
 8009816:	2300      	movs	r3, #0
 8009818:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009820:	461a      	mov	r2, r3
 8009822:	2300      	movs	r3, #0
 8009824:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800982c:	461a      	mov	r2, r3
 800982e:	2300      	movs	r3, #0
 8009830:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009832:	2300      	movs	r3, #0
 8009834:	613b      	str	r3, [r7, #16]
 8009836:	e043      	b.n	80098c0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	015a      	lsls	r2, r3, #5
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	4413      	add	r3, r2
 8009840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800984a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800984e:	d118      	bne.n	8009882 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d10a      	bne.n	800986c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	015a      	lsls	r2, r3, #5
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	4413      	add	r3, r2
 800985e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009862:	461a      	mov	r2, r3
 8009864:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009868:	6013      	str	r3, [r2, #0]
 800986a:	e013      	b.n	8009894 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	015a      	lsls	r2, r3, #5
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	4413      	add	r3, r2
 8009874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009878:	461a      	mov	r2, r3
 800987a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800987e:	6013      	str	r3, [r2, #0]
 8009880:	e008      	b.n	8009894 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	015a      	lsls	r2, r3, #5
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	4413      	add	r3, r2
 800988a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800988e:	461a      	mov	r2, r3
 8009890:	2300      	movs	r3, #0
 8009892:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	015a      	lsls	r2, r3, #5
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	4413      	add	r3, r2
 800989c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098a0:	461a      	mov	r2, r3
 80098a2:	2300      	movs	r3, #0
 80098a4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	015a      	lsls	r2, r3, #5
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	4413      	add	r3, r2
 80098ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098b2:	461a      	mov	r2, r3
 80098b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80098b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	3301      	adds	r3, #1
 80098be:	613b      	str	r3, [r7, #16]
 80098c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80098c4:	461a      	mov	r2, r3
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d3b5      	bcc.n	8009838 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098cc:	2300      	movs	r3, #0
 80098ce:	613b      	str	r3, [r7, #16]
 80098d0:	e043      	b.n	800995a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	015a      	lsls	r2, r3, #5
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	4413      	add	r3, r2
 80098da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80098e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098e8:	d118      	bne.n	800991c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10a      	bne.n	8009906 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	015a      	lsls	r2, r3, #5
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	4413      	add	r3, r2
 80098f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098fc:	461a      	mov	r2, r3
 80098fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009902:	6013      	str	r3, [r2, #0]
 8009904:	e013      	b.n	800992e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	015a      	lsls	r2, r3, #5
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	4413      	add	r3, r2
 800990e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009912:	461a      	mov	r2, r3
 8009914:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009918:	6013      	str	r3, [r2, #0]
 800991a:	e008      	b.n	800992e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	015a      	lsls	r2, r3, #5
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	4413      	add	r3, r2
 8009924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009928:	461a      	mov	r2, r3
 800992a:	2300      	movs	r3, #0
 800992c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	015a      	lsls	r2, r3, #5
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	4413      	add	r3, r2
 8009936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800993a:	461a      	mov	r2, r3
 800993c:	2300      	movs	r3, #0
 800993e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	015a      	lsls	r2, r3, #5
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	4413      	add	r3, r2
 8009948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800994c:	461a      	mov	r2, r3
 800994e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009952:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	3301      	adds	r3, #1
 8009958:	613b      	str	r3, [r7, #16]
 800995a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800995e:	461a      	mov	r2, r3
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	4293      	cmp	r3, r2
 8009964:	d3b5      	bcc.n	80098d2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009974:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009978:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009986:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009988:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800998c:	2b00      	cmp	r3, #0
 800998e:	d105      	bne.n	800999c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	699b      	ldr	r3, [r3, #24]
 8009994:	f043 0210 	orr.w	r2, r3, #16
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	699a      	ldr	r2, [r3, #24]
 80099a0:	4b10      	ldr	r3, [pc, #64]	@ (80099e4 <USB_DevInit+0x2c4>)
 80099a2:	4313      	orrs	r3, r2
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80099a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d005      	beq.n	80099bc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	699b      	ldr	r3, [r3, #24]
 80099b4:	f043 0208 	orr.w	r2, r3, #8
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80099bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d107      	bne.n	80099d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	699b      	ldr	r3, [r3, #24]
 80099c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80099cc:	f043 0304 	orr.w	r3, r3, #4
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80099d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3718      	adds	r7, #24
 80099da:	46bd      	mov	sp, r7
 80099dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80099e0:	b004      	add	sp, #16
 80099e2:	4770      	bx	lr
 80099e4:	803c3800 	.word	0x803c3800

080099e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b085      	sub	sp, #20
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80099f2:	2300      	movs	r3, #0
 80099f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	3301      	adds	r3, #1
 80099fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a02:	d901      	bls.n	8009a08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009a04:	2303      	movs	r3, #3
 8009a06:	e01b      	b.n	8009a40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	daf2      	bge.n	80099f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009a10:	2300      	movs	r3, #0
 8009a12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	019b      	lsls	r3, r3, #6
 8009a18:	f043 0220 	orr.w	r2, r3, #32
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	3301      	adds	r3, #1
 8009a24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a2c:	d901      	bls.n	8009a32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009a2e:	2303      	movs	r3, #3
 8009a30:	e006      	b.n	8009a40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	691b      	ldr	r3, [r3, #16]
 8009a36:	f003 0320 	and.w	r3, r3, #32
 8009a3a:	2b20      	cmp	r3, #32
 8009a3c:	d0f0      	beq.n	8009a20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3714      	adds	r7, #20
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b085      	sub	sp, #20
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a54:	2300      	movs	r3, #0
 8009a56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a64:	d901      	bls.n	8009a6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009a66:	2303      	movs	r3, #3
 8009a68:	e018      	b.n	8009a9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	daf2      	bge.n	8009a58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009a72:	2300      	movs	r3, #0
 8009a74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2210      	movs	r2, #16
 8009a7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a88:	d901      	bls.n	8009a8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009a8a:	2303      	movs	r3, #3
 8009a8c:	e006      	b.n	8009a9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	691b      	ldr	r3, [r3, #16]
 8009a92:	f003 0310 	and.w	r3, r3, #16
 8009a96:	2b10      	cmp	r3, #16
 8009a98:	d0f0      	beq.n	8009a7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009a9a:	2300      	movs	r3, #0
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3714      	adds	r7, #20
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	78fb      	ldrb	r3, [r7, #3]
 8009ac2:	68f9      	ldr	r1, [r7, #12]
 8009ac4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3714      	adds	r7, #20
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr

08009ada <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ada:	b480      	push	{r7}
 8009adc:	b087      	sub	sp, #28
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	f003 0306 	and.w	r3, r3, #6
 8009af2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d102      	bne.n	8009b00 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009afa:	2300      	movs	r3, #0
 8009afc:	75fb      	strb	r3, [r7, #23]
 8009afe:	e00a      	b.n	8009b16 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	d002      	beq.n	8009b0c <USB_GetDevSpeed+0x32>
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2b06      	cmp	r3, #6
 8009b0a:	d102      	bne.n	8009b12 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009b0c:	2302      	movs	r3, #2
 8009b0e:	75fb      	strb	r3, [r7, #23]
 8009b10:	e001      	b.n	8009b16 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009b12:	230f      	movs	r3, #15
 8009b14:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	371c      	adds	r7, #28
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr

08009b24 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b085      	sub	sp, #20
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	785b      	ldrb	r3, [r3, #1]
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d13a      	bne.n	8009bb6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b46:	69da      	ldr	r2, [r3, #28]
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	f003 030f 	and.w	r3, r3, #15
 8009b50:	2101      	movs	r1, #1
 8009b52:	fa01 f303 	lsl.w	r3, r1, r3
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	68f9      	ldr	r1, [r7, #12]
 8009b5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	015a      	lsls	r2, r3, #5
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	4413      	add	r3, r2
 8009b6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d155      	bne.n	8009c24 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	015a      	lsls	r2, r3, #5
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	4413      	add	r3, r2
 8009b80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	791b      	ldrb	r3, [r3, #4]
 8009b92:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b94:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	059b      	lsls	r3, r3, #22
 8009b9a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	68ba      	ldr	r2, [r7, #8]
 8009ba0:	0151      	lsls	r1, r2, #5
 8009ba2:	68fa      	ldr	r2, [r7, #12]
 8009ba4:	440a      	add	r2, r1
 8009ba6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009baa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009bae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bb2:	6013      	str	r3, [r2, #0]
 8009bb4:	e036      	b.n	8009c24 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bbc:	69da      	ldr	r2, [r3, #28]
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	f003 030f 	and.w	r3, r3, #15
 8009bc6:	2101      	movs	r1, #1
 8009bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8009bcc:	041b      	lsls	r3, r3, #16
 8009bce:	68f9      	ldr	r1, [r7, #12]
 8009bd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	015a      	lsls	r2, r3, #5
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	4413      	add	r3, r2
 8009be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d11a      	bne.n	8009c24 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	015a      	lsls	r2, r3, #5
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	791b      	ldrb	r3, [r3, #4]
 8009c08:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009c0a:	430b      	orrs	r3, r1
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	68ba      	ldr	r2, [r7, #8]
 8009c10:	0151      	lsls	r1, r2, #5
 8009c12:	68fa      	ldr	r2, [r7, #12]
 8009c14:	440a      	add	r2, r1
 8009c16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c22:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3714      	adds	r7, #20
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr
	...

08009c34 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b085      	sub	sp, #20
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	785b      	ldrb	r3, [r3, #1]
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d161      	bne.n	8009d14 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	015a      	lsls	r2, r3, #5
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	4413      	add	r3, r2
 8009c58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c66:	d11f      	bne.n	8009ca8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	015a      	lsls	r2, r3, #5
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	4413      	add	r3, r2
 8009c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	0151      	lsls	r1, r2, #5
 8009c7a:	68fa      	ldr	r2, [r7, #12]
 8009c7c:	440a      	add	r2, r1
 8009c7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c82:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009c86:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	015a      	lsls	r2, r3, #5
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	4413      	add	r3, r2
 8009c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	68ba      	ldr	r2, [r7, #8]
 8009c98:	0151      	lsls	r1, r2, #5
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	440a      	add	r2, r1
 8009c9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ca2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009ca6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	f003 030f 	and.w	r3, r3, #15
 8009cb8:	2101      	movs	r1, #1
 8009cba:	fa01 f303 	lsl.w	r3, r1, r3
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	43db      	mvns	r3, r3
 8009cc2:	68f9      	ldr	r1, [r7, #12]
 8009cc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009cc8:	4013      	ands	r3, r2
 8009cca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cd2:	69da      	ldr	r2, [r3, #28]
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	f003 030f 	and.w	r3, r3, #15
 8009cdc:	2101      	movs	r1, #1
 8009cde:	fa01 f303 	lsl.w	r3, r1, r3
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	43db      	mvns	r3, r3
 8009ce6:	68f9      	ldr	r1, [r7, #12]
 8009ce8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009cec:	4013      	ands	r3, r2
 8009cee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	015a      	lsls	r2, r3, #5
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	0159      	lsls	r1, r3, #5
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	440b      	add	r3, r1
 8009d06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	4b35      	ldr	r3, [pc, #212]	@ (8009de4 <USB_DeactivateEndpoint+0x1b0>)
 8009d0e:	4013      	ands	r3, r2
 8009d10:	600b      	str	r3, [r1, #0]
 8009d12:	e060      	b.n	8009dd6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	015a      	lsls	r2, r3, #5
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d2a:	d11f      	bne.n	8009d6c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	015a      	lsls	r2, r3, #5
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	4413      	add	r3, r2
 8009d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	0151      	lsls	r1, r2, #5
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	440a      	add	r2, r1
 8009d42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009d4a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	015a      	lsls	r2, r3, #5
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	4413      	add	r3, r2
 8009d54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	68ba      	ldr	r2, [r7, #8]
 8009d5c:	0151      	lsls	r1, r2, #5
 8009d5e:	68fa      	ldr	r2, [r7, #12]
 8009d60:	440a      	add	r2, r1
 8009d62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009d6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	f003 030f 	and.w	r3, r3, #15
 8009d7c:	2101      	movs	r1, #1
 8009d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8009d82:	041b      	lsls	r3, r3, #16
 8009d84:	43db      	mvns	r3, r3
 8009d86:	68f9      	ldr	r1, [r7, #12]
 8009d88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d8c:	4013      	ands	r3, r2
 8009d8e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d96:	69da      	ldr	r2, [r3, #28]
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	f003 030f 	and.w	r3, r3, #15
 8009da0:	2101      	movs	r1, #1
 8009da2:	fa01 f303 	lsl.w	r3, r1, r3
 8009da6:	041b      	lsls	r3, r3, #16
 8009da8:	43db      	mvns	r3, r3
 8009daa:	68f9      	ldr	r1, [r7, #12]
 8009dac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009db0:	4013      	ands	r3, r2
 8009db2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	015a      	lsls	r2, r3, #5
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	4413      	add	r3, r2
 8009dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dc0:	681a      	ldr	r2, [r3, #0]
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	0159      	lsls	r1, r3, #5
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	440b      	add	r3, r1
 8009dca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dce:	4619      	mov	r1, r3
 8009dd0:	4b05      	ldr	r3, [pc, #20]	@ (8009de8 <USB_DeactivateEndpoint+0x1b4>)
 8009dd2:	4013      	ands	r3, r2
 8009dd4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009dd6:	2300      	movs	r3, #0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3714      	adds	r7, #20
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr
 8009de4:	ec337800 	.word	0xec337800
 8009de8:	eff37800 	.word	0xeff37800

08009dec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b08a      	sub	sp, #40	@ 0x28
 8009df0:	af02      	add	r7, sp, #8
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	4613      	mov	r3, r2
 8009df8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	785b      	ldrb	r3, [r3, #1]
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	f040 817f 	bne.w	800a10c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	691b      	ldr	r3, [r3, #16]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d132      	bne.n	8009e7c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	015a      	lsls	r2, r3, #5
 8009e1a:	69fb      	ldr	r3, [r7, #28]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	69ba      	ldr	r2, [r7, #24]
 8009e26:	0151      	lsls	r1, r2, #5
 8009e28:	69fa      	ldr	r2, [r7, #28]
 8009e2a:	440a      	add	r2, r1
 8009e2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e30:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009e34:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009e38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	015a      	lsls	r2, r3, #5
 8009e3e:	69fb      	ldr	r3, [r7, #28]
 8009e40:	4413      	add	r3, r2
 8009e42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e46:	691b      	ldr	r3, [r3, #16]
 8009e48:	69ba      	ldr	r2, [r7, #24]
 8009e4a:	0151      	lsls	r1, r2, #5
 8009e4c:	69fa      	ldr	r2, [r7, #28]
 8009e4e:	440a      	add	r2, r1
 8009e50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009e58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e5a:	69bb      	ldr	r3, [r7, #24]
 8009e5c:	015a      	lsls	r2, r3, #5
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	4413      	add	r3, r2
 8009e62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e66:	691b      	ldr	r3, [r3, #16]
 8009e68:	69ba      	ldr	r2, [r7, #24]
 8009e6a:	0151      	lsls	r1, r2, #5
 8009e6c:	69fa      	ldr	r2, [r7, #28]
 8009e6e:	440a      	add	r2, r1
 8009e70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e74:	0cdb      	lsrs	r3, r3, #19
 8009e76:	04db      	lsls	r3, r3, #19
 8009e78:	6113      	str	r3, [r2, #16]
 8009e7a:	e097      	b.n	8009fac <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	015a      	lsls	r2, r3, #5
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	4413      	add	r3, r2
 8009e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e88:	691b      	ldr	r3, [r3, #16]
 8009e8a:	69ba      	ldr	r2, [r7, #24]
 8009e8c:	0151      	lsls	r1, r2, #5
 8009e8e:	69fa      	ldr	r2, [r7, #28]
 8009e90:	440a      	add	r2, r1
 8009e92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e96:	0cdb      	lsrs	r3, r3, #19
 8009e98:	04db      	lsls	r3, r3, #19
 8009e9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e9c:	69bb      	ldr	r3, [r7, #24]
 8009e9e:	015a      	lsls	r2, r3, #5
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ea8:	691b      	ldr	r3, [r3, #16]
 8009eaa:	69ba      	ldr	r2, [r7, #24]
 8009eac:	0151      	lsls	r1, r2, #5
 8009eae:	69fa      	ldr	r2, [r7, #28]
 8009eb0:	440a      	add	r2, r1
 8009eb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009eb6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009eba:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009ebe:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009ec0:	69bb      	ldr	r3, [r7, #24]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d11a      	bne.n	8009efc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	691a      	ldr	r2, [r3, #16]
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d903      	bls.n	8009eda <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	689a      	ldr	r2, [r3, #8]
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	015a      	lsls	r2, r3, #5
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	69ba      	ldr	r2, [r7, #24]
 8009eea:	0151      	lsls	r1, r2, #5
 8009eec:	69fa      	ldr	r2, [r7, #28]
 8009eee:	440a      	add	r2, r1
 8009ef0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ef4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009ef8:	6113      	str	r3, [r2, #16]
 8009efa:	e044      	b.n	8009f86 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	691a      	ldr	r2, [r3, #16]
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	4413      	add	r3, r2
 8009f06:	1e5a      	subs	r2, r3, #1
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f10:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	015a      	lsls	r2, r3, #5
 8009f16:	69fb      	ldr	r3, [r7, #28]
 8009f18:	4413      	add	r3, r2
 8009f1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f1e:	691a      	ldr	r2, [r3, #16]
 8009f20:	8afb      	ldrh	r3, [r7, #22]
 8009f22:	04d9      	lsls	r1, r3, #19
 8009f24:	4ba4      	ldr	r3, [pc, #656]	@ (800a1b8 <USB_EPStartXfer+0x3cc>)
 8009f26:	400b      	ands	r3, r1
 8009f28:	69b9      	ldr	r1, [r7, #24]
 8009f2a:	0148      	lsls	r0, r1, #5
 8009f2c:	69f9      	ldr	r1, [r7, #28]
 8009f2e:	4401      	add	r1, r0
 8009f30:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009f34:	4313      	orrs	r3, r2
 8009f36:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	791b      	ldrb	r3, [r3, #4]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d122      	bne.n	8009f86 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	015a      	lsls	r2, r3, #5
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	4413      	add	r3, r2
 8009f48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f4c:	691b      	ldr	r3, [r3, #16]
 8009f4e:	69ba      	ldr	r2, [r7, #24]
 8009f50:	0151      	lsls	r1, r2, #5
 8009f52:	69fa      	ldr	r2, [r7, #28]
 8009f54:	440a      	add	r2, r1
 8009f56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f5a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009f5e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009f60:	69bb      	ldr	r3, [r7, #24]
 8009f62:	015a      	lsls	r2, r3, #5
 8009f64:	69fb      	ldr	r3, [r7, #28]
 8009f66:	4413      	add	r3, r2
 8009f68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f6c:	691a      	ldr	r2, [r3, #16]
 8009f6e:	8afb      	ldrh	r3, [r7, #22]
 8009f70:	075b      	lsls	r3, r3, #29
 8009f72:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009f76:	69b9      	ldr	r1, [r7, #24]
 8009f78:	0148      	lsls	r0, r1, #5
 8009f7a:	69f9      	ldr	r1, [r7, #28]
 8009f7c:	4401      	add	r1, r0
 8009f7e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009f82:	4313      	orrs	r3, r2
 8009f84:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	015a      	lsls	r2, r3, #5
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f92:	691a      	ldr	r2, [r3, #16]
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f9c:	69b9      	ldr	r1, [r7, #24]
 8009f9e:	0148      	lsls	r0, r1, #5
 8009fa0:	69f9      	ldr	r1, [r7, #28]
 8009fa2:	4401      	add	r1, r0
 8009fa4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009fac:	79fb      	ldrb	r3, [r7, #7]
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d14b      	bne.n	800a04a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	69db      	ldr	r3, [r3, #28]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d009      	beq.n	8009fce <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	015a      	lsls	r2, r3, #5
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	69db      	ldr	r3, [r3, #28]
 8009fcc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	791b      	ldrb	r3, [r3, #4]
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d128      	bne.n	800a028 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d110      	bne.n	800a008 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009fe6:	69bb      	ldr	r3, [r7, #24]
 8009fe8:	015a      	lsls	r2, r3, #5
 8009fea:	69fb      	ldr	r3, [r7, #28]
 8009fec:	4413      	add	r3, r2
 8009fee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	69ba      	ldr	r2, [r7, #24]
 8009ff6:	0151      	lsls	r1, r2, #5
 8009ff8:	69fa      	ldr	r2, [r7, #28]
 8009ffa:	440a      	add	r2, r1
 8009ffc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a000:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a004:	6013      	str	r3, [r2, #0]
 800a006:	e00f      	b.n	800a028 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a008:	69bb      	ldr	r3, [r7, #24]
 800a00a:	015a      	lsls	r2, r3, #5
 800a00c:	69fb      	ldr	r3, [r7, #28]
 800a00e:	4413      	add	r3, r2
 800a010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	69ba      	ldr	r2, [r7, #24]
 800a018:	0151      	lsls	r1, r2, #5
 800a01a:	69fa      	ldr	r2, [r7, #28]
 800a01c:	440a      	add	r2, r1
 800a01e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a022:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a026:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	015a      	lsls	r2, r3, #5
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	4413      	add	r3, r2
 800a030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	69ba      	ldr	r2, [r7, #24]
 800a038:	0151      	lsls	r1, r2, #5
 800a03a:	69fa      	ldr	r2, [r7, #28]
 800a03c:	440a      	add	r2, r1
 800a03e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a042:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a046:	6013      	str	r3, [r2, #0]
 800a048:	e166      	b.n	800a318 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	015a      	lsls	r2, r3, #5
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	4413      	add	r3, r2
 800a052:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	69ba      	ldr	r2, [r7, #24]
 800a05a:	0151      	lsls	r1, r2, #5
 800a05c:	69fa      	ldr	r2, [r7, #28]
 800a05e:	440a      	add	r2, r1
 800a060:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a064:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a068:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	791b      	ldrb	r3, [r3, #4]
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d015      	beq.n	800a09e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	691b      	ldr	r3, [r3, #16]
 800a076:	2b00      	cmp	r3, #0
 800a078:	f000 814e 	beq.w	800a318 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a082:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	781b      	ldrb	r3, [r3, #0]
 800a088:	f003 030f 	and.w	r3, r3, #15
 800a08c:	2101      	movs	r1, #1
 800a08e:	fa01 f303 	lsl.w	r3, r1, r3
 800a092:	69f9      	ldr	r1, [r7, #28]
 800a094:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a098:	4313      	orrs	r3, r2
 800a09a:	634b      	str	r3, [r1, #52]	@ 0x34
 800a09c:	e13c      	b.n	800a318 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a09e:	69fb      	ldr	r3, [r7, #28]
 800a0a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d110      	bne.n	800a0d0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a0ae:	69bb      	ldr	r3, [r7, #24]
 800a0b0:	015a      	lsls	r2, r3, #5
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	69ba      	ldr	r2, [r7, #24]
 800a0be:	0151      	lsls	r1, r2, #5
 800a0c0:	69fa      	ldr	r2, [r7, #28]
 800a0c2:	440a      	add	r2, r1
 800a0c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a0cc:	6013      	str	r3, [r2, #0]
 800a0ce:	e00f      	b.n	800a0f0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	015a      	lsls	r2, r3, #5
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	69ba      	ldr	r2, [r7, #24]
 800a0e0:	0151      	lsls	r1, r2, #5
 800a0e2:	69fa      	ldr	r2, [r7, #28]
 800a0e4:	440a      	add	r2, r1
 800a0e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a0ee:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	68d9      	ldr	r1, [r3, #12]
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	781a      	ldrb	r2, [r3, #0]
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	b298      	uxth	r0, r3
 800a0fe:	79fb      	ldrb	r3, [r7, #7]
 800a100:	9300      	str	r3, [sp, #0]
 800a102:	4603      	mov	r3, r0
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	f000 f9b9 	bl	800a47c <USB_WritePacket>
 800a10a:	e105      	b.n	800a318 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	015a      	lsls	r2, r3, #5
 800a110:	69fb      	ldr	r3, [r7, #28]
 800a112:	4413      	add	r3, r2
 800a114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a118:	691b      	ldr	r3, [r3, #16]
 800a11a:	69ba      	ldr	r2, [r7, #24]
 800a11c:	0151      	lsls	r1, r2, #5
 800a11e:	69fa      	ldr	r2, [r7, #28]
 800a120:	440a      	add	r2, r1
 800a122:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a126:	0cdb      	lsrs	r3, r3, #19
 800a128:	04db      	lsls	r3, r3, #19
 800a12a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	015a      	lsls	r2, r3, #5
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	4413      	add	r3, r2
 800a134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	69ba      	ldr	r2, [r7, #24]
 800a13c:	0151      	lsls	r1, r2, #5
 800a13e:	69fa      	ldr	r2, [r7, #28]
 800a140:	440a      	add	r2, r1
 800a142:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a146:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a14a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a14e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d132      	bne.n	800a1bc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	691b      	ldr	r3, [r3, #16]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d003      	beq.n	800a166 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	689a      	ldr	r2, [r3, #8]
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	689a      	ldr	r2, [r3, #8]
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	015a      	lsls	r2, r3, #5
 800a172:	69fb      	ldr	r3, [r7, #28]
 800a174:	4413      	add	r3, r2
 800a176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a17a:	691a      	ldr	r2, [r3, #16]
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	6a1b      	ldr	r3, [r3, #32]
 800a180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a184:	69b9      	ldr	r1, [r7, #24]
 800a186:	0148      	lsls	r0, r1, #5
 800a188:	69f9      	ldr	r1, [r7, #28]
 800a18a:	4401      	add	r1, r0
 800a18c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a190:	4313      	orrs	r3, r2
 800a192:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a194:	69bb      	ldr	r3, [r7, #24]
 800a196:	015a      	lsls	r2, r3, #5
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	4413      	add	r3, r2
 800a19c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1a0:	691b      	ldr	r3, [r3, #16]
 800a1a2:	69ba      	ldr	r2, [r7, #24]
 800a1a4:	0151      	lsls	r1, r2, #5
 800a1a6:	69fa      	ldr	r2, [r7, #28]
 800a1a8:	440a      	add	r2, r1
 800a1aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a1b2:	6113      	str	r3, [r2, #16]
 800a1b4:	e062      	b.n	800a27c <USB_EPStartXfer+0x490>
 800a1b6:	bf00      	nop
 800a1b8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d123      	bne.n	800a20c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a1c4:	69bb      	ldr	r3, [r7, #24]
 800a1c6:	015a      	lsls	r2, r3, #5
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1d0:	691a      	ldr	r2, [r3, #16]
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1da:	69b9      	ldr	r1, [r7, #24]
 800a1dc:	0148      	lsls	r0, r1, #5
 800a1de:	69f9      	ldr	r1, [r7, #28]
 800a1e0:	4401      	add	r1, r0
 800a1e2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	015a      	lsls	r2, r3, #5
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1f6:	691b      	ldr	r3, [r3, #16]
 800a1f8:	69ba      	ldr	r2, [r7, #24]
 800a1fa:	0151      	lsls	r1, r2, #5
 800a1fc:	69fa      	ldr	r2, [r7, #28]
 800a1fe:	440a      	add	r2, r1
 800a200:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a204:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a208:	6113      	str	r3, [r2, #16]
 800a20a:	e037      	b.n	800a27c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	691a      	ldr	r2, [r3, #16]
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	689b      	ldr	r3, [r3, #8]
 800a214:	4413      	add	r3, r2
 800a216:	1e5a      	subs	r2, r3, #1
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	689b      	ldr	r3, [r3, #8]
 800a21c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a220:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	689b      	ldr	r3, [r3, #8]
 800a226:	8afa      	ldrh	r2, [r7, #22]
 800a228:	fb03 f202 	mul.w	r2, r3, r2
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	015a      	lsls	r2, r3, #5
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	4413      	add	r3, r2
 800a238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a23c:	691a      	ldr	r2, [r3, #16]
 800a23e:	8afb      	ldrh	r3, [r7, #22]
 800a240:	04d9      	lsls	r1, r3, #19
 800a242:	4b38      	ldr	r3, [pc, #224]	@ (800a324 <USB_EPStartXfer+0x538>)
 800a244:	400b      	ands	r3, r1
 800a246:	69b9      	ldr	r1, [r7, #24]
 800a248:	0148      	lsls	r0, r1, #5
 800a24a:	69f9      	ldr	r1, [r7, #28]
 800a24c:	4401      	add	r1, r0
 800a24e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a252:	4313      	orrs	r3, r2
 800a254:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	015a      	lsls	r2, r3, #5
 800a25a:	69fb      	ldr	r3, [r7, #28]
 800a25c:	4413      	add	r3, r2
 800a25e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a262:	691a      	ldr	r2, [r3, #16]
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	6a1b      	ldr	r3, [r3, #32]
 800a268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a26c:	69b9      	ldr	r1, [r7, #24]
 800a26e:	0148      	lsls	r0, r1, #5
 800a270:	69f9      	ldr	r1, [r7, #28]
 800a272:	4401      	add	r1, r0
 800a274:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a278:	4313      	orrs	r3, r2
 800a27a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a27c:	79fb      	ldrb	r3, [r7, #7]
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d10d      	bne.n	800a29e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d009      	beq.n	800a29e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	68d9      	ldr	r1, [r3, #12]
 800a28e:	69bb      	ldr	r3, [r7, #24]
 800a290:	015a      	lsls	r2, r3, #5
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	4413      	add	r3, r2
 800a296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a29a:	460a      	mov	r2, r1
 800a29c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	791b      	ldrb	r3, [r3, #4]
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d128      	bne.n	800a2f8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a2a6:	69fb      	ldr	r3, [r7, #28]
 800a2a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2ac:	689b      	ldr	r3, [r3, #8]
 800a2ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d110      	bne.n	800a2d8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a2b6:	69bb      	ldr	r3, [r7, #24]
 800a2b8:	015a      	lsls	r2, r3, #5
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	4413      	add	r3, r2
 800a2be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	69ba      	ldr	r2, [r7, #24]
 800a2c6:	0151      	lsls	r1, r2, #5
 800a2c8:	69fa      	ldr	r2, [r7, #28]
 800a2ca:	440a      	add	r2, r1
 800a2cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a2d4:	6013      	str	r3, [r2, #0]
 800a2d6:	e00f      	b.n	800a2f8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	015a      	lsls	r2, r3, #5
 800a2dc:	69fb      	ldr	r3, [r7, #28]
 800a2de:	4413      	add	r3, r2
 800a2e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	69ba      	ldr	r2, [r7, #24]
 800a2e8:	0151      	lsls	r1, r2, #5
 800a2ea:	69fa      	ldr	r2, [r7, #28]
 800a2ec:	440a      	add	r2, r1
 800a2ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a2f6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	015a      	lsls	r2, r3, #5
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	4413      	add	r3, r2
 800a300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	69ba      	ldr	r2, [r7, #24]
 800a308:	0151      	lsls	r1, r2, #5
 800a30a:	69fa      	ldr	r2, [r7, #28]
 800a30c:	440a      	add	r2, r1
 800a30e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a312:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a316:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a318:	2300      	movs	r3, #0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3720      	adds	r7, #32
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	1ff80000 	.word	0x1ff80000

0800a328 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a328:	b480      	push	{r7}
 800a32a:	b087      	sub	sp, #28
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a332:	2300      	movs	r3, #0
 800a334:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a336:	2300      	movs	r3, #0
 800a338:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	785b      	ldrb	r3, [r3, #1]
 800a342:	2b01      	cmp	r3, #1
 800a344:	d14a      	bne.n	800a3dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	015a      	lsls	r2, r3, #5
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	4413      	add	r3, r2
 800a350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a35a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a35e:	f040 8086 	bne.w	800a46e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	015a      	lsls	r2, r3, #5
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	4413      	add	r3, r2
 800a36c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	683a      	ldr	r2, [r7, #0]
 800a374:	7812      	ldrb	r2, [r2, #0]
 800a376:	0151      	lsls	r1, r2, #5
 800a378:	693a      	ldr	r2, [r7, #16]
 800a37a:	440a      	add	r2, r1
 800a37c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a380:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a384:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	015a      	lsls	r2, r3, #5
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	4413      	add	r3, r2
 800a390:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	683a      	ldr	r2, [r7, #0]
 800a398:	7812      	ldrb	r2, [r2, #0]
 800a39a:	0151      	lsls	r1, r2, #5
 800a39c:	693a      	ldr	r2, [r7, #16]
 800a39e:	440a      	add	r2, r1
 800a3a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a3a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d902      	bls.n	800a3c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	75fb      	strb	r3, [r7, #23]
          break;
 800a3be:	e056      	b.n	800a46e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	015a      	lsls	r2, r3, #5
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a3d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a3d8:	d0e7      	beq.n	800a3aa <USB_EPStopXfer+0x82>
 800a3da:	e048      	b.n	800a46e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	015a      	lsls	r2, r3, #5
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a3f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a3f4:	d13b      	bne.n	800a46e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	015a      	lsls	r2, r3, #5
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	4413      	add	r3, r2
 800a400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	683a      	ldr	r2, [r7, #0]
 800a408:	7812      	ldrb	r2, [r2, #0]
 800a40a:	0151      	lsls	r1, r2, #5
 800a40c:	693a      	ldr	r2, [r7, #16]
 800a40e:	440a      	add	r2, r1
 800a410:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a414:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a418:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	015a      	lsls	r2, r3, #5
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	4413      	add	r3, r2
 800a424:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	683a      	ldr	r2, [r7, #0]
 800a42c:	7812      	ldrb	r2, [r2, #0]
 800a42e:	0151      	lsls	r1, r2, #5
 800a430:	693a      	ldr	r2, [r7, #16]
 800a432:	440a      	add	r2, r1
 800a434:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a438:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a43c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	3301      	adds	r3, #1
 800a442:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d902      	bls.n	800a454 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a44e:	2301      	movs	r3, #1
 800a450:	75fb      	strb	r3, [r7, #23]
          break;
 800a452:	e00c      	b.n	800a46e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	781b      	ldrb	r3, [r3, #0]
 800a458:	015a      	lsls	r2, r3, #5
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	4413      	add	r3, r2
 800a45e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a468:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a46c:	d0e7      	beq.n	800a43e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a46e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a470:	4618      	mov	r0, r3
 800a472:	371c      	adds	r7, #28
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b089      	sub	sp, #36	@ 0x24
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	4611      	mov	r1, r2
 800a488:	461a      	mov	r2, r3
 800a48a:	460b      	mov	r3, r1
 800a48c:	71fb      	strb	r3, [r7, #7]
 800a48e:	4613      	mov	r3, r2
 800a490:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a49a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d123      	bne.n	800a4ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a4a2:	88bb      	ldrh	r3, [r7, #4]
 800a4a4:	3303      	adds	r3, #3
 800a4a6:	089b      	lsrs	r3, r3, #2
 800a4a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	61bb      	str	r3, [r7, #24]
 800a4ae:	e018      	b.n	800a4e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a4b0:	79fb      	ldrb	r3, [r7, #7]
 800a4b2:	031a      	lsls	r2, r3, #12
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	4413      	add	r3, r2
 800a4b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a4bc:	461a      	mov	r2, r3
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a4ca:	69fb      	ldr	r3, [r7, #28]
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a4d6:	69fb      	ldr	r3, [r7, #28]
 800a4d8:	3301      	adds	r3, #1
 800a4da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a4dc:	69bb      	ldr	r3, [r7, #24]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	61bb      	str	r3, [r7, #24]
 800a4e2:	69ba      	ldr	r2, [r7, #24]
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d3e2      	bcc.n	800a4b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a4ea:	2300      	movs	r3, #0
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3724      	adds	r7, #36	@ 0x24
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b08b      	sub	sp, #44	@ 0x2c
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	60b9      	str	r1, [r7, #8]
 800a502:	4613      	mov	r3, r2
 800a504:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a50e:	88fb      	ldrh	r3, [r7, #6]
 800a510:	089b      	lsrs	r3, r3, #2
 800a512:	b29b      	uxth	r3, r3
 800a514:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a516:	88fb      	ldrh	r3, [r7, #6]
 800a518:	f003 0303 	and.w	r3, r3, #3
 800a51c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a51e:	2300      	movs	r3, #0
 800a520:	623b      	str	r3, [r7, #32]
 800a522:	e014      	b.n	800a54e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a52e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a532:	3301      	adds	r3, #1
 800a534:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a538:	3301      	adds	r3, #1
 800a53a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a53c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a53e:	3301      	adds	r3, #1
 800a540:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a544:	3301      	adds	r3, #1
 800a546:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a548:	6a3b      	ldr	r3, [r7, #32]
 800a54a:	3301      	adds	r3, #1
 800a54c:	623b      	str	r3, [r7, #32]
 800a54e:	6a3a      	ldr	r2, [r7, #32]
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	429a      	cmp	r2, r3
 800a554:	d3e6      	bcc.n	800a524 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a556:	8bfb      	ldrh	r3, [r7, #30]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d01e      	beq.n	800a59a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a55c:	2300      	movs	r3, #0
 800a55e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a566:	461a      	mov	r2, r3
 800a568:	f107 0310 	add.w	r3, r7, #16
 800a56c:	6812      	ldr	r2, [r2, #0]
 800a56e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a570:	693a      	ldr	r2, [r7, #16]
 800a572:	6a3b      	ldr	r3, [r7, #32]
 800a574:	b2db      	uxtb	r3, r3
 800a576:	00db      	lsls	r3, r3, #3
 800a578:	fa22 f303 	lsr.w	r3, r2, r3
 800a57c:	b2da      	uxtb	r2, r3
 800a57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a580:	701a      	strb	r2, [r3, #0]
      i++;
 800a582:	6a3b      	ldr	r3, [r7, #32]
 800a584:	3301      	adds	r3, #1
 800a586:	623b      	str	r3, [r7, #32]
      pDest++;
 800a588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a58a:	3301      	adds	r3, #1
 800a58c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a58e:	8bfb      	ldrh	r3, [r7, #30]
 800a590:	3b01      	subs	r3, #1
 800a592:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a594:	8bfb      	ldrh	r3, [r7, #30]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d1ea      	bne.n	800a570 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	372c      	adds	r7, #44	@ 0x2c
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b085      	sub	sp, #20
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	785b      	ldrb	r3, [r3, #1]
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d12c      	bne.n	800a61e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	015a      	lsls	r2, r3, #5
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	4413      	add	r3, r2
 800a5cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	db12      	blt.n	800a5fc <USB_EPSetStall+0x54>
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00f      	beq.n	800a5fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	015a      	lsls	r2, r3, #5
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	4413      	add	r3, r2
 800a5e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	68ba      	ldr	r2, [r7, #8]
 800a5ec:	0151      	lsls	r1, r2, #5
 800a5ee:	68fa      	ldr	r2, [r7, #12]
 800a5f0:	440a      	add	r2, r1
 800a5f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a5fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	015a      	lsls	r2, r3, #5
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	4413      	add	r3, r2
 800a604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	68ba      	ldr	r2, [r7, #8]
 800a60c:	0151      	lsls	r1, r2, #5
 800a60e:	68fa      	ldr	r2, [r7, #12]
 800a610:	440a      	add	r2, r1
 800a612:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a616:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a61a:	6013      	str	r3, [r2, #0]
 800a61c:	e02b      	b.n	800a676 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	015a      	lsls	r2, r3, #5
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	4413      	add	r3, r2
 800a626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	db12      	blt.n	800a656 <USB_EPSetStall+0xae>
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d00f      	beq.n	800a656 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	015a      	lsls	r2, r3, #5
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	4413      	add	r3, r2
 800a63e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	68ba      	ldr	r2, [r7, #8]
 800a646:	0151      	lsls	r1, r2, #5
 800a648:	68fa      	ldr	r2, [r7, #12]
 800a64a:	440a      	add	r2, r1
 800a64c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a650:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a654:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	015a      	lsls	r2, r3, #5
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	4413      	add	r3, r2
 800a65e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68ba      	ldr	r2, [r7, #8]
 800a666:	0151      	lsls	r1, r2, #5
 800a668:	68fa      	ldr	r2, [r7, #12]
 800a66a:	440a      	add	r2, r1
 800a66c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a670:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a674:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a676:	2300      	movs	r3, #0
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3714      	adds	r7, #20
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a684:	b480      	push	{r7}
 800a686:	b085      	sub	sp, #20
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	785b      	ldrb	r3, [r3, #1]
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d128      	bne.n	800a6f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	015a      	lsls	r2, r3, #5
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	4413      	add	r3, r2
 800a6a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	68ba      	ldr	r2, [r7, #8]
 800a6b0:	0151      	lsls	r1, r2, #5
 800a6b2:	68fa      	ldr	r2, [r7, #12]
 800a6b4:	440a      	add	r2, r1
 800a6b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a6be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	791b      	ldrb	r3, [r3, #4]
 800a6c4:	2b03      	cmp	r3, #3
 800a6c6:	d003      	beq.n	800a6d0 <USB_EPClearStall+0x4c>
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	791b      	ldrb	r3, [r3, #4]
 800a6cc:	2b02      	cmp	r3, #2
 800a6ce:	d138      	bne.n	800a742 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	015a      	lsls	r2, r3, #5
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	4413      	add	r3, r2
 800a6d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	68ba      	ldr	r2, [r7, #8]
 800a6e0:	0151      	lsls	r1, r2, #5
 800a6e2:	68fa      	ldr	r2, [r7, #12]
 800a6e4:	440a      	add	r2, r1
 800a6e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a6ee:	6013      	str	r3, [r2, #0]
 800a6f0:	e027      	b.n	800a742 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	015a      	lsls	r2, r3, #5
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	68ba      	ldr	r2, [r7, #8]
 800a702:	0151      	lsls	r1, r2, #5
 800a704:	68fa      	ldr	r2, [r7, #12]
 800a706:	440a      	add	r2, r1
 800a708:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a70c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a710:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	791b      	ldrb	r3, [r3, #4]
 800a716:	2b03      	cmp	r3, #3
 800a718:	d003      	beq.n	800a722 <USB_EPClearStall+0x9e>
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	791b      	ldrb	r3, [r3, #4]
 800a71e:	2b02      	cmp	r3, #2
 800a720:	d10f      	bne.n	800a742 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	015a      	lsls	r2, r3, #5
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	4413      	add	r3, r2
 800a72a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	68ba      	ldr	r2, [r7, #8]
 800a732:	0151      	lsls	r1, r2, #5
 800a734:	68fa      	ldr	r2, [r7, #12]
 800a736:	440a      	add	r2, r1
 800a738:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a73c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a740:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a742:	2300      	movs	r3, #0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3714      	adds	r7, #20
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a750:	b480      	push	{r7}
 800a752:	b085      	sub	sp, #20
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	460b      	mov	r3, r1
 800a75a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a76e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a772:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	78fb      	ldrb	r3, [r7, #3]
 800a77e:	011b      	lsls	r3, r3, #4
 800a780:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a784:	68f9      	ldr	r1, [r7, #12]
 800a786:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a78a:	4313      	orrs	r3, r2
 800a78c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a78e:	2300      	movs	r3, #0
}
 800a790:	4618      	mov	r0, r3
 800a792:	3714      	adds	r7, #20
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr

0800a79c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b085      	sub	sp, #20
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	68fa      	ldr	r2, [r7, #12]
 800a7b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a7b6:	f023 0303 	bic.w	r3, r3, #3
 800a7ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	68fa      	ldr	r2, [r7, #12]
 800a7c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a7ca:	f023 0302 	bic.w	r3, r3, #2
 800a7ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3714      	adds	r7, #20
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr

0800a7de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a7de:	b480      	push	{r7}
 800a7e0:	b085      	sub	sp, #20
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	68fa      	ldr	r2, [r7, #12]
 800a7f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a7f8:	f023 0303 	bic.w	r3, r3, #3
 800a7fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a80c:	f043 0302 	orr.w	r3, r3, #2
 800a810:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	3714      	adds	r7, #20
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a820:	b480      	push	{r7}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	695b      	ldr	r3, [r3, #20]
 800a82c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	699b      	ldr	r3, [r3, #24]
 800a832:	68fa      	ldr	r2, [r7, #12]
 800a834:	4013      	ands	r3, r2
 800a836:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a838:	68fb      	ldr	r3, [r7, #12]
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3714      	adds	r7, #20
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr

0800a846 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a846:	b480      	push	{r7}
 800a848:	b085      	sub	sp, #20
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a858:	699b      	ldr	r3, [r3, #24]
 800a85a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a862:	69db      	ldr	r3, [r3, #28]
 800a864:	68ba      	ldr	r2, [r7, #8]
 800a866:	4013      	ands	r3, r2
 800a868:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	0c1b      	lsrs	r3, r3, #16
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3714      	adds	r7, #20
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr

0800a87a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a87a:	b480      	push	{r7}
 800a87c:	b085      	sub	sp, #20
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a88c:	699b      	ldr	r3, [r3, #24]
 800a88e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a896:	69db      	ldr	r3, [r3, #28]
 800a898:	68ba      	ldr	r2, [r7, #8]
 800a89a:	4013      	ands	r3, r2
 800a89c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	b29b      	uxth	r3, r3
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3714      	adds	r7, #20
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr

0800a8ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a8ae:	b480      	push	{r7}
 800a8b0:	b085      	sub	sp, #20
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	6078      	str	r0, [r7, #4]
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a8be:	78fb      	ldrb	r3, [r7, #3]
 800a8c0:	015a      	lsls	r2, r3, #5
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	4413      	add	r3, r2
 800a8c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8d4:	695b      	ldr	r3, [r3, #20]
 800a8d6:	68ba      	ldr	r2, [r7, #8]
 800a8d8:	4013      	ands	r3, r2
 800a8da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a8dc:	68bb      	ldr	r3, [r7, #8]
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3714      	adds	r7, #20
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr

0800a8ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a8ea:	b480      	push	{r7}
 800a8ec:	b087      	sub	sp, #28
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
 800a8f2:	460b      	mov	r3, r1
 800a8f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a900:	691b      	ldr	r3, [r3, #16]
 800a902:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a90a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a90c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a90e:	78fb      	ldrb	r3, [r7, #3]
 800a910:	f003 030f 	and.w	r3, r3, #15
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	fa22 f303 	lsr.w	r3, r2, r3
 800a91a:	01db      	lsls	r3, r3, #7
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	693a      	ldr	r2, [r7, #16]
 800a920:	4313      	orrs	r3, r2
 800a922:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a924:	78fb      	ldrb	r3, [r7, #3]
 800a926:	015a      	lsls	r2, r3, #5
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	4413      	add	r3, r2
 800a92c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a930:	689b      	ldr	r3, [r3, #8]
 800a932:	693a      	ldr	r2, [r7, #16]
 800a934:	4013      	ands	r3, r2
 800a936:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a938:	68bb      	ldr	r3, [r7, #8]
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	371c      	adds	r7, #28
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr

0800a946 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a946:	b480      	push	{r7}
 800a948:	b083      	sub	sp, #12
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	695b      	ldr	r3, [r3, #20]
 800a952:	f003 0301 	and.w	r3, r3, #1
}
 800a956:	4618      	mov	r0, r3
 800a958:	370c      	adds	r7, #12
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr

0800a962 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a962:	b480      	push	{r7}
 800a964:	b085      	sub	sp, #20
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	68fa      	ldr	r2, [r7, #12]
 800a978:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a97c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a980:	f023 0307 	bic.w	r3, r3, #7
 800a984:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	68fa      	ldr	r2, [r7, #12]
 800a990:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a998:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a99a:	2300      	movs	r3, #0
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3714      	adds	r7, #20
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b087      	sub	sp, #28
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	460b      	mov	r3, r1
 800a9b2:	607a      	str	r2, [r7, #4]
 800a9b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	333c      	adds	r3, #60	@ 0x3c
 800a9be:	3304      	adds	r3, #4
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	4a26      	ldr	r2, [pc, #152]	@ (800aa60 <USB_EP0_OutStart+0xb8>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d90a      	bls.n	800a9e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a9d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a9dc:	d101      	bne.n	800a9e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	e037      	b.n	800aa52 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9f4:	691b      	ldr	r3, [r3, #16]
 800a9f6:	697a      	ldr	r2, [r7, #20]
 800a9f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aa00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa08:	691b      	ldr	r3, [r3, #16]
 800aa0a:	697a      	ldr	r2, [r7, #20]
 800aa0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa10:	f043 0318 	orr.w	r3, r3, #24
 800aa14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa1c:	691b      	ldr	r3, [r3, #16]
 800aa1e:	697a      	ldr	r2, [r7, #20]
 800aa20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa24:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800aa28:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800aa2a:	7afb      	ldrb	r3, [r7, #11]
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d10f      	bne.n	800aa50 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa36:	461a      	mov	r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	697a      	ldr	r2, [r7, #20]
 800aa46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa4a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800aa4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aa50:	2300      	movs	r3, #0
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	371c      	adds	r7, #28
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr
 800aa5e:	bf00      	nop
 800aa60:	4f54300a 	.word	0x4f54300a

0800aa64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b085      	sub	sp, #20
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	3301      	adds	r3, #1
 800aa74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa7c:	d901      	bls.n	800aa82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aa7e:	2303      	movs	r3, #3
 800aa80:	e01b      	b.n	800aaba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	691b      	ldr	r3, [r3, #16]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	daf2      	bge.n	800aa70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	691b      	ldr	r3, [r3, #16]
 800aa92:	f043 0201 	orr.w	r2, r3, #1
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aaa6:	d901      	bls.n	800aaac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aaa8:	2303      	movs	r3, #3
 800aaaa:	e006      	b.n	800aaba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	691b      	ldr	r3, [r3, #16]
 800aab0:	f003 0301 	and.w	r3, r3, #1
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d0f0      	beq.n	800aa9a <USB_CoreReset+0x36>

  return HAL_OK;
 800aab8:	2300      	movs	r3, #0
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3714      	adds	r7, #20
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr
	...

0800aac8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	460b      	mov	r3, r1
 800aad2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aad4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800aad8:	f7f7 f884 	bl	8001be4 <USBD_static_malloc>
 800aadc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d109      	bne.n	800aaf8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	32b0      	adds	r2, #176	@ 0xb0
 800aaee:	2100      	movs	r1, #0
 800aaf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800aaf4:	2302      	movs	r3, #2
 800aaf6:	e0d4      	b.n	800aca2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800aaf8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800aafc:	2100      	movs	r1, #0
 800aafe:	68f8      	ldr	r0, [r7, #12]
 800ab00:	f001 ffd4 	bl	800caac <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	32b0      	adds	r2, #176	@ 0xb0
 800ab0e:	68f9      	ldr	r1, [r7, #12]
 800ab10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	32b0      	adds	r2, #176	@ 0xb0
 800ab1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	7c1b      	ldrb	r3, [r3, #16]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d138      	bne.n	800aba2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ab30:	4b5e      	ldr	r3, [pc, #376]	@ (800acac <USBD_CDC_Init+0x1e4>)
 800ab32:	7819      	ldrb	r1, [r3, #0]
 800ab34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ab38:	2202      	movs	r2, #2
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f7f6 ff2f 	bl	800199e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ab40:	4b5a      	ldr	r3, [pc, #360]	@ (800acac <USBD_CDC_Init+0x1e4>)
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	f003 020f 	and.w	r2, r3, #15
 800ab48:	6879      	ldr	r1, [r7, #4]
 800ab4a:	4613      	mov	r3, r2
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	4413      	add	r3, r2
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	440b      	add	r3, r1
 800ab54:	3324      	adds	r3, #36	@ 0x24
 800ab56:	2201      	movs	r2, #1
 800ab58:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ab5a:	4b55      	ldr	r3, [pc, #340]	@ (800acb0 <USBD_CDC_Init+0x1e8>)
 800ab5c:	7819      	ldrb	r1, [r3, #0]
 800ab5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ab62:	2202      	movs	r2, #2
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f7f6 ff1a 	bl	800199e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ab6a:	4b51      	ldr	r3, [pc, #324]	@ (800acb0 <USBD_CDC_Init+0x1e8>)
 800ab6c:	781b      	ldrb	r3, [r3, #0]
 800ab6e:	f003 020f 	and.w	r2, r3, #15
 800ab72:	6879      	ldr	r1, [r7, #4]
 800ab74:	4613      	mov	r3, r2
 800ab76:	009b      	lsls	r3, r3, #2
 800ab78:	4413      	add	r3, r2
 800ab7a:	009b      	lsls	r3, r3, #2
 800ab7c:	440b      	add	r3, r1
 800ab7e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ab82:	2201      	movs	r2, #1
 800ab84:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ab86:	4b4b      	ldr	r3, [pc, #300]	@ (800acb4 <USBD_CDC_Init+0x1ec>)
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	f003 020f 	and.w	r2, r3, #15
 800ab8e:	6879      	ldr	r1, [r7, #4]
 800ab90:	4613      	mov	r3, r2
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	4413      	add	r3, r2
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	440b      	add	r3, r1
 800ab9a:	3326      	adds	r3, #38	@ 0x26
 800ab9c:	2210      	movs	r2, #16
 800ab9e:	801a      	strh	r2, [r3, #0]
 800aba0:	e035      	b.n	800ac0e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aba2:	4b42      	ldr	r3, [pc, #264]	@ (800acac <USBD_CDC_Init+0x1e4>)
 800aba4:	7819      	ldrb	r1, [r3, #0]
 800aba6:	2340      	movs	r3, #64	@ 0x40
 800aba8:	2202      	movs	r2, #2
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f7f6 fef7 	bl	800199e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800abb0:	4b3e      	ldr	r3, [pc, #248]	@ (800acac <USBD_CDC_Init+0x1e4>)
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	f003 020f 	and.w	r2, r3, #15
 800abb8:	6879      	ldr	r1, [r7, #4]
 800abba:	4613      	mov	r3, r2
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	4413      	add	r3, r2
 800abc0:	009b      	lsls	r3, r3, #2
 800abc2:	440b      	add	r3, r1
 800abc4:	3324      	adds	r3, #36	@ 0x24
 800abc6:	2201      	movs	r2, #1
 800abc8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800abca:	4b39      	ldr	r3, [pc, #228]	@ (800acb0 <USBD_CDC_Init+0x1e8>)
 800abcc:	7819      	ldrb	r1, [r3, #0]
 800abce:	2340      	movs	r3, #64	@ 0x40
 800abd0:	2202      	movs	r2, #2
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f7f6 fee3 	bl	800199e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800abd8:	4b35      	ldr	r3, [pc, #212]	@ (800acb0 <USBD_CDC_Init+0x1e8>)
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	f003 020f 	and.w	r2, r3, #15
 800abe0:	6879      	ldr	r1, [r7, #4]
 800abe2:	4613      	mov	r3, r2
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	4413      	add	r3, r2
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	440b      	add	r3, r1
 800abec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800abf0:	2201      	movs	r2, #1
 800abf2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800abf4:	4b2f      	ldr	r3, [pc, #188]	@ (800acb4 <USBD_CDC_Init+0x1ec>)
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	f003 020f 	and.w	r2, r3, #15
 800abfc:	6879      	ldr	r1, [r7, #4]
 800abfe:	4613      	mov	r3, r2
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	4413      	add	r3, r2
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	440b      	add	r3, r1
 800ac08:	3326      	adds	r3, #38	@ 0x26
 800ac0a:	2210      	movs	r2, #16
 800ac0c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ac0e:	4b29      	ldr	r3, [pc, #164]	@ (800acb4 <USBD_CDC_Init+0x1ec>)
 800ac10:	7819      	ldrb	r1, [r3, #0]
 800ac12:	2308      	movs	r3, #8
 800ac14:	2203      	movs	r2, #3
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f7f6 fec1 	bl	800199e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ac1c:	4b25      	ldr	r3, [pc, #148]	@ (800acb4 <USBD_CDC_Init+0x1ec>)
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	f003 020f 	and.w	r2, r3, #15
 800ac24:	6879      	ldr	r1, [r7, #4]
 800ac26:	4613      	mov	r3, r2
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	4413      	add	r3, r2
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	440b      	add	r3, r1
 800ac30:	3324      	adds	r3, #36	@ 0x24
 800ac32:	2201      	movs	r2, #1
 800ac34:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	33b0      	adds	r3, #176	@ 0xb0
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	4413      	add	r3, r2
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2200      	movs	r2, #0
 800ac56:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d101      	bne.n	800ac70 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ac6c:	2302      	movs	r3, #2
 800ac6e:	e018      	b.n	800aca2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	7c1b      	ldrb	r3, [r3, #16]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d10a      	bne.n	800ac8e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ac78:	4b0d      	ldr	r3, [pc, #52]	@ (800acb0 <USBD_CDC_Init+0x1e8>)
 800ac7a:	7819      	ldrb	r1, [r3, #0]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ac82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f7f6 ff78 	bl	8001b7c <USBD_LL_PrepareReceive>
 800ac8c:	e008      	b.n	800aca0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ac8e:	4b08      	ldr	r3, [pc, #32]	@ (800acb0 <USBD_CDC_Init+0x1e8>)
 800ac90:	7819      	ldrb	r1, [r3, #0]
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ac98:	2340      	movs	r3, #64	@ 0x40
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f7f6 ff6e 	bl	8001b7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aca0:	2300      	movs	r3, #0
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3710      	adds	r7, #16
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	20000157 	.word	0x20000157
 800acb0:	20000158 	.word	0x20000158
 800acb4:	20000159 	.word	0x20000159

0800acb8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b082      	sub	sp, #8
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	460b      	mov	r3, r1
 800acc2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800acc4:	4b3a      	ldr	r3, [pc, #232]	@ (800adb0 <USBD_CDC_DeInit+0xf8>)
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	4619      	mov	r1, r3
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f7f6 fe8d 	bl	80019ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800acd0:	4b37      	ldr	r3, [pc, #220]	@ (800adb0 <USBD_CDC_DeInit+0xf8>)
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	f003 020f 	and.w	r2, r3, #15
 800acd8:	6879      	ldr	r1, [r7, #4]
 800acda:	4613      	mov	r3, r2
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	4413      	add	r3, r2
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	440b      	add	r3, r1
 800ace4:	3324      	adds	r3, #36	@ 0x24
 800ace6:	2200      	movs	r2, #0
 800ace8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800acea:	4b32      	ldr	r3, [pc, #200]	@ (800adb4 <USBD_CDC_DeInit+0xfc>)
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	4619      	mov	r1, r3
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f7f6 fe7a 	bl	80019ea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800acf6:	4b2f      	ldr	r3, [pc, #188]	@ (800adb4 <USBD_CDC_DeInit+0xfc>)
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	f003 020f 	and.w	r2, r3, #15
 800acfe:	6879      	ldr	r1, [r7, #4]
 800ad00:	4613      	mov	r3, r2
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	4413      	add	r3, r2
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	440b      	add	r3, r1
 800ad0a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ad0e:	2200      	movs	r2, #0
 800ad10:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ad12:	4b29      	ldr	r3, [pc, #164]	@ (800adb8 <USBD_CDC_DeInit+0x100>)
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	4619      	mov	r1, r3
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f7f6 fe66 	bl	80019ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ad1e:	4b26      	ldr	r3, [pc, #152]	@ (800adb8 <USBD_CDC_DeInit+0x100>)
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	f003 020f 	and.w	r2, r3, #15
 800ad26:	6879      	ldr	r1, [r7, #4]
 800ad28:	4613      	mov	r3, r2
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	4413      	add	r3, r2
 800ad2e:	009b      	lsls	r3, r3, #2
 800ad30:	440b      	add	r3, r1
 800ad32:	3324      	adds	r3, #36	@ 0x24
 800ad34:	2200      	movs	r2, #0
 800ad36:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ad38:	4b1f      	ldr	r3, [pc, #124]	@ (800adb8 <USBD_CDC_DeInit+0x100>)
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	f003 020f 	and.w	r2, r3, #15
 800ad40:	6879      	ldr	r1, [r7, #4]
 800ad42:	4613      	mov	r3, r2
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	4413      	add	r3, r2
 800ad48:	009b      	lsls	r3, r3, #2
 800ad4a:	440b      	add	r3, r1
 800ad4c:	3326      	adds	r3, #38	@ 0x26
 800ad4e:	2200      	movs	r2, #0
 800ad50:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	32b0      	adds	r2, #176	@ 0xb0
 800ad5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d01f      	beq.n	800ada4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	33b0      	adds	r3, #176	@ 0xb0
 800ad6e:	009b      	lsls	r3, r3, #2
 800ad70:	4413      	add	r3, r2
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	32b0      	adds	r2, #176	@ 0xb0
 800ad82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad86:	4618      	mov	r0, r3
 800ad88:	f7f6 ff3a 	bl	8001c00 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	32b0      	adds	r2, #176	@ 0xb0
 800ad96:	2100      	movs	r1, #0
 800ad98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ada4:	2300      	movs	r3, #0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	20000157 	.word	0x20000157
 800adb4:	20000158 	.word	0x20000158
 800adb8:	20000159 	.word	0x20000159

0800adbc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b086      	sub	sp, #24
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	32b0      	adds	r2, #176	@ 0xb0
 800add0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800add4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800add6:	2300      	movs	r3, #0
 800add8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800adda:	2300      	movs	r3, #0
 800addc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800adde:	2300      	movs	r3, #0
 800ade0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d101      	bne.n	800adec <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ade8:	2303      	movs	r3, #3
 800adea:	e0bf      	b.n	800af6c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d050      	beq.n	800ae9a <USBD_CDC_Setup+0xde>
 800adf8:	2b20      	cmp	r3, #32
 800adfa:	f040 80af 	bne.w	800af5c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	88db      	ldrh	r3, [r3, #6]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d03a      	beq.n	800ae7c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	b25b      	sxtb	r3, r3
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	da1b      	bge.n	800ae48 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	33b0      	adds	r3, #176	@ 0xb0
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	4413      	add	r3, r2
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	689b      	ldr	r3, [r3, #8]
 800ae22:	683a      	ldr	r2, [r7, #0]
 800ae24:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ae26:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ae28:	683a      	ldr	r2, [r7, #0]
 800ae2a:	88d2      	ldrh	r2, [r2, #6]
 800ae2c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	88db      	ldrh	r3, [r3, #6]
 800ae32:	2b07      	cmp	r3, #7
 800ae34:	bf28      	it	cs
 800ae36:	2307      	movcs	r3, #7
 800ae38:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	89fa      	ldrh	r2, [r7, #14]
 800ae3e:	4619      	mov	r1, r3
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f001 fd93 	bl	800c96c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ae46:	e090      	b.n	800af6a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	785a      	ldrb	r2, [r3, #1]
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	88db      	ldrh	r3, [r3, #6]
 800ae56:	2b3f      	cmp	r3, #63	@ 0x3f
 800ae58:	d803      	bhi.n	800ae62 <USBD_CDC_Setup+0xa6>
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	88db      	ldrh	r3, [r3, #6]
 800ae5e:	b2da      	uxtb	r2, r3
 800ae60:	e000      	b.n	800ae64 <USBD_CDC_Setup+0xa8>
 800ae62:	2240      	movs	r2, #64	@ 0x40
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ae6a:	6939      	ldr	r1, [r7, #16]
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ae72:	461a      	mov	r2, r3
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f001 fda5 	bl	800c9c4 <USBD_CtlPrepareRx>
      break;
 800ae7a:	e076      	b.n	800af6a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	33b0      	adds	r3, #176	@ 0xb0
 800ae86:	009b      	lsls	r3, r3, #2
 800ae88:	4413      	add	r3, r2
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	689b      	ldr	r3, [r3, #8]
 800ae8e:	683a      	ldr	r2, [r7, #0]
 800ae90:	7850      	ldrb	r0, [r2, #1]
 800ae92:	2200      	movs	r2, #0
 800ae94:	6839      	ldr	r1, [r7, #0]
 800ae96:	4798      	blx	r3
      break;
 800ae98:	e067      	b.n	800af6a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	785b      	ldrb	r3, [r3, #1]
 800ae9e:	2b0b      	cmp	r3, #11
 800aea0:	d851      	bhi.n	800af46 <USBD_CDC_Setup+0x18a>
 800aea2:	a201      	add	r2, pc, #4	@ (adr r2, 800aea8 <USBD_CDC_Setup+0xec>)
 800aea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea8:	0800aed9 	.word	0x0800aed9
 800aeac:	0800af55 	.word	0x0800af55
 800aeb0:	0800af47 	.word	0x0800af47
 800aeb4:	0800af47 	.word	0x0800af47
 800aeb8:	0800af47 	.word	0x0800af47
 800aebc:	0800af47 	.word	0x0800af47
 800aec0:	0800af47 	.word	0x0800af47
 800aec4:	0800af47 	.word	0x0800af47
 800aec8:	0800af47 	.word	0x0800af47
 800aecc:	0800af47 	.word	0x0800af47
 800aed0:	0800af03 	.word	0x0800af03
 800aed4:	0800af2d 	.word	0x0800af2d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aede:	b2db      	uxtb	r3, r3
 800aee0:	2b03      	cmp	r3, #3
 800aee2:	d107      	bne.n	800aef4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aee4:	f107 030a 	add.w	r3, r7, #10
 800aee8:	2202      	movs	r2, #2
 800aeea:	4619      	mov	r1, r3
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f001 fd3d 	bl	800c96c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aef2:	e032      	b.n	800af5a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aef4:	6839      	ldr	r1, [r7, #0]
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f001 fcbb 	bl	800c872 <USBD_CtlError>
            ret = USBD_FAIL;
 800aefc:	2303      	movs	r3, #3
 800aefe:	75fb      	strb	r3, [r7, #23]
          break;
 800af00:	e02b      	b.n	800af5a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	2b03      	cmp	r3, #3
 800af0c:	d107      	bne.n	800af1e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800af0e:	f107 030d 	add.w	r3, r7, #13
 800af12:	2201      	movs	r2, #1
 800af14:	4619      	mov	r1, r3
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f001 fd28 	bl	800c96c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af1c:	e01d      	b.n	800af5a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800af1e:	6839      	ldr	r1, [r7, #0]
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f001 fca6 	bl	800c872 <USBD_CtlError>
            ret = USBD_FAIL;
 800af26:	2303      	movs	r3, #3
 800af28:	75fb      	strb	r3, [r7, #23]
          break;
 800af2a:	e016      	b.n	800af5a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af32:	b2db      	uxtb	r3, r3
 800af34:	2b03      	cmp	r3, #3
 800af36:	d00f      	beq.n	800af58 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800af38:	6839      	ldr	r1, [r7, #0]
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f001 fc99 	bl	800c872 <USBD_CtlError>
            ret = USBD_FAIL;
 800af40:	2303      	movs	r3, #3
 800af42:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800af44:	e008      	b.n	800af58 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800af46:	6839      	ldr	r1, [r7, #0]
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f001 fc92 	bl	800c872 <USBD_CtlError>
          ret = USBD_FAIL;
 800af4e:	2303      	movs	r3, #3
 800af50:	75fb      	strb	r3, [r7, #23]
          break;
 800af52:	e002      	b.n	800af5a <USBD_CDC_Setup+0x19e>
          break;
 800af54:	bf00      	nop
 800af56:	e008      	b.n	800af6a <USBD_CDC_Setup+0x1ae>
          break;
 800af58:	bf00      	nop
      }
      break;
 800af5a:	e006      	b.n	800af6a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800af5c:	6839      	ldr	r1, [r7, #0]
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f001 fc87 	bl	800c872 <USBD_CtlError>
      ret = USBD_FAIL;
 800af64:	2303      	movs	r3, #3
 800af66:	75fb      	strb	r3, [r7, #23]
      break;
 800af68:	bf00      	nop
  }

  return (uint8_t)ret;
 800af6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3718      	adds	r7, #24
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	460b      	mov	r3, r1
 800af7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	32b0      	adds	r2, #176	@ 0xb0
 800af92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d101      	bne.n	800af9e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800af9a:	2303      	movs	r3, #3
 800af9c:	e065      	b.n	800b06a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	32b0      	adds	r2, #176	@ 0xb0
 800afa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800afae:	78fb      	ldrb	r3, [r7, #3]
 800afb0:	f003 020f 	and.w	r2, r3, #15
 800afb4:	6879      	ldr	r1, [r7, #4]
 800afb6:	4613      	mov	r3, r2
 800afb8:	009b      	lsls	r3, r3, #2
 800afba:	4413      	add	r3, r2
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	440b      	add	r3, r1
 800afc0:	3318      	adds	r3, #24
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d02f      	beq.n	800b028 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800afc8:	78fb      	ldrb	r3, [r7, #3]
 800afca:	f003 020f 	and.w	r2, r3, #15
 800afce:	6879      	ldr	r1, [r7, #4]
 800afd0:	4613      	mov	r3, r2
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	4413      	add	r3, r2
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	440b      	add	r3, r1
 800afda:	3318      	adds	r3, #24
 800afdc:	681a      	ldr	r2, [r3, #0]
 800afde:	78fb      	ldrb	r3, [r7, #3]
 800afe0:	f003 010f 	and.w	r1, r3, #15
 800afe4:	68f8      	ldr	r0, [r7, #12]
 800afe6:	460b      	mov	r3, r1
 800afe8:	00db      	lsls	r3, r3, #3
 800afea:	440b      	add	r3, r1
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	4403      	add	r3, r0
 800aff0:	331c      	adds	r3, #28
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	fbb2 f1f3 	udiv	r1, r2, r3
 800aff8:	fb01 f303 	mul.w	r3, r1, r3
 800affc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800affe:	2b00      	cmp	r3, #0
 800b000:	d112      	bne.n	800b028 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b002:	78fb      	ldrb	r3, [r7, #3]
 800b004:	f003 020f 	and.w	r2, r3, #15
 800b008:	6879      	ldr	r1, [r7, #4]
 800b00a:	4613      	mov	r3, r2
 800b00c:	009b      	lsls	r3, r3, #2
 800b00e:	4413      	add	r3, r2
 800b010:	009b      	lsls	r3, r3, #2
 800b012:	440b      	add	r3, r1
 800b014:	3318      	adds	r3, #24
 800b016:	2200      	movs	r2, #0
 800b018:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b01a:	78f9      	ldrb	r1, [r7, #3]
 800b01c:	2300      	movs	r3, #0
 800b01e:	2200      	movs	r2, #0
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f7f6 fd8a 	bl	8001b3a <USBD_LL_Transmit>
 800b026:	e01f      	b.n	800b068 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	2200      	movs	r2, #0
 800b02c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	33b0      	adds	r3, #176	@ 0xb0
 800b03a:	009b      	lsls	r3, r3, #2
 800b03c:	4413      	add	r3, r2
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	691b      	ldr	r3, [r3, #16]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d010      	beq.n	800b068 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	33b0      	adds	r3, #176	@ 0xb0
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	4413      	add	r3, r2
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	691b      	ldr	r3, [r3, #16]
 800b058:	68ba      	ldr	r2, [r7, #8]
 800b05a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b05e:	68ba      	ldr	r2, [r7, #8]
 800b060:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b064:	78fa      	ldrb	r2, [r7, #3]
 800b066:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b068:	2300      	movs	r3, #0
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3710      	adds	r7, #16
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}

0800b072 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b072:	b580      	push	{r7, lr}
 800b074:	b084      	sub	sp, #16
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
 800b07a:	460b      	mov	r3, r1
 800b07c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	32b0      	adds	r2, #176	@ 0xb0
 800b088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b08c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	32b0      	adds	r2, #176	@ 0xb0
 800b098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d101      	bne.n	800b0a4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b0a0:	2303      	movs	r3, #3
 800b0a2:	e01a      	b.n	800b0da <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b0a4:	78fb      	ldrb	r3, [r7, #3]
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f7f6 fd88 	bl	8001bbe <USBD_LL_GetRxDataSize>
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0bc:	687a      	ldr	r2, [r7, #4]
 800b0be:	33b0      	adds	r3, #176	@ 0xb0
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	4413      	add	r3, r2
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	68db      	ldr	r3, [r3, #12]
 800b0c8:	68fa      	ldr	r2, [r7, #12]
 800b0ca:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b0ce:	68fa      	ldr	r2, [r7, #12]
 800b0d0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b0d4:	4611      	mov	r1, r2
 800b0d6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b0d8:	2300      	movs	r3, #0
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3710      	adds	r7, #16
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b0e2:	b580      	push	{r7, lr}
 800b0e4:	b084      	sub	sp, #16
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	32b0      	adds	r2, #176	@ 0xb0
 800b0f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d101      	bne.n	800b104 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b100:	2303      	movs	r3, #3
 800b102:	e024      	b.n	800b14e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	33b0      	adds	r3, #176	@ 0xb0
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	4413      	add	r3, r2
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d019      	beq.n	800b14c <USBD_CDC_EP0_RxReady+0x6a>
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b11e:	2bff      	cmp	r3, #255	@ 0xff
 800b120:	d014      	beq.n	800b14c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	33b0      	adds	r3, #176	@ 0xb0
 800b12c:	009b      	lsls	r3, r3, #2
 800b12e:	4413      	add	r3, r2
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	689b      	ldr	r3, [r3, #8]
 800b134:	68fa      	ldr	r2, [r7, #12]
 800b136:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b13a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b13c:	68fa      	ldr	r2, [r7, #12]
 800b13e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b142:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	22ff      	movs	r2, #255	@ 0xff
 800b148:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b14c:	2300      	movs	r3, #0
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
	...

0800b158 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b086      	sub	sp, #24
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b160:	2182      	movs	r1, #130	@ 0x82
 800b162:	4818      	ldr	r0, [pc, #96]	@ (800b1c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b164:	f000 fd4f 	bl	800bc06 <USBD_GetEpDesc>
 800b168:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b16a:	2101      	movs	r1, #1
 800b16c:	4815      	ldr	r0, [pc, #84]	@ (800b1c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b16e:	f000 fd4a 	bl	800bc06 <USBD_GetEpDesc>
 800b172:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b174:	2181      	movs	r1, #129	@ 0x81
 800b176:	4813      	ldr	r0, [pc, #76]	@ (800b1c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b178:	f000 fd45 	bl	800bc06 <USBD_GetEpDesc>
 800b17c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d002      	beq.n	800b18a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	2210      	movs	r2, #16
 800b188:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b18a:	693b      	ldr	r3, [r7, #16]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d006      	beq.n	800b19e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	2200      	movs	r2, #0
 800b194:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b198:	711a      	strb	r2, [r3, #4]
 800b19a:	2200      	movs	r2, #0
 800b19c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d006      	beq.n	800b1b2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b1ac:	711a      	strb	r2, [r3, #4]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2243      	movs	r2, #67	@ 0x43
 800b1b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b1b8:	4b02      	ldr	r3, [pc, #8]	@ (800b1c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3718      	adds	r7, #24
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	bf00      	nop
 800b1c4:	20000114 	.word	0x20000114

0800b1c8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b086      	sub	sp, #24
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b1d0:	2182      	movs	r1, #130	@ 0x82
 800b1d2:	4818      	ldr	r0, [pc, #96]	@ (800b234 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b1d4:	f000 fd17 	bl	800bc06 <USBD_GetEpDesc>
 800b1d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b1da:	2101      	movs	r1, #1
 800b1dc:	4815      	ldr	r0, [pc, #84]	@ (800b234 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b1de:	f000 fd12 	bl	800bc06 <USBD_GetEpDesc>
 800b1e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b1e4:	2181      	movs	r1, #129	@ 0x81
 800b1e6:	4813      	ldr	r0, [pc, #76]	@ (800b234 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b1e8:	f000 fd0d 	bl	800bc06 <USBD_GetEpDesc>
 800b1ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d002      	beq.n	800b1fa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	2210      	movs	r2, #16
 800b1f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d006      	beq.n	800b20e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	2200      	movs	r2, #0
 800b204:	711a      	strb	r2, [r3, #4]
 800b206:	2200      	movs	r2, #0
 800b208:	f042 0202 	orr.w	r2, r2, #2
 800b20c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d006      	beq.n	800b222 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2200      	movs	r2, #0
 800b218:	711a      	strb	r2, [r3, #4]
 800b21a:	2200      	movs	r2, #0
 800b21c:	f042 0202 	orr.w	r2, r2, #2
 800b220:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2243      	movs	r2, #67	@ 0x43
 800b226:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b228:	4b02      	ldr	r3, [pc, #8]	@ (800b234 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3718      	adds	r7, #24
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
 800b232:	bf00      	nop
 800b234:	20000114 	.word	0x20000114

0800b238 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b086      	sub	sp, #24
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b240:	2182      	movs	r1, #130	@ 0x82
 800b242:	4818      	ldr	r0, [pc, #96]	@ (800b2a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b244:	f000 fcdf 	bl	800bc06 <USBD_GetEpDesc>
 800b248:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b24a:	2101      	movs	r1, #1
 800b24c:	4815      	ldr	r0, [pc, #84]	@ (800b2a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b24e:	f000 fcda 	bl	800bc06 <USBD_GetEpDesc>
 800b252:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b254:	2181      	movs	r1, #129	@ 0x81
 800b256:	4813      	ldr	r0, [pc, #76]	@ (800b2a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b258:	f000 fcd5 	bl	800bc06 <USBD_GetEpDesc>
 800b25c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d002      	beq.n	800b26a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	2210      	movs	r2, #16
 800b268:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d006      	beq.n	800b27e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	2200      	movs	r2, #0
 800b274:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b278:	711a      	strb	r2, [r3, #4]
 800b27a:	2200      	movs	r2, #0
 800b27c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d006      	beq.n	800b292 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	2200      	movs	r2, #0
 800b288:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b28c:	711a      	strb	r2, [r3, #4]
 800b28e:	2200      	movs	r2, #0
 800b290:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2243      	movs	r2, #67	@ 0x43
 800b296:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b298:	4b02      	ldr	r3, [pc, #8]	@ (800b2a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3718      	adds	r7, #24
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	20000114 	.word	0x20000114

0800b2a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	220a      	movs	r2, #10
 800b2b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b2b6:	4b03      	ldr	r3, [pc, #12]	@ (800b2c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	370c      	adds	r7, #12
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr
 800b2c4:	200000d0 	.word	0x200000d0

0800b2c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d101      	bne.n	800b2dc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b2d8:	2303      	movs	r3, #3
 800b2da:	e009      	b.n	800b2f0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	33b0      	adds	r3, #176	@ 0xb0
 800b2e6:	009b      	lsls	r3, r3, #2
 800b2e8:	4413      	add	r3, r2
 800b2ea:	683a      	ldr	r2, [r7, #0]
 800b2ec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b2ee:	2300      	movs	r3, #0
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	370c      	adds	r7, #12
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr

0800b2fc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b087      	sub	sp, #28
 800b300:	af00      	add	r7, sp, #0
 800b302:	60f8      	str	r0, [r7, #12]
 800b304:	60b9      	str	r1, [r7, #8]
 800b306:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	32b0      	adds	r2, #176	@ 0xb0
 800b312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b316:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d101      	bne.n	800b322 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b31e:	2303      	movs	r3, #3
 800b320:	e008      	b.n	800b334 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	68ba      	ldr	r2, [r7, #8]
 800b326:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	687a      	ldr	r2, [r7, #4]
 800b32e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b332:	2300      	movs	r3, #0
}
 800b334:	4618      	mov	r0, r3
 800b336:	371c      	adds	r7, #28
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b340:	b480      	push	{r7}
 800b342:	b085      	sub	sp, #20
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	32b0      	adds	r2, #176	@ 0xb0
 800b354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b358:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d101      	bne.n	800b364 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b360:	2303      	movs	r3, #3
 800b362:	e004      	b.n	800b36e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	683a      	ldr	r2, [r7, #0]
 800b368:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b36c:	2300      	movs	r3, #0
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3714      	adds	r7, #20
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr
	...

0800b37c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	32b0      	adds	r2, #176	@ 0xb0
 800b38e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b392:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b394:	2301      	movs	r3, #1
 800b396:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d101      	bne.n	800b3a2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b39e:	2303      	movs	r3, #3
 800b3a0:	e025      	b.n	800b3ee <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d11f      	bne.n	800b3ec <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b3b4:	4b10      	ldr	r3, [pc, #64]	@ (800b3f8 <USBD_CDC_TransmitPacket+0x7c>)
 800b3b6:	781b      	ldrb	r3, [r3, #0]
 800b3b8:	f003 020f 	and.w	r2, r3, #15
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	4613      	mov	r3, r2
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	4413      	add	r3, r2
 800b3ca:	009b      	lsls	r3, r3, #2
 800b3cc:	4403      	add	r3, r0
 800b3ce:	3318      	adds	r3, #24
 800b3d0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b3d2:	4b09      	ldr	r3, [pc, #36]	@ (800b3f8 <USBD_CDC_TransmitPacket+0x7c>)
 800b3d4:	7819      	ldrb	r1, [r3, #0]
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f7f6 fba9 	bl	8001b3a <USBD_LL_Transmit>

    ret = USBD_OK;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b3ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3710      	adds	r7, #16
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	20000157 	.word	0x20000157

0800b3fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	32b0      	adds	r2, #176	@ 0xb0
 800b40e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b412:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	32b0      	adds	r2, #176	@ 0xb0
 800b41e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d101      	bne.n	800b42a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b426:	2303      	movs	r3, #3
 800b428:	e018      	b.n	800b45c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	7c1b      	ldrb	r3, [r3, #16]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d10a      	bne.n	800b448 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b432:	4b0c      	ldr	r3, [pc, #48]	@ (800b464 <USBD_CDC_ReceivePacket+0x68>)
 800b434:	7819      	ldrb	r1, [r3, #0]
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b43c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f7f6 fb9b 	bl	8001b7c <USBD_LL_PrepareReceive>
 800b446:	e008      	b.n	800b45a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b448:	4b06      	ldr	r3, [pc, #24]	@ (800b464 <USBD_CDC_ReceivePacket+0x68>)
 800b44a:	7819      	ldrb	r1, [r3, #0]
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b452:	2340      	movs	r3, #64	@ 0x40
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f7f6 fb91 	bl	8001b7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b45a:	2300      	movs	r3, #0
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3710      	adds	r7, #16
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}
 800b464:	20000158 	.word	0x20000158

0800b468 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b086      	sub	sp, #24
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	4613      	mov	r3, r2
 800b474:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d101      	bne.n	800b480 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b47c:	2303      	movs	r3, #3
 800b47e:	e01f      	b.n	800b4c0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2200      	movs	r2, #0
 800b484:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2200      	movs	r2, #0
 800b48c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2200      	movs	r2, #0
 800b494:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d003      	beq.n	800b4a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	68ba      	ldr	r2, [r7, #8]
 800b4a2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	79fa      	ldrb	r2, [r7, #7]
 800b4b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b4b4:	68f8      	ldr	r0, [r7, #12]
 800b4b6:	f7f6 fa0b 	bl	80018d0 <USBD_LL_Init>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b4be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3718      	adds	r7, #24
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d101      	bne.n	800b4e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b4dc:	2303      	movs	r3, #3
 800b4de:	e025      	b.n	800b52c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	683a      	ldr	r2, [r7, #0]
 800b4e4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	32ae      	adds	r2, #174	@ 0xae
 800b4f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d00f      	beq.n	800b51c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	32ae      	adds	r2, #174	@ 0xae
 800b506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b50a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b50c:	f107 020e 	add.w	r2, r7, #14
 800b510:	4610      	mov	r0, r2
 800b512:	4798      	blx	r3
 800b514:	4602      	mov	r2, r0
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b522:	1c5a      	adds	r2, r3, #1
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b52a:	2300      	movs	r3, #0
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3710      	adds	r7, #16
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f7f6 fa13 	bl	8001968 <USBD_LL_Start>
 800b542:	4603      	mov	r3, r0
}
 800b544:	4618      	mov	r0, r3
 800b546:	3708      	adds	r7, #8
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b083      	sub	sp, #12
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b554:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b556:	4618      	mov	r0, r3
 800b558:	370c      	adds	r7, #12
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr

0800b562 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b562:	b580      	push	{r7, lr}
 800b564:	b084      	sub	sp, #16
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
 800b56a:	460b      	mov	r3, r1
 800b56c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b56e:	2300      	movs	r3, #0
 800b570:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d009      	beq.n	800b590 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	78fa      	ldrb	r2, [r7, #3]
 800b586:	4611      	mov	r1, r2
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	4798      	blx	r3
 800b58c:	4603      	mov	r3, r0
 800b58e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b590:	7bfb      	ldrb	r3, [r7, #15]
}
 800b592:	4618      	mov	r0, r3
 800b594:	3710      	adds	r7, #16
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}

0800b59a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b59a:	b580      	push	{r7, lr}
 800b59c:	b084      	sub	sp, #16
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
 800b5a2:	460b      	mov	r3, r1
 800b5a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	78fa      	ldrb	r2, [r7, #3]
 800b5b4:	4611      	mov	r1, r2
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	4798      	blx	r3
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d001      	beq.n	800b5c4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b5c0:	2303      	movs	r3, #3
 800b5c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b5c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3710      	adds	r7, #16
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}

0800b5ce <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b5ce:	b580      	push	{r7, lr}
 800b5d0:	b084      	sub	sp, #16
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
 800b5d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b5de:	6839      	ldr	r1, [r7, #0]
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f001 f90c 	bl	800c7fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b602:	f003 031f 	and.w	r3, r3, #31
 800b606:	2b02      	cmp	r3, #2
 800b608:	d01a      	beq.n	800b640 <USBD_LL_SetupStage+0x72>
 800b60a:	2b02      	cmp	r3, #2
 800b60c:	d822      	bhi.n	800b654 <USBD_LL_SetupStage+0x86>
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d002      	beq.n	800b618 <USBD_LL_SetupStage+0x4a>
 800b612:	2b01      	cmp	r3, #1
 800b614:	d00a      	beq.n	800b62c <USBD_LL_SetupStage+0x5e>
 800b616:	e01d      	b.n	800b654 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b61e:	4619      	mov	r1, r3
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f000 fb63 	bl	800bcec <USBD_StdDevReq>
 800b626:	4603      	mov	r3, r0
 800b628:	73fb      	strb	r3, [r7, #15]
      break;
 800b62a:	e020      	b.n	800b66e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b632:	4619      	mov	r1, r3
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f000 fbcb 	bl	800bdd0 <USBD_StdItfReq>
 800b63a:	4603      	mov	r3, r0
 800b63c:	73fb      	strb	r3, [r7, #15]
      break;
 800b63e:	e016      	b.n	800b66e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b646:	4619      	mov	r1, r3
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f000 fc2d 	bl	800bea8 <USBD_StdEPReq>
 800b64e:	4603      	mov	r3, r0
 800b650:	73fb      	strb	r3, [r7, #15]
      break;
 800b652:	e00c      	b.n	800b66e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b65a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b65e:	b2db      	uxtb	r3, r3
 800b660:	4619      	mov	r1, r3
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f7f6 f9e0 	bl	8001a28 <USBD_LL_StallEP>
 800b668:	4603      	mov	r3, r0
 800b66a:	73fb      	strb	r3, [r7, #15]
      break;
 800b66c:	bf00      	nop
  }

  return ret;
 800b66e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b670:	4618      	mov	r0, r3
 800b672:	3710      	adds	r7, #16
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}

0800b678 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b086      	sub	sp, #24
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	60f8      	str	r0, [r7, #12]
 800b680:	460b      	mov	r3, r1
 800b682:	607a      	str	r2, [r7, #4]
 800b684:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b686:	2300      	movs	r3, #0
 800b688:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b68a:	7afb      	ldrb	r3, [r7, #11]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d16e      	bne.n	800b76e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b696:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b69e:	2b03      	cmp	r3, #3
 800b6a0:	f040 8098 	bne.w	800b7d4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	689a      	ldr	r2, [r3, #8]
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	68db      	ldr	r3, [r3, #12]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d913      	bls.n	800b6d8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	689a      	ldr	r2, [r3, #8]
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	1ad2      	subs	r2, r2, r3
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	68da      	ldr	r2, [r3, #12]
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	689b      	ldr	r3, [r3, #8]
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	bf28      	it	cs
 800b6ca:	4613      	movcs	r3, r2
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	6879      	ldr	r1, [r7, #4]
 800b6d0:	68f8      	ldr	r0, [r7, #12]
 800b6d2:	f001 f994 	bl	800c9fe <USBD_CtlContinueRx>
 800b6d6:	e07d      	b.n	800b7d4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b6de:	f003 031f 	and.w	r3, r3, #31
 800b6e2:	2b02      	cmp	r3, #2
 800b6e4:	d014      	beq.n	800b710 <USBD_LL_DataOutStage+0x98>
 800b6e6:	2b02      	cmp	r3, #2
 800b6e8:	d81d      	bhi.n	800b726 <USBD_LL_DataOutStage+0xae>
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d002      	beq.n	800b6f4 <USBD_LL_DataOutStage+0x7c>
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d003      	beq.n	800b6fa <USBD_LL_DataOutStage+0x82>
 800b6f2:	e018      	b.n	800b726 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	75bb      	strb	r3, [r7, #22]
            break;
 800b6f8:	e018      	b.n	800b72c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b700:	b2db      	uxtb	r3, r3
 800b702:	4619      	mov	r1, r3
 800b704:	68f8      	ldr	r0, [r7, #12]
 800b706:	f000 fa64 	bl	800bbd2 <USBD_CoreFindIF>
 800b70a:	4603      	mov	r3, r0
 800b70c:	75bb      	strb	r3, [r7, #22]
            break;
 800b70e:	e00d      	b.n	800b72c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b716:	b2db      	uxtb	r3, r3
 800b718:	4619      	mov	r1, r3
 800b71a:	68f8      	ldr	r0, [r7, #12]
 800b71c:	f000 fa66 	bl	800bbec <USBD_CoreFindEP>
 800b720:	4603      	mov	r3, r0
 800b722:	75bb      	strb	r3, [r7, #22]
            break;
 800b724:	e002      	b.n	800b72c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b726:	2300      	movs	r3, #0
 800b728:	75bb      	strb	r3, [r7, #22]
            break;
 800b72a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b72c:	7dbb      	ldrb	r3, [r7, #22]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d119      	bne.n	800b766 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b738:	b2db      	uxtb	r3, r3
 800b73a:	2b03      	cmp	r3, #3
 800b73c:	d113      	bne.n	800b766 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b73e:	7dba      	ldrb	r2, [r7, #22]
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	32ae      	adds	r2, #174	@ 0xae
 800b744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b748:	691b      	ldr	r3, [r3, #16]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d00b      	beq.n	800b766 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b74e:	7dba      	ldrb	r2, [r7, #22]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b756:	7dba      	ldrb	r2, [r7, #22]
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	32ae      	adds	r2, #174	@ 0xae
 800b75c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b760:	691b      	ldr	r3, [r3, #16]
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b766:	68f8      	ldr	r0, [r7, #12]
 800b768:	f001 f95a 	bl	800ca20 <USBD_CtlSendStatus>
 800b76c:	e032      	b.n	800b7d4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b76e:	7afb      	ldrb	r3, [r7, #11]
 800b770:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b774:	b2db      	uxtb	r3, r3
 800b776:	4619      	mov	r1, r3
 800b778:	68f8      	ldr	r0, [r7, #12]
 800b77a:	f000 fa37 	bl	800bbec <USBD_CoreFindEP>
 800b77e:	4603      	mov	r3, r0
 800b780:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b782:	7dbb      	ldrb	r3, [r7, #22]
 800b784:	2bff      	cmp	r3, #255	@ 0xff
 800b786:	d025      	beq.n	800b7d4 <USBD_LL_DataOutStage+0x15c>
 800b788:	7dbb      	ldrb	r3, [r7, #22]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d122      	bne.n	800b7d4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b794:	b2db      	uxtb	r3, r3
 800b796:	2b03      	cmp	r3, #3
 800b798:	d117      	bne.n	800b7ca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b79a:	7dba      	ldrb	r2, [r7, #22]
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	32ae      	adds	r2, #174	@ 0xae
 800b7a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7a4:	699b      	ldr	r3, [r3, #24]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d00f      	beq.n	800b7ca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b7aa:	7dba      	ldrb	r2, [r7, #22]
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b7b2:	7dba      	ldrb	r2, [r7, #22]
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	32ae      	adds	r2, #174	@ 0xae
 800b7b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7bc:	699b      	ldr	r3, [r3, #24]
 800b7be:	7afa      	ldrb	r2, [r7, #11]
 800b7c0:	4611      	mov	r1, r2
 800b7c2:	68f8      	ldr	r0, [r7, #12]
 800b7c4:	4798      	blx	r3
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b7ca:	7dfb      	ldrb	r3, [r7, #23]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d001      	beq.n	800b7d4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b7d0:	7dfb      	ldrb	r3, [r7, #23]
 800b7d2:	e000      	b.n	800b7d6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b7d4:	2300      	movs	r3, #0
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3718      	adds	r7, #24
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}

0800b7de <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b7de:	b580      	push	{r7, lr}
 800b7e0:	b086      	sub	sp, #24
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	60f8      	str	r0, [r7, #12]
 800b7e6:	460b      	mov	r3, r1
 800b7e8:	607a      	str	r2, [r7, #4]
 800b7ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b7ec:	7afb      	ldrb	r3, [r7, #11]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d16f      	bne.n	800b8d2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	3314      	adds	r3, #20
 800b7f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b7fe:	2b02      	cmp	r3, #2
 800b800:	d15a      	bne.n	800b8b8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	689a      	ldr	r2, [r3, #8]
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	68db      	ldr	r3, [r3, #12]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d914      	bls.n	800b838 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	689a      	ldr	r2, [r3, #8]
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	68db      	ldr	r3, [r3, #12]
 800b816:	1ad2      	subs	r2, r2, r3
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	461a      	mov	r2, r3
 800b822:	6879      	ldr	r1, [r7, #4]
 800b824:	68f8      	ldr	r0, [r7, #12]
 800b826:	f001 f8bc 	bl	800c9a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b82a:	2300      	movs	r3, #0
 800b82c:	2200      	movs	r2, #0
 800b82e:	2100      	movs	r1, #0
 800b830:	68f8      	ldr	r0, [r7, #12]
 800b832:	f7f6 f9a3 	bl	8001b7c <USBD_LL_PrepareReceive>
 800b836:	e03f      	b.n	800b8b8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	68da      	ldr	r2, [r3, #12]
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	429a      	cmp	r2, r3
 800b842:	d11c      	bne.n	800b87e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	685a      	ldr	r2, [r3, #4]
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d316      	bcc.n	800b87e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	685a      	ldr	r2, [r3, #4]
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d20f      	bcs.n	800b87e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b85e:	2200      	movs	r2, #0
 800b860:	2100      	movs	r1, #0
 800b862:	68f8      	ldr	r0, [r7, #12]
 800b864:	f001 f89d 	bl	800c9a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2200      	movs	r2, #0
 800b86c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b870:	2300      	movs	r3, #0
 800b872:	2200      	movs	r2, #0
 800b874:	2100      	movs	r1, #0
 800b876:	68f8      	ldr	r0, [r7, #12]
 800b878:	f7f6 f980 	bl	8001b7c <USBD_LL_PrepareReceive>
 800b87c:	e01c      	b.n	800b8b8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b884:	b2db      	uxtb	r3, r3
 800b886:	2b03      	cmp	r3, #3
 800b888:	d10f      	bne.n	800b8aa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b890:	68db      	ldr	r3, [r3, #12]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d009      	beq.n	800b8aa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2200      	movs	r2, #0
 800b89a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8a4:	68db      	ldr	r3, [r3, #12]
 800b8a6:	68f8      	ldr	r0, [r7, #12]
 800b8a8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8aa:	2180      	movs	r1, #128	@ 0x80
 800b8ac:	68f8      	ldr	r0, [r7, #12]
 800b8ae:	f7f6 f8bb 	bl	8001a28 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b8b2:	68f8      	ldr	r0, [r7, #12]
 800b8b4:	f001 f8c7 	bl	800ca46 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d03a      	beq.n	800b938 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b8c2:	68f8      	ldr	r0, [r7, #12]
 800b8c4:	f7ff fe42 	bl	800b54c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b8d0:	e032      	b.n	800b938 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b8d2:	7afb      	ldrb	r3, [r7, #11]
 800b8d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b8d8:	b2db      	uxtb	r3, r3
 800b8da:	4619      	mov	r1, r3
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f000 f985 	bl	800bbec <USBD_CoreFindEP>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8e6:	7dfb      	ldrb	r3, [r7, #23]
 800b8e8:	2bff      	cmp	r3, #255	@ 0xff
 800b8ea:	d025      	beq.n	800b938 <USBD_LL_DataInStage+0x15a>
 800b8ec:	7dfb      	ldrb	r3, [r7, #23]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d122      	bne.n	800b938 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8f8:	b2db      	uxtb	r3, r3
 800b8fa:	2b03      	cmp	r3, #3
 800b8fc:	d11c      	bne.n	800b938 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b8fe:	7dfa      	ldrb	r2, [r7, #23]
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	32ae      	adds	r2, #174	@ 0xae
 800b904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b908:	695b      	ldr	r3, [r3, #20]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d014      	beq.n	800b938 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b90e:	7dfa      	ldrb	r2, [r7, #23]
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b916:	7dfa      	ldrb	r2, [r7, #23]
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	32ae      	adds	r2, #174	@ 0xae
 800b91c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b920:	695b      	ldr	r3, [r3, #20]
 800b922:	7afa      	ldrb	r2, [r7, #11]
 800b924:	4611      	mov	r1, r2
 800b926:	68f8      	ldr	r0, [r7, #12]
 800b928:	4798      	blx	r3
 800b92a:	4603      	mov	r3, r0
 800b92c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b92e:	7dbb      	ldrb	r3, [r7, #22]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d001      	beq.n	800b938 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b934:	7dbb      	ldrb	r3, [r7, #22]
 800b936:	e000      	b.n	800b93a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b938:	2300      	movs	r3, #0
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3718      	adds	r7, #24
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}

0800b942 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b942:	b580      	push	{r7, lr}
 800b944:	b084      	sub	sp, #16
 800b946:	af00      	add	r7, sp, #0
 800b948:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b94a:	2300      	movs	r3, #0
 800b94c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2201      	movs	r2, #1
 800b952:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2200      	movs	r2, #0
 800b95a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2200      	movs	r2, #0
 800b962:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2200      	movs	r2, #0
 800b968:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2200      	movs	r2, #0
 800b970:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d014      	beq.n	800b9a8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d00e      	beq.n	800b9a8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	6852      	ldr	r2, [r2, #4]
 800b996:	b2d2      	uxtb	r2, r2
 800b998:	4611      	mov	r1, r2
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	4798      	blx	r3
 800b99e:	4603      	mov	r3, r0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d001      	beq.n	800b9a8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b9a4:	2303      	movs	r3, #3
 800b9a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b9a8:	2340      	movs	r3, #64	@ 0x40
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	2100      	movs	r1, #0
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f7f5 fff5 	bl	800199e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2240      	movs	r2, #64	@ 0x40
 800b9c0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b9c4:	2340      	movs	r3, #64	@ 0x40
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	2180      	movs	r1, #128	@ 0x80
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f7f5 ffe7 	bl	800199e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2240      	movs	r2, #64	@ 0x40
 800b9da:	621a      	str	r2, [r3, #32]

  return ret;
 800b9dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3710      	adds	r7, #16
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}

0800b9e6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b9e6:	b480      	push	{r7}
 800b9e8:	b083      	sub	sp, #12
 800b9ea:	af00      	add	r7, sp, #0
 800b9ec:	6078      	str	r0, [r7, #4]
 800b9ee:	460b      	mov	r3, r1
 800b9f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	78fa      	ldrb	r2, [r7, #3]
 800b9f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b9f8:	2300      	movs	r3, #0
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	370c      	adds	r7, #12
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba04:	4770      	bx	lr

0800ba06 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ba06:	b480      	push	{r7}
 800ba08:	b083      	sub	sp, #12
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	2b04      	cmp	r3, #4
 800ba18:	d006      	beq.n	800ba28 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba20:	b2da      	uxtb	r2, r3
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2204      	movs	r2, #4
 800ba2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ba30:	2300      	movs	r3, #0
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	370c      	adds	r7, #12
 800ba36:	46bd      	mov	sp, r7
 800ba38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3c:	4770      	bx	lr

0800ba3e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ba3e:	b480      	push	{r7}
 800ba40:	b083      	sub	sp, #12
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	2b04      	cmp	r3, #4
 800ba50:	d106      	bne.n	800ba60 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ba58:	b2da      	uxtb	r2, r3
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ba60:	2300      	movs	r3, #0
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	370c      	adds	r7, #12
 800ba66:	46bd      	mov	sp, r7
 800ba68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6c:	4770      	bx	lr

0800ba6e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b082      	sub	sp, #8
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	2b03      	cmp	r3, #3
 800ba80:	d110      	bne.n	800baa4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d00b      	beq.n	800baa4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba92:	69db      	ldr	r3, [r3, #28]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d005      	beq.n	800baa4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba9e:	69db      	ldr	r3, [r3, #28]
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800baa4:	2300      	movs	r3, #0
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3708      	adds	r7, #8
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}

0800baae <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800baae:	b580      	push	{r7, lr}
 800bab0:	b082      	sub	sp, #8
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
 800bab6:	460b      	mov	r3, r1
 800bab8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	32ae      	adds	r2, #174	@ 0xae
 800bac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d101      	bne.n	800bad0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bacc:	2303      	movs	r3, #3
 800bace:	e01c      	b.n	800bb0a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bad6:	b2db      	uxtb	r3, r3
 800bad8:	2b03      	cmp	r3, #3
 800bada:	d115      	bne.n	800bb08 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	32ae      	adds	r2, #174	@ 0xae
 800bae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baea:	6a1b      	ldr	r3, [r3, #32]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d00b      	beq.n	800bb08 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	32ae      	adds	r2, #174	@ 0xae
 800bafa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bafe:	6a1b      	ldr	r3, [r3, #32]
 800bb00:	78fa      	ldrb	r2, [r7, #3]
 800bb02:	4611      	mov	r1, r2
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bb08:	2300      	movs	r3, #0
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3708      	adds	r7, #8
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b082      	sub	sp, #8
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
 800bb1a:	460b      	mov	r3, r1
 800bb1c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	32ae      	adds	r2, #174	@ 0xae
 800bb28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d101      	bne.n	800bb34 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bb30:	2303      	movs	r3, #3
 800bb32:	e01c      	b.n	800bb6e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb3a:	b2db      	uxtb	r3, r3
 800bb3c:	2b03      	cmp	r3, #3
 800bb3e:	d115      	bne.n	800bb6c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	32ae      	adds	r2, #174	@ 0xae
 800bb4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d00b      	beq.n	800bb6c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	32ae      	adds	r2, #174	@ 0xae
 800bb5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb64:	78fa      	ldrb	r2, [r7, #3]
 800bb66:	4611      	mov	r1, r2
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bb6c:	2300      	movs	r3, #0
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3708      	adds	r7, #8
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bb76:	b480      	push	{r7}
 800bb78:	b083      	sub	sp, #12
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bb7e:	2300      	movs	r3, #0
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	370c      	adds	r7, #12
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr

0800bb8c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b084      	sub	sp, #16
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bb94:	2300      	movs	r3, #0
 800bb96:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d00e      	beq.n	800bbc8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	6852      	ldr	r2, [r2, #4]
 800bbb6:	b2d2      	uxtb	r2, r2
 800bbb8:	4611      	mov	r1, r2
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	4798      	blx	r3
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d001      	beq.n	800bbc8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bbc4:	2303      	movs	r3, #3
 800bbc6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bbc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3710      	adds	r7, #16
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}

0800bbd2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bbd2:	b480      	push	{r7}
 800bbd4:	b083      	sub	sp, #12
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	6078      	str	r0, [r7, #4]
 800bbda:	460b      	mov	r3, r1
 800bbdc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bbde:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	370c      	adds	r7, #12
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr

0800bbec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b083      	sub	sp, #12
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bbf8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	370c      	adds	r7, #12
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr

0800bc06 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bc06:	b580      	push	{r7, lr}
 800bc08:	b086      	sub	sp, #24
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
 800bc0e:	460b      	mov	r3, r1
 800bc10:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	885b      	ldrh	r3, [r3, #2]
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	68fa      	ldr	r2, [r7, #12]
 800bc26:	7812      	ldrb	r2, [r2, #0]
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d91f      	bls.n	800bc6c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bc32:	e013      	b.n	800bc5c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bc34:	f107 030a 	add.w	r3, r7, #10
 800bc38:	4619      	mov	r1, r3
 800bc3a:	6978      	ldr	r0, [r7, #20]
 800bc3c:	f000 f81b 	bl	800bc76 <USBD_GetNextDesc>
 800bc40:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	785b      	ldrb	r3, [r3, #1]
 800bc46:	2b05      	cmp	r3, #5
 800bc48:	d108      	bne.n	800bc5c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	789b      	ldrb	r3, [r3, #2]
 800bc52:	78fa      	ldrb	r2, [r7, #3]
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d008      	beq.n	800bc6a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	885b      	ldrh	r3, [r3, #2]
 800bc60:	b29a      	uxth	r2, r3
 800bc62:	897b      	ldrh	r3, [r7, #10]
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d8e5      	bhi.n	800bc34 <USBD_GetEpDesc+0x2e>
 800bc68:	e000      	b.n	800bc6c <USBD_GetEpDesc+0x66>
          break;
 800bc6a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bc6c:	693b      	ldr	r3, [r7, #16]
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3718      	adds	r7, #24
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}

0800bc76 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bc76:	b480      	push	{r7}
 800bc78:	b085      	sub	sp, #20
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
 800bc7e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	881b      	ldrh	r3, [r3, #0]
 800bc88:	68fa      	ldr	r2, [r7, #12]
 800bc8a:	7812      	ldrb	r2, [r2, #0]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	b29a      	uxth	r2, r3
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	781b      	ldrb	r3, [r3, #0]
 800bc98:	461a      	mov	r2, r3
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bca0:	68fb      	ldr	r3, [r7, #12]
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3714      	adds	r7, #20
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr

0800bcae <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bcae:	b480      	push	{r7}
 800bcb0:	b087      	sub	sp, #28
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	3301      	adds	r3, #1
 800bcc4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	781b      	ldrb	r3, [r3, #0]
 800bcca:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bccc:	8a3b      	ldrh	r3, [r7, #16]
 800bcce:	021b      	lsls	r3, r3, #8
 800bcd0:	b21a      	sxth	r2, r3
 800bcd2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	b21b      	sxth	r3, r3
 800bcda:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bcdc:	89fb      	ldrh	r3, [r7, #14]
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	371c      	adds	r7, #28
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr
	...

0800bcec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b084      	sub	sp, #16
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bd02:	2b40      	cmp	r3, #64	@ 0x40
 800bd04:	d005      	beq.n	800bd12 <USBD_StdDevReq+0x26>
 800bd06:	2b40      	cmp	r3, #64	@ 0x40
 800bd08:	d857      	bhi.n	800bdba <USBD_StdDevReq+0xce>
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d00f      	beq.n	800bd2e <USBD_StdDevReq+0x42>
 800bd0e:	2b20      	cmp	r3, #32
 800bd10:	d153      	bne.n	800bdba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	32ae      	adds	r2, #174	@ 0xae
 800bd1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd20:	689b      	ldr	r3, [r3, #8]
 800bd22:	6839      	ldr	r1, [r7, #0]
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	4798      	blx	r3
 800bd28:	4603      	mov	r3, r0
 800bd2a:	73fb      	strb	r3, [r7, #15]
      break;
 800bd2c:	e04a      	b.n	800bdc4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	785b      	ldrb	r3, [r3, #1]
 800bd32:	2b09      	cmp	r3, #9
 800bd34:	d83b      	bhi.n	800bdae <USBD_StdDevReq+0xc2>
 800bd36:	a201      	add	r2, pc, #4	@ (adr r2, 800bd3c <USBD_StdDevReq+0x50>)
 800bd38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd3c:	0800bd91 	.word	0x0800bd91
 800bd40:	0800bda5 	.word	0x0800bda5
 800bd44:	0800bdaf 	.word	0x0800bdaf
 800bd48:	0800bd9b 	.word	0x0800bd9b
 800bd4c:	0800bdaf 	.word	0x0800bdaf
 800bd50:	0800bd6f 	.word	0x0800bd6f
 800bd54:	0800bd65 	.word	0x0800bd65
 800bd58:	0800bdaf 	.word	0x0800bdaf
 800bd5c:	0800bd87 	.word	0x0800bd87
 800bd60:	0800bd79 	.word	0x0800bd79
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bd64:	6839      	ldr	r1, [r7, #0]
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f000 fa3c 	bl	800c1e4 <USBD_GetDescriptor>
          break;
 800bd6c:	e024      	b.n	800bdb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bd6e:	6839      	ldr	r1, [r7, #0]
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f000 fba1 	bl	800c4b8 <USBD_SetAddress>
          break;
 800bd76:	e01f      	b.n	800bdb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bd78:	6839      	ldr	r1, [r7, #0]
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f000 fbe0 	bl	800c540 <USBD_SetConfig>
 800bd80:	4603      	mov	r3, r0
 800bd82:	73fb      	strb	r3, [r7, #15]
          break;
 800bd84:	e018      	b.n	800bdb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bd86:	6839      	ldr	r1, [r7, #0]
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f000 fc83 	bl	800c694 <USBD_GetConfig>
          break;
 800bd8e:	e013      	b.n	800bdb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bd90:	6839      	ldr	r1, [r7, #0]
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f000 fcb4 	bl	800c700 <USBD_GetStatus>
          break;
 800bd98:	e00e      	b.n	800bdb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bd9a:	6839      	ldr	r1, [r7, #0]
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f000 fce3 	bl	800c768 <USBD_SetFeature>
          break;
 800bda2:	e009      	b.n	800bdb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bda4:	6839      	ldr	r1, [r7, #0]
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f000 fd07 	bl	800c7ba <USBD_ClrFeature>
          break;
 800bdac:	e004      	b.n	800bdb8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bdae:	6839      	ldr	r1, [r7, #0]
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f000 fd5e 	bl	800c872 <USBD_CtlError>
          break;
 800bdb6:	bf00      	nop
      }
      break;
 800bdb8:	e004      	b.n	800bdc4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bdba:	6839      	ldr	r1, [r7, #0]
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f000 fd58 	bl	800c872 <USBD_CtlError>
      break;
 800bdc2:	bf00      	nop
  }

  return ret;
 800bdc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3710      	adds	r7, #16
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop

0800bdd0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b084      	sub	sp, #16
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdda:	2300      	movs	r3, #0
 800bddc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bde6:	2b40      	cmp	r3, #64	@ 0x40
 800bde8:	d005      	beq.n	800bdf6 <USBD_StdItfReq+0x26>
 800bdea:	2b40      	cmp	r3, #64	@ 0x40
 800bdec:	d852      	bhi.n	800be94 <USBD_StdItfReq+0xc4>
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d001      	beq.n	800bdf6 <USBD_StdItfReq+0x26>
 800bdf2:	2b20      	cmp	r3, #32
 800bdf4:	d14e      	bne.n	800be94 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdfc:	b2db      	uxtb	r3, r3
 800bdfe:	3b01      	subs	r3, #1
 800be00:	2b02      	cmp	r3, #2
 800be02:	d840      	bhi.n	800be86 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	889b      	ldrh	r3, [r3, #4]
 800be08:	b2db      	uxtb	r3, r3
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d836      	bhi.n	800be7c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	889b      	ldrh	r3, [r3, #4]
 800be12:	b2db      	uxtb	r3, r3
 800be14:	4619      	mov	r1, r3
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f7ff fedb 	bl	800bbd2 <USBD_CoreFindIF>
 800be1c:	4603      	mov	r3, r0
 800be1e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be20:	7bbb      	ldrb	r3, [r7, #14]
 800be22:	2bff      	cmp	r3, #255	@ 0xff
 800be24:	d01d      	beq.n	800be62 <USBD_StdItfReq+0x92>
 800be26:	7bbb      	ldrb	r3, [r7, #14]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d11a      	bne.n	800be62 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800be2c:	7bba      	ldrb	r2, [r7, #14]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	32ae      	adds	r2, #174	@ 0xae
 800be32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be36:	689b      	ldr	r3, [r3, #8]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d00f      	beq.n	800be5c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800be3c:	7bba      	ldrb	r2, [r7, #14]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800be44:	7bba      	ldrb	r2, [r7, #14]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	32ae      	adds	r2, #174	@ 0xae
 800be4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be4e:	689b      	ldr	r3, [r3, #8]
 800be50:	6839      	ldr	r1, [r7, #0]
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	4798      	blx	r3
 800be56:	4603      	mov	r3, r0
 800be58:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800be5a:	e004      	b.n	800be66 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800be5c:	2303      	movs	r3, #3
 800be5e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800be60:	e001      	b.n	800be66 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800be62:	2303      	movs	r3, #3
 800be64:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	88db      	ldrh	r3, [r3, #6]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d110      	bne.n	800be90 <USBD_StdItfReq+0xc0>
 800be6e:	7bfb      	ldrb	r3, [r7, #15]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d10d      	bne.n	800be90 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 fdd3 	bl	800ca20 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800be7a:	e009      	b.n	800be90 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800be7c:	6839      	ldr	r1, [r7, #0]
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 fcf7 	bl	800c872 <USBD_CtlError>
          break;
 800be84:	e004      	b.n	800be90 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800be86:	6839      	ldr	r1, [r7, #0]
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f000 fcf2 	bl	800c872 <USBD_CtlError>
          break;
 800be8e:	e000      	b.n	800be92 <USBD_StdItfReq+0xc2>
          break;
 800be90:	bf00      	nop
      }
      break;
 800be92:	e004      	b.n	800be9e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800be94:	6839      	ldr	r1, [r7, #0]
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 fceb 	bl	800c872 <USBD_CtlError>
      break;
 800be9c:	bf00      	nop
  }

  return ret;
 800be9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3710      	adds	r7, #16
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800beb2:	2300      	movs	r3, #0
 800beb4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	889b      	ldrh	r3, [r3, #4]
 800beba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bec4:	2b40      	cmp	r3, #64	@ 0x40
 800bec6:	d007      	beq.n	800bed8 <USBD_StdEPReq+0x30>
 800bec8:	2b40      	cmp	r3, #64	@ 0x40
 800beca:	f200 817f 	bhi.w	800c1cc <USBD_StdEPReq+0x324>
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d02a      	beq.n	800bf28 <USBD_StdEPReq+0x80>
 800bed2:	2b20      	cmp	r3, #32
 800bed4:	f040 817a 	bne.w	800c1cc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bed8:	7bbb      	ldrb	r3, [r7, #14]
 800beda:	4619      	mov	r1, r3
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f7ff fe85 	bl	800bbec <USBD_CoreFindEP>
 800bee2:	4603      	mov	r3, r0
 800bee4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bee6:	7b7b      	ldrb	r3, [r7, #13]
 800bee8:	2bff      	cmp	r3, #255	@ 0xff
 800beea:	f000 8174 	beq.w	800c1d6 <USBD_StdEPReq+0x32e>
 800beee:	7b7b      	ldrb	r3, [r7, #13]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	f040 8170 	bne.w	800c1d6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bef6:	7b7a      	ldrb	r2, [r7, #13]
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800befe:	7b7a      	ldrb	r2, [r7, #13]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	32ae      	adds	r2, #174	@ 0xae
 800bf04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf08:	689b      	ldr	r3, [r3, #8]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	f000 8163 	beq.w	800c1d6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bf10:	7b7a      	ldrb	r2, [r7, #13]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	32ae      	adds	r2, #174	@ 0xae
 800bf16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf1a:	689b      	ldr	r3, [r3, #8]
 800bf1c:	6839      	ldr	r1, [r7, #0]
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	4798      	blx	r3
 800bf22:	4603      	mov	r3, r0
 800bf24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bf26:	e156      	b.n	800c1d6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	785b      	ldrb	r3, [r3, #1]
 800bf2c:	2b03      	cmp	r3, #3
 800bf2e:	d008      	beq.n	800bf42 <USBD_StdEPReq+0x9a>
 800bf30:	2b03      	cmp	r3, #3
 800bf32:	f300 8145 	bgt.w	800c1c0 <USBD_StdEPReq+0x318>
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	f000 809b 	beq.w	800c072 <USBD_StdEPReq+0x1ca>
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d03c      	beq.n	800bfba <USBD_StdEPReq+0x112>
 800bf40:	e13e      	b.n	800c1c0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf48:	b2db      	uxtb	r3, r3
 800bf4a:	2b02      	cmp	r3, #2
 800bf4c:	d002      	beq.n	800bf54 <USBD_StdEPReq+0xac>
 800bf4e:	2b03      	cmp	r3, #3
 800bf50:	d016      	beq.n	800bf80 <USBD_StdEPReq+0xd8>
 800bf52:	e02c      	b.n	800bfae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf54:	7bbb      	ldrb	r3, [r7, #14]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d00d      	beq.n	800bf76 <USBD_StdEPReq+0xce>
 800bf5a:	7bbb      	ldrb	r3, [r7, #14]
 800bf5c:	2b80      	cmp	r3, #128	@ 0x80
 800bf5e:	d00a      	beq.n	800bf76 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf60:	7bbb      	ldrb	r3, [r7, #14]
 800bf62:	4619      	mov	r1, r3
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f7f5 fd5f 	bl	8001a28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf6a:	2180      	movs	r1, #128	@ 0x80
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f7f5 fd5b 	bl	8001a28 <USBD_LL_StallEP>
 800bf72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bf74:	e020      	b.n	800bfb8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bf76:	6839      	ldr	r1, [r7, #0]
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 fc7a 	bl	800c872 <USBD_CtlError>
              break;
 800bf7e:	e01b      	b.n	800bfb8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	885b      	ldrh	r3, [r3, #2]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d10e      	bne.n	800bfa6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bf88:	7bbb      	ldrb	r3, [r7, #14]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d00b      	beq.n	800bfa6 <USBD_StdEPReq+0xfe>
 800bf8e:	7bbb      	ldrb	r3, [r7, #14]
 800bf90:	2b80      	cmp	r3, #128	@ 0x80
 800bf92:	d008      	beq.n	800bfa6 <USBD_StdEPReq+0xfe>
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	88db      	ldrh	r3, [r3, #6]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d104      	bne.n	800bfa6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf9c:	7bbb      	ldrb	r3, [r7, #14]
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f7f5 fd41 	bl	8001a28 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f000 fd3a 	bl	800ca20 <USBD_CtlSendStatus>

              break;
 800bfac:	e004      	b.n	800bfb8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bfae:	6839      	ldr	r1, [r7, #0]
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f000 fc5e 	bl	800c872 <USBD_CtlError>
              break;
 800bfb6:	bf00      	nop
          }
          break;
 800bfb8:	e107      	b.n	800c1ca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	2b02      	cmp	r3, #2
 800bfc4:	d002      	beq.n	800bfcc <USBD_StdEPReq+0x124>
 800bfc6:	2b03      	cmp	r3, #3
 800bfc8:	d016      	beq.n	800bff8 <USBD_StdEPReq+0x150>
 800bfca:	e04b      	b.n	800c064 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfcc:	7bbb      	ldrb	r3, [r7, #14]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d00d      	beq.n	800bfee <USBD_StdEPReq+0x146>
 800bfd2:	7bbb      	ldrb	r3, [r7, #14]
 800bfd4:	2b80      	cmp	r3, #128	@ 0x80
 800bfd6:	d00a      	beq.n	800bfee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bfd8:	7bbb      	ldrb	r3, [r7, #14]
 800bfda:	4619      	mov	r1, r3
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f7f5 fd23 	bl	8001a28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bfe2:	2180      	movs	r1, #128	@ 0x80
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f7f5 fd1f 	bl	8001a28 <USBD_LL_StallEP>
 800bfea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bfec:	e040      	b.n	800c070 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bfee:	6839      	ldr	r1, [r7, #0]
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f000 fc3e 	bl	800c872 <USBD_CtlError>
              break;
 800bff6:	e03b      	b.n	800c070 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	885b      	ldrh	r3, [r3, #2]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d136      	bne.n	800c06e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c000:	7bbb      	ldrb	r3, [r7, #14]
 800c002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c006:	2b00      	cmp	r3, #0
 800c008:	d004      	beq.n	800c014 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c00a:	7bbb      	ldrb	r3, [r7, #14]
 800c00c:	4619      	mov	r1, r3
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f7f5 fd29 	bl	8001a66 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 fd03 	bl	800ca20 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c01a:	7bbb      	ldrb	r3, [r7, #14]
 800c01c:	4619      	mov	r1, r3
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f7ff fde4 	bl	800bbec <USBD_CoreFindEP>
 800c024:	4603      	mov	r3, r0
 800c026:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c028:	7b7b      	ldrb	r3, [r7, #13]
 800c02a:	2bff      	cmp	r3, #255	@ 0xff
 800c02c:	d01f      	beq.n	800c06e <USBD_StdEPReq+0x1c6>
 800c02e:	7b7b      	ldrb	r3, [r7, #13]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d11c      	bne.n	800c06e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c034:	7b7a      	ldrb	r2, [r7, #13]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c03c:	7b7a      	ldrb	r2, [r7, #13]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	32ae      	adds	r2, #174	@ 0xae
 800c042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c046:	689b      	ldr	r3, [r3, #8]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d010      	beq.n	800c06e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c04c:	7b7a      	ldrb	r2, [r7, #13]
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	32ae      	adds	r2, #174	@ 0xae
 800c052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c056:	689b      	ldr	r3, [r3, #8]
 800c058:	6839      	ldr	r1, [r7, #0]
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	4798      	blx	r3
 800c05e:	4603      	mov	r3, r0
 800c060:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c062:	e004      	b.n	800c06e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c064:	6839      	ldr	r1, [r7, #0]
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 fc03 	bl	800c872 <USBD_CtlError>
              break;
 800c06c:	e000      	b.n	800c070 <USBD_StdEPReq+0x1c8>
              break;
 800c06e:	bf00      	nop
          }
          break;
 800c070:	e0ab      	b.n	800c1ca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c078:	b2db      	uxtb	r3, r3
 800c07a:	2b02      	cmp	r3, #2
 800c07c:	d002      	beq.n	800c084 <USBD_StdEPReq+0x1dc>
 800c07e:	2b03      	cmp	r3, #3
 800c080:	d032      	beq.n	800c0e8 <USBD_StdEPReq+0x240>
 800c082:	e097      	b.n	800c1b4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c084:	7bbb      	ldrb	r3, [r7, #14]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d007      	beq.n	800c09a <USBD_StdEPReq+0x1f2>
 800c08a:	7bbb      	ldrb	r3, [r7, #14]
 800c08c:	2b80      	cmp	r3, #128	@ 0x80
 800c08e:	d004      	beq.n	800c09a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c090:	6839      	ldr	r1, [r7, #0]
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 fbed 	bl	800c872 <USBD_CtlError>
                break;
 800c098:	e091      	b.n	800c1be <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c09a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	da0b      	bge.n	800c0ba <USBD_StdEPReq+0x212>
 800c0a2:	7bbb      	ldrb	r3, [r7, #14]
 800c0a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c0a8:	4613      	mov	r3, r2
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	4413      	add	r3, r2
 800c0ae:	009b      	lsls	r3, r3, #2
 800c0b0:	3310      	adds	r3, #16
 800c0b2:	687a      	ldr	r2, [r7, #4]
 800c0b4:	4413      	add	r3, r2
 800c0b6:	3304      	adds	r3, #4
 800c0b8:	e00b      	b.n	800c0d2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c0ba:	7bbb      	ldrb	r3, [r7, #14]
 800c0bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0c0:	4613      	mov	r3, r2
 800c0c2:	009b      	lsls	r3, r3, #2
 800c0c4:	4413      	add	r3, r2
 800c0c6:	009b      	lsls	r3, r3, #2
 800c0c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c0cc:	687a      	ldr	r2, [r7, #4]
 800c0ce:	4413      	add	r3, r2
 800c0d0:	3304      	adds	r3, #4
 800c0d2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	2202      	movs	r2, #2
 800c0de:	4619      	mov	r1, r3
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f000 fc43 	bl	800c96c <USBD_CtlSendData>
              break;
 800c0e6:	e06a      	b.n	800c1be <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c0e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	da11      	bge.n	800c114 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c0f0:	7bbb      	ldrb	r3, [r7, #14]
 800c0f2:	f003 020f 	and.w	r2, r3, #15
 800c0f6:	6879      	ldr	r1, [r7, #4]
 800c0f8:	4613      	mov	r3, r2
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	4413      	add	r3, r2
 800c0fe:	009b      	lsls	r3, r3, #2
 800c100:	440b      	add	r3, r1
 800c102:	3324      	adds	r3, #36	@ 0x24
 800c104:	881b      	ldrh	r3, [r3, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d117      	bne.n	800c13a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c10a:	6839      	ldr	r1, [r7, #0]
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f000 fbb0 	bl	800c872 <USBD_CtlError>
                  break;
 800c112:	e054      	b.n	800c1be <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c114:	7bbb      	ldrb	r3, [r7, #14]
 800c116:	f003 020f 	and.w	r2, r3, #15
 800c11a:	6879      	ldr	r1, [r7, #4]
 800c11c:	4613      	mov	r3, r2
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	4413      	add	r3, r2
 800c122:	009b      	lsls	r3, r3, #2
 800c124:	440b      	add	r3, r1
 800c126:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c12a:	881b      	ldrh	r3, [r3, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d104      	bne.n	800c13a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c130:	6839      	ldr	r1, [r7, #0]
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 fb9d 	bl	800c872 <USBD_CtlError>
                  break;
 800c138:	e041      	b.n	800c1be <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c13a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	da0b      	bge.n	800c15a <USBD_StdEPReq+0x2b2>
 800c142:	7bbb      	ldrb	r3, [r7, #14]
 800c144:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c148:	4613      	mov	r3, r2
 800c14a:	009b      	lsls	r3, r3, #2
 800c14c:	4413      	add	r3, r2
 800c14e:	009b      	lsls	r3, r3, #2
 800c150:	3310      	adds	r3, #16
 800c152:	687a      	ldr	r2, [r7, #4]
 800c154:	4413      	add	r3, r2
 800c156:	3304      	adds	r3, #4
 800c158:	e00b      	b.n	800c172 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c15a:	7bbb      	ldrb	r3, [r7, #14]
 800c15c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c160:	4613      	mov	r3, r2
 800c162:	009b      	lsls	r3, r3, #2
 800c164:	4413      	add	r3, r2
 800c166:	009b      	lsls	r3, r3, #2
 800c168:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c16c:	687a      	ldr	r2, [r7, #4]
 800c16e:	4413      	add	r3, r2
 800c170:	3304      	adds	r3, #4
 800c172:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c174:	7bbb      	ldrb	r3, [r7, #14]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d002      	beq.n	800c180 <USBD_StdEPReq+0x2d8>
 800c17a:	7bbb      	ldrb	r3, [r7, #14]
 800c17c:	2b80      	cmp	r3, #128	@ 0x80
 800c17e:	d103      	bne.n	800c188 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	2200      	movs	r2, #0
 800c184:	601a      	str	r2, [r3, #0]
 800c186:	e00e      	b.n	800c1a6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c188:	7bbb      	ldrb	r3, [r7, #14]
 800c18a:	4619      	mov	r1, r3
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f7f5 fc89 	bl	8001aa4 <USBD_LL_IsStallEP>
 800c192:	4603      	mov	r3, r0
 800c194:	2b00      	cmp	r3, #0
 800c196:	d003      	beq.n	800c1a0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	2201      	movs	r2, #1
 800c19c:	601a      	str	r2, [r3, #0]
 800c19e:	e002      	b.n	800c1a6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	2202      	movs	r2, #2
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f000 fbdd 	bl	800c96c <USBD_CtlSendData>
              break;
 800c1b2:	e004      	b.n	800c1be <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c1b4:	6839      	ldr	r1, [r7, #0]
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f000 fb5b 	bl	800c872 <USBD_CtlError>
              break;
 800c1bc:	bf00      	nop
          }
          break;
 800c1be:	e004      	b.n	800c1ca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c1c0:	6839      	ldr	r1, [r7, #0]
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 fb55 	bl	800c872 <USBD_CtlError>
          break;
 800c1c8:	bf00      	nop
      }
      break;
 800c1ca:	e005      	b.n	800c1d8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c1cc:	6839      	ldr	r1, [r7, #0]
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f000 fb4f 	bl	800c872 <USBD_CtlError>
      break;
 800c1d4:	e000      	b.n	800c1d8 <USBD_StdEPReq+0x330>
      break;
 800c1d6:	bf00      	nop
  }

  return ret;
 800c1d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3710      	adds	r7, #16
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
	...

0800c1e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b084      	sub	sp, #16
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	885b      	ldrh	r3, [r3, #2]
 800c1fe:	0a1b      	lsrs	r3, r3, #8
 800c200:	b29b      	uxth	r3, r3
 800c202:	3b01      	subs	r3, #1
 800c204:	2b06      	cmp	r3, #6
 800c206:	f200 8128 	bhi.w	800c45a <USBD_GetDescriptor+0x276>
 800c20a:	a201      	add	r2, pc, #4	@ (adr r2, 800c210 <USBD_GetDescriptor+0x2c>)
 800c20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c210:	0800c22d 	.word	0x0800c22d
 800c214:	0800c245 	.word	0x0800c245
 800c218:	0800c285 	.word	0x0800c285
 800c21c:	0800c45b 	.word	0x0800c45b
 800c220:	0800c45b 	.word	0x0800c45b
 800c224:	0800c3fb 	.word	0x0800c3fb
 800c228:	0800c427 	.word	0x0800c427
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	687a      	ldr	r2, [r7, #4]
 800c236:	7c12      	ldrb	r2, [r2, #16]
 800c238:	f107 0108 	add.w	r1, r7, #8
 800c23c:	4610      	mov	r0, r2
 800c23e:	4798      	blx	r3
 800c240:	60f8      	str	r0, [r7, #12]
      break;
 800c242:	e112      	b.n	800c46a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	7c1b      	ldrb	r3, [r3, #16]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d10d      	bne.n	800c268 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c254:	f107 0208 	add.w	r2, r7, #8
 800c258:	4610      	mov	r0, r2
 800c25a:	4798      	blx	r3
 800c25c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	3301      	adds	r3, #1
 800c262:	2202      	movs	r2, #2
 800c264:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c266:	e100      	b.n	800c46a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c26e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c270:	f107 0208 	add.w	r2, r7, #8
 800c274:	4610      	mov	r0, r2
 800c276:	4798      	blx	r3
 800c278:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	3301      	adds	r3, #1
 800c27e:	2202      	movs	r2, #2
 800c280:	701a      	strb	r2, [r3, #0]
      break;
 800c282:	e0f2      	b.n	800c46a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	885b      	ldrh	r3, [r3, #2]
 800c288:	b2db      	uxtb	r3, r3
 800c28a:	2b05      	cmp	r3, #5
 800c28c:	f200 80ac 	bhi.w	800c3e8 <USBD_GetDescriptor+0x204>
 800c290:	a201      	add	r2, pc, #4	@ (adr r2, 800c298 <USBD_GetDescriptor+0xb4>)
 800c292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c296:	bf00      	nop
 800c298:	0800c2b1 	.word	0x0800c2b1
 800c29c:	0800c2e5 	.word	0x0800c2e5
 800c2a0:	0800c319 	.word	0x0800c319
 800c2a4:	0800c34d 	.word	0x0800c34d
 800c2a8:	0800c381 	.word	0x0800c381
 800c2ac:	0800c3b5 	.word	0x0800c3b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d00b      	beq.n	800c2d4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2c2:	685b      	ldr	r3, [r3, #4]
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	7c12      	ldrb	r2, [r2, #16]
 800c2c8:	f107 0108 	add.w	r1, r7, #8
 800c2cc:	4610      	mov	r0, r2
 800c2ce:	4798      	blx	r3
 800c2d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2d2:	e091      	b.n	800c3f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2d4:	6839      	ldr	r1, [r7, #0]
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f000 facb 	bl	800c872 <USBD_CtlError>
            err++;
 800c2dc:	7afb      	ldrb	r3, [r7, #11]
 800c2de:	3301      	adds	r3, #1
 800c2e0:	72fb      	strb	r3, [r7, #11]
          break;
 800c2e2:	e089      	b.n	800c3f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2ea:	689b      	ldr	r3, [r3, #8]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d00b      	beq.n	800c308 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2f6:	689b      	ldr	r3, [r3, #8]
 800c2f8:	687a      	ldr	r2, [r7, #4]
 800c2fa:	7c12      	ldrb	r2, [r2, #16]
 800c2fc:	f107 0108 	add.w	r1, r7, #8
 800c300:	4610      	mov	r0, r2
 800c302:	4798      	blx	r3
 800c304:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c306:	e077      	b.n	800c3f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c308:	6839      	ldr	r1, [r7, #0]
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 fab1 	bl	800c872 <USBD_CtlError>
            err++;
 800c310:	7afb      	ldrb	r3, [r7, #11]
 800c312:	3301      	adds	r3, #1
 800c314:	72fb      	strb	r3, [r7, #11]
          break;
 800c316:	e06f      	b.n	800c3f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c31e:	68db      	ldr	r3, [r3, #12]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d00b      	beq.n	800c33c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c32a:	68db      	ldr	r3, [r3, #12]
 800c32c:	687a      	ldr	r2, [r7, #4]
 800c32e:	7c12      	ldrb	r2, [r2, #16]
 800c330:	f107 0108 	add.w	r1, r7, #8
 800c334:	4610      	mov	r0, r2
 800c336:	4798      	blx	r3
 800c338:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c33a:	e05d      	b.n	800c3f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c33c:	6839      	ldr	r1, [r7, #0]
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f000 fa97 	bl	800c872 <USBD_CtlError>
            err++;
 800c344:	7afb      	ldrb	r3, [r7, #11]
 800c346:	3301      	adds	r3, #1
 800c348:	72fb      	strb	r3, [r7, #11]
          break;
 800c34a:	e055      	b.n	800c3f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c352:	691b      	ldr	r3, [r3, #16]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d00b      	beq.n	800c370 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c35e:	691b      	ldr	r3, [r3, #16]
 800c360:	687a      	ldr	r2, [r7, #4]
 800c362:	7c12      	ldrb	r2, [r2, #16]
 800c364:	f107 0108 	add.w	r1, r7, #8
 800c368:	4610      	mov	r0, r2
 800c36a:	4798      	blx	r3
 800c36c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c36e:	e043      	b.n	800c3f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c370:	6839      	ldr	r1, [r7, #0]
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f000 fa7d 	bl	800c872 <USBD_CtlError>
            err++;
 800c378:	7afb      	ldrb	r3, [r7, #11]
 800c37a:	3301      	adds	r3, #1
 800c37c:	72fb      	strb	r3, [r7, #11]
          break;
 800c37e:	e03b      	b.n	800c3f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c386:	695b      	ldr	r3, [r3, #20]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d00b      	beq.n	800c3a4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c392:	695b      	ldr	r3, [r3, #20]
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	7c12      	ldrb	r2, [r2, #16]
 800c398:	f107 0108 	add.w	r1, r7, #8
 800c39c:	4610      	mov	r0, r2
 800c39e:	4798      	blx	r3
 800c3a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3a2:	e029      	b.n	800c3f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3a4:	6839      	ldr	r1, [r7, #0]
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f000 fa63 	bl	800c872 <USBD_CtlError>
            err++;
 800c3ac:	7afb      	ldrb	r3, [r7, #11]
 800c3ae:	3301      	adds	r3, #1
 800c3b0:	72fb      	strb	r3, [r7, #11]
          break;
 800c3b2:	e021      	b.n	800c3f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3ba:	699b      	ldr	r3, [r3, #24]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d00b      	beq.n	800c3d8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3c6:	699b      	ldr	r3, [r3, #24]
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	7c12      	ldrb	r2, [r2, #16]
 800c3cc:	f107 0108 	add.w	r1, r7, #8
 800c3d0:	4610      	mov	r0, r2
 800c3d2:	4798      	blx	r3
 800c3d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3d6:	e00f      	b.n	800c3f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3d8:	6839      	ldr	r1, [r7, #0]
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f000 fa49 	bl	800c872 <USBD_CtlError>
            err++;
 800c3e0:	7afb      	ldrb	r3, [r7, #11]
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	72fb      	strb	r3, [r7, #11]
          break;
 800c3e6:	e007      	b.n	800c3f8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c3e8:	6839      	ldr	r1, [r7, #0]
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f000 fa41 	bl	800c872 <USBD_CtlError>
          err++;
 800c3f0:	7afb      	ldrb	r3, [r7, #11]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c3f6:	bf00      	nop
      }
      break;
 800c3f8:	e037      	b.n	800c46a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	7c1b      	ldrb	r3, [r3, #16]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d109      	bne.n	800c416 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c40a:	f107 0208 	add.w	r2, r7, #8
 800c40e:	4610      	mov	r0, r2
 800c410:	4798      	blx	r3
 800c412:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c414:	e029      	b.n	800c46a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c416:	6839      	ldr	r1, [r7, #0]
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f000 fa2a 	bl	800c872 <USBD_CtlError>
        err++;
 800c41e:	7afb      	ldrb	r3, [r7, #11]
 800c420:	3301      	adds	r3, #1
 800c422:	72fb      	strb	r3, [r7, #11]
      break;
 800c424:	e021      	b.n	800c46a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	7c1b      	ldrb	r3, [r3, #16]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d10d      	bne.n	800c44a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c436:	f107 0208 	add.w	r2, r7, #8
 800c43a:	4610      	mov	r0, r2
 800c43c:	4798      	blx	r3
 800c43e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	3301      	adds	r3, #1
 800c444:	2207      	movs	r2, #7
 800c446:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c448:	e00f      	b.n	800c46a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c44a:	6839      	ldr	r1, [r7, #0]
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f000 fa10 	bl	800c872 <USBD_CtlError>
        err++;
 800c452:	7afb      	ldrb	r3, [r7, #11]
 800c454:	3301      	adds	r3, #1
 800c456:	72fb      	strb	r3, [r7, #11]
      break;
 800c458:	e007      	b.n	800c46a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c45a:	6839      	ldr	r1, [r7, #0]
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f000 fa08 	bl	800c872 <USBD_CtlError>
      err++;
 800c462:	7afb      	ldrb	r3, [r7, #11]
 800c464:	3301      	adds	r3, #1
 800c466:	72fb      	strb	r3, [r7, #11]
      break;
 800c468:	bf00      	nop
  }

  if (err != 0U)
 800c46a:	7afb      	ldrb	r3, [r7, #11]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d11e      	bne.n	800c4ae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	88db      	ldrh	r3, [r3, #6]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d016      	beq.n	800c4a6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c478:	893b      	ldrh	r3, [r7, #8]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d00e      	beq.n	800c49c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	88da      	ldrh	r2, [r3, #6]
 800c482:	893b      	ldrh	r3, [r7, #8]
 800c484:	4293      	cmp	r3, r2
 800c486:	bf28      	it	cs
 800c488:	4613      	movcs	r3, r2
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c48e:	893b      	ldrh	r3, [r7, #8]
 800c490:	461a      	mov	r2, r3
 800c492:	68f9      	ldr	r1, [r7, #12]
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f000 fa69 	bl	800c96c <USBD_CtlSendData>
 800c49a:	e009      	b.n	800c4b0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c49c:	6839      	ldr	r1, [r7, #0]
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f000 f9e7 	bl	800c872 <USBD_CtlError>
 800c4a4:	e004      	b.n	800c4b0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f000 faba 	bl	800ca20 <USBD_CtlSendStatus>
 800c4ac:	e000      	b.n	800c4b0 <USBD_GetDescriptor+0x2cc>
    return;
 800c4ae:	bf00      	nop
  }
}
 800c4b0:	3710      	adds	r7, #16
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop

0800c4b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b084      	sub	sp, #16
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	889b      	ldrh	r3, [r3, #4]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d131      	bne.n	800c52e <USBD_SetAddress+0x76>
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	88db      	ldrh	r3, [r3, #6]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d12d      	bne.n	800c52e <USBD_SetAddress+0x76>
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	885b      	ldrh	r3, [r3, #2]
 800c4d6:	2b7f      	cmp	r3, #127	@ 0x7f
 800c4d8:	d829      	bhi.n	800c52e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	885b      	ldrh	r3, [r3, #2]
 800c4de:	b2db      	uxtb	r3, r3
 800c4e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	2b03      	cmp	r3, #3
 800c4f0:	d104      	bne.n	800c4fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c4f2:	6839      	ldr	r1, [r7, #0]
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f000 f9bc 	bl	800c872 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4fa:	e01d      	b.n	800c538 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	7bfa      	ldrb	r2, [r7, #15]
 800c500:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c504:	7bfb      	ldrb	r3, [r7, #15]
 800c506:	4619      	mov	r1, r3
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f7f5 faf7 	bl	8001afc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 fa86 	bl	800ca20 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c514:	7bfb      	ldrb	r3, [r7, #15]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d004      	beq.n	800c524 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2202      	movs	r2, #2
 800c51e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c522:	e009      	b.n	800c538 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2201      	movs	r2, #1
 800c528:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c52c:	e004      	b.n	800c538 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c52e:	6839      	ldr	r1, [r7, #0]
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f000 f99e 	bl	800c872 <USBD_CtlError>
  }
}
 800c536:	bf00      	nop
 800c538:	bf00      	nop
 800c53a:	3710      	adds	r7, #16
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b084      	sub	sp, #16
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c54a:	2300      	movs	r3, #0
 800c54c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	885b      	ldrh	r3, [r3, #2]
 800c552:	b2da      	uxtb	r2, r3
 800c554:	4b4e      	ldr	r3, [pc, #312]	@ (800c690 <USBD_SetConfig+0x150>)
 800c556:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c558:	4b4d      	ldr	r3, [pc, #308]	@ (800c690 <USBD_SetConfig+0x150>)
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	d905      	bls.n	800c56c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c560:	6839      	ldr	r1, [r7, #0]
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f000 f985 	bl	800c872 <USBD_CtlError>
    return USBD_FAIL;
 800c568:	2303      	movs	r3, #3
 800c56a:	e08c      	b.n	800c686 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c572:	b2db      	uxtb	r3, r3
 800c574:	2b02      	cmp	r3, #2
 800c576:	d002      	beq.n	800c57e <USBD_SetConfig+0x3e>
 800c578:	2b03      	cmp	r3, #3
 800c57a:	d029      	beq.n	800c5d0 <USBD_SetConfig+0x90>
 800c57c:	e075      	b.n	800c66a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c57e:	4b44      	ldr	r3, [pc, #272]	@ (800c690 <USBD_SetConfig+0x150>)
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d020      	beq.n	800c5c8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c586:	4b42      	ldr	r3, [pc, #264]	@ (800c690 <USBD_SetConfig+0x150>)
 800c588:	781b      	ldrb	r3, [r3, #0]
 800c58a:	461a      	mov	r2, r3
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c590:	4b3f      	ldr	r3, [pc, #252]	@ (800c690 <USBD_SetConfig+0x150>)
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	4619      	mov	r1, r3
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f7fe ffe3 	bl	800b562 <USBD_SetClassConfig>
 800c59c:	4603      	mov	r3, r0
 800c59e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c5a0:	7bfb      	ldrb	r3, [r7, #15]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d008      	beq.n	800c5b8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c5a6:	6839      	ldr	r1, [r7, #0]
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 f962 	bl	800c872 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2202      	movs	r2, #2
 800c5b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c5b6:	e065      	b.n	800c684 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f000 fa31 	bl	800ca20 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2203      	movs	r2, #3
 800c5c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c5c6:	e05d      	b.n	800c684 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f000 fa29 	bl	800ca20 <USBD_CtlSendStatus>
      break;
 800c5ce:	e059      	b.n	800c684 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c5d0:	4b2f      	ldr	r3, [pc, #188]	@ (800c690 <USBD_SetConfig+0x150>)
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d112      	bne.n	800c5fe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2202      	movs	r2, #2
 800c5dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c5e0:	4b2b      	ldr	r3, [pc, #172]	@ (800c690 <USBD_SetConfig+0x150>)
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c5ea:	4b29      	ldr	r3, [pc, #164]	@ (800c690 <USBD_SetConfig+0x150>)
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	4619      	mov	r1, r3
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f7fe ffd2 	bl	800b59a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f000 fa12 	bl	800ca20 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c5fc:	e042      	b.n	800c684 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c5fe:	4b24      	ldr	r3, [pc, #144]	@ (800c690 <USBD_SetConfig+0x150>)
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	461a      	mov	r2, r3
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	685b      	ldr	r3, [r3, #4]
 800c608:	429a      	cmp	r2, r3
 800c60a:	d02a      	beq.n	800c662 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	b2db      	uxtb	r3, r3
 800c612:	4619      	mov	r1, r3
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f7fe ffc0 	bl	800b59a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c61a:	4b1d      	ldr	r3, [pc, #116]	@ (800c690 <USBD_SetConfig+0x150>)
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	461a      	mov	r2, r3
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c624:	4b1a      	ldr	r3, [pc, #104]	@ (800c690 <USBD_SetConfig+0x150>)
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	4619      	mov	r1, r3
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f7fe ff99 	bl	800b562 <USBD_SetClassConfig>
 800c630:	4603      	mov	r3, r0
 800c632:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c634:	7bfb      	ldrb	r3, [r7, #15]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d00f      	beq.n	800c65a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c63a:	6839      	ldr	r1, [r7, #0]
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f000 f918 	bl	800c872 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	685b      	ldr	r3, [r3, #4]
 800c646:	b2db      	uxtb	r3, r3
 800c648:	4619      	mov	r1, r3
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f7fe ffa5 	bl	800b59a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2202      	movs	r2, #2
 800c654:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c658:	e014      	b.n	800c684 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f000 f9e0 	bl	800ca20 <USBD_CtlSendStatus>
      break;
 800c660:	e010      	b.n	800c684 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f000 f9dc 	bl	800ca20 <USBD_CtlSendStatus>
      break;
 800c668:	e00c      	b.n	800c684 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c66a:	6839      	ldr	r1, [r7, #0]
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 f900 	bl	800c872 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c672:	4b07      	ldr	r3, [pc, #28]	@ (800c690 <USBD_SetConfig+0x150>)
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	4619      	mov	r1, r3
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f7fe ff8e 	bl	800b59a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c67e:	2303      	movs	r3, #3
 800c680:	73fb      	strb	r3, [r7, #15]
      break;
 800c682:	bf00      	nop
  }

  return ret;
 800c684:	7bfb      	ldrb	r3, [r7, #15]
}
 800c686:	4618      	mov	r0, r3
 800c688:	3710      	adds	r7, #16
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}
 800c68e:	bf00      	nop
 800c690:	20001f58 	.word	0x20001f58

0800c694 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b082      	sub	sp, #8
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	88db      	ldrh	r3, [r3, #6]
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	d004      	beq.n	800c6b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c6a6:	6839      	ldr	r1, [r7, #0]
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f000 f8e2 	bl	800c872 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c6ae:	e023      	b.n	800c6f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	2b02      	cmp	r3, #2
 800c6ba:	dc02      	bgt.n	800c6c2 <USBD_GetConfig+0x2e>
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	dc03      	bgt.n	800c6c8 <USBD_GetConfig+0x34>
 800c6c0:	e015      	b.n	800c6ee <USBD_GetConfig+0x5a>
 800c6c2:	2b03      	cmp	r3, #3
 800c6c4:	d00b      	beq.n	800c6de <USBD_GetConfig+0x4a>
 800c6c6:	e012      	b.n	800c6ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	3308      	adds	r3, #8
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 f948 	bl	800c96c <USBD_CtlSendData>
        break;
 800c6dc:	e00c      	b.n	800c6f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	3304      	adds	r3, #4
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 f940 	bl	800c96c <USBD_CtlSendData>
        break;
 800c6ec:	e004      	b.n	800c6f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c6ee:	6839      	ldr	r1, [r7, #0]
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f000 f8be 	bl	800c872 <USBD_CtlError>
        break;
 800c6f6:	bf00      	nop
}
 800c6f8:	bf00      	nop
 800c6fa:	3708      	adds	r7, #8
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}

0800c700 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b082      	sub	sp, #8
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c710:	b2db      	uxtb	r3, r3
 800c712:	3b01      	subs	r3, #1
 800c714:	2b02      	cmp	r3, #2
 800c716:	d81e      	bhi.n	800c756 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	88db      	ldrh	r3, [r3, #6]
 800c71c:	2b02      	cmp	r3, #2
 800c71e:	d004      	beq.n	800c72a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c720:	6839      	ldr	r1, [r7, #0]
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f000 f8a5 	bl	800c872 <USBD_CtlError>
        break;
 800c728:	e01a      	b.n	800c760 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2201      	movs	r2, #1
 800c72e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c736:	2b00      	cmp	r3, #0
 800c738:	d005      	beq.n	800c746 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	68db      	ldr	r3, [r3, #12]
 800c73e:	f043 0202 	orr.w	r2, r3, #2
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	330c      	adds	r3, #12
 800c74a:	2202      	movs	r2, #2
 800c74c:	4619      	mov	r1, r3
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f000 f90c 	bl	800c96c <USBD_CtlSendData>
      break;
 800c754:	e004      	b.n	800c760 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c756:	6839      	ldr	r1, [r7, #0]
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f000 f88a 	bl	800c872 <USBD_CtlError>
      break;
 800c75e:	bf00      	nop
  }
}
 800c760:	bf00      	nop
 800c762:	3708      	adds	r7, #8
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}

0800c768 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	885b      	ldrh	r3, [r3, #2]
 800c776:	2b01      	cmp	r3, #1
 800c778:	d107      	bne.n	800c78a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2201      	movs	r2, #1
 800c77e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f000 f94c 	bl	800ca20 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c788:	e013      	b.n	800c7b2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	885b      	ldrh	r3, [r3, #2]
 800c78e:	2b02      	cmp	r3, #2
 800c790:	d10b      	bne.n	800c7aa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	889b      	ldrh	r3, [r3, #4]
 800c796:	0a1b      	lsrs	r3, r3, #8
 800c798:	b29b      	uxth	r3, r3
 800c79a:	b2da      	uxtb	r2, r3
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f000 f93c 	bl	800ca20 <USBD_CtlSendStatus>
}
 800c7a8:	e003      	b.n	800c7b2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c7aa:	6839      	ldr	r1, [r7, #0]
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f000 f860 	bl	800c872 <USBD_CtlError>
}
 800c7b2:	bf00      	nop
 800c7b4:	3708      	adds	r7, #8
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}

0800c7ba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7ba:	b580      	push	{r7, lr}
 800c7bc:	b082      	sub	sp, #8
 800c7be:	af00      	add	r7, sp, #0
 800c7c0:	6078      	str	r0, [r7, #4]
 800c7c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7ca:	b2db      	uxtb	r3, r3
 800c7cc:	3b01      	subs	r3, #1
 800c7ce:	2b02      	cmp	r3, #2
 800c7d0:	d80b      	bhi.n	800c7ea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	885b      	ldrh	r3, [r3, #2]
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d10c      	bne.n	800c7f4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f000 f91c 	bl	800ca20 <USBD_CtlSendStatus>
      }
      break;
 800c7e8:	e004      	b.n	800c7f4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c7ea:	6839      	ldr	r1, [r7, #0]
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f000 f840 	bl	800c872 <USBD_CtlError>
      break;
 800c7f2:	e000      	b.n	800c7f6 <USBD_ClrFeature+0x3c>
      break;
 800c7f4:	bf00      	nop
  }
}
 800c7f6:	bf00      	nop
 800c7f8:	3708      	adds	r7, #8
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}

0800c7fe <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c7fe:	b580      	push	{r7, lr}
 800c800:	b084      	sub	sp, #16
 800c802:	af00      	add	r7, sp, #0
 800c804:	6078      	str	r0, [r7, #4]
 800c806:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	781a      	ldrb	r2, [r3, #0]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	3301      	adds	r3, #1
 800c818:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	781a      	ldrb	r2, [r3, #0]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	3301      	adds	r3, #1
 800c826:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c828:	68f8      	ldr	r0, [r7, #12]
 800c82a:	f7ff fa40 	bl	800bcae <SWAPBYTE>
 800c82e:	4603      	mov	r3, r0
 800c830:	461a      	mov	r2, r3
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	3301      	adds	r3, #1
 800c83a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	3301      	adds	r3, #1
 800c840:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c842:	68f8      	ldr	r0, [r7, #12]
 800c844:	f7ff fa33 	bl	800bcae <SWAPBYTE>
 800c848:	4603      	mov	r3, r0
 800c84a:	461a      	mov	r2, r3
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	3301      	adds	r3, #1
 800c854:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	3301      	adds	r3, #1
 800c85a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c85c:	68f8      	ldr	r0, [r7, #12]
 800c85e:	f7ff fa26 	bl	800bcae <SWAPBYTE>
 800c862:	4603      	mov	r3, r0
 800c864:	461a      	mov	r2, r3
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	80da      	strh	r2, [r3, #6]
}
 800c86a:	bf00      	nop
 800c86c:	3710      	adds	r7, #16
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}

0800c872 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c872:	b580      	push	{r7, lr}
 800c874:	b082      	sub	sp, #8
 800c876:	af00      	add	r7, sp, #0
 800c878:	6078      	str	r0, [r7, #4]
 800c87a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c87c:	2180      	movs	r1, #128	@ 0x80
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f7f5 f8d2 	bl	8001a28 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c884:	2100      	movs	r1, #0
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f7f5 f8ce 	bl	8001a28 <USBD_LL_StallEP>
}
 800c88c:	bf00      	nop
 800c88e:	3708      	adds	r7, #8
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}

0800c894 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b086      	sub	sp, #24
 800c898:	af00      	add	r7, sp, #0
 800c89a:	60f8      	str	r0, [r7, #12]
 800c89c:	60b9      	str	r1, [r7, #8]
 800c89e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d042      	beq.n	800c930 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c8ae:	6938      	ldr	r0, [r7, #16]
 800c8b0:	f000 f842 	bl	800c938 <USBD_GetLen>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	005b      	lsls	r3, r3, #1
 800c8ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c8be:	d808      	bhi.n	800c8d2 <USBD_GetString+0x3e>
 800c8c0:	6938      	ldr	r0, [r7, #16]
 800c8c2:	f000 f839 	bl	800c938 <USBD_GetLen>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	005b      	lsls	r3, r3, #1
 800c8ce:	b29a      	uxth	r2, r3
 800c8d0:	e001      	b.n	800c8d6 <USBD_GetString+0x42>
 800c8d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c8da:	7dfb      	ldrb	r3, [r7, #23]
 800c8dc:	68ba      	ldr	r2, [r7, #8]
 800c8de:	4413      	add	r3, r2
 800c8e0:	687a      	ldr	r2, [r7, #4]
 800c8e2:	7812      	ldrb	r2, [r2, #0]
 800c8e4:	701a      	strb	r2, [r3, #0]
  idx++;
 800c8e6:	7dfb      	ldrb	r3, [r7, #23]
 800c8e8:	3301      	adds	r3, #1
 800c8ea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c8ec:	7dfb      	ldrb	r3, [r7, #23]
 800c8ee:	68ba      	ldr	r2, [r7, #8]
 800c8f0:	4413      	add	r3, r2
 800c8f2:	2203      	movs	r2, #3
 800c8f4:	701a      	strb	r2, [r3, #0]
  idx++;
 800c8f6:	7dfb      	ldrb	r3, [r7, #23]
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c8fc:	e013      	b.n	800c926 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c8fe:	7dfb      	ldrb	r3, [r7, #23]
 800c900:	68ba      	ldr	r2, [r7, #8]
 800c902:	4413      	add	r3, r2
 800c904:	693a      	ldr	r2, [r7, #16]
 800c906:	7812      	ldrb	r2, [r2, #0]
 800c908:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	3301      	adds	r3, #1
 800c90e:	613b      	str	r3, [r7, #16]
    idx++;
 800c910:	7dfb      	ldrb	r3, [r7, #23]
 800c912:	3301      	adds	r3, #1
 800c914:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c916:	7dfb      	ldrb	r3, [r7, #23]
 800c918:	68ba      	ldr	r2, [r7, #8]
 800c91a:	4413      	add	r3, r2
 800c91c:	2200      	movs	r2, #0
 800c91e:	701a      	strb	r2, [r3, #0]
    idx++;
 800c920:	7dfb      	ldrb	r3, [r7, #23]
 800c922:	3301      	adds	r3, #1
 800c924:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d1e7      	bne.n	800c8fe <USBD_GetString+0x6a>
 800c92e:	e000      	b.n	800c932 <USBD_GetString+0x9e>
    return;
 800c930:	bf00      	nop
  }
}
 800c932:	3718      	adds	r7, #24
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}

0800c938 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c938:	b480      	push	{r7}
 800c93a:	b085      	sub	sp, #20
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c940:	2300      	movs	r3, #0
 800c942:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c948:	e005      	b.n	800c956 <USBD_GetLen+0x1e>
  {
    len++;
 800c94a:	7bfb      	ldrb	r3, [r7, #15]
 800c94c:	3301      	adds	r3, #1
 800c94e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	3301      	adds	r3, #1
 800c954:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d1f5      	bne.n	800c94a <USBD_GetLen+0x12>
  }

  return len;
 800c95e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c960:	4618      	mov	r0, r3
 800c962:	3714      	adds	r7, #20
 800c964:	46bd      	mov	sp, r7
 800c966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96a:	4770      	bx	lr

0800c96c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b084      	sub	sp, #16
 800c970:	af00      	add	r7, sp, #0
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	2202      	movs	r2, #2
 800c97c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	687a      	ldr	r2, [r7, #4]
 800c984:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	687a      	ldr	r2, [r7, #4]
 800c98a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	68ba      	ldr	r2, [r7, #8]
 800c990:	2100      	movs	r1, #0
 800c992:	68f8      	ldr	r0, [r7, #12]
 800c994:	f7f5 f8d1 	bl	8001b3a <USBD_LL_Transmit>

  return USBD_OK;
 800c998:	2300      	movs	r3, #0
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3710      	adds	r7, #16
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}

0800c9a2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c9a2:	b580      	push	{r7, lr}
 800c9a4:	b084      	sub	sp, #16
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	60f8      	str	r0, [r7, #12]
 800c9aa:	60b9      	str	r1, [r7, #8]
 800c9ac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	68ba      	ldr	r2, [r7, #8]
 800c9b2:	2100      	movs	r1, #0
 800c9b4:	68f8      	ldr	r0, [r7, #12]
 800c9b6:	f7f5 f8c0 	bl	8001b3a <USBD_LL_Transmit>

  return USBD_OK;
 800c9ba:	2300      	movs	r3, #0
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	3710      	adds	r7, #16
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}

0800c9c4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b084      	sub	sp, #16
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	60f8      	str	r0, [r7, #12]
 800c9cc:	60b9      	str	r1, [r7, #8]
 800c9ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	2203      	movs	r2, #3
 800c9d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	687a      	ldr	r2, [r7, #4]
 800c9dc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	687a      	ldr	r2, [r7, #4]
 800c9e4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	68ba      	ldr	r2, [r7, #8]
 800c9ec:	2100      	movs	r1, #0
 800c9ee:	68f8      	ldr	r0, [r7, #12]
 800c9f0:	f7f5 f8c4 	bl	8001b7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9f4:	2300      	movs	r3, #0
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3710      	adds	r7, #16
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}

0800c9fe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	b084      	sub	sp, #16
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	60f8      	str	r0, [r7, #12]
 800ca06:	60b9      	str	r1, [r7, #8]
 800ca08:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	68ba      	ldr	r2, [r7, #8]
 800ca0e:	2100      	movs	r1, #0
 800ca10:	68f8      	ldr	r0, [r7, #12]
 800ca12:	f7f5 f8b3 	bl	8001b7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca16:	2300      	movs	r3, #0
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3710      	adds	r7, #16
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b082      	sub	sp, #8
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2204      	movs	r2, #4
 800ca2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ca30:	2300      	movs	r3, #0
 800ca32:	2200      	movs	r2, #0
 800ca34:	2100      	movs	r1, #0
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f7f5 f87f 	bl	8001b3a <USBD_LL_Transmit>

  return USBD_OK;
 800ca3c:	2300      	movs	r3, #0
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3708      	adds	r7, #8
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}

0800ca46 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ca46:	b580      	push	{r7, lr}
 800ca48:	b082      	sub	sp, #8
 800ca4a:	af00      	add	r7, sp, #0
 800ca4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2205      	movs	r2, #5
 800ca52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca56:	2300      	movs	r3, #0
 800ca58:	2200      	movs	r2, #0
 800ca5a:	2100      	movs	r1, #0
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f7f5 f88d 	bl	8001b7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca62:	2300      	movs	r3, #0
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3708      	adds	r7, #8
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}

0800ca6c <siprintf>:
 800ca6c:	b40e      	push	{r1, r2, r3}
 800ca6e:	b500      	push	{lr}
 800ca70:	b09c      	sub	sp, #112	@ 0x70
 800ca72:	ab1d      	add	r3, sp, #116	@ 0x74
 800ca74:	9002      	str	r0, [sp, #8]
 800ca76:	9006      	str	r0, [sp, #24]
 800ca78:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ca7c:	4809      	ldr	r0, [pc, #36]	@ (800caa4 <siprintf+0x38>)
 800ca7e:	9107      	str	r1, [sp, #28]
 800ca80:	9104      	str	r1, [sp, #16]
 800ca82:	4909      	ldr	r1, [pc, #36]	@ (800caa8 <siprintf+0x3c>)
 800ca84:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca88:	9105      	str	r1, [sp, #20]
 800ca8a:	6800      	ldr	r0, [r0, #0]
 800ca8c:	9301      	str	r3, [sp, #4]
 800ca8e:	a902      	add	r1, sp, #8
 800ca90:	f000 f994 	bl	800cdbc <_svfiprintf_r>
 800ca94:	9b02      	ldr	r3, [sp, #8]
 800ca96:	2200      	movs	r2, #0
 800ca98:	701a      	strb	r2, [r3, #0]
 800ca9a:	b01c      	add	sp, #112	@ 0x70
 800ca9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800caa0:	b003      	add	sp, #12
 800caa2:	4770      	bx	lr
 800caa4:	2000015c 	.word	0x2000015c
 800caa8:	ffff0208 	.word	0xffff0208

0800caac <memset>:
 800caac:	4402      	add	r2, r0
 800caae:	4603      	mov	r3, r0
 800cab0:	4293      	cmp	r3, r2
 800cab2:	d100      	bne.n	800cab6 <memset+0xa>
 800cab4:	4770      	bx	lr
 800cab6:	f803 1b01 	strb.w	r1, [r3], #1
 800caba:	e7f9      	b.n	800cab0 <memset+0x4>

0800cabc <__errno>:
 800cabc:	4b01      	ldr	r3, [pc, #4]	@ (800cac4 <__errno+0x8>)
 800cabe:	6818      	ldr	r0, [r3, #0]
 800cac0:	4770      	bx	lr
 800cac2:	bf00      	nop
 800cac4:	2000015c 	.word	0x2000015c

0800cac8 <__libc_init_array>:
 800cac8:	b570      	push	{r4, r5, r6, lr}
 800caca:	4d0d      	ldr	r5, [pc, #52]	@ (800cb00 <__libc_init_array+0x38>)
 800cacc:	4c0d      	ldr	r4, [pc, #52]	@ (800cb04 <__libc_init_array+0x3c>)
 800cace:	1b64      	subs	r4, r4, r5
 800cad0:	10a4      	asrs	r4, r4, #2
 800cad2:	2600      	movs	r6, #0
 800cad4:	42a6      	cmp	r6, r4
 800cad6:	d109      	bne.n	800caec <__libc_init_array+0x24>
 800cad8:	4d0b      	ldr	r5, [pc, #44]	@ (800cb08 <__libc_init_array+0x40>)
 800cada:	4c0c      	ldr	r4, [pc, #48]	@ (800cb0c <__libc_init_array+0x44>)
 800cadc:	f000 fc66 	bl	800d3ac <_init>
 800cae0:	1b64      	subs	r4, r4, r5
 800cae2:	10a4      	asrs	r4, r4, #2
 800cae4:	2600      	movs	r6, #0
 800cae6:	42a6      	cmp	r6, r4
 800cae8:	d105      	bne.n	800caf6 <__libc_init_array+0x2e>
 800caea:	bd70      	pop	{r4, r5, r6, pc}
 800caec:	f855 3b04 	ldr.w	r3, [r5], #4
 800caf0:	4798      	blx	r3
 800caf2:	3601      	adds	r6, #1
 800caf4:	e7ee      	b.n	800cad4 <__libc_init_array+0xc>
 800caf6:	f855 3b04 	ldr.w	r3, [r5], #4
 800cafa:	4798      	blx	r3
 800cafc:	3601      	adds	r6, #1
 800cafe:	e7f2      	b.n	800cae6 <__libc_init_array+0x1e>
 800cb00:	0800d978 	.word	0x0800d978
 800cb04:	0800d978 	.word	0x0800d978
 800cb08:	0800d978 	.word	0x0800d978
 800cb0c:	0800d97c 	.word	0x0800d97c

0800cb10 <__retarget_lock_acquire_recursive>:
 800cb10:	4770      	bx	lr

0800cb12 <__retarget_lock_release_recursive>:
 800cb12:	4770      	bx	lr

0800cb14 <_free_r>:
 800cb14:	b538      	push	{r3, r4, r5, lr}
 800cb16:	4605      	mov	r5, r0
 800cb18:	2900      	cmp	r1, #0
 800cb1a:	d041      	beq.n	800cba0 <_free_r+0x8c>
 800cb1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb20:	1f0c      	subs	r4, r1, #4
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	bfb8      	it	lt
 800cb26:	18e4      	addlt	r4, r4, r3
 800cb28:	f000 f8e0 	bl	800ccec <__malloc_lock>
 800cb2c:	4a1d      	ldr	r2, [pc, #116]	@ (800cba4 <_free_r+0x90>)
 800cb2e:	6813      	ldr	r3, [r2, #0]
 800cb30:	b933      	cbnz	r3, 800cb40 <_free_r+0x2c>
 800cb32:	6063      	str	r3, [r4, #4]
 800cb34:	6014      	str	r4, [r2, #0]
 800cb36:	4628      	mov	r0, r5
 800cb38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb3c:	f000 b8dc 	b.w	800ccf8 <__malloc_unlock>
 800cb40:	42a3      	cmp	r3, r4
 800cb42:	d908      	bls.n	800cb56 <_free_r+0x42>
 800cb44:	6820      	ldr	r0, [r4, #0]
 800cb46:	1821      	adds	r1, r4, r0
 800cb48:	428b      	cmp	r3, r1
 800cb4a:	bf01      	itttt	eq
 800cb4c:	6819      	ldreq	r1, [r3, #0]
 800cb4e:	685b      	ldreq	r3, [r3, #4]
 800cb50:	1809      	addeq	r1, r1, r0
 800cb52:	6021      	streq	r1, [r4, #0]
 800cb54:	e7ed      	b.n	800cb32 <_free_r+0x1e>
 800cb56:	461a      	mov	r2, r3
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	b10b      	cbz	r3, 800cb60 <_free_r+0x4c>
 800cb5c:	42a3      	cmp	r3, r4
 800cb5e:	d9fa      	bls.n	800cb56 <_free_r+0x42>
 800cb60:	6811      	ldr	r1, [r2, #0]
 800cb62:	1850      	adds	r0, r2, r1
 800cb64:	42a0      	cmp	r0, r4
 800cb66:	d10b      	bne.n	800cb80 <_free_r+0x6c>
 800cb68:	6820      	ldr	r0, [r4, #0]
 800cb6a:	4401      	add	r1, r0
 800cb6c:	1850      	adds	r0, r2, r1
 800cb6e:	4283      	cmp	r3, r0
 800cb70:	6011      	str	r1, [r2, #0]
 800cb72:	d1e0      	bne.n	800cb36 <_free_r+0x22>
 800cb74:	6818      	ldr	r0, [r3, #0]
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	6053      	str	r3, [r2, #4]
 800cb7a:	4408      	add	r0, r1
 800cb7c:	6010      	str	r0, [r2, #0]
 800cb7e:	e7da      	b.n	800cb36 <_free_r+0x22>
 800cb80:	d902      	bls.n	800cb88 <_free_r+0x74>
 800cb82:	230c      	movs	r3, #12
 800cb84:	602b      	str	r3, [r5, #0]
 800cb86:	e7d6      	b.n	800cb36 <_free_r+0x22>
 800cb88:	6820      	ldr	r0, [r4, #0]
 800cb8a:	1821      	adds	r1, r4, r0
 800cb8c:	428b      	cmp	r3, r1
 800cb8e:	bf04      	itt	eq
 800cb90:	6819      	ldreq	r1, [r3, #0]
 800cb92:	685b      	ldreq	r3, [r3, #4]
 800cb94:	6063      	str	r3, [r4, #4]
 800cb96:	bf04      	itt	eq
 800cb98:	1809      	addeq	r1, r1, r0
 800cb9a:	6021      	streq	r1, [r4, #0]
 800cb9c:	6054      	str	r4, [r2, #4]
 800cb9e:	e7ca      	b.n	800cb36 <_free_r+0x22>
 800cba0:	bd38      	pop	{r3, r4, r5, pc}
 800cba2:	bf00      	nop
 800cba4:	200020a0 	.word	0x200020a0

0800cba8 <sbrk_aligned>:
 800cba8:	b570      	push	{r4, r5, r6, lr}
 800cbaa:	4e0f      	ldr	r6, [pc, #60]	@ (800cbe8 <sbrk_aligned+0x40>)
 800cbac:	460c      	mov	r4, r1
 800cbae:	6831      	ldr	r1, [r6, #0]
 800cbb0:	4605      	mov	r5, r0
 800cbb2:	b911      	cbnz	r1, 800cbba <sbrk_aligned+0x12>
 800cbb4:	f000 fba6 	bl	800d304 <_sbrk_r>
 800cbb8:	6030      	str	r0, [r6, #0]
 800cbba:	4621      	mov	r1, r4
 800cbbc:	4628      	mov	r0, r5
 800cbbe:	f000 fba1 	bl	800d304 <_sbrk_r>
 800cbc2:	1c43      	adds	r3, r0, #1
 800cbc4:	d103      	bne.n	800cbce <sbrk_aligned+0x26>
 800cbc6:	f04f 34ff 	mov.w	r4, #4294967295
 800cbca:	4620      	mov	r0, r4
 800cbcc:	bd70      	pop	{r4, r5, r6, pc}
 800cbce:	1cc4      	adds	r4, r0, #3
 800cbd0:	f024 0403 	bic.w	r4, r4, #3
 800cbd4:	42a0      	cmp	r0, r4
 800cbd6:	d0f8      	beq.n	800cbca <sbrk_aligned+0x22>
 800cbd8:	1a21      	subs	r1, r4, r0
 800cbda:	4628      	mov	r0, r5
 800cbdc:	f000 fb92 	bl	800d304 <_sbrk_r>
 800cbe0:	3001      	adds	r0, #1
 800cbe2:	d1f2      	bne.n	800cbca <sbrk_aligned+0x22>
 800cbe4:	e7ef      	b.n	800cbc6 <sbrk_aligned+0x1e>
 800cbe6:	bf00      	nop
 800cbe8:	2000209c 	.word	0x2000209c

0800cbec <_malloc_r>:
 800cbec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbf0:	1ccd      	adds	r5, r1, #3
 800cbf2:	f025 0503 	bic.w	r5, r5, #3
 800cbf6:	3508      	adds	r5, #8
 800cbf8:	2d0c      	cmp	r5, #12
 800cbfa:	bf38      	it	cc
 800cbfc:	250c      	movcc	r5, #12
 800cbfe:	2d00      	cmp	r5, #0
 800cc00:	4606      	mov	r6, r0
 800cc02:	db01      	blt.n	800cc08 <_malloc_r+0x1c>
 800cc04:	42a9      	cmp	r1, r5
 800cc06:	d904      	bls.n	800cc12 <_malloc_r+0x26>
 800cc08:	230c      	movs	r3, #12
 800cc0a:	6033      	str	r3, [r6, #0]
 800cc0c:	2000      	movs	r0, #0
 800cc0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cce8 <_malloc_r+0xfc>
 800cc16:	f000 f869 	bl	800ccec <__malloc_lock>
 800cc1a:	f8d8 3000 	ldr.w	r3, [r8]
 800cc1e:	461c      	mov	r4, r3
 800cc20:	bb44      	cbnz	r4, 800cc74 <_malloc_r+0x88>
 800cc22:	4629      	mov	r1, r5
 800cc24:	4630      	mov	r0, r6
 800cc26:	f7ff ffbf 	bl	800cba8 <sbrk_aligned>
 800cc2a:	1c43      	adds	r3, r0, #1
 800cc2c:	4604      	mov	r4, r0
 800cc2e:	d158      	bne.n	800cce2 <_malloc_r+0xf6>
 800cc30:	f8d8 4000 	ldr.w	r4, [r8]
 800cc34:	4627      	mov	r7, r4
 800cc36:	2f00      	cmp	r7, #0
 800cc38:	d143      	bne.n	800ccc2 <_malloc_r+0xd6>
 800cc3a:	2c00      	cmp	r4, #0
 800cc3c:	d04b      	beq.n	800ccd6 <_malloc_r+0xea>
 800cc3e:	6823      	ldr	r3, [r4, #0]
 800cc40:	4639      	mov	r1, r7
 800cc42:	4630      	mov	r0, r6
 800cc44:	eb04 0903 	add.w	r9, r4, r3
 800cc48:	f000 fb5c 	bl	800d304 <_sbrk_r>
 800cc4c:	4581      	cmp	r9, r0
 800cc4e:	d142      	bne.n	800ccd6 <_malloc_r+0xea>
 800cc50:	6821      	ldr	r1, [r4, #0]
 800cc52:	1a6d      	subs	r5, r5, r1
 800cc54:	4629      	mov	r1, r5
 800cc56:	4630      	mov	r0, r6
 800cc58:	f7ff ffa6 	bl	800cba8 <sbrk_aligned>
 800cc5c:	3001      	adds	r0, #1
 800cc5e:	d03a      	beq.n	800ccd6 <_malloc_r+0xea>
 800cc60:	6823      	ldr	r3, [r4, #0]
 800cc62:	442b      	add	r3, r5
 800cc64:	6023      	str	r3, [r4, #0]
 800cc66:	f8d8 3000 	ldr.w	r3, [r8]
 800cc6a:	685a      	ldr	r2, [r3, #4]
 800cc6c:	bb62      	cbnz	r2, 800ccc8 <_malloc_r+0xdc>
 800cc6e:	f8c8 7000 	str.w	r7, [r8]
 800cc72:	e00f      	b.n	800cc94 <_malloc_r+0xa8>
 800cc74:	6822      	ldr	r2, [r4, #0]
 800cc76:	1b52      	subs	r2, r2, r5
 800cc78:	d420      	bmi.n	800ccbc <_malloc_r+0xd0>
 800cc7a:	2a0b      	cmp	r2, #11
 800cc7c:	d917      	bls.n	800ccae <_malloc_r+0xc2>
 800cc7e:	1961      	adds	r1, r4, r5
 800cc80:	42a3      	cmp	r3, r4
 800cc82:	6025      	str	r5, [r4, #0]
 800cc84:	bf18      	it	ne
 800cc86:	6059      	strne	r1, [r3, #4]
 800cc88:	6863      	ldr	r3, [r4, #4]
 800cc8a:	bf08      	it	eq
 800cc8c:	f8c8 1000 	streq.w	r1, [r8]
 800cc90:	5162      	str	r2, [r4, r5]
 800cc92:	604b      	str	r3, [r1, #4]
 800cc94:	4630      	mov	r0, r6
 800cc96:	f000 f82f 	bl	800ccf8 <__malloc_unlock>
 800cc9a:	f104 000b 	add.w	r0, r4, #11
 800cc9e:	1d23      	adds	r3, r4, #4
 800cca0:	f020 0007 	bic.w	r0, r0, #7
 800cca4:	1ac2      	subs	r2, r0, r3
 800cca6:	bf1c      	itt	ne
 800cca8:	1a1b      	subne	r3, r3, r0
 800ccaa:	50a3      	strne	r3, [r4, r2]
 800ccac:	e7af      	b.n	800cc0e <_malloc_r+0x22>
 800ccae:	6862      	ldr	r2, [r4, #4]
 800ccb0:	42a3      	cmp	r3, r4
 800ccb2:	bf0c      	ite	eq
 800ccb4:	f8c8 2000 	streq.w	r2, [r8]
 800ccb8:	605a      	strne	r2, [r3, #4]
 800ccba:	e7eb      	b.n	800cc94 <_malloc_r+0xa8>
 800ccbc:	4623      	mov	r3, r4
 800ccbe:	6864      	ldr	r4, [r4, #4]
 800ccc0:	e7ae      	b.n	800cc20 <_malloc_r+0x34>
 800ccc2:	463c      	mov	r4, r7
 800ccc4:	687f      	ldr	r7, [r7, #4]
 800ccc6:	e7b6      	b.n	800cc36 <_malloc_r+0x4a>
 800ccc8:	461a      	mov	r2, r3
 800ccca:	685b      	ldr	r3, [r3, #4]
 800cccc:	42a3      	cmp	r3, r4
 800ccce:	d1fb      	bne.n	800ccc8 <_malloc_r+0xdc>
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	6053      	str	r3, [r2, #4]
 800ccd4:	e7de      	b.n	800cc94 <_malloc_r+0xa8>
 800ccd6:	230c      	movs	r3, #12
 800ccd8:	6033      	str	r3, [r6, #0]
 800ccda:	4630      	mov	r0, r6
 800ccdc:	f000 f80c 	bl	800ccf8 <__malloc_unlock>
 800cce0:	e794      	b.n	800cc0c <_malloc_r+0x20>
 800cce2:	6005      	str	r5, [r0, #0]
 800cce4:	e7d6      	b.n	800cc94 <_malloc_r+0xa8>
 800cce6:	bf00      	nop
 800cce8:	200020a0 	.word	0x200020a0

0800ccec <__malloc_lock>:
 800ccec:	4801      	ldr	r0, [pc, #4]	@ (800ccf4 <__malloc_lock+0x8>)
 800ccee:	f7ff bf0f 	b.w	800cb10 <__retarget_lock_acquire_recursive>
 800ccf2:	bf00      	nop
 800ccf4:	20002098 	.word	0x20002098

0800ccf8 <__malloc_unlock>:
 800ccf8:	4801      	ldr	r0, [pc, #4]	@ (800cd00 <__malloc_unlock+0x8>)
 800ccfa:	f7ff bf0a 	b.w	800cb12 <__retarget_lock_release_recursive>
 800ccfe:	bf00      	nop
 800cd00:	20002098 	.word	0x20002098

0800cd04 <__ssputs_r>:
 800cd04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd08:	688e      	ldr	r6, [r1, #8]
 800cd0a:	461f      	mov	r7, r3
 800cd0c:	42be      	cmp	r6, r7
 800cd0e:	680b      	ldr	r3, [r1, #0]
 800cd10:	4682      	mov	sl, r0
 800cd12:	460c      	mov	r4, r1
 800cd14:	4690      	mov	r8, r2
 800cd16:	d82d      	bhi.n	800cd74 <__ssputs_r+0x70>
 800cd18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cd1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cd20:	d026      	beq.n	800cd70 <__ssputs_r+0x6c>
 800cd22:	6965      	ldr	r5, [r4, #20]
 800cd24:	6909      	ldr	r1, [r1, #16]
 800cd26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd2a:	eba3 0901 	sub.w	r9, r3, r1
 800cd2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd32:	1c7b      	adds	r3, r7, #1
 800cd34:	444b      	add	r3, r9
 800cd36:	106d      	asrs	r5, r5, #1
 800cd38:	429d      	cmp	r5, r3
 800cd3a:	bf38      	it	cc
 800cd3c:	461d      	movcc	r5, r3
 800cd3e:	0553      	lsls	r3, r2, #21
 800cd40:	d527      	bpl.n	800cd92 <__ssputs_r+0x8e>
 800cd42:	4629      	mov	r1, r5
 800cd44:	f7ff ff52 	bl	800cbec <_malloc_r>
 800cd48:	4606      	mov	r6, r0
 800cd4a:	b360      	cbz	r0, 800cda6 <__ssputs_r+0xa2>
 800cd4c:	6921      	ldr	r1, [r4, #16]
 800cd4e:	464a      	mov	r2, r9
 800cd50:	f000 fae8 	bl	800d324 <memcpy>
 800cd54:	89a3      	ldrh	r3, [r4, #12]
 800cd56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cd5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd5e:	81a3      	strh	r3, [r4, #12]
 800cd60:	6126      	str	r6, [r4, #16]
 800cd62:	6165      	str	r5, [r4, #20]
 800cd64:	444e      	add	r6, r9
 800cd66:	eba5 0509 	sub.w	r5, r5, r9
 800cd6a:	6026      	str	r6, [r4, #0]
 800cd6c:	60a5      	str	r5, [r4, #8]
 800cd6e:	463e      	mov	r6, r7
 800cd70:	42be      	cmp	r6, r7
 800cd72:	d900      	bls.n	800cd76 <__ssputs_r+0x72>
 800cd74:	463e      	mov	r6, r7
 800cd76:	6820      	ldr	r0, [r4, #0]
 800cd78:	4632      	mov	r2, r6
 800cd7a:	4641      	mov	r1, r8
 800cd7c:	f000 faa8 	bl	800d2d0 <memmove>
 800cd80:	68a3      	ldr	r3, [r4, #8]
 800cd82:	1b9b      	subs	r3, r3, r6
 800cd84:	60a3      	str	r3, [r4, #8]
 800cd86:	6823      	ldr	r3, [r4, #0]
 800cd88:	4433      	add	r3, r6
 800cd8a:	6023      	str	r3, [r4, #0]
 800cd8c:	2000      	movs	r0, #0
 800cd8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd92:	462a      	mov	r2, r5
 800cd94:	f000 fad4 	bl	800d340 <_realloc_r>
 800cd98:	4606      	mov	r6, r0
 800cd9a:	2800      	cmp	r0, #0
 800cd9c:	d1e0      	bne.n	800cd60 <__ssputs_r+0x5c>
 800cd9e:	6921      	ldr	r1, [r4, #16]
 800cda0:	4650      	mov	r0, sl
 800cda2:	f7ff feb7 	bl	800cb14 <_free_r>
 800cda6:	230c      	movs	r3, #12
 800cda8:	f8ca 3000 	str.w	r3, [sl]
 800cdac:	89a3      	ldrh	r3, [r4, #12]
 800cdae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cdb2:	81a3      	strh	r3, [r4, #12]
 800cdb4:	f04f 30ff 	mov.w	r0, #4294967295
 800cdb8:	e7e9      	b.n	800cd8e <__ssputs_r+0x8a>
	...

0800cdbc <_svfiprintf_r>:
 800cdbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdc0:	4698      	mov	r8, r3
 800cdc2:	898b      	ldrh	r3, [r1, #12]
 800cdc4:	061b      	lsls	r3, r3, #24
 800cdc6:	b09d      	sub	sp, #116	@ 0x74
 800cdc8:	4607      	mov	r7, r0
 800cdca:	460d      	mov	r5, r1
 800cdcc:	4614      	mov	r4, r2
 800cdce:	d510      	bpl.n	800cdf2 <_svfiprintf_r+0x36>
 800cdd0:	690b      	ldr	r3, [r1, #16]
 800cdd2:	b973      	cbnz	r3, 800cdf2 <_svfiprintf_r+0x36>
 800cdd4:	2140      	movs	r1, #64	@ 0x40
 800cdd6:	f7ff ff09 	bl	800cbec <_malloc_r>
 800cdda:	6028      	str	r0, [r5, #0]
 800cddc:	6128      	str	r0, [r5, #16]
 800cdde:	b930      	cbnz	r0, 800cdee <_svfiprintf_r+0x32>
 800cde0:	230c      	movs	r3, #12
 800cde2:	603b      	str	r3, [r7, #0]
 800cde4:	f04f 30ff 	mov.w	r0, #4294967295
 800cde8:	b01d      	add	sp, #116	@ 0x74
 800cdea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdee:	2340      	movs	r3, #64	@ 0x40
 800cdf0:	616b      	str	r3, [r5, #20]
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdf6:	2320      	movs	r3, #32
 800cdf8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cdfc:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce00:	2330      	movs	r3, #48	@ 0x30
 800ce02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cfa0 <_svfiprintf_r+0x1e4>
 800ce06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce0a:	f04f 0901 	mov.w	r9, #1
 800ce0e:	4623      	mov	r3, r4
 800ce10:	469a      	mov	sl, r3
 800ce12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce16:	b10a      	cbz	r2, 800ce1c <_svfiprintf_r+0x60>
 800ce18:	2a25      	cmp	r2, #37	@ 0x25
 800ce1a:	d1f9      	bne.n	800ce10 <_svfiprintf_r+0x54>
 800ce1c:	ebba 0b04 	subs.w	fp, sl, r4
 800ce20:	d00b      	beq.n	800ce3a <_svfiprintf_r+0x7e>
 800ce22:	465b      	mov	r3, fp
 800ce24:	4622      	mov	r2, r4
 800ce26:	4629      	mov	r1, r5
 800ce28:	4638      	mov	r0, r7
 800ce2a:	f7ff ff6b 	bl	800cd04 <__ssputs_r>
 800ce2e:	3001      	adds	r0, #1
 800ce30:	f000 80a7 	beq.w	800cf82 <_svfiprintf_r+0x1c6>
 800ce34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce36:	445a      	add	r2, fp
 800ce38:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce3a:	f89a 3000 	ldrb.w	r3, [sl]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	f000 809f 	beq.w	800cf82 <_svfiprintf_r+0x1c6>
 800ce44:	2300      	movs	r3, #0
 800ce46:	f04f 32ff 	mov.w	r2, #4294967295
 800ce4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce4e:	f10a 0a01 	add.w	sl, sl, #1
 800ce52:	9304      	str	r3, [sp, #16]
 800ce54:	9307      	str	r3, [sp, #28]
 800ce56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ce5a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce5c:	4654      	mov	r4, sl
 800ce5e:	2205      	movs	r2, #5
 800ce60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce64:	484e      	ldr	r0, [pc, #312]	@ (800cfa0 <_svfiprintf_r+0x1e4>)
 800ce66:	f7f3 f9bb 	bl	80001e0 <memchr>
 800ce6a:	9a04      	ldr	r2, [sp, #16]
 800ce6c:	b9d8      	cbnz	r0, 800cea6 <_svfiprintf_r+0xea>
 800ce6e:	06d0      	lsls	r0, r2, #27
 800ce70:	bf44      	itt	mi
 800ce72:	2320      	movmi	r3, #32
 800ce74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce78:	0711      	lsls	r1, r2, #28
 800ce7a:	bf44      	itt	mi
 800ce7c:	232b      	movmi	r3, #43	@ 0x2b
 800ce7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce82:	f89a 3000 	ldrb.w	r3, [sl]
 800ce86:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce88:	d015      	beq.n	800ceb6 <_svfiprintf_r+0xfa>
 800ce8a:	9a07      	ldr	r2, [sp, #28]
 800ce8c:	4654      	mov	r4, sl
 800ce8e:	2000      	movs	r0, #0
 800ce90:	f04f 0c0a 	mov.w	ip, #10
 800ce94:	4621      	mov	r1, r4
 800ce96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce9a:	3b30      	subs	r3, #48	@ 0x30
 800ce9c:	2b09      	cmp	r3, #9
 800ce9e:	d94b      	bls.n	800cf38 <_svfiprintf_r+0x17c>
 800cea0:	b1b0      	cbz	r0, 800ced0 <_svfiprintf_r+0x114>
 800cea2:	9207      	str	r2, [sp, #28]
 800cea4:	e014      	b.n	800ced0 <_svfiprintf_r+0x114>
 800cea6:	eba0 0308 	sub.w	r3, r0, r8
 800ceaa:	fa09 f303 	lsl.w	r3, r9, r3
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	9304      	str	r3, [sp, #16]
 800ceb2:	46a2      	mov	sl, r4
 800ceb4:	e7d2      	b.n	800ce5c <_svfiprintf_r+0xa0>
 800ceb6:	9b03      	ldr	r3, [sp, #12]
 800ceb8:	1d19      	adds	r1, r3, #4
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	9103      	str	r1, [sp, #12]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	bfbb      	ittet	lt
 800cec2:	425b      	neglt	r3, r3
 800cec4:	f042 0202 	orrlt.w	r2, r2, #2
 800cec8:	9307      	strge	r3, [sp, #28]
 800ceca:	9307      	strlt	r3, [sp, #28]
 800cecc:	bfb8      	it	lt
 800cece:	9204      	strlt	r2, [sp, #16]
 800ced0:	7823      	ldrb	r3, [r4, #0]
 800ced2:	2b2e      	cmp	r3, #46	@ 0x2e
 800ced4:	d10a      	bne.n	800ceec <_svfiprintf_r+0x130>
 800ced6:	7863      	ldrb	r3, [r4, #1]
 800ced8:	2b2a      	cmp	r3, #42	@ 0x2a
 800ceda:	d132      	bne.n	800cf42 <_svfiprintf_r+0x186>
 800cedc:	9b03      	ldr	r3, [sp, #12]
 800cede:	1d1a      	adds	r2, r3, #4
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	9203      	str	r2, [sp, #12]
 800cee4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cee8:	3402      	adds	r4, #2
 800ceea:	9305      	str	r3, [sp, #20]
 800ceec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cfb0 <_svfiprintf_r+0x1f4>
 800cef0:	7821      	ldrb	r1, [r4, #0]
 800cef2:	2203      	movs	r2, #3
 800cef4:	4650      	mov	r0, sl
 800cef6:	f7f3 f973 	bl	80001e0 <memchr>
 800cefa:	b138      	cbz	r0, 800cf0c <_svfiprintf_r+0x150>
 800cefc:	9b04      	ldr	r3, [sp, #16]
 800cefe:	eba0 000a 	sub.w	r0, r0, sl
 800cf02:	2240      	movs	r2, #64	@ 0x40
 800cf04:	4082      	lsls	r2, r0
 800cf06:	4313      	orrs	r3, r2
 800cf08:	3401      	adds	r4, #1
 800cf0a:	9304      	str	r3, [sp, #16]
 800cf0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf10:	4824      	ldr	r0, [pc, #144]	@ (800cfa4 <_svfiprintf_r+0x1e8>)
 800cf12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf16:	2206      	movs	r2, #6
 800cf18:	f7f3 f962 	bl	80001e0 <memchr>
 800cf1c:	2800      	cmp	r0, #0
 800cf1e:	d036      	beq.n	800cf8e <_svfiprintf_r+0x1d2>
 800cf20:	4b21      	ldr	r3, [pc, #132]	@ (800cfa8 <_svfiprintf_r+0x1ec>)
 800cf22:	bb1b      	cbnz	r3, 800cf6c <_svfiprintf_r+0x1b0>
 800cf24:	9b03      	ldr	r3, [sp, #12]
 800cf26:	3307      	adds	r3, #7
 800cf28:	f023 0307 	bic.w	r3, r3, #7
 800cf2c:	3308      	adds	r3, #8
 800cf2e:	9303      	str	r3, [sp, #12]
 800cf30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf32:	4433      	add	r3, r6
 800cf34:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf36:	e76a      	b.n	800ce0e <_svfiprintf_r+0x52>
 800cf38:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf3c:	460c      	mov	r4, r1
 800cf3e:	2001      	movs	r0, #1
 800cf40:	e7a8      	b.n	800ce94 <_svfiprintf_r+0xd8>
 800cf42:	2300      	movs	r3, #0
 800cf44:	3401      	adds	r4, #1
 800cf46:	9305      	str	r3, [sp, #20]
 800cf48:	4619      	mov	r1, r3
 800cf4a:	f04f 0c0a 	mov.w	ip, #10
 800cf4e:	4620      	mov	r0, r4
 800cf50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf54:	3a30      	subs	r2, #48	@ 0x30
 800cf56:	2a09      	cmp	r2, #9
 800cf58:	d903      	bls.n	800cf62 <_svfiprintf_r+0x1a6>
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d0c6      	beq.n	800ceec <_svfiprintf_r+0x130>
 800cf5e:	9105      	str	r1, [sp, #20]
 800cf60:	e7c4      	b.n	800ceec <_svfiprintf_r+0x130>
 800cf62:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf66:	4604      	mov	r4, r0
 800cf68:	2301      	movs	r3, #1
 800cf6a:	e7f0      	b.n	800cf4e <_svfiprintf_r+0x192>
 800cf6c:	ab03      	add	r3, sp, #12
 800cf6e:	9300      	str	r3, [sp, #0]
 800cf70:	462a      	mov	r2, r5
 800cf72:	4b0e      	ldr	r3, [pc, #56]	@ (800cfac <_svfiprintf_r+0x1f0>)
 800cf74:	a904      	add	r1, sp, #16
 800cf76:	4638      	mov	r0, r7
 800cf78:	f3af 8000 	nop.w
 800cf7c:	1c42      	adds	r2, r0, #1
 800cf7e:	4606      	mov	r6, r0
 800cf80:	d1d6      	bne.n	800cf30 <_svfiprintf_r+0x174>
 800cf82:	89ab      	ldrh	r3, [r5, #12]
 800cf84:	065b      	lsls	r3, r3, #25
 800cf86:	f53f af2d 	bmi.w	800cde4 <_svfiprintf_r+0x28>
 800cf8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf8c:	e72c      	b.n	800cde8 <_svfiprintf_r+0x2c>
 800cf8e:	ab03      	add	r3, sp, #12
 800cf90:	9300      	str	r3, [sp, #0]
 800cf92:	462a      	mov	r2, r5
 800cf94:	4b05      	ldr	r3, [pc, #20]	@ (800cfac <_svfiprintf_r+0x1f0>)
 800cf96:	a904      	add	r1, sp, #16
 800cf98:	4638      	mov	r0, r7
 800cf9a:	f000 f879 	bl	800d090 <_printf_i>
 800cf9e:	e7ed      	b.n	800cf7c <_svfiprintf_r+0x1c0>
 800cfa0:	0800d93c 	.word	0x0800d93c
 800cfa4:	0800d946 	.word	0x0800d946
 800cfa8:	00000000 	.word	0x00000000
 800cfac:	0800cd05 	.word	0x0800cd05
 800cfb0:	0800d942 	.word	0x0800d942

0800cfb4 <_printf_common>:
 800cfb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfb8:	4616      	mov	r6, r2
 800cfba:	4698      	mov	r8, r3
 800cfbc:	688a      	ldr	r2, [r1, #8]
 800cfbe:	690b      	ldr	r3, [r1, #16]
 800cfc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	bfb8      	it	lt
 800cfc8:	4613      	movlt	r3, r2
 800cfca:	6033      	str	r3, [r6, #0]
 800cfcc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cfd0:	4607      	mov	r7, r0
 800cfd2:	460c      	mov	r4, r1
 800cfd4:	b10a      	cbz	r2, 800cfda <_printf_common+0x26>
 800cfd6:	3301      	adds	r3, #1
 800cfd8:	6033      	str	r3, [r6, #0]
 800cfda:	6823      	ldr	r3, [r4, #0]
 800cfdc:	0699      	lsls	r1, r3, #26
 800cfde:	bf42      	ittt	mi
 800cfe0:	6833      	ldrmi	r3, [r6, #0]
 800cfe2:	3302      	addmi	r3, #2
 800cfe4:	6033      	strmi	r3, [r6, #0]
 800cfe6:	6825      	ldr	r5, [r4, #0]
 800cfe8:	f015 0506 	ands.w	r5, r5, #6
 800cfec:	d106      	bne.n	800cffc <_printf_common+0x48>
 800cfee:	f104 0a19 	add.w	sl, r4, #25
 800cff2:	68e3      	ldr	r3, [r4, #12]
 800cff4:	6832      	ldr	r2, [r6, #0]
 800cff6:	1a9b      	subs	r3, r3, r2
 800cff8:	42ab      	cmp	r3, r5
 800cffa:	dc26      	bgt.n	800d04a <_printf_common+0x96>
 800cffc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d000:	6822      	ldr	r2, [r4, #0]
 800d002:	3b00      	subs	r3, #0
 800d004:	bf18      	it	ne
 800d006:	2301      	movne	r3, #1
 800d008:	0692      	lsls	r2, r2, #26
 800d00a:	d42b      	bmi.n	800d064 <_printf_common+0xb0>
 800d00c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d010:	4641      	mov	r1, r8
 800d012:	4638      	mov	r0, r7
 800d014:	47c8      	blx	r9
 800d016:	3001      	adds	r0, #1
 800d018:	d01e      	beq.n	800d058 <_printf_common+0xa4>
 800d01a:	6823      	ldr	r3, [r4, #0]
 800d01c:	6922      	ldr	r2, [r4, #16]
 800d01e:	f003 0306 	and.w	r3, r3, #6
 800d022:	2b04      	cmp	r3, #4
 800d024:	bf02      	ittt	eq
 800d026:	68e5      	ldreq	r5, [r4, #12]
 800d028:	6833      	ldreq	r3, [r6, #0]
 800d02a:	1aed      	subeq	r5, r5, r3
 800d02c:	68a3      	ldr	r3, [r4, #8]
 800d02e:	bf0c      	ite	eq
 800d030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d034:	2500      	movne	r5, #0
 800d036:	4293      	cmp	r3, r2
 800d038:	bfc4      	itt	gt
 800d03a:	1a9b      	subgt	r3, r3, r2
 800d03c:	18ed      	addgt	r5, r5, r3
 800d03e:	2600      	movs	r6, #0
 800d040:	341a      	adds	r4, #26
 800d042:	42b5      	cmp	r5, r6
 800d044:	d11a      	bne.n	800d07c <_printf_common+0xc8>
 800d046:	2000      	movs	r0, #0
 800d048:	e008      	b.n	800d05c <_printf_common+0xa8>
 800d04a:	2301      	movs	r3, #1
 800d04c:	4652      	mov	r2, sl
 800d04e:	4641      	mov	r1, r8
 800d050:	4638      	mov	r0, r7
 800d052:	47c8      	blx	r9
 800d054:	3001      	adds	r0, #1
 800d056:	d103      	bne.n	800d060 <_printf_common+0xac>
 800d058:	f04f 30ff 	mov.w	r0, #4294967295
 800d05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d060:	3501      	adds	r5, #1
 800d062:	e7c6      	b.n	800cff2 <_printf_common+0x3e>
 800d064:	18e1      	adds	r1, r4, r3
 800d066:	1c5a      	adds	r2, r3, #1
 800d068:	2030      	movs	r0, #48	@ 0x30
 800d06a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d06e:	4422      	add	r2, r4
 800d070:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d074:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d078:	3302      	adds	r3, #2
 800d07a:	e7c7      	b.n	800d00c <_printf_common+0x58>
 800d07c:	2301      	movs	r3, #1
 800d07e:	4622      	mov	r2, r4
 800d080:	4641      	mov	r1, r8
 800d082:	4638      	mov	r0, r7
 800d084:	47c8      	blx	r9
 800d086:	3001      	adds	r0, #1
 800d088:	d0e6      	beq.n	800d058 <_printf_common+0xa4>
 800d08a:	3601      	adds	r6, #1
 800d08c:	e7d9      	b.n	800d042 <_printf_common+0x8e>
	...

0800d090 <_printf_i>:
 800d090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d094:	7e0f      	ldrb	r7, [r1, #24]
 800d096:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d098:	2f78      	cmp	r7, #120	@ 0x78
 800d09a:	4691      	mov	r9, r2
 800d09c:	4680      	mov	r8, r0
 800d09e:	460c      	mov	r4, r1
 800d0a0:	469a      	mov	sl, r3
 800d0a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d0a6:	d807      	bhi.n	800d0b8 <_printf_i+0x28>
 800d0a8:	2f62      	cmp	r7, #98	@ 0x62
 800d0aa:	d80a      	bhi.n	800d0c2 <_printf_i+0x32>
 800d0ac:	2f00      	cmp	r7, #0
 800d0ae:	f000 80d2 	beq.w	800d256 <_printf_i+0x1c6>
 800d0b2:	2f58      	cmp	r7, #88	@ 0x58
 800d0b4:	f000 80b9 	beq.w	800d22a <_printf_i+0x19a>
 800d0b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d0bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d0c0:	e03a      	b.n	800d138 <_printf_i+0xa8>
 800d0c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d0c6:	2b15      	cmp	r3, #21
 800d0c8:	d8f6      	bhi.n	800d0b8 <_printf_i+0x28>
 800d0ca:	a101      	add	r1, pc, #4	@ (adr r1, 800d0d0 <_printf_i+0x40>)
 800d0cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d0d0:	0800d129 	.word	0x0800d129
 800d0d4:	0800d13d 	.word	0x0800d13d
 800d0d8:	0800d0b9 	.word	0x0800d0b9
 800d0dc:	0800d0b9 	.word	0x0800d0b9
 800d0e0:	0800d0b9 	.word	0x0800d0b9
 800d0e4:	0800d0b9 	.word	0x0800d0b9
 800d0e8:	0800d13d 	.word	0x0800d13d
 800d0ec:	0800d0b9 	.word	0x0800d0b9
 800d0f0:	0800d0b9 	.word	0x0800d0b9
 800d0f4:	0800d0b9 	.word	0x0800d0b9
 800d0f8:	0800d0b9 	.word	0x0800d0b9
 800d0fc:	0800d23d 	.word	0x0800d23d
 800d100:	0800d167 	.word	0x0800d167
 800d104:	0800d1f7 	.word	0x0800d1f7
 800d108:	0800d0b9 	.word	0x0800d0b9
 800d10c:	0800d0b9 	.word	0x0800d0b9
 800d110:	0800d25f 	.word	0x0800d25f
 800d114:	0800d0b9 	.word	0x0800d0b9
 800d118:	0800d167 	.word	0x0800d167
 800d11c:	0800d0b9 	.word	0x0800d0b9
 800d120:	0800d0b9 	.word	0x0800d0b9
 800d124:	0800d1ff 	.word	0x0800d1ff
 800d128:	6833      	ldr	r3, [r6, #0]
 800d12a:	1d1a      	adds	r2, r3, #4
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	6032      	str	r2, [r6, #0]
 800d130:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d134:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d138:	2301      	movs	r3, #1
 800d13a:	e09d      	b.n	800d278 <_printf_i+0x1e8>
 800d13c:	6833      	ldr	r3, [r6, #0]
 800d13e:	6820      	ldr	r0, [r4, #0]
 800d140:	1d19      	adds	r1, r3, #4
 800d142:	6031      	str	r1, [r6, #0]
 800d144:	0606      	lsls	r6, r0, #24
 800d146:	d501      	bpl.n	800d14c <_printf_i+0xbc>
 800d148:	681d      	ldr	r5, [r3, #0]
 800d14a:	e003      	b.n	800d154 <_printf_i+0xc4>
 800d14c:	0645      	lsls	r5, r0, #25
 800d14e:	d5fb      	bpl.n	800d148 <_printf_i+0xb8>
 800d150:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d154:	2d00      	cmp	r5, #0
 800d156:	da03      	bge.n	800d160 <_printf_i+0xd0>
 800d158:	232d      	movs	r3, #45	@ 0x2d
 800d15a:	426d      	negs	r5, r5
 800d15c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d160:	4859      	ldr	r0, [pc, #356]	@ (800d2c8 <_printf_i+0x238>)
 800d162:	230a      	movs	r3, #10
 800d164:	e011      	b.n	800d18a <_printf_i+0xfa>
 800d166:	6821      	ldr	r1, [r4, #0]
 800d168:	6833      	ldr	r3, [r6, #0]
 800d16a:	0608      	lsls	r0, r1, #24
 800d16c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d170:	d402      	bmi.n	800d178 <_printf_i+0xe8>
 800d172:	0649      	lsls	r1, r1, #25
 800d174:	bf48      	it	mi
 800d176:	b2ad      	uxthmi	r5, r5
 800d178:	2f6f      	cmp	r7, #111	@ 0x6f
 800d17a:	4853      	ldr	r0, [pc, #332]	@ (800d2c8 <_printf_i+0x238>)
 800d17c:	6033      	str	r3, [r6, #0]
 800d17e:	bf14      	ite	ne
 800d180:	230a      	movne	r3, #10
 800d182:	2308      	moveq	r3, #8
 800d184:	2100      	movs	r1, #0
 800d186:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d18a:	6866      	ldr	r6, [r4, #4]
 800d18c:	60a6      	str	r6, [r4, #8]
 800d18e:	2e00      	cmp	r6, #0
 800d190:	bfa2      	ittt	ge
 800d192:	6821      	ldrge	r1, [r4, #0]
 800d194:	f021 0104 	bicge.w	r1, r1, #4
 800d198:	6021      	strge	r1, [r4, #0]
 800d19a:	b90d      	cbnz	r5, 800d1a0 <_printf_i+0x110>
 800d19c:	2e00      	cmp	r6, #0
 800d19e:	d04b      	beq.n	800d238 <_printf_i+0x1a8>
 800d1a0:	4616      	mov	r6, r2
 800d1a2:	fbb5 f1f3 	udiv	r1, r5, r3
 800d1a6:	fb03 5711 	mls	r7, r3, r1, r5
 800d1aa:	5dc7      	ldrb	r7, [r0, r7]
 800d1ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d1b0:	462f      	mov	r7, r5
 800d1b2:	42bb      	cmp	r3, r7
 800d1b4:	460d      	mov	r5, r1
 800d1b6:	d9f4      	bls.n	800d1a2 <_printf_i+0x112>
 800d1b8:	2b08      	cmp	r3, #8
 800d1ba:	d10b      	bne.n	800d1d4 <_printf_i+0x144>
 800d1bc:	6823      	ldr	r3, [r4, #0]
 800d1be:	07df      	lsls	r7, r3, #31
 800d1c0:	d508      	bpl.n	800d1d4 <_printf_i+0x144>
 800d1c2:	6923      	ldr	r3, [r4, #16]
 800d1c4:	6861      	ldr	r1, [r4, #4]
 800d1c6:	4299      	cmp	r1, r3
 800d1c8:	bfde      	ittt	le
 800d1ca:	2330      	movle	r3, #48	@ 0x30
 800d1cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d1d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d1d4:	1b92      	subs	r2, r2, r6
 800d1d6:	6122      	str	r2, [r4, #16]
 800d1d8:	f8cd a000 	str.w	sl, [sp]
 800d1dc:	464b      	mov	r3, r9
 800d1de:	aa03      	add	r2, sp, #12
 800d1e0:	4621      	mov	r1, r4
 800d1e2:	4640      	mov	r0, r8
 800d1e4:	f7ff fee6 	bl	800cfb4 <_printf_common>
 800d1e8:	3001      	adds	r0, #1
 800d1ea:	d14a      	bne.n	800d282 <_printf_i+0x1f2>
 800d1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d1f0:	b004      	add	sp, #16
 800d1f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1f6:	6823      	ldr	r3, [r4, #0]
 800d1f8:	f043 0320 	orr.w	r3, r3, #32
 800d1fc:	6023      	str	r3, [r4, #0]
 800d1fe:	4833      	ldr	r0, [pc, #204]	@ (800d2cc <_printf_i+0x23c>)
 800d200:	2778      	movs	r7, #120	@ 0x78
 800d202:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d206:	6823      	ldr	r3, [r4, #0]
 800d208:	6831      	ldr	r1, [r6, #0]
 800d20a:	061f      	lsls	r7, r3, #24
 800d20c:	f851 5b04 	ldr.w	r5, [r1], #4
 800d210:	d402      	bmi.n	800d218 <_printf_i+0x188>
 800d212:	065f      	lsls	r7, r3, #25
 800d214:	bf48      	it	mi
 800d216:	b2ad      	uxthmi	r5, r5
 800d218:	6031      	str	r1, [r6, #0]
 800d21a:	07d9      	lsls	r1, r3, #31
 800d21c:	bf44      	itt	mi
 800d21e:	f043 0320 	orrmi.w	r3, r3, #32
 800d222:	6023      	strmi	r3, [r4, #0]
 800d224:	b11d      	cbz	r5, 800d22e <_printf_i+0x19e>
 800d226:	2310      	movs	r3, #16
 800d228:	e7ac      	b.n	800d184 <_printf_i+0xf4>
 800d22a:	4827      	ldr	r0, [pc, #156]	@ (800d2c8 <_printf_i+0x238>)
 800d22c:	e7e9      	b.n	800d202 <_printf_i+0x172>
 800d22e:	6823      	ldr	r3, [r4, #0]
 800d230:	f023 0320 	bic.w	r3, r3, #32
 800d234:	6023      	str	r3, [r4, #0]
 800d236:	e7f6      	b.n	800d226 <_printf_i+0x196>
 800d238:	4616      	mov	r6, r2
 800d23a:	e7bd      	b.n	800d1b8 <_printf_i+0x128>
 800d23c:	6833      	ldr	r3, [r6, #0]
 800d23e:	6825      	ldr	r5, [r4, #0]
 800d240:	6961      	ldr	r1, [r4, #20]
 800d242:	1d18      	adds	r0, r3, #4
 800d244:	6030      	str	r0, [r6, #0]
 800d246:	062e      	lsls	r6, r5, #24
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	d501      	bpl.n	800d250 <_printf_i+0x1c0>
 800d24c:	6019      	str	r1, [r3, #0]
 800d24e:	e002      	b.n	800d256 <_printf_i+0x1c6>
 800d250:	0668      	lsls	r0, r5, #25
 800d252:	d5fb      	bpl.n	800d24c <_printf_i+0x1bc>
 800d254:	8019      	strh	r1, [r3, #0]
 800d256:	2300      	movs	r3, #0
 800d258:	6123      	str	r3, [r4, #16]
 800d25a:	4616      	mov	r6, r2
 800d25c:	e7bc      	b.n	800d1d8 <_printf_i+0x148>
 800d25e:	6833      	ldr	r3, [r6, #0]
 800d260:	1d1a      	adds	r2, r3, #4
 800d262:	6032      	str	r2, [r6, #0]
 800d264:	681e      	ldr	r6, [r3, #0]
 800d266:	6862      	ldr	r2, [r4, #4]
 800d268:	2100      	movs	r1, #0
 800d26a:	4630      	mov	r0, r6
 800d26c:	f7f2 ffb8 	bl	80001e0 <memchr>
 800d270:	b108      	cbz	r0, 800d276 <_printf_i+0x1e6>
 800d272:	1b80      	subs	r0, r0, r6
 800d274:	6060      	str	r0, [r4, #4]
 800d276:	6863      	ldr	r3, [r4, #4]
 800d278:	6123      	str	r3, [r4, #16]
 800d27a:	2300      	movs	r3, #0
 800d27c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d280:	e7aa      	b.n	800d1d8 <_printf_i+0x148>
 800d282:	6923      	ldr	r3, [r4, #16]
 800d284:	4632      	mov	r2, r6
 800d286:	4649      	mov	r1, r9
 800d288:	4640      	mov	r0, r8
 800d28a:	47d0      	blx	sl
 800d28c:	3001      	adds	r0, #1
 800d28e:	d0ad      	beq.n	800d1ec <_printf_i+0x15c>
 800d290:	6823      	ldr	r3, [r4, #0]
 800d292:	079b      	lsls	r3, r3, #30
 800d294:	d413      	bmi.n	800d2be <_printf_i+0x22e>
 800d296:	68e0      	ldr	r0, [r4, #12]
 800d298:	9b03      	ldr	r3, [sp, #12]
 800d29a:	4298      	cmp	r0, r3
 800d29c:	bfb8      	it	lt
 800d29e:	4618      	movlt	r0, r3
 800d2a0:	e7a6      	b.n	800d1f0 <_printf_i+0x160>
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	4632      	mov	r2, r6
 800d2a6:	4649      	mov	r1, r9
 800d2a8:	4640      	mov	r0, r8
 800d2aa:	47d0      	blx	sl
 800d2ac:	3001      	adds	r0, #1
 800d2ae:	d09d      	beq.n	800d1ec <_printf_i+0x15c>
 800d2b0:	3501      	adds	r5, #1
 800d2b2:	68e3      	ldr	r3, [r4, #12]
 800d2b4:	9903      	ldr	r1, [sp, #12]
 800d2b6:	1a5b      	subs	r3, r3, r1
 800d2b8:	42ab      	cmp	r3, r5
 800d2ba:	dcf2      	bgt.n	800d2a2 <_printf_i+0x212>
 800d2bc:	e7eb      	b.n	800d296 <_printf_i+0x206>
 800d2be:	2500      	movs	r5, #0
 800d2c0:	f104 0619 	add.w	r6, r4, #25
 800d2c4:	e7f5      	b.n	800d2b2 <_printf_i+0x222>
 800d2c6:	bf00      	nop
 800d2c8:	0800d94d 	.word	0x0800d94d
 800d2cc:	0800d95e 	.word	0x0800d95e

0800d2d0 <memmove>:
 800d2d0:	4288      	cmp	r0, r1
 800d2d2:	b510      	push	{r4, lr}
 800d2d4:	eb01 0402 	add.w	r4, r1, r2
 800d2d8:	d902      	bls.n	800d2e0 <memmove+0x10>
 800d2da:	4284      	cmp	r4, r0
 800d2dc:	4623      	mov	r3, r4
 800d2de:	d807      	bhi.n	800d2f0 <memmove+0x20>
 800d2e0:	1e43      	subs	r3, r0, #1
 800d2e2:	42a1      	cmp	r1, r4
 800d2e4:	d008      	beq.n	800d2f8 <memmove+0x28>
 800d2e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d2ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d2ee:	e7f8      	b.n	800d2e2 <memmove+0x12>
 800d2f0:	4402      	add	r2, r0
 800d2f2:	4601      	mov	r1, r0
 800d2f4:	428a      	cmp	r2, r1
 800d2f6:	d100      	bne.n	800d2fa <memmove+0x2a>
 800d2f8:	bd10      	pop	{r4, pc}
 800d2fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d2fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d302:	e7f7      	b.n	800d2f4 <memmove+0x24>

0800d304 <_sbrk_r>:
 800d304:	b538      	push	{r3, r4, r5, lr}
 800d306:	4d06      	ldr	r5, [pc, #24]	@ (800d320 <_sbrk_r+0x1c>)
 800d308:	2300      	movs	r3, #0
 800d30a:	4604      	mov	r4, r0
 800d30c:	4608      	mov	r0, r1
 800d30e:	602b      	str	r3, [r5, #0]
 800d310:	f7f3 ff2a 	bl	8001168 <_sbrk>
 800d314:	1c43      	adds	r3, r0, #1
 800d316:	d102      	bne.n	800d31e <_sbrk_r+0x1a>
 800d318:	682b      	ldr	r3, [r5, #0]
 800d31a:	b103      	cbz	r3, 800d31e <_sbrk_r+0x1a>
 800d31c:	6023      	str	r3, [r4, #0]
 800d31e:	bd38      	pop	{r3, r4, r5, pc}
 800d320:	20002094 	.word	0x20002094

0800d324 <memcpy>:
 800d324:	440a      	add	r2, r1
 800d326:	4291      	cmp	r1, r2
 800d328:	f100 33ff 	add.w	r3, r0, #4294967295
 800d32c:	d100      	bne.n	800d330 <memcpy+0xc>
 800d32e:	4770      	bx	lr
 800d330:	b510      	push	{r4, lr}
 800d332:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d336:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d33a:	4291      	cmp	r1, r2
 800d33c:	d1f9      	bne.n	800d332 <memcpy+0xe>
 800d33e:	bd10      	pop	{r4, pc}

0800d340 <_realloc_r>:
 800d340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d344:	4680      	mov	r8, r0
 800d346:	4615      	mov	r5, r2
 800d348:	460c      	mov	r4, r1
 800d34a:	b921      	cbnz	r1, 800d356 <_realloc_r+0x16>
 800d34c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d350:	4611      	mov	r1, r2
 800d352:	f7ff bc4b 	b.w	800cbec <_malloc_r>
 800d356:	b92a      	cbnz	r2, 800d364 <_realloc_r+0x24>
 800d358:	f7ff fbdc 	bl	800cb14 <_free_r>
 800d35c:	2400      	movs	r4, #0
 800d35e:	4620      	mov	r0, r4
 800d360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d364:	f000 f81a 	bl	800d39c <_malloc_usable_size_r>
 800d368:	4285      	cmp	r5, r0
 800d36a:	4606      	mov	r6, r0
 800d36c:	d802      	bhi.n	800d374 <_realloc_r+0x34>
 800d36e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d372:	d8f4      	bhi.n	800d35e <_realloc_r+0x1e>
 800d374:	4629      	mov	r1, r5
 800d376:	4640      	mov	r0, r8
 800d378:	f7ff fc38 	bl	800cbec <_malloc_r>
 800d37c:	4607      	mov	r7, r0
 800d37e:	2800      	cmp	r0, #0
 800d380:	d0ec      	beq.n	800d35c <_realloc_r+0x1c>
 800d382:	42b5      	cmp	r5, r6
 800d384:	462a      	mov	r2, r5
 800d386:	4621      	mov	r1, r4
 800d388:	bf28      	it	cs
 800d38a:	4632      	movcs	r2, r6
 800d38c:	f7ff ffca 	bl	800d324 <memcpy>
 800d390:	4621      	mov	r1, r4
 800d392:	4640      	mov	r0, r8
 800d394:	f7ff fbbe 	bl	800cb14 <_free_r>
 800d398:	463c      	mov	r4, r7
 800d39a:	e7e0      	b.n	800d35e <_realloc_r+0x1e>

0800d39c <_malloc_usable_size_r>:
 800d39c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3a0:	1f18      	subs	r0, r3, #4
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	bfbc      	itt	lt
 800d3a6:	580b      	ldrlt	r3, [r1, r0]
 800d3a8:	18c0      	addlt	r0, r0, r3
 800d3aa:	4770      	bx	lr

0800d3ac <_init>:
 800d3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ae:	bf00      	nop
 800d3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3b2:	bc08      	pop	{r3}
 800d3b4:	469e      	mov	lr, r3
 800d3b6:	4770      	bx	lr

0800d3b8 <_fini>:
 800d3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ba:	bf00      	nop
 800d3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3be:	bc08      	pop	{r3}
 800d3c0:	469e      	mov	lr, r3
 800d3c2:	4770      	bx	lr
