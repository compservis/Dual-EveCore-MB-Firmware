
Dual_EveCore_Motherboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c15c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  0800c2ec  0800c2ec  0000d2ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7e8  0800c7e8  0000e198  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7e8  0800c7e8  0000d7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7f0  0800c7f0  0000e198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7f0  0800c7f0  0000d7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c7f4  0800c7f4  0000d7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000198  20000000  0800c7f8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e198  2**0
                  CONTENTS
 10 .bss          00001e8c  20000198  20000198  0000e198  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002024  20002024  0000e198  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e198  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a3e0  00000000  00000000  0000e1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004183  00000000  00000000  000285a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017a0  00000000  00000000  0002c730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001242  00000000  00000000  0002ded0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f47  00000000  00000000  0002f112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002134b  00000000  00000000  00052059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c768e  00000000  00000000  000733a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013aa32  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000067cc  00000000  00000000  0013aa78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000088  00000000  00000000  00141244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000198 	.word	0x20000198
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c2d4 	.word	0x0800c2d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000019c 	.word	0x2000019c
 80001cc:	0800c2d4 	.word	0x0800c2d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f001 fa2c 	bl	80019d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f81a 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f958 	bl	8000830 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000580:	f000 f880 	bl	8000684 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000584:	f000 fcf0 	bl	8000f68 <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 8000588:	f000 f926 	bl	80007d8 <MX_UART4_Init>
  MX_TIM2_Init();
 800058c:	f000 f8b2 	bl	80006f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  TxData[0] = 50;
 8000590:	4b05      	ldr	r3, [pc, #20]	@ (80005a8 <main+0x38>)
 8000592:	2232      	movs	r2, #50	@ 0x32
 8000594:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0xAA;
 8000596:	4b04      	ldr	r3, [pc, #16]	@ (80005a8 <main+0x38>)
 8000598:	22aa      	movs	r2, #170	@ 0xaa
 800059a:	705a      	strb	r2, [r3, #1]

  HAL_TIM_OC_Start_IT(&htim2,TIM_CHANNEL_1);
 800059c:	2100      	movs	r1, #0
 800059e:	4803      	ldr	r0, [pc, #12]	@ (80005ac <main+0x3c>)
 80005a0:	f005 f994 	bl	80058cc <HAL_TIM_OC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a4:	bf00      	nop
 80005a6:	e7fd      	b.n	80005a4 <main+0x34>
 80005a8:	2000029c 	.word	0x2000029c
 80005ac:	2000020c 	.word	0x2000020c

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b094      	sub	sp, #80	@ 0x50
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	2230      	movs	r2, #48	@ 0x30
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f00b fa08 	bl	800b9d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	4b28      	ldr	r3, [pc, #160]	@ (800067c <SystemClock_Config+0xcc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005dc:	4a27      	ldr	r2, [pc, #156]	@ (800067c <SystemClock_Config+0xcc>)
 80005de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005e4:	4b25      	ldr	r3, [pc, #148]	@ (800067c <SystemClock_Config+0xcc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	4b22      	ldr	r3, [pc, #136]	@ (8000680 <SystemClock_Config+0xd0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a21      	ldr	r2, [pc, #132]	@ (8000680 <SystemClock_Config+0xd0>)
 80005fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	4b1f      	ldr	r3, [pc, #124]	@ (8000680 <SystemClock_Config+0xd0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800060c:	2301      	movs	r3, #1
 800060e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000610:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000614:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000616:	2302      	movs	r3, #2
 8000618:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800061e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000620:	2304      	movs	r3, #4
 8000622:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000624:	23a8      	movs	r3, #168	@ 0xa8
 8000626:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000628:	2302      	movs	r3, #2
 800062a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800062c:	2307      	movs	r3, #7
 800062e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 0320 	add.w	r3, r7, #32
 8000634:	4618      	mov	r0, r3
 8000636:	f003 fbc7 	bl	8003dc8 <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000640:	f000 fa82 	bl	8000b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000648:	2302      	movs	r3, #2
 800064a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000650:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000654:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000656:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800065a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2105      	movs	r1, #5
 8000662:	4618      	mov	r0, r3
 8000664:	f003 fedc 	bl	8004420 <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800066e:	f000 fa6b 	bl	8000b48 <Error_Handler>
  }
}
 8000672:	bf00      	nop
 8000674:	3750      	adds	r7, #80	@ 0x50
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800
 8000680:	40007000 	.word	0x40007000

08000684 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000688:	4b18      	ldr	r3, [pc, #96]	@ (80006ec <MX_SPI1_Init+0x68>)
 800068a:	4a19      	ldr	r2, [pc, #100]	@ (80006f0 <MX_SPI1_Init+0x6c>)
 800068c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800068e:	4b17      	ldr	r3, [pc, #92]	@ (80006ec <MX_SPI1_Init+0x68>)
 8000690:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000694:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000696:	4b15      	ldr	r3, [pc, #84]	@ (80006ec <MX_SPI1_Init+0x68>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800069c:	4b13      	ldr	r3, [pc, #76]	@ (80006ec <MX_SPI1_Init+0x68>)
 800069e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80006a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80006a4:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <MX_SPI1_Init+0x68>)
 80006a6:	2202      	movs	r2, #2
 80006a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006aa:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <MX_SPI1_Init+0x68>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006b0:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <MX_SPI1_Init+0x68>)
 80006b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <MX_SPI1_Init+0x68>)
 80006ba:	2220      	movs	r2, #32
 80006bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006be:	4b0b      	ldr	r3, [pc, #44]	@ (80006ec <MX_SPI1_Init+0x68>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006c4:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <MX_SPI1_Init+0x68>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	@ (80006ec <MX_SPI1_Init+0x68>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006d0:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <MX_SPI1_Init+0x68>)
 80006d2:	220a      	movs	r2, #10
 80006d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	@ (80006ec <MX_SPI1_Init+0x68>)
 80006d8:	f004 f96a 	bl	80049b0 <HAL_SPI_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80006e2:	f000 fa31 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200001b4 	.word	0x200001b4
 80006f0:	40013000 	.word	0x40013000

080006f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08e      	sub	sp, #56	@ 0x38
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
 8000720:	615a      	str	r2, [r3, #20]
 8000722:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000724:	4b2b      	ldr	r3, [pc, #172]	@ (80007d4 <MX_TIM2_Init+0xe0>)
 8000726:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800072a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 800072c:	4b29      	ldr	r3, [pc, #164]	@ (80007d4 <MX_TIM2_Init+0xe0>)
 800072e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000732:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000734:	4b27      	ldr	r3, [pc, #156]	@ (80007d4 <MX_TIM2_Init+0xe0>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800073a:	4b26      	ldr	r3, [pc, #152]	@ (80007d4 <MX_TIM2_Init+0xe0>)
 800073c:	220a      	movs	r2, #10
 800073e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000740:	4b24      	ldr	r3, [pc, #144]	@ (80007d4 <MX_TIM2_Init+0xe0>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000746:	4b23      	ldr	r3, [pc, #140]	@ (80007d4 <MX_TIM2_Init+0xe0>)
 8000748:	2280      	movs	r2, #128	@ 0x80
 800074a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800074c:	4821      	ldr	r0, [pc, #132]	@ (80007d4 <MX_TIM2_Init+0xe0>)
 800074e:	f004 fe83 	bl	8005458 <HAL_TIM_Base_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000758:	f000 f9f6 	bl	8000b48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800075c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000760:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000762:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000766:	4619      	mov	r1, r3
 8000768:	481a      	ldr	r0, [pc, #104]	@ (80007d4 <MX_TIM2_Init+0xe0>)
 800076a:	f005 fce7 	bl	800613c <HAL_TIM_ConfigClockSource>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000774:	f000 f9e8 	bl	8000b48 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000778:	4816      	ldr	r0, [pc, #88]	@ (80007d4 <MX_TIM2_Init+0xe0>)
 800077a:	f004 ff85 	bl	8005688 <HAL_TIM_OC_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000784:	f000 f9e0 	bl	8000b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000788:	2300      	movs	r3, #0
 800078a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000790:	f107 0320 	add.w	r3, r7, #32
 8000794:	4619      	mov	r1, r3
 8000796:	480f      	ldr	r0, [pc, #60]	@ (80007d4 <MX_TIM2_Init+0xe0>)
 8000798:	f006 fc7c 	bl	8007094 <HAL_TIMEx_MasterConfigSynchronization>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80007a2:	f000 f9d1 	bl	8000b48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2200      	movs	r2, #0
 80007ba:	4619      	mov	r1, r3
 80007bc:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <MX_TIM2_Init+0xe0>)
 80007be:	f005 fb4b 	bl	8005e58 <HAL_TIM_OC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80007c8:	f000 f9be 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	3738      	adds	r7, #56	@ 0x38
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	2000020c 	.word	0x2000020c

080007d8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80007dc:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <MX_UART4_Init+0x50>)
 80007de:	4a13      	ldr	r2, [pc, #76]	@ (800082c <MX_UART4_Init+0x54>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 80007e2:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <MX_UART4_Init+0x50>)
 80007e4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80007e8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 80007ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <MX_UART4_Init+0x50>)
 80007ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80007f0:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80007f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000828 <MX_UART4_Init+0x50>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 80007f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <MX_UART4_Init+0x50>)
 80007fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007fe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <MX_UART4_Init+0x50>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <MX_UART4_Init+0x50>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <MX_UART4_Init+0x50>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	@ (8000828 <MX_UART4_Init+0x50>)
 8000814:	f006 fd30 	bl	8007278 <HAL_UART_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_UART4_Init+0x4a>
  {
    Error_Handler();
 800081e:	f000 f993 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000254 	.word	0x20000254
 800082c:	40004c00 	.word	0x40004c00

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	@ 0x28
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	4b5e      	ldr	r3, [pc, #376]	@ (80009c4 <MX_GPIO_Init+0x194>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a5d      	ldr	r2, [pc, #372]	@ (80009c4 <MX_GPIO_Init+0x194>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b5b      	ldr	r3, [pc, #364]	@ (80009c4 <MX_GPIO_Init+0x194>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	4b57      	ldr	r3, [pc, #348]	@ (80009c4 <MX_GPIO_Init+0x194>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a56      	ldr	r2, [pc, #344]	@ (80009c4 <MX_GPIO_Init+0x194>)
 800086c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b54      	ldr	r3, [pc, #336]	@ (80009c4 <MX_GPIO_Init+0x194>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	4b50      	ldr	r3, [pc, #320]	@ (80009c4 <MX_GPIO_Init+0x194>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a4f      	ldr	r2, [pc, #316]	@ (80009c4 <MX_GPIO_Init+0x194>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b4d      	ldr	r3, [pc, #308]	@ (80009c4 <MX_GPIO_Init+0x194>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b49      	ldr	r3, [pc, #292]	@ (80009c4 <MX_GPIO_Init+0x194>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a48      	ldr	r2, [pc, #288]	@ (80009c4 <MX_GPIO_Init+0x194>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b46      	ldr	r3, [pc, #280]	@ (80009c4 <MX_GPIO_Init+0x194>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ST_CS2_Pin|ST_CS1_Pin, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	2111      	movs	r1, #17
 80008ba:	4843      	ldr	r0, [pc, #268]	@ (80009c8 <MX_GPIO_Init+0x198>)
 80008bc:	f001 ff92 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST_RST_GPIO_Port, ST_RST_Pin, GPIO_PIN_SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	2110      	movs	r1, #16
 80008c4:	4841      	ldr	r0, [pc, #260]	@ (80009cc <MX_GPIO_Init+0x19c>)
 80008c6:	f001 ff8d 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80008d0:	483e      	ldr	r0, [pc, #248]	@ (80009cc <MX_GPIO_Init+0x19c>)
 80008d2:	f001 ff87 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST_CS2_Pin ST_CS1_Pin */
  GPIO_InitStruct.Pin = ST_CS2_Pin|ST_CS1_Pin;
 80008d6:	2311      	movs	r3, #17
 80008d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	4836      	ldr	r0, [pc, #216]	@ (80009c8 <MX_GPIO_Init+0x198>)
 80008ee:	f001 fca5 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pin : ST_RST_Pin */
  GPIO_InitStruct.Pin = ST_RST_Pin;
 80008f2:	2310      	movs	r3, #16
 80008f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80008fe:	2301      	movs	r3, #1
 8000900:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ST_RST_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	4830      	ldr	r0, [pc, #192]	@ (80009cc <MX_GPIO_Init+0x19c>)
 800090a:	f001 fc97 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pin : ST_IRQ1_Pin */
  GPIO_InitStruct.Pin = ST_IRQ1_Pin;
 800090e:	2320      	movs	r3, #32
 8000910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000912:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ST_IRQ1_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4619      	mov	r1, r3
 8000922:	482a      	ldr	r0, [pc, #168]	@ (80009cc <MX_GPIO_Init+0x19c>)
 8000924:	f001 fc8a 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pin : ST_IRQ2_Pin */
  GPIO_InitStruct.Pin = ST_IRQ2_Pin;
 8000928:	2301      	movs	r3, #1
 800092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800092c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ST_IRQ2_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4619      	mov	r1, r3
 800093c:	4824      	ldr	r0, [pc, #144]	@ (80009d0 <MX_GPIO_Init+0x1a0>)
 800093e:	f001 fc7d 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pins : ST_SYNC11_Pin ST_SYNC01_Pin ST_SYNC12_Pin ST_SYNC02_Pin */
  GPIO_InitStruct.Pin = ST_SYNC11_Pin|ST_SYNC01_Pin|ST_SYNC12_Pin|ST_SYNC02_Pin;
 8000942:	f641 4302 	movw	r3, #7170	@ 0x1c02
 8000946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000948:	2300      	movs	r3, #0
 800094a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4619      	mov	r1, r3
 8000956:	481e      	ldr	r0, [pc, #120]	@ (80009d0 <MX_GPIO_Init+0x1a0>)
 8000958:	f001 fc70 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800095c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096a:	2303      	movs	r3, #3
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800096e:	2309      	movs	r3, #9
 8000970:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4619      	mov	r1, r3
 8000978:	4815      	ldr	r0, [pc, #84]	@ (80009d0 <MX_GPIO_Init+0x1a0>)
 800097a:	f001 fc5f 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED1_Pin;
 800097e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	480d      	ldr	r0, [pc, #52]	@ (80009cc <MX_GPIO_Init+0x19c>)
 8000998:	f001 fc50 	bl	800223c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800099c:	2200      	movs	r2, #0
 800099e:	2100      	movs	r1, #0
 80009a0:	2006      	movs	r0, #6
 80009a2:	f001 f99b 	bl	8001cdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009a6:	2006      	movs	r0, #6
 80009a8:	f001 f9c4 	bl	8001d34 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2100      	movs	r1, #0
 80009b0:	2017      	movs	r0, #23
 80009b2:	f001 f993 	bl	8001cdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009b6:	2017      	movs	r0, #23
 80009b8:	f001 f9bc 	bl	8001d34 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009bc:	bf00      	nop
 80009be:	3728      	adds	r7, #40	@ 0x28
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020000 	.word	0x40020000
 80009cc:	40020800 	.word	0x40020800
 80009d0:	40020400 	.word	0x40020400

080009d4 <HAL_SPI_TxRxCpltCallback>:
    // when usb data receive do....
}


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b09e      	sub	sp, #120	@ 0x78
 80009d8:	af02      	add	r7, sp, #8
 80009da:	6078      	str	r0, [r7, #4]
  	newData = 1;
 80009dc:	4b17      	ldr	r3, [pc, #92]	@ (8000a3c <HAL_SPI_TxRxCpltCallback+0x68>)
 80009de:	2201      	movs	r2, #1
 80009e0:	601a      	str	r2, [r3, #0]

    if (hspi == &hspi1) {
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a16      	ldr	r2, [pc, #88]	@ (8000a40 <HAL_SPI_TxRxCpltCallback+0x6c>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d123      	bne.n	8000a32 <HAL_SPI_TxRxCpltCallback+0x5e>

    	char msg[100] = {0};
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	f107 0310 	add.w	r3, r7, #16
 80009f2:	2260      	movs	r2, #96	@ 0x60
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f00a ffec 	bl	800b9d4 <memset>

        sprintf(msg, "New SPI Data Received: %d: %d: %d\n", SPI_RX_Buffer[0] , SPI_RX_Buffer[1] , SPI_RX_Buffer[2] );
 80009fc:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <HAL_SPI_TxRxCpltCallback+0x70>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b10      	ldr	r3, [pc, #64]	@ (8000a44 <HAL_SPI_TxRxCpltCallback+0x70>)
 8000a04:	785b      	ldrb	r3, [r3, #1]
 8000a06:	4619      	mov	r1, r3
 8000a08:	4b0e      	ldr	r3, [pc, #56]	@ (8000a44 <HAL_SPI_TxRxCpltCallback+0x70>)
 8000a0a:	789b      	ldrb	r3, [r3, #2]
 8000a0c:	f107 000c 	add.w	r0, r7, #12
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	460b      	mov	r3, r1
 8000a14:	490c      	ldr	r1, [pc, #48]	@ (8000a48 <HAL_SPI_TxRxCpltCallback+0x74>)
 8000a16:	f00a ffbd 	bl	800b994 <siprintf>
        CDC_Transmit_FS(msg, strlen(msg));
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fbd6 	bl	80001d0 <strlen>
 8000a24:	4602      	mov	r2, r0
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 fb61 	bl	80010f4 <CDC_Transmit_FS>

    }

}
 8000a32:	bf00      	nop
 8000a34:	3770      	adds	r7, #112	@ 0x70
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200002c8 	.word	0x200002c8
 8000a40:	200001b4 	.word	0x200001b4
 8000a44:	200002c4 	.word	0x200002c4
 8000a48:	0800c2ec 	.word	0x0800c2ec

08000a4c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

  if (huart == &huart4) {
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a08      	ldr	r2, [pc, #32]	@ (8000a78 <HAL_UART_RxCpltCallback+0x2c>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d108      	bne.n	8000a6e <HAL_UART_RxCpltCallback+0x22>
    // Enable reception for the next character
    HAL_UART_Receive_IT(&huart4, rx_buff, 1);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4907      	ldr	r1, [pc, #28]	@ (8000a7c <HAL_UART_RxCpltCallback+0x30>)
 8000a60:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <HAL_UART_RxCpltCallback+0x2c>)
 8000a62:	f006 fd13 	bl	800748c <HAL_UART_Receive_IT>
    CDC_Transmit_FS(rx_buff,1);
 8000a66:	2101      	movs	r1, #1
 8000a68:	4804      	ldr	r0, [pc, #16]	@ (8000a7c <HAL_UART_RxCpltCallback+0x30>)
 8000a6a:	f000 fb43 	bl	80010f4 <CDC_Transmit_FS>

  }
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000254 	.word	0x20000254
 8000a7c:	200002a4 	.word	0x200002a4

08000a80 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a90:	d13f      	bne.n	8000b12 <HAL_TIM_OC_DelayElapsedCallback+0x92>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	7f1b      	ldrb	r3, [r3, #28]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d13b      	bne.n	8000b12 <HAL_TIM_OC_DelayElapsedCallback+0x92>
    {
    	timer++;
 8000a9a:	4b20      	ldr	r3, [pc, #128]	@ (8000b1c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	4a1e      	ldr	r2, [pc, #120]	@ (8000b1c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8000aa2:	6013      	str	r3, [r2, #0]
    	if(timer%1000 == 0){
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b1c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b20 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8000aaa:	fb83 1302 	smull	r1, r3, r3, r2
 8000aae:	1199      	asrs	r1, r3, #6
 8000ab0:	17d3      	asrs	r3, r2, #31
 8000ab2:	1acb      	subs	r3, r1, r3
 8000ab4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ab8:	fb01 f303 	mul.w	r3, r1, r3
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d114      	bne.n	8000aec <HAL_TIM_OC_DelayElapsedCallback+0x6c>


    		HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin); //Toggle LED
 8000ac2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ac6:	4817      	ldr	r0, [pc, #92]	@ (8000b24 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8000ac8:	f001 feb8 	bl	800283c <HAL_GPIO_TogglePin>
    		HAL_UART_Transmit_IT(&huart4, tx_buff, 28);
 8000acc:	221c      	movs	r2, #28
 8000ace:	4916      	ldr	r1, [pc, #88]	@ (8000b28 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8000ad0:	4816      	ldr	r0, [pc, #88]	@ (8000b2c <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 8000ad2:	f006 fca5 	bl	8007420 <HAL_UART_Transmit_IT>
    		HAL_SPI_TransmitReceive_IT(&hspi1, SPI_TX_Buffer, SPI_RX_Buffer, 1); //Sending in Interrupt mode
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	4a15      	ldr	r2, [pc, #84]	@ (8000b30 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 8000ada:	4916      	ldr	r1, [pc, #88]	@ (8000b34 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 8000adc:	4816      	ldr	r0, [pc, #88]	@ (8000b38 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 8000ade:	f004 f8f5 	bl	8004ccc <HAL_SPI_TransmitReceive_IT>
    	    HAL_UART_Receive_IT(&huart4, rx_buff, 1);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	4915      	ldr	r1, [pc, #84]	@ (8000b3c <HAL_TIM_OC_DelayElapsedCallback+0xbc>)
 8000ae6:	4811      	ldr	r0, [pc, #68]	@ (8000b2c <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 8000ae8:	f006 fcd0 	bl	800748c <HAL_UART_Receive_IT>
    	}
    	if(timer%2500 == 0){
 8000aec:	4b0b      	ldr	r3, [pc, #44]	@ (8000b1c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b13      	ldr	r3, [pc, #76]	@ (8000b40 <HAL_TIM_OC_DelayElapsedCallback+0xc0>)
 8000af2:	fb83 1302 	smull	r1, r3, r3, r2
 8000af6:	1299      	asrs	r1, r3, #10
 8000af8:	17d3      	asrs	r3, r2, #31
 8000afa:	1acb      	subs	r3, r1, r3
 8000afc:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8000b00:	fb01 f303 	mul.w	r3, r1, r3
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d103      	bne.n	8000b12 <HAL_TIM_OC_DelayElapsedCallback+0x92>

    		CDC_Transmit_FS(firmwareMainMsg,34);
 8000b0a:	2122      	movs	r1, #34	@ 0x22
 8000b0c:	480d      	ldr	r0, [pc, #52]	@ (8000b44 <HAL_TIM_OC_DelayElapsedCallback+0xc4>)
 8000b0e:	f000 faf1 	bl	80010f4 <CDC_Transmit_FS>
    	}


       }
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200002cc 	.word	0x200002cc
 8000b20:	10624dd3 	.word	0x10624dd3
 8000b24:	40020800 	.word	0x40020800
 8000b28:	20000028 	.word	0x20000028
 8000b2c:	20000254 	.word	0x20000254
 8000b30:	200002c4 	.word	0x200002c4
 8000b34:	20000048 	.word	0x20000048
 8000b38:	200001b4 	.word	0x200001b4
 8000b3c:	200002a4 	.word	0x200002a4
 8000b40:	68db8bad 	.word	0x68db8bad
 8000b44:	20000000 	.word	0x20000000

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <Error_Handler+0x8>

08000b54 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
	...

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf4 <HAL_MspInit+0x88>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7a:	4a1e      	ldr	r2, [pc, #120]	@ (8000bf4 <HAL_MspInit+0x88>)
 8000b7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b82:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf4 <HAL_MspInit+0x88>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	4b18      	ldr	r3, [pc, #96]	@ (8000bf4 <HAL_MspInit+0x88>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b96:	4a17      	ldr	r2, [pc, #92]	@ (8000bf4 <HAL_MspInit+0x88>)
 8000b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b9e:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <HAL_MspInit+0x88>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f001 f894 	bl	8001cdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f001 f8bd 	bl	8001d34 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	2004      	movs	r0, #4
 8000bc0:	f001 f88c 	bl	8001cdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8000bc4:	2004      	movs	r0, #4
 8000bc6:	f001 f8b5 	bl	8001d34 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2005      	movs	r0, #5
 8000bd0:	f001 f884 	bl	8001cdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000bd4:	2005      	movs	r0, #5
 8000bd6:	f001 f8ad 	bl	8001d34 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2051      	movs	r0, #81	@ 0x51
 8000be0:	f001 f87c 	bl	8001cdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8000be4:	2051      	movs	r0, #81	@ 0x51
 8000be6:	f001 f8a5 	bl	8001d34 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800

08000bf8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	@ 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a1d      	ldr	r2, [pc, #116]	@ (8000c8c <HAL_SPI_MspInit+0x94>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d133      	bne.n	8000c82 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c90 <HAL_SPI_MspInit+0x98>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c22:	4a1b      	ldr	r2, [pc, #108]	@ (8000c90 <HAL_SPI_MspInit+0x98>)
 8000c24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c2a:	4b19      	ldr	r3, [pc, #100]	@ (8000c90 <HAL_SPI_MspInit+0x98>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <HAL_SPI_MspInit+0x98>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a14      	ldr	r2, [pc, #80]	@ (8000c90 <HAL_SPI_MspInit+0x98>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <HAL_SPI_MspInit+0x98>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ST_SCK_Pin|ST_MISO_Pin|ST_MOSI_Pin;
 8000c52:	23e0      	movs	r3, #224	@ 0xe0
 8000c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c62:	2305      	movs	r3, #5
 8000c64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4809      	ldr	r0, [pc, #36]	@ (8000c94 <HAL_SPI_MspInit+0x9c>)
 8000c6e:	f001 fae5 	bl	800223c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	2023      	movs	r0, #35	@ 0x23
 8000c78:	f001 f830 	bl	8001cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000c7c:	2023      	movs	r0, #35	@ 0x23
 8000c7e:	f001 f859 	bl	8001d34 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c82:	bf00      	nop
 8000c84:	3728      	adds	r7, #40	@ 0x28
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40013000 	.word	0x40013000
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020000 	.word	0x40020000

08000c98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ca8:	d115      	bne.n	8000cd6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <HAL_TIM_Base_MspInit+0x48>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ce0 <HAL_TIM_Base_MspInit+0x48>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cba:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <HAL_TIM_Base_MspInit+0x48>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	201c      	movs	r0, #28
 8000ccc:	f001 f806 	bl	8001cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cd0:	201c      	movs	r0, #28
 8000cd2:	f001 f82f 	bl	8001d34 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800

08000ce4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	@ 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a26      	ldr	r2, [pc, #152]	@ (8000d9c <HAL_UART_MspInit+0xb8>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d145      	bne.n	8000d92 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	4b25      	ldr	r3, [pc, #148]	@ (8000da0 <HAL_UART_MspInit+0xbc>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0e:	4a24      	ldr	r2, [pc, #144]	@ (8000da0 <HAL_UART_MspInit+0xbc>)
 8000d10:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d16:	4b22      	ldr	r3, [pc, #136]	@ (8000da0 <HAL_UART_MspInit+0xbc>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	4b1e      	ldr	r3, [pc, #120]	@ (8000da0 <HAL_UART_MspInit+0xbc>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	4a1d      	ldr	r2, [pc, #116]	@ (8000da0 <HAL_UART_MspInit+0xbc>)
 8000d2c:	f043 0304 	orr.w	r3, r3, #4
 8000d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d32:	4b1b      	ldr	r3, [pc, #108]	@ (8000da0 <HAL_UART_MspInit+0xbc>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	f003 0304 	and.w	r3, r3, #4
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d50:	2308      	movs	r3, #8
 8000d52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4812      	ldr	r0, [pc, #72]	@ (8000da4 <HAL_UART_MspInit+0xc0>)
 8000d5c:	f001 fa6e 	bl	800223c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d60:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d72:	2308      	movs	r3, #8
 8000d74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4809      	ldr	r0, [pc, #36]	@ (8000da4 <HAL_UART_MspInit+0xc0>)
 8000d7e:	f001 fa5d 	bl	800223c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2100      	movs	r1, #0
 8000d86:	2034      	movs	r0, #52	@ 0x34
 8000d88:	f000 ffa8 	bl	8001cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000d8c:	2034      	movs	r0, #52	@ 0x34
 8000d8e:	f000 ffd1 	bl	8001d34 <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	@ 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40004c00 	.word	0x40004c00
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020800 	.word	0x40020800

08000da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <NMI_Handler+0x4>

08000db0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <HardFault_Handler+0x4>

08000db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <MemManage_Handler+0x4>

08000dc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <BusFault_Handler+0x4>

08000dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <UsageFault_Handler+0x4>

08000dd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfe:	f000 fe39 	bl	8001a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8000e0a:	f002 ffc3 	bl	8003d94 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8000e16:	f001 f843 	bl	8001ea0 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ST_IRQ2_Pin);
 8000e30:	2001      	movs	r0, #1
 8000e32:	f001 fd25 	bl	8002880 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ST_IRQ1_Pin);
 8000e3e:	2020      	movs	r0, #32
 8000e40:	f001 fd1e 	bl	8002880 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e4c:	4802      	ldr	r0, [pc, #8]	@ (8000e58 <TIM2_IRQHandler+0x10>)
 8000e4e:	f004 ff13 	bl	8005c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	2000020c 	.word	0x2000020c

08000e5c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000e60:	4802      	ldr	r0, [pc, #8]	@ (8000e6c <SPI1_IRQHandler+0x10>)
 8000e62:	f003 ffcb 	bl	8004dfc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200001b4 	.word	0x200001b4

08000e70 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000e74:	4802      	ldr	r0, [pc, #8]	@ (8000e80 <UART4_IRQHandler+0x10>)
 8000e76:	f006 fb2f 	bl	80074d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000254 	.word	0x20000254

08000e84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e88:	4802      	ldr	r0, [pc, #8]	@ (8000e94 <OTG_FS_IRQHandler+0x10>)
 8000e8a:	f001 fe74 	bl	8002b76 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200017b0 	.word	0x200017b0

08000e98 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb0:	4a14      	ldr	r2, [pc, #80]	@ (8000f04 <_sbrk+0x5c>)
 8000eb2:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <_sbrk+0x60>)
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ebc:	4b13      	ldr	r3, [pc, #76]	@ (8000f0c <_sbrk+0x64>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d102      	bne.n	8000eca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	@ (8000f0c <_sbrk+0x64>)
 8000ec6:	4a12      	ldr	r2, [pc, #72]	@ (8000f10 <_sbrk+0x68>)
 8000ec8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eca:	4b10      	ldr	r3, [pc, #64]	@ (8000f0c <_sbrk+0x64>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d207      	bcs.n	8000ee8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed8:	f00a fd84 	bl	800b9e4 <__errno>
 8000edc:	4603      	mov	r3, r0
 8000ede:	220c      	movs	r2, #12
 8000ee0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee6:	e009      	b.n	8000efc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee8:	4b08      	ldr	r3, [pc, #32]	@ (8000f0c <_sbrk+0x64>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eee:	4b07      	ldr	r3, [pc, #28]	@ (8000f0c <_sbrk+0x64>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	4a05      	ldr	r2, [pc, #20]	@ (8000f0c <_sbrk+0x64>)
 8000ef8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000efa:	68fb      	ldr	r3, [r7, #12]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20020000 	.word	0x20020000
 8000f08:	00000400 	.word	0x00000400
 8000f0c:	200002d0 	.word	0x200002d0
 8000f10:	20002028 	.word	0x20002028

08000f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f18:	f000 fd48 	bl	80019ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f1c:	480c      	ldr	r0, [pc, #48]	@ (8000f50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f1e:	490d      	ldr	r1, [pc, #52]	@ (8000f54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f20:	4a0d      	ldr	r2, [pc, #52]	@ (8000f58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f24:	e002      	b.n	8000f2c <LoopCopyDataInit>

08000f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2a:	3304      	adds	r3, #4

08000f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f30:	d3f9      	bcc.n	8000f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f32:	4a0a      	ldr	r2, [pc, #40]	@ (8000f5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f34:	4c0a      	ldr	r4, [pc, #40]	@ (8000f60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f38:	e001      	b.n	8000f3e <LoopFillZerobss>

08000f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f3c:	3204      	adds	r2, #4

08000f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f40:	d3fb      	bcc.n	8000f3a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000f42:	f00a fd55 	bl	800b9f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f46:	f7ff fb13 	bl	8000570 <main>
  bx  lr    
 8000f4a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f54:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8000f58:	0800c7f8 	.word	0x0800c7f8
  ldr r2, =_sbss
 8000f5c:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8000f60:	20002024 	.word	0x20002024

08000f64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f64:	e7fe      	b.n	8000f64 <ADC_IRQHandler>
	...

08000f68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	4912      	ldr	r1, [pc, #72]	@ (8000fb8 <MX_USB_DEVICE_Init+0x50>)
 8000f70:	4812      	ldr	r0, [pc, #72]	@ (8000fbc <MX_USB_DEVICE_Init+0x54>)
 8000f72:	f009 fa0d 	bl	800a390 <USBD_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8000f7c:	f7ff fde4 	bl	8000b48 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8000f80:	490f      	ldr	r1, [pc, #60]	@ (8000fc0 <MX_USB_DEVICE_Init+0x58>)
 8000f82:	480e      	ldr	r0, [pc, #56]	@ (8000fbc <MX_USB_DEVICE_Init+0x54>)
 8000f84:	f009 fa34 	bl	800a3f0 <USBD_RegisterClass>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8000f8e:	f7ff fddb 	bl	8000b48 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8000f92:	490c      	ldr	r1, [pc, #48]	@ (8000fc4 <MX_USB_DEVICE_Init+0x5c>)
 8000f94:	4809      	ldr	r0, [pc, #36]	@ (8000fbc <MX_USB_DEVICE_Init+0x54>)
 8000f96:	f009 f92b 	bl	800a1f0 <USBD_CDC_RegisterInterface>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8000fa0:	f7ff fdd2 	bl	8000b48 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8000fa4:	4805      	ldr	r0, [pc, #20]	@ (8000fbc <MX_USB_DEVICE_Init+0x54>)
 8000fa6:	f009 fa59 	bl	800a45c <USBD_Start>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8000fb0:	f7ff fdca 	bl	8000b48 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000060 	.word	0x20000060
 8000fbc:	200002d4 	.word	0x200002d4
 8000fc0:	200000c8 	.word	0x200000c8
 8000fc4:	2000004c 	.word	0x2000004c

08000fc8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	4905      	ldr	r1, [pc, #20]	@ (8000fe4 <CDC_Init_FS+0x1c>)
 8000fd0:	4805      	ldr	r0, [pc, #20]	@ (8000fe8 <CDC_Init_FS+0x20>)
 8000fd2:	f009 f927 	bl	800a224 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8000fd6:	4905      	ldr	r1, [pc, #20]	@ (8000fec <CDC_Init_FS+0x24>)
 8000fd8:	4803      	ldr	r0, [pc, #12]	@ (8000fe8 <CDC_Init_FS+0x20>)
 8000fda:	f009 f945 	bl	800a268 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8000fde:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000db0 	.word	0x20000db0
 8000fe8:	200002d4 	.word	0x200002d4
 8000fec:	200005b0 	.word	0x200005b0

08000ff0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8000ff4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
 800100c:	4613      	mov	r3, r2
 800100e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	2b23      	cmp	r3, #35	@ 0x23
 8001014:	d84a      	bhi.n	80010ac <CDC_Control_FS+0xac>
 8001016:	a201      	add	r2, pc, #4	@ (adr r2, 800101c <CDC_Control_FS+0x1c>)
 8001018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101c:	080010ad 	.word	0x080010ad
 8001020:	080010ad 	.word	0x080010ad
 8001024:	080010ad 	.word	0x080010ad
 8001028:	080010ad 	.word	0x080010ad
 800102c:	080010ad 	.word	0x080010ad
 8001030:	080010ad 	.word	0x080010ad
 8001034:	080010ad 	.word	0x080010ad
 8001038:	080010ad 	.word	0x080010ad
 800103c:	080010ad 	.word	0x080010ad
 8001040:	080010ad 	.word	0x080010ad
 8001044:	080010ad 	.word	0x080010ad
 8001048:	080010ad 	.word	0x080010ad
 800104c:	080010ad 	.word	0x080010ad
 8001050:	080010ad 	.word	0x080010ad
 8001054:	080010ad 	.word	0x080010ad
 8001058:	080010ad 	.word	0x080010ad
 800105c:	080010ad 	.word	0x080010ad
 8001060:	080010ad 	.word	0x080010ad
 8001064:	080010ad 	.word	0x080010ad
 8001068:	080010ad 	.word	0x080010ad
 800106c:	080010ad 	.word	0x080010ad
 8001070:	080010ad 	.word	0x080010ad
 8001074:	080010ad 	.word	0x080010ad
 8001078:	080010ad 	.word	0x080010ad
 800107c:	080010ad 	.word	0x080010ad
 8001080:	080010ad 	.word	0x080010ad
 8001084:	080010ad 	.word	0x080010ad
 8001088:	080010ad 	.word	0x080010ad
 800108c:	080010ad 	.word	0x080010ad
 8001090:	080010ad 	.word	0x080010ad
 8001094:	080010ad 	.word	0x080010ad
 8001098:	080010ad 	.word	0x080010ad
 800109c:	080010ad 	.word	0x080010ad
 80010a0:	080010ad 	.word	0x080010ad
 80010a4:	080010ad 	.word	0x080010ad
 80010a8:	080010ad 	.word	0x080010ad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80010ac:	bf00      	nop
  }

  return (USBD_OK);
 80010ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	4808      	ldr	r0, [pc, #32]	@ (80010ec <CDC_Receive_FS+0x30>)
 80010ca:	f009 f8cd 	bl	800a268 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80010ce:	4807      	ldr	r0, [pc, #28]	@ (80010ec <CDC_Receive_FS+0x30>)
 80010d0:	f009 f928 	bl	800a324 <USBD_CDC_ReceivePacket>
  //USB_CDC_RxHandler(UserRxBufferFS, *Len);
  memset(UserRxBufferFS, '\0', *Len);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	2100      	movs	r1, #0
 80010dc:	4804      	ldr	r0, [pc, #16]	@ (80010f0 <CDC_Receive_FS+0x34>)
 80010de:	f00a fc79 	bl	800b9d4 <memset>
  return (USBD_OK);
 80010e2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200002d4 	.word	0x200002d4
 80010f0:	200005b0 	.word	0x200005b0

080010f4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8001100:	2300      	movs	r3, #0
 8001102:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8001104:	4b0d      	ldr	r3, [pc, #52]	@ (800113c <CDC_Transmit_FS+0x48>)
 8001106:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800110a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8001116:	2301      	movs	r3, #1
 8001118:	e00b      	b.n	8001132 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	461a      	mov	r2, r3
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	4806      	ldr	r0, [pc, #24]	@ (800113c <CDC_Transmit_FS+0x48>)
 8001122:	f009 f87f 	bl	800a224 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8001126:	4805      	ldr	r0, [pc, #20]	@ (800113c <CDC_Transmit_FS+0x48>)
 8001128:	f009 f8bc 	bl	800a2a4 <USBD_CDC_TransmitPacket>
 800112c:	4603      	mov	r3, r0
 800112e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8001130:	7bfb      	ldrb	r3, [r7, #15]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200002d4 	.word	0x200002d4

08001140 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8001140:	b480      	push	{r7}
 8001142:	b087      	sub	sp, #28
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	4613      	mov	r3, r2
 800114c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8001152:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001156:	4618      	mov	r0, r3
 8001158:	371c      	adds	r7, #28
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	2212      	movs	r2, #18
 8001174:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8001176:	4b03      	ldr	r3, [pc, #12]	@ (8001184 <USBD_FS_DeviceDescriptor+0x20>)
}
 8001178:	4618      	mov	r0, r3
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	2000007c 	.word	0x2000007c

08001188 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	2204      	movs	r2, #4
 8001198:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800119a:	4b03      	ldr	r3, [pc, #12]	@ (80011a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	20000090 	.word	0x20000090

080011ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d105      	bne.n	80011ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	4907      	ldr	r1, [pc, #28]	@ (80011e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80011c2:	4808      	ldr	r0, [pc, #32]	@ (80011e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80011c4:	f00a fafa 	bl	800b7bc <USBD_GetString>
 80011c8:	e004      	b.n	80011d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	4904      	ldr	r1, [pc, #16]	@ (80011e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80011ce:	4805      	ldr	r0, [pc, #20]	@ (80011e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80011d0:	f00a faf4 	bl	800b7bc <USBD_GetString>
  }
  return USBD_StrDesc;
 80011d4:	4b02      	ldr	r3, [pc, #8]	@ (80011e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200015b0 	.word	0x200015b0
 80011e4:	0800c310 	.word	0x0800c310

080011e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	4904      	ldr	r1, [pc, #16]	@ (8001208 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80011f8:	4804      	ldr	r0, [pc, #16]	@ (800120c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80011fa:	f00a fadf 	bl	800b7bc <USBD_GetString>
  return USBD_StrDesc;
 80011fe:	4b02      	ldr	r3, [pc, #8]	@ (8001208 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	200015b0 	.word	0x200015b0
 800120c:	0800c328 	.word	0x0800c328

08001210 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	221a      	movs	r2, #26
 8001220:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8001222:	f000 f843 	bl	80012ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8001226:	4b02      	ldr	r3, [pc, #8]	@ (8001230 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000094 	.word	0x20000094

08001234 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d105      	bne.n	8001252 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	4907      	ldr	r1, [pc, #28]	@ (8001268 <USBD_FS_ConfigStrDescriptor+0x34>)
 800124a:	4808      	ldr	r0, [pc, #32]	@ (800126c <USBD_FS_ConfigStrDescriptor+0x38>)
 800124c:	f00a fab6 	bl	800b7bc <USBD_GetString>
 8001250:	e004      	b.n	800125c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	4904      	ldr	r1, [pc, #16]	@ (8001268 <USBD_FS_ConfigStrDescriptor+0x34>)
 8001256:	4805      	ldr	r0, [pc, #20]	@ (800126c <USBD_FS_ConfigStrDescriptor+0x38>)
 8001258:	f00a fab0 	bl	800b7bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800125c:	4b02      	ldr	r3, [pc, #8]	@ (8001268 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200015b0 	.word	0x200015b0
 800126c:	0800c33c 	.word	0x0800c33c

08001270 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	6039      	str	r1, [r7, #0]
 800127a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d105      	bne.n	800128e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	4907      	ldr	r1, [pc, #28]	@ (80012a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8001286:	4808      	ldr	r0, [pc, #32]	@ (80012a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8001288:	f00a fa98 	bl	800b7bc <USBD_GetString>
 800128c:	e004      	b.n	8001298 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	4904      	ldr	r1, [pc, #16]	@ (80012a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8001292:	4805      	ldr	r0, [pc, #20]	@ (80012a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8001294:	f00a fa92 	bl	800b7bc <USBD_GetString>
  }
  return USBD_StrDesc;
 8001298:	4b02      	ldr	r3, [pc, #8]	@ (80012a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200015b0 	.word	0x200015b0
 80012a8:	0800c348 	.word	0x0800c348

080012ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80012b2:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <Get_SerialNum+0x44>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80012b8:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <Get_SerialNum+0x48>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80012be:	4b0e      	ldr	r3, [pc, #56]	@ (80012f8 <Get_SerialNum+0x4c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d009      	beq.n	80012e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80012d2:	2208      	movs	r2, #8
 80012d4:	4909      	ldr	r1, [pc, #36]	@ (80012fc <Get_SerialNum+0x50>)
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f000 f814 	bl	8001304 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80012dc:	2204      	movs	r2, #4
 80012de:	4908      	ldr	r1, [pc, #32]	@ (8001300 <Get_SerialNum+0x54>)
 80012e0:	68b8      	ldr	r0, [r7, #8]
 80012e2:	f000 f80f 	bl	8001304 <IntToUnicode>
  }
}
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	1fff7a10 	.word	0x1fff7a10
 80012f4:	1fff7a14 	.word	0x1fff7a14
 80012f8:	1fff7a18 	.word	0x1fff7a18
 80012fc:	20000096 	.word	0x20000096
 8001300:	200000a6 	.word	0x200000a6

08001304 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8001304:	b480      	push	{r7}
 8001306:	b087      	sub	sp, #28
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	4613      	mov	r3, r2
 8001310:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8001316:	2300      	movs	r3, #0
 8001318:	75fb      	strb	r3, [r7, #23]
 800131a:	e027      	b.n	800136c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	0f1b      	lsrs	r3, r3, #28
 8001320:	2b09      	cmp	r3, #9
 8001322:	d80b      	bhi.n	800133c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	0f1b      	lsrs	r3, r3, #28
 8001328:	b2da      	uxtb	r2, r3
 800132a:	7dfb      	ldrb	r3, [r7, #23]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	4619      	mov	r1, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	440b      	add	r3, r1
 8001334:	3230      	adds	r2, #48	@ 0x30
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	701a      	strb	r2, [r3, #0]
 800133a:	e00a      	b.n	8001352 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	0f1b      	lsrs	r3, r3, #28
 8001340:	b2da      	uxtb	r2, r3
 8001342:	7dfb      	ldrb	r3, [r7, #23]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4619      	mov	r1, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	440b      	add	r3, r1
 800134c:	3237      	adds	r2, #55	@ 0x37
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	011b      	lsls	r3, r3, #4
 8001356:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8001358:	7dfb      	ldrb	r3, [r7, #23]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	3301      	adds	r3, #1
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	4413      	add	r3, r2
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8001366:	7dfb      	ldrb	r3, [r7, #23]
 8001368:	3301      	adds	r3, #1
 800136a:	75fb      	strb	r3, [r7, #23]
 800136c:	7dfa      	ldrb	r2, [r7, #23]
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	429a      	cmp	r2, r3
 8001372:	d3d3      	bcc.n	800131c <IntToUnicode+0x18>
  }
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	371c      	adds	r7, #28
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08a      	sub	sp, #40	@ 0x28
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013a4:	d13a      	bne.n	800141c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001424 <HAL_PCD_MspInit+0xa0>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001424 <HAL_PCD_MspInit+0xa0>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001424 <HAL_PCD_MspInit+0xa0>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80013c2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80013c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013d4:	230a      	movs	r3, #10
 80013d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4619      	mov	r1, r3
 80013de:	4812      	ldr	r0, [pc, #72]	@ (8001428 <HAL_PCD_MspInit+0xa4>)
 80013e0:	f000 ff2c 	bl	800223c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <HAL_PCD_MspInit+0xa0>)
 80013e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001424 <HAL_PCD_MspInit+0xa0>)
 80013ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013ee:	6353      	str	r3, [r2, #52]	@ 0x34
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001424 <HAL_PCD_MspInit+0xa0>)
 80013f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001424 <HAL_PCD_MspInit+0xa0>)
 80013fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8001400:	4b08      	ldr	r3, [pc, #32]	@ (8001424 <HAL_PCD_MspInit+0xa0>)
 8001402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001404:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800140c:	2200      	movs	r2, #0
 800140e:	2100      	movs	r1, #0
 8001410:	2043      	movs	r0, #67	@ 0x43
 8001412:	f000 fc63 	bl	8001cdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001416:	2043      	movs	r0, #67	@ 0x43
 8001418:	f000 fc8c 	bl	8001d34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800141c:	bf00      	nop
 800141e:	3728      	adds	r7, #40	@ 0x28
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40023800 	.word	0x40023800
 8001428:	40020000 	.word	0x40020000

0800142c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001440:	4619      	mov	r1, r3
 8001442:	4610      	mov	r0, r2
 8001444:	f009 f857 	bl	800a4f6 <USBD_LL_SetupStage>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8001462:	78fa      	ldrb	r2, [r7, #3]
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	4613      	mov	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	4413      	add	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	440b      	add	r3, r1
 8001470:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	78fb      	ldrb	r3, [r7, #3]
 8001478:	4619      	mov	r1, r3
 800147a:	f009 f891 	bl	800a5a0 <USBD_LL_DataOutStage>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	460b      	mov	r3, r1
 8001490:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8001498:	78fa      	ldrb	r2, [r7, #3]
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	4613      	mov	r3, r2
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	4413      	add	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	440b      	add	r3, r1
 80014a6:	3320      	adds	r3, #32
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	78fb      	ldrb	r3, [r7, #3]
 80014ac:	4619      	mov	r1, r3
 80014ae:	f009 f92a 	bl	800a706 <USBD_LL_DataInStage>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f009 fa64 	bl	800a996 <USBD_LL_SOF>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b084      	sub	sp, #16
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80014de:	2301      	movs	r3, #1
 80014e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	79db      	ldrb	r3, [r3, #7]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d102      	bne.n	80014f0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]
 80014ee:	e008      	b.n	8001502 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	79db      	ldrb	r3, [r3, #7]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d102      	bne.n	80014fe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80014f8:	2301      	movs	r3, #1
 80014fa:	73fb      	strb	r3, [r7, #15]
 80014fc:	e001      	b.n	8001502 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80014fe:	f7ff fb23 	bl	8000b48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8001508:	7bfa      	ldrb	r2, [r7, #15]
 800150a:	4611      	mov	r1, r2
 800150c:	4618      	mov	r0, r3
 800150e:	f009 f9fe 	bl	800a90e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8001518:	4618      	mov	r0, r3
 800151a:	f009 f9a6 	bl	800a86a <USBD_LL_Reset>
}
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8001536:	4618      	mov	r0, r3
 8001538:	f009 f9f9 	bl	800a92e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	6812      	ldr	r2, [r2, #0]
 800154a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	7adb      	ldrb	r3, [r3, #11]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d005      	beq.n	8001568 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800155c:	4b04      	ldr	r3, [pc, #16]	@ (8001570 <HAL_PCD_SuspendCallback+0x48>)
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	4a03      	ldr	r2, [pc, #12]	@ (8001570 <HAL_PCD_SuspendCallback+0x48>)
 8001562:	f043 0306 	orr.w	r3, r3, #6
 8001566:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8001582:	4618      	mov	r0, r3
 8001584:	f009 f9ef 	bl	800a966 <USBD_LL_Resume>
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80015a2:	78fa      	ldrb	r2, [r7, #3]
 80015a4:	4611      	mov	r1, r2
 80015a6:	4618      	mov	r0, r3
 80015a8:	f009 fa47 	bl	800aa3a <USBD_LL_IsoOUTIncomplete>
}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80015c6:	78fa      	ldrb	r2, [r7, #3]
 80015c8:	4611      	mov	r1, r2
 80015ca:	4618      	mov	r0, r3
 80015cc:	f009 fa03 	bl	800a9d6 <USBD_LL_IsoINIncomplete>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f009 fa59 	bl	800aa9e <USBD_LL_DevConnected>
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8001602:	4618      	mov	r0, r3
 8001604:	f009 fa56 	bl	800aab4 <USBD_LL_DevDisconnected>
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d13c      	bne.n	800169a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8001620:	4a20      	ldr	r2, [pc, #128]	@ (80016a4 <USBD_LL_Init+0x94>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a1e      	ldr	r2, [pc, #120]	@ (80016a4 <USBD_LL_Init+0x94>)
 800162c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001630:	4b1c      	ldr	r3, [pc, #112]	@ (80016a4 <USBD_LL_Init+0x94>)
 8001632:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001636:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001638:	4b1a      	ldr	r3, [pc, #104]	@ (80016a4 <USBD_LL_Init+0x94>)
 800163a:	2204      	movs	r2, #4
 800163c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800163e:	4b19      	ldr	r3, [pc, #100]	@ (80016a4 <USBD_LL_Init+0x94>)
 8001640:	2202      	movs	r2, #2
 8001642:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001644:	4b17      	ldr	r3, [pc, #92]	@ (80016a4 <USBD_LL_Init+0x94>)
 8001646:	2200      	movs	r2, #0
 8001648:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800164a:	4b16      	ldr	r3, [pc, #88]	@ (80016a4 <USBD_LL_Init+0x94>)
 800164c:	2202      	movs	r2, #2
 800164e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001650:	4b14      	ldr	r3, [pc, #80]	@ (80016a4 <USBD_LL_Init+0x94>)
 8001652:	2201      	movs	r2, #1
 8001654:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001656:	4b13      	ldr	r3, [pc, #76]	@ (80016a4 <USBD_LL_Init+0x94>)
 8001658:	2200      	movs	r2, #0
 800165a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800165c:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <USBD_LL_Init+0x94>)
 800165e:	2200      	movs	r2, #0
 8001660:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001662:	4b10      	ldr	r3, [pc, #64]	@ (80016a4 <USBD_LL_Init+0x94>)
 8001664:	2200      	movs	r2, #0
 8001666:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001668:	4b0e      	ldr	r3, [pc, #56]	@ (80016a4 <USBD_LL_Init+0x94>)
 800166a:	2200      	movs	r2, #0
 800166c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800166e:	480d      	ldr	r0, [pc, #52]	@ (80016a4 <USBD_LL_Init+0x94>)
 8001670:	f001 f92a 	bl	80028c8 <HAL_PCD_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800167a:	f7ff fa65 	bl	8000b48 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800167e:	2180      	movs	r1, #128	@ 0x80
 8001680:	4808      	ldr	r0, [pc, #32]	@ (80016a4 <USBD_LL_Init+0x94>)
 8001682:	f002 fb6a 	bl	8003d5a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8001686:	2240      	movs	r2, #64	@ 0x40
 8001688:	2100      	movs	r1, #0
 800168a:	4806      	ldr	r0, [pc, #24]	@ (80016a4 <USBD_LL_Init+0x94>)
 800168c:	f002 fb1e 	bl	8003ccc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8001690:	2280      	movs	r2, #128	@ 0x80
 8001692:	2101      	movs	r1, #1
 8001694:	4803      	ldr	r0, [pc, #12]	@ (80016a4 <USBD_LL_Init+0x94>)
 8001696:	f002 fb19 	bl	8003ccc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	200017b0 	.word	0x200017b0

080016a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80016b0:	2300      	movs	r3, #0
 80016b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80016b4:	2300      	movs	r3, #0
 80016b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80016be:	4618      	mov	r0, r3
 80016c0:	f001 fa24 	bl	8002b0c <HAL_PCD_Start>
 80016c4:	4603      	mov	r3, r0
 80016c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 f942 	bl	8001954 <USBD_Get_USB_Status>
 80016d0:	4603      	mov	r3, r0
 80016d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80016d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b084      	sub	sp, #16
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	4608      	mov	r0, r1
 80016e8:	4611      	mov	r1, r2
 80016ea:	461a      	mov	r2, r3
 80016ec:	4603      	mov	r3, r0
 80016ee:	70fb      	strb	r3, [r7, #3]
 80016f0:	460b      	mov	r3, r1
 80016f2:	70bb      	strb	r3, [r7, #2]
 80016f4:	4613      	mov	r3, r2
 80016f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80016fc:	2300      	movs	r3, #0
 80016fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8001706:	78bb      	ldrb	r3, [r7, #2]
 8001708:	883a      	ldrh	r2, [r7, #0]
 800170a:	78f9      	ldrb	r1, [r7, #3]
 800170c:	f001 fef8 	bl	8003500 <HAL_PCD_EP_Open>
 8001710:	4603      	mov	r3, r0
 8001712:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	4618      	mov	r0, r3
 8001718:	f000 f91c 	bl	8001954 <USBD_Get_USB_Status>
 800171c:	4603      	mov	r3, r0
 800171e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001720:	7bbb      	ldrb	r3, [r7, #14]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b084      	sub	sp, #16
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	460b      	mov	r3, r1
 8001734:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8001744:	78fa      	ldrb	r2, [r7, #3]
 8001746:	4611      	mov	r1, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f001 ff43 	bl	80035d4 <HAL_PCD_EP_Close>
 800174e:	4603      	mov	r3, r0
 8001750:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	4618      	mov	r0, r3
 8001756:	f000 f8fd 	bl	8001954 <USBD_Get_USB_Status>
 800175a:	4603      	mov	r3, r0
 800175c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800175e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8001782:	78fa      	ldrb	r2, [r7, #3]
 8001784:	4611      	mov	r1, r2
 8001786:	4618      	mov	r0, r3
 8001788:	f001 fffb 	bl	8003782 <HAL_PCD_EP_SetStall>
 800178c:	4603      	mov	r3, r0
 800178e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	4618      	mov	r0, r3
 8001794:	f000 f8de 	bl	8001954 <USBD_Get_USB_Status>
 8001798:	4603      	mov	r3, r0
 800179a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800179c:	7bbb      	ldrb	r3, [r7, #14]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b084      	sub	sp, #16
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	460b      	mov	r3, r1
 80017b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80017c0:	78fa      	ldrb	r2, [r7, #3]
 80017c2:	4611      	mov	r1, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f002 f83f 	bl	8003848 <HAL_PCD_EP_ClrStall>
 80017ca:	4603      	mov	r3, r0
 80017cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 f8bf 	bl	8001954 <USBD_Get_USB_Status>
 80017d6:	4603      	mov	r3, r0
 80017d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80017da:	7bbb      	ldrb	r3, [r7, #14]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80017f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80017f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	da0b      	bge.n	8001818 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8001800:	78fb      	ldrb	r3, [r7, #3]
 8001802:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001806:	68f9      	ldr	r1, [r7, #12]
 8001808:	4613      	mov	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	4413      	add	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	3316      	adds	r3, #22
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	e00b      	b.n	8001830 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800181e:	68f9      	ldr	r1, [r7, #12]
 8001820:	4613      	mov	r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4413      	add	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800182e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001830:	4618      	mov	r0, r3
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001848:	2300      	movs	r3, #0
 800184a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8001856:	78fa      	ldrb	r2, [r7, #3]
 8001858:	4611      	mov	r1, r2
 800185a:	4618      	mov	r0, r3
 800185c:	f001 fe2c 	bl	80034b8 <HAL_PCD_SetAddress>
 8001860:	4603      	mov	r3, r0
 8001862:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001864:	7bfb      	ldrb	r3, [r7, #15]
 8001866:	4618      	mov	r0, r3
 8001868:	f000 f874 	bl	8001954 <USBD_Get_USB_Status>
 800186c:	4603      	mov	r3, r0
 800186e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001870:	7bbb      	ldrb	r3, [r7, #14]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	603b      	str	r3, [r7, #0]
 8001886:	460b      	mov	r3, r1
 8001888:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8001898:	7af9      	ldrb	r1, [r7, #11]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	f001 ff36 	bl	800370e <HAL_PCD_EP_Transmit>
 80018a2:	4603      	mov	r3, r0
 80018a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80018a6:	7dfb      	ldrb	r3, [r7, #23]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f000 f853 	bl	8001954 <USBD_Get_USB_Status>
 80018ae:	4603      	mov	r3, r0
 80018b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80018b2:	7dbb      	ldrb	r3, [r7, #22]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	607a      	str	r2, [r7, #4]
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	460b      	mov	r3, r1
 80018ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80018d0:	2300      	movs	r3, #0
 80018d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80018da:	7af9      	ldrb	r1, [r7, #11]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	f001 fec2 	bl	8003668 <HAL_PCD_EP_Receive>
 80018e4:	4603      	mov	r3, r0
 80018e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80018e8:	7dfb      	ldrb	r3, [r7, #23]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 f832 	bl	8001954 <USBD_Get_USB_Status>
 80018f0:	4603      	mov	r3, r0
 80018f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80018f4:	7dbb      	ldrb	r3, [r7, #22]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	460b      	mov	r3, r1
 8001908:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8001910:	78fa      	ldrb	r2, [r7, #3]
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f001 fee2 	bl	80036de <HAL_PCD_EP_GetRxCount>
 800191a:	4603      	mov	r3, r0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800192c:	4b03      	ldr	r3, [pc, #12]	@ (800193c <USBD_static_malloc+0x18>)
}
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20001c94 	.word	0x20001c94

08001940 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	2b03      	cmp	r3, #3
 8001966:	d817      	bhi.n	8001998 <USBD_Get_USB_Status+0x44>
 8001968:	a201      	add	r2, pc, #4	@ (adr r2, 8001970 <USBD_Get_USB_Status+0x1c>)
 800196a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196e:	bf00      	nop
 8001970:	08001981 	.word	0x08001981
 8001974:	08001987 	.word	0x08001987
 8001978:	0800198d 	.word	0x0800198d
 800197c:	08001993 	.word	0x08001993
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8001980:	2300      	movs	r3, #0
 8001982:	73fb      	strb	r3, [r7, #15]
    break;
 8001984:	e00b      	b.n	800199e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8001986:	2303      	movs	r3, #3
 8001988:	73fb      	strb	r3, [r7, #15]
    break;
 800198a:	e008      	b.n	800199e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800198c:	2301      	movs	r3, #1
 800198e:	73fb      	strb	r3, [r7, #15]
    break;
 8001990:	e005      	b.n	800199e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8001992:	2303      	movs	r3, #3
 8001994:	73fb      	strb	r3, [r7, #15]
    break;
 8001996:	e002      	b.n	800199e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8001998:	2303      	movs	r3, #3
 800199a:	73fb      	strb	r3, [r7, #15]
    break;
 800199c:	bf00      	nop
  }
  return usb_status;
 800199e:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019b0:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <SystemInit+0x20>)
 80019b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019b6:	4a05      	ldr	r2, [pc, #20]	@ (80019cc <SystemInit+0x20>)
 80019b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a10 <HAL_Init+0x40>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a10 <HAL_Init+0x40>)
 80019da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <HAL_Init+0x40>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001a10 <HAL_Init+0x40>)
 80019e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ec:	4b08      	ldr	r3, [pc, #32]	@ (8001a10 <HAL_Init+0x40>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a07      	ldr	r2, [pc, #28]	@ (8001a10 <HAL_Init+0x40>)
 80019f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f8:	2003      	movs	r0, #3
 80019fa:	f000 f94f 	bl	8001c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019fe:	200f      	movs	r0, #15
 8001a00:	f000 f808 	bl	8001a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a04:	f7ff f8b2 	bl	8000b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023c00 	.word	0x40023c00

08001a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a1c:	4b12      	ldr	r3, [pc, #72]	@ (8001a68 <HAL_InitTick+0x54>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <HAL_InitTick+0x58>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	4619      	mov	r1, r3
 8001a26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 f996 	bl	8001d64 <HAL_SYSTICK_Config>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e00e      	b.n	8001a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b0f      	cmp	r3, #15
 8001a46:	d80a      	bhi.n	8001a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a50:	f000 f944 	bl	8001cdc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a54:	4a06      	ldr	r2, [pc, #24]	@ (8001a70 <HAL_InitTick+0x5c>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e000      	b.n	8001a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	200000b0 	.word	0x200000b0
 8001a6c:	200000b8 	.word	0x200000b8
 8001a70:	200000b4 	.word	0x200000b4

08001a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a78:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <HAL_IncTick+0x20>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <HAL_IncTick+0x24>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4413      	add	r3, r2
 8001a84:	4a04      	ldr	r2, [pc, #16]	@ (8001a98 <HAL_IncTick+0x24>)
 8001a86:	6013      	str	r3, [r2, #0]
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	200000b8 	.word	0x200000b8
 8001a98:	20001eb4 	.word	0x20001eb4

08001a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	@ (8001ab0 <HAL_GetTick+0x14>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20001eb4 	.word	0x20001eb4

08001ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001abc:	f7ff ffee 	bl	8001a9c <HAL_GetTick>
 8001ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001acc:	d005      	beq.n	8001ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ace:	4b0a      	ldr	r3, [pc, #40]	@ (8001af8 <HAL_Delay+0x44>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ada:	bf00      	nop
 8001adc:	f7ff ffde 	bl	8001a9c <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d8f7      	bhi.n	8001adc <HAL_Delay+0x28>
  {
  }
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200000b8 	.word	0x200000b8

08001afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b40 <__NVIC_SetPriorityGrouping+0x44>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2e:	4a04      	ldr	r2, [pc, #16]	@ (8001b40 <__NVIC_SetPriorityGrouping+0x44>)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	60d3      	str	r3, [r2, #12]
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b48:	4b04      	ldr	r3, [pc, #16]	@ (8001b5c <__NVIC_GetPriorityGrouping+0x18>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	f003 0307 	and.w	r3, r3, #7
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	db0b      	blt.n	8001b8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	f003 021f 	and.w	r2, r3, #31
 8001b78:	4907      	ldr	r1, [pc, #28]	@ (8001b98 <__NVIC_EnableIRQ+0x38>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	095b      	lsrs	r3, r3, #5
 8001b80:	2001      	movs	r0, #1
 8001b82:	fa00 f202 	lsl.w	r2, r0, r2
 8001b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000e100 	.word	0xe000e100

08001b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	6039      	str	r1, [r7, #0]
 8001ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	db0a      	blt.n	8001bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	490c      	ldr	r1, [pc, #48]	@ (8001be8 <__NVIC_SetPriority+0x4c>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	0112      	lsls	r2, r2, #4
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc4:	e00a      	b.n	8001bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4908      	ldr	r1, [pc, #32]	@ (8001bec <__NVIC_SetPriority+0x50>)
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	3b04      	subs	r3, #4
 8001bd4:	0112      	lsls	r2, r2, #4
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	440b      	add	r3, r1
 8001bda:	761a      	strb	r2, [r3, #24]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	e000e100 	.word	0xe000e100
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	@ 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f1c3 0307 	rsb	r3, r3, #7
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	bf28      	it	cs
 8001c0e:	2304      	movcs	r3, #4
 8001c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3304      	adds	r3, #4
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	d902      	bls.n	8001c20 <NVIC_EncodePriority+0x30>
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3b03      	subs	r3, #3
 8001c1e:	e000      	b.n	8001c22 <NVIC_EncodePriority+0x32>
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	f04f 32ff 	mov.w	r2, #4294967295
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	401a      	ands	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c38:	f04f 31ff 	mov.w	r1, #4294967295
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c42:	43d9      	mvns	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	4313      	orrs	r3, r2
         );
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3724      	adds	r7, #36	@ 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c68:	d301      	bcc.n	8001c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e00f      	b.n	8001c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c98 <SysTick_Config+0x40>)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c76:	210f      	movs	r1, #15
 8001c78:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7c:	f7ff ff8e 	bl	8001b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c80:	4b05      	ldr	r3, [pc, #20]	@ (8001c98 <SysTick_Config+0x40>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c86:	4b04      	ldr	r3, [pc, #16]	@ (8001c98 <SysTick_Config+0x40>)
 8001c88:	2207      	movs	r2, #7
 8001c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	e000e010 	.word	0xe000e010

08001c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b07      	cmp	r3, #7
 8001ca8:	d00f      	beq.n	8001cca <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b06      	cmp	r3, #6
 8001cae:	d00c      	beq.n	8001cca <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b05      	cmp	r3, #5
 8001cb4:	d009      	beq.n	8001cca <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d006      	beq.n	8001cca <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b03      	cmp	r3, #3
 8001cc0:	d003      	beq.n	8001cca <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001cc2:	2190      	movs	r1, #144	@ 0x90
 8001cc4:	4804      	ldr	r0, [pc, #16]	@ (8001cd8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001cc6:	f7fe ff45 	bl	8000b54 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff ff16 	bl	8001afc <__NVIC_SetPriorityGrouping>
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	0800c358 	.word	0x0800c358

08001cdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b0f      	cmp	r3, #15
 8001cf2:	d903      	bls.n	8001cfc <HAL_NVIC_SetPriority+0x20>
 8001cf4:	21a8      	movs	r1, #168	@ 0xa8
 8001cf6:	480e      	ldr	r0, [pc, #56]	@ (8001d30 <HAL_NVIC_SetPriority+0x54>)
 8001cf8:	f7fe ff2c 	bl	8000b54 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	2b0f      	cmp	r3, #15
 8001d00:	d903      	bls.n	8001d0a <HAL_NVIC_SetPriority+0x2e>
 8001d02:	21a9      	movs	r1, #169	@ 0xa9
 8001d04:	480a      	ldr	r0, [pc, #40]	@ (8001d30 <HAL_NVIC_SetPriority+0x54>)
 8001d06:	f7fe ff25 	bl	8000b54 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d0a:	f7ff ff1b 	bl	8001b44 <__NVIC_GetPriorityGrouping>
 8001d0e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	68b9      	ldr	r1, [r7, #8]
 8001d14:	6978      	ldr	r0, [r7, #20]
 8001d16:	f7ff ff6b 	bl	8001bf0 <NVIC_EncodePriority>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d20:	4611      	mov	r1, r2
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff ff3a 	bl	8001b9c <__NVIC_SetPriority>
}
 8001d28:	bf00      	nop
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	0800c358 	.word	0x0800c358

08001d34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	da03      	bge.n	8001d4e <HAL_NVIC_EnableIRQ+0x1a>
 8001d46:	21bc      	movs	r1, #188	@ 0xbc
 8001d48:	4805      	ldr	r0, [pc, #20]	@ (8001d60 <HAL_NVIC_EnableIRQ+0x2c>)
 8001d4a:	f7fe ff03 	bl	8000b54 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff ff04 	bl	8001b60 <__NVIC_EnableIRQ>
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	0800c358 	.word	0x0800c358

08001d64 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff ff73 	bl	8001c58 <SysTick_Config>
 8001d72:	4603      	mov	r3, r0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d8a:	f7ff fe87 	bl	8001a9c <HAL_GetTick>
 8001d8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d008      	beq.n	8001dae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2280      	movs	r2, #128	@ 0x80
 8001da0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e052      	b.n	8001e54 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0216 	bic.w	r2, r2, #22
 8001dbc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	695a      	ldr	r2, [r3, #20]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001dcc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d103      	bne.n	8001dde <HAL_DMA_Abort+0x62>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d007      	beq.n	8001dee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0208 	bic.w	r2, r2, #8
 8001dec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0201 	bic.w	r2, r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dfe:	e013      	b.n	8001e28 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e00:	f7ff fe4c 	bl	8001a9c <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b05      	cmp	r3, #5
 8001e0c:	d90c      	bls.n	8001e28 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2220      	movs	r2, #32
 8001e12:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2203      	movs	r2, #3
 8001e18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e015      	b.n	8001e54 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1e4      	bne.n	8001e00 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e3a:	223f      	movs	r2, #63	@ 0x3f
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d004      	beq.n	8001e7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2280      	movs	r2, #128	@ 0x80
 8001e74:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e00c      	b.n	8001e94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2205      	movs	r2, #5
 8001e7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0201 	bic.w	r2, r2, #1
 8001e90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001eaa:	4b49      	ldr	r3, [pc, #292]	@ (8001fd0 <HAL_FLASH_IRQHandler+0x130>)
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d020      	beq.n	8001ef8 <HAL_FLASH_IRQHandler+0x58>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8001eb6:	4b47      	ldr	r3, [pc, #284]	@ (8001fd4 <HAL_FLASH_IRQHandler+0x134>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d107      	bne.n	8001ed0 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8001ec0:	4b44      	ldr	r3, [pc, #272]	@ (8001fd4 <HAL_FLASH_IRQHandler+0x134>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8001ec6:	4b43      	ldr	r3, [pc, #268]	@ (8001fd4 <HAL_FLASH_IRQHandler+0x134>)
 8001ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	e00b      	b.n	8001ee8 <HAL_FLASH_IRQHandler+0x48>
    }
    else if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8001ed0:	4b40      	ldr	r3, [pc, #256]	@ (8001fd4 <HAL_FLASH_IRQHandler+0x134>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d103      	bne.n	8001ee2 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8001eda:	4b3e      	ldr	r3, [pc, #248]	@ (8001fd4 <HAL_FLASH_IRQHandler+0x134>)
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	e002      	b.n	8001ee8 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8001ee2:	4b3c      	ldr	r3, [pc, #240]	@ (8001fd4 <HAL_FLASH_IRQHandler+0x134>)
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	607b      	str	r3, [r7, #4]
    }

    /*Save the Error code*/
    FLASH_SetErrorCode();
 8001ee8:	f000 f88a 	bl	8002000 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f87d 	bl	8001fec <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001ef2:	4b38      	ldr	r3, [pc, #224]	@ (8001fd4 <HAL_FLASH_IRQHandler+0x134>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001ef8:	4b35      	ldr	r3, [pc, #212]	@ (8001fd0 <HAL_FLASH_IRQHandler+0x130>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d04a      	beq.n	8001f9a <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001f04:	4b32      	ldr	r3, [pc, #200]	@ (8001fd0 <HAL_FLASH_IRQHandler+0x130>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	60da      	str	r2, [r3, #12]

    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8001f0a:	4b32      	ldr	r3, [pc, #200]	@ (8001fd4 <HAL_FLASH_IRQHandler+0x134>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d12d      	bne.n	8001f70 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8001f14:	4b2f      	ldr	r3, [pc, #188]	@ (8001fd4 <HAL_FLASH_IRQHandler+0x134>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	4a2e      	ldr	r2, [pc, #184]	@ (8001fd4 <HAL_FLASH_IRQHandler+0x134>)
 8001f1c:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase*/
      if (pFlash.NbSectorsToErase != 0U)
 8001f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd4 <HAL_FLASH_IRQHandler+0x134>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d015      	beq.n	8001f52 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8001f26:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd4 <HAL_FLASH_IRQHandler+0x134>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f853 	bl	8001fd8 <HAL_FLASH_EndOfOperationCallback>

        /*Increment sector number*/
        pFlash.Sector++;
 8001f32:	4b28      	ldr	r3, [pc, #160]	@ (8001fd4 <HAL_FLASH_IRQHandler+0x134>)
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	3301      	adds	r3, #1
 8001f38:	4a26      	ldr	r2, [pc, #152]	@ (8001fd4 <HAL_FLASH_IRQHandler+0x134>)
 8001f3a:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8001f3c:	4b25      	ldr	r3, [pc, #148]	@ (8001fd4 <HAL_FLASH_IRQHandler+0x134>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8001f42:	4b24      	ldr	r3, [pc, #144]	@ (8001fd4 <HAL_FLASH_IRQHandler+0x134>)
 8001f44:	7a1b      	ldrb	r3, [r3, #8]
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	4619      	mov	r1, r3
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f8ae 	bl	80020ac <FLASH_Erase_Sector>
 8001f50:	e023      	b.n	8001f9a <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8001f52:	f04f 33ff 	mov.w	r3, #4294967295
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	4a1e      	ldr	r2, [pc, #120]	@ (8001fd4 <HAL_FLASH_IRQHandler+0x134>)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd4 <HAL_FLASH_IRQHandler+0x134>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	701a      	strb	r2, [r3, #0]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 8001f64:	f000 f924 	bl	80021b0 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f835 	bl	8001fd8 <HAL_FLASH_EndOfOperationCallback>
 8001f6e:	e014      	b.n	8001f9a <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else
    {
      if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8001f70:	4b18      	ldr	r3, [pc, #96]	@ (8001fd4 <HAL_FLASH_IRQHandler+0x134>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d107      	bne.n	8001f8a <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 8001f7a:	f000 f919 	bl	80021b0 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8001f7e:	4b15      	ldr	r3, [pc, #84]	@ (8001fd4 <HAL_FLASH_IRQHandler+0x134>)
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f828 	bl	8001fd8 <HAL_FLASH_EndOfOperationCallback>
 8001f88:	e004      	b.n	8001f94 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8001f8a:	4b12      	ldr	r3, [pc, #72]	@ (8001fd4 <HAL_FLASH_IRQHandler+0x134>)
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 f822 	bl	8001fd8 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001f94:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd4 <HAL_FLASH_IRQHandler+0x134>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	701a      	strb	r2, [r3, #0]
    }
  }

  if (pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd4 <HAL_FLASH_IRQHandler+0x134>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d111      	bne.n	8001fc8 <HAL_FLASH_IRQHandler+0x128>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd0 <HAL_FLASH_IRQHandler+0x130>)
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	4a09      	ldr	r2, [pc, #36]	@ (8001fd0 <HAL_FLASH_IRQHandler+0x130>)
 8001faa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001fae:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8001fb0:	4b07      	ldr	r3, [pc, #28]	@ (8001fd0 <HAL_FLASH_IRQHandler+0x130>)
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	4a06      	ldr	r2, [pc, #24]	@ (8001fd0 <HAL_FLASH_IRQHandler+0x130>)
 8001fb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fba:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8001fbc:	4b04      	ldr	r3, [pc, #16]	@ (8001fd0 <HAL_FLASH_IRQHandler+0x130>)
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	4a03      	ldr	r2, [pc, #12]	@ (8001fd0 <HAL_FLASH_IRQHandler+0x130>)
 8001fc2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8001fc6:	6113      	str	r3, [r2, #16]
  }
}
 8001fc8:	bf00      	nop
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40023c00 	.word	0x40023c00
 8001fd4:	20001eb8 	.word	0x20001eb8

08001fd8 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002004:	4b27      	ldr	r3, [pc, #156]	@ (80020a4 <FLASH_SetErrorCode+0xa4>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	2b00      	cmp	r3, #0
 800200e:	d008      	beq.n	8002022 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002010:	4b25      	ldr	r3, [pc, #148]	@ (80020a8 <FLASH_SetErrorCode+0xa8>)
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	f043 0310 	orr.w	r3, r3, #16
 8002018:	4a23      	ldr	r2, [pc, #140]	@ (80020a8 <FLASH_SetErrorCode+0xa8>)
 800201a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800201c:	4b21      	ldr	r3, [pc, #132]	@ (80020a4 <FLASH_SetErrorCode+0xa4>)
 800201e:	2210      	movs	r2, #16
 8002020:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002022:	4b20      	ldr	r3, [pc, #128]	@ (80020a4 <FLASH_SetErrorCode+0xa4>)
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	2b00      	cmp	r3, #0
 800202c:	d008      	beq.n	8002040 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800202e:	4b1e      	ldr	r3, [pc, #120]	@ (80020a8 <FLASH_SetErrorCode+0xa8>)
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	f043 0308 	orr.w	r3, r3, #8
 8002036:	4a1c      	ldr	r2, [pc, #112]	@ (80020a8 <FLASH_SetErrorCode+0xa8>)
 8002038:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800203a:	4b1a      	ldr	r3, [pc, #104]	@ (80020a4 <FLASH_SetErrorCode+0xa4>)
 800203c:	2220      	movs	r2, #32
 800203e:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002040:	4b18      	ldr	r3, [pc, #96]	@ (80020a4 <FLASH_SetErrorCode+0xa4>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002048:	2b00      	cmp	r3, #0
 800204a:	d008      	beq.n	800205e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800204c:	4b16      	ldr	r3, [pc, #88]	@ (80020a8 <FLASH_SetErrorCode+0xa8>)
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	f043 0304 	orr.w	r3, r3, #4
 8002054:	4a14      	ldr	r2, [pc, #80]	@ (80020a8 <FLASH_SetErrorCode+0xa8>)
 8002056:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002058:	4b12      	ldr	r3, [pc, #72]	@ (80020a4 <FLASH_SetErrorCode+0xa4>)
 800205a:	2240      	movs	r2, #64	@ 0x40
 800205c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800205e:	4b11      	ldr	r3, [pc, #68]	@ (80020a4 <FLASH_SetErrorCode+0xa4>)
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002066:	2b00      	cmp	r3, #0
 8002068:	d008      	beq.n	800207c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800206a:	4b0f      	ldr	r3, [pc, #60]	@ (80020a8 <FLASH_SetErrorCode+0xa8>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f043 0302 	orr.w	r3, r3, #2
 8002072:	4a0d      	ldr	r2, [pc, #52]	@ (80020a8 <FLASH_SetErrorCode+0xa8>)
 8002074:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002076:	4b0b      	ldr	r3, [pc, #44]	@ (80020a4 <FLASH_SetErrorCode+0xa4>)
 8002078:	2280      	movs	r2, #128	@ 0x80
 800207a:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800207c:	4b09      	ldr	r3, [pc, #36]	@ (80020a4 <FLASH_SetErrorCode+0xa4>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d008      	beq.n	800209a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002088:	4b07      	ldr	r3, [pc, #28]	@ (80020a8 <FLASH_SetErrorCode+0xa8>)
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	f043 0320 	orr.w	r3, r3, #32
 8002090:	4a05      	ldr	r2, [pc, #20]	@ (80020a8 <FLASH_SetErrorCode+0xa8>)
 8002092:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002094:	4b03      	ldr	r3, [pc, #12]	@ (80020a4 <FLASH_SetErrorCode+0xa4>)
 8002096:	2202      	movs	r2, #2
 8002098:	60da      	str	r2, [r3, #12]
  }
}
 800209a:	bf00      	nop
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	40023c00 	.word	0x40023c00
 80020a8:	20001eb8 	.word	0x20001eb8

080020ac <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d025      	beq.n	800210e <FLASH_Erase_Sector+0x62>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d022      	beq.n	800210e <FLASH_Erase_Sector+0x62>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d01f      	beq.n	800210e <FLASH_Erase_Sector+0x62>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	d01c      	beq.n	800210e <FLASH_Erase_Sector+0x62>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d019      	beq.n	800210e <FLASH_Erase_Sector+0x62>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b05      	cmp	r3, #5
 80020de:	d016      	beq.n	800210e <FLASH_Erase_Sector+0x62>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b06      	cmp	r3, #6
 80020e4:	d013      	beq.n	800210e <FLASH_Erase_Sector+0x62>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b07      	cmp	r3, #7
 80020ea:	d010      	beq.n	800210e <FLASH_Erase_Sector+0x62>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d00d      	beq.n	800210e <FLASH_Erase_Sector+0x62>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b09      	cmp	r3, #9
 80020f6:	d00a      	beq.n	800210e <FLASH_Erase_Sector+0x62>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b0a      	cmp	r3, #10
 80020fc:	d007      	beq.n	800210e <FLASH_Erase_Sector+0x62>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b0b      	cmp	r3, #11
 8002102:	d004      	beq.n	800210e <FLASH_Erase_Sector+0x62>
 8002104:	f240 31d6 	movw	r1, #982	@ 0x3d6
 8002108:	4827      	ldr	r0, [pc, #156]	@ (80021a8 <FLASH_Erase_Sector+0xfc>)
 800210a:	f7fe fd23 	bl	8000b54 <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00d      	beq.n	8002130 <FLASH_Erase_Sector+0x84>
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d00a      	beq.n	8002130 <FLASH_Erase_Sector+0x84>
 800211a:	78fb      	ldrb	r3, [r7, #3]
 800211c:	2b02      	cmp	r3, #2
 800211e:	d007      	beq.n	8002130 <FLASH_Erase_Sector+0x84>
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	2b03      	cmp	r3, #3
 8002124:	d004      	beq.n	8002130 <FLASH_Erase_Sector+0x84>
 8002126:	f240 31d7 	movw	r1, #983	@ 0x3d7
 800212a:	481f      	ldr	r0, [pc, #124]	@ (80021a8 <FLASH_Erase_Sector+0xfc>)
 800212c:	f7fe fd12 	bl	8000b54 <assert_failed>

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002130:	78fb      	ldrb	r3, [r7, #3]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d102      	bne.n	800213c <FLASH_Erase_Sector+0x90>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	e010      	b.n	800215e <FLASH_Erase_Sector+0xb2>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d103      	bne.n	800214a <FLASH_Erase_Sector+0x9e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002142:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	e009      	b.n	800215e <FLASH_Erase_Sector+0xb2>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800214a:	78fb      	ldrb	r3, [r7, #3]
 800214c:	2b02      	cmp	r3, #2
 800214e:	d103      	bne.n	8002158 <FLASH_Erase_Sector+0xac>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002150:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	e002      	b.n	800215e <FLASH_Erase_Sector+0xb2>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002158:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800215c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800215e:	4b13      	ldr	r3, [pc, #76]	@ (80021ac <FLASH_Erase_Sector+0x100>)
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	4a12      	ldr	r2, [pc, #72]	@ (80021ac <FLASH_Erase_Sector+0x100>)
 8002164:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002168:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800216a:	4b10      	ldr	r3, [pc, #64]	@ (80021ac <FLASH_Erase_Sector+0x100>)
 800216c:	691a      	ldr	r2, [r3, #16]
 800216e:	490f      	ldr	r1, [pc, #60]	@ (80021ac <FLASH_Erase_Sector+0x100>)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4313      	orrs	r3, r2
 8002174:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002176:	4b0d      	ldr	r3, [pc, #52]	@ (80021ac <FLASH_Erase_Sector+0x100>)
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	4a0c      	ldr	r2, [pc, #48]	@ (80021ac <FLASH_Erase_Sector+0x100>)
 800217c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002180:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002182:	4b0a      	ldr	r3, [pc, #40]	@ (80021ac <FLASH_Erase_Sector+0x100>)
 8002184:	691a      	ldr	r2, [r3, #16]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	4313      	orrs	r3, r2
 800218c:	4a07      	ldr	r2, [pc, #28]	@ (80021ac <FLASH_Erase_Sector+0x100>)
 800218e:	f043 0302 	orr.w	r3, r3, #2
 8002192:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002194:	4b05      	ldr	r3, [pc, #20]	@ (80021ac <FLASH_Erase_Sector+0x100>)
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	4a04      	ldr	r2, [pc, #16]	@ (80021ac <FLASH_Erase_Sector+0x100>)
 800219a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800219e:	6113      	str	r3, [r2, #16]
}
 80021a0:	bf00      	nop
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	0800c3d4 	.word	0x0800c3d4
 80021ac:	40023c00 	.word	0x40023c00

080021b0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80021b4:	4b20      	ldr	r3, [pc, #128]	@ (8002238 <FLASH_FlushCaches+0x88>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d017      	beq.n	80021f0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80021c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002238 <FLASH_FlushCaches+0x88>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002238 <FLASH_FlushCaches+0x88>)
 80021c6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80021ca:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80021cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002238 <FLASH_FlushCaches+0x88>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a19      	ldr	r2, [pc, #100]	@ (8002238 <FLASH_FlushCaches+0x88>)
 80021d2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	4b17      	ldr	r3, [pc, #92]	@ (8002238 <FLASH_FlushCaches+0x88>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a16      	ldr	r2, [pc, #88]	@ (8002238 <FLASH_FlushCaches+0x88>)
 80021de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80021e2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021e4:	4b14      	ldr	r3, [pc, #80]	@ (8002238 <FLASH_FlushCaches+0x88>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a13      	ldr	r2, [pc, #76]	@ (8002238 <FLASH_FlushCaches+0x88>)
 80021ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021ee:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80021f0:	4b11      	ldr	r3, [pc, #68]	@ (8002238 <FLASH_FlushCaches+0x88>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d017      	beq.n	800222c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80021fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002238 <FLASH_FlushCaches+0x88>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0d      	ldr	r2, [pc, #52]	@ (8002238 <FLASH_FlushCaches+0x88>)
 8002202:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002206:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002208:	4b0b      	ldr	r3, [pc, #44]	@ (8002238 <FLASH_FlushCaches+0x88>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a0a      	ldr	r2, [pc, #40]	@ (8002238 <FLASH_FlushCaches+0x88>)
 800220e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	4b08      	ldr	r3, [pc, #32]	@ (8002238 <FLASH_FlushCaches+0x88>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a07      	ldr	r2, [pc, #28]	@ (8002238 <FLASH_FlushCaches+0x88>)
 800221a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800221e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002220:	4b05      	ldr	r3, [pc, #20]	@ (8002238 <FLASH_FlushCaches+0x88>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a04      	ldr	r2, [pc, #16]	@ (8002238 <FLASH_FlushCaches+0x88>)
 8002226:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800222a:	6013      	str	r3, [r2, #0]
  }
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40023c00 	.word	0x40023c00

0800223c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800224a:	2300      	movs	r3, #0
 800224c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800224e:	2300      	movs	r3, #0
 8002250:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a38      	ldr	r2, [pc, #224]	@ (8002338 <HAL_GPIO_Init+0xfc>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d023      	beq.n	80022a2 <HAL_GPIO_Init+0x66>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a37      	ldr	r2, [pc, #220]	@ (800233c <HAL_GPIO_Init+0x100>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d01f      	beq.n	80022a2 <HAL_GPIO_Init+0x66>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a36      	ldr	r2, [pc, #216]	@ (8002340 <HAL_GPIO_Init+0x104>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d01b      	beq.n	80022a2 <HAL_GPIO_Init+0x66>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a35      	ldr	r2, [pc, #212]	@ (8002344 <HAL_GPIO_Init+0x108>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d017      	beq.n	80022a2 <HAL_GPIO_Init+0x66>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a34      	ldr	r2, [pc, #208]	@ (8002348 <HAL_GPIO_Init+0x10c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d013      	beq.n	80022a2 <HAL_GPIO_Init+0x66>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a33      	ldr	r2, [pc, #204]	@ (800234c <HAL_GPIO_Init+0x110>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d00f      	beq.n	80022a2 <HAL_GPIO_Init+0x66>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a32      	ldr	r2, [pc, #200]	@ (8002350 <HAL_GPIO_Init+0x114>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d00b      	beq.n	80022a2 <HAL_GPIO_Init+0x66>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a31      	ldr	r2, [pc, #196]	@ (8002354 <HAL_GPIO_Init+0x118>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d007      	beq.n	80022a2 <HAL_GPIO_Init+0x66>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a30      	ldr	r2, [pc, #192]	@ (8002358 <HAL_GPIO_Init+0x11c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_Init+0x66>
 800229a:	21ac      	movs	r1, #172	@ 0xac
 800229c:	482f      	ldr	r0, [pc, #188]	@ (800235c <HAL_GPIO_Init+0x120>)
 800229e:	f7fe fc59 	bl	8000b54 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d004      	beq.n	80022b6 <HAL_GPIO_Init+0x7a>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022b4:	d303      	bcc.n	80022be <HAL_GPIO_Init+0x82>
 80022b6:	21ad      	movs	r1, #173	@ 0xad
 80022b8:	4828      	ldr	r0, [pc, #160]	@ (800235c <HAL_GPIO_Init+0x120>)
 80022ba:	f7fe fc4b 	bl	8000b54 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d035      	beq.n	8002332 <HAL_GPIO_Init+0xf6>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d031      	beq.n	8002332 <HAL_GPIO_Init+0xf6>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b11      	cmp	r3, #17
 80022d4:	d02d      	beq.n	8002332 <HAL_GPIO_Init+0xf6>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d029      	beq.n	8002332 <HAL_GPIO_Init+0xf6>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b12      	cmp	r3, #18
 80022e4:	d025      	beq.n	8002332 <HAL_GPIO_Init+0xf6>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 80022ee:	d020      	beq.n	8002332 <HAL_GPIO_Init+0xf6>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80022f8:	d01b      	beq.n	8002332 <HAL_GPIO_Init+0xf6>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8002302:	d016      	beq.n	8002332 <HAL_GPIO_Init+0xf6>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 800230c:	d011      	beq.n	8002332 <HAL_GPIO_Init+0xf6>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8002316:	d00c      	beq.n	8002332 <HAL_GPIO_Init+0xf6>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8002320:	d007      	beq.n	8002332 <HAL_GPIO_Init+0xf6>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b03      	cmp	r3, #3
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0xf6>
 800232a:	21ae      	movs	r1, #174	@ 0xae
 800232c:	480b      	ldr	r0, [pc, #44]	@ (800235c <HAL_GPIO_Init+0x120>)
 800232e:	f7fe fc11 	bl	8000b54 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
 8002336:	e235      	b.n	80027a4 <HAL_GPIO_Init+0x568>
 8002338:	40020000 	.word	0x40020000
 800233c:	40020400 	.word	0x40020400
 8002340:	40020800 	.word	0x40020800
 8002344:	40020c00 	.word	0x40020c00
 8002348:	40021000 	.word	0x40021000
 800234c:	40021400 	.word	0x40021400
 8002350:	40021800 	.word	0x40021800
 8002354:	40021c00 	.word	0x40021c00
 8002358:	40022000 	.word	0x40022000
 800235c:	0800c450 	.word	0x0800c450
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002360:	2201      	movs	r2, #1
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	429a      	cmp	r2, r3
 800237a:	f040 8210 	bne.w	800279e <HAL_GPIO_Init+0x562>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b01      	cmp	r3, #1
 8002388:	d005      	beq.n	8002396 <HAL_GPIO_Init+0x15a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002392:	2b02      	cmp	r3, #2
 8002394:	d144      	bne.n	8002420 <HAL_GPIO_Init+0x1e4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00f      	beq.n	80023be <HAL_GPIO_Init+0x182>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d00b      	beq.n	80023be <HAL_GPIO_Init+0x182>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d007      	beq.n	80023be <HAL_GPIO_Init+0x182>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_Init+0x182>
 80023b6:	21c0      	movs	r1, #192	@ 0xc0
 80023b8:	488d      	ldr	r0, [pc, #564]	@ (80025f0 <HAL_GPIO_Init+0x3b4>)
 80023ba:	f7fe fbcb 	bl	8000b54 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	2203      	movs	r2, #3
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023f4:	2201      	movs	r2, #1
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	091b      	lsrs	r3, r3, #4
 800240a:	f003 0201 	and.w	r2, r3, #1
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 0303 	and.w	r3, r3, #3
 8002428:	2b03      	cmp	r3, #3
 800242a:	d027      	beq.n	800247c <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00b      	beq.n	800244c <HAL_GPIO_Init+0x210>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d007      	beq.n	800244c <HAL_GPIO_Init+0x210>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	2b02      	cmp	r3, #2
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x210>
 8002444:	21d1      	movs	r1, #209	@ 0xd1
 8002446:	486a      	ldr	r0, [pc, #424]	@ (80025f0 <HAL_GPIO_Init+0x3b4>)
 8002448:	f7fe fb84 	bl	8000b54 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	2203      	movs	r2, #3
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	2b02      	cmp	r3, #2
 8002486:	f040 80b5 	bne.w	80025f4 <HAL_GPIO_Init+0x3b8>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 8089 	beq.w	80025a6 <HAL_GPIO_Init+0x36a>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	2b09      	cmp	r3, #9
 800249a:	f000 8084 	beq.w	80025a6 <HAL_GPIO_Init+0x36a>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d07f      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d07b      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d077      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d073      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d06f      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d06b      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d067      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d063      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d05f      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	2b03      	cmp	r3, #3
 80024ec:	d05b      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d057      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d053      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	2b04      	cmp	r3, #4
 8002504:	d04f      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	2b05      	cmp	r3, #5
 800250c:	d04b      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	2b05      	cmp	r3, #5
 8002514:	d047      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	2b09      	cmp	r3, #9
 800251c:	d043      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2b06      	cmp	r3, #6
 8002524:	d03f      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	2b09      	cmp	r3, #9
 800252c:	d03b      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	2b07      	cmp	r3, #7
 8002534:	d037      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	2b07      	cmp	r3, #7
 800253c:	d033      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	2b07      	cmp	r3, #7
 8002544:	d02f      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	2b08      	cmp	r3, #8
 800254c:	d02b      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	2b08      	cmp	r3, #8
 8002554:	d027      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	2b08      	cmp	r3, #8
 800255c:	d023      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	2b09      	cmp	r3, #9
 8002564:	d01f      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	2b09      	cmp	r3, #9
 800256c:	d01b      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	2b0a      	cmp	r3, #10
 8002574:	d017      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	2b0a      	cmp	r3, #10
 800257c:	d013      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	2b0c      	cmp	r3, #12
 8002584:	d00f      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	2b0c      	cmp	r3, #12
 800258c:	d00b      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	2b0c      	cmp	r3, #12
 8002594:	d007      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	2b0f      	cmp	r3, #15
 800259c:	d003      	beq.n	80025a6 <HAL_GPIO_Init+0x36a>
 800259e:	21de      	movs	r1, #222	@ 0xde
 80025a0:	4813      	ldr	r0, [pc, #76]	@ (80025f0 <HAL_GPIO_Init+0x3b4>)
 80025a2:	f7fe fad7 	bl	8000b54 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	08da      	lsrs	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3208      	adds	r2, #8
 80025ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	220f      	movs	r2, #15
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	691a      	ldr	r2, [r3, #16]
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	08da      	lsrs	r2, r3, #3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3208      	adds	r2, #8
 80025e8:	69b9      	ldr	r1, [r7, #24]
 80025ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80025ee:	e001      	b.n	80025f4 <HAL_GPIO_Init+0x3b8>
 80025f0:	0800c450 	.word	0x0800c450
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	2203      	movs	r2, #3
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0203 	and.w	r2, r3, #3
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80b4 	beq.w	800279e <HAL_GPIO_Init+0x562>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	4b5f      	ldr	r3, [pc, #380]	@ (80027b8 <HAL_GPIO_Init+0x57c>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263e:	4a5e      	ldr	r2, [pc, #376]	@ (80027b8 <HAL_GPIO_Init+0x57c>)
 8002640:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002644:	6453      	str	r3, [r2, #68]	@ 0x44
 8002646:	4b5c      	ldr	r3, [pc, #368]	@ (80027b8 <HAL_GPIO_Init+0x57c>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002652:	4a5a      	ldr	r2, [pc, #360]	@ (80027bc <HAL_GPIO_Init+0x580>)
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	089b      	lsrs	r3, r3, #2
 8002658:	3302      	adds	r3, #2
 800265a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	220f      	movs	r2, #15
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a51      	ldr	r2, [pc, #324]	@ (80027c0 <HAL_GPIO_Init+0x584>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d02b      	beq.n	80026d6 <HAL_GPIO_Init+0x49a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a50      	ldr	r2, [pc, #320]	@ (80027c4 <HAL_GPIO_Init+0x588>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d025      	beq.n	80026d2 <HAL_GPIO_Init+0x496>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a4f      	ldr	r2, [pc, #316]	@ (80027c8 <HAL_GPIO_Init+0x58c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d01f      	beq.n	80026ce <HAL_GPIO_Init+0x492>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a4e      	ldr	r2, [pc, #312]	@ (80027cc <HAL_GPIO_Init+0x590>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d019      	beq.n	80026ca <HAL_GPIO_Init+0x48e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a4d      	ldr	r2, [pc, #308]	@ (80027d0 <HAL_GPIO_Init+0x594>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d013      	beq.n	80026c6 <HAL_GPIO_Init+0x48a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a4c      	ldr	r2, [pc, #304]	@ (80027d4 <HAL_GPIO_Init+0x598>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d00d      	beq.n	80026c2 <HAL_GPIO_Init+0x486>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a4b      	ldr	r2, [pc, #300]	@ (80027d8 <HAL_GPIO_Init+0x59c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d007      	beq.n	80026be <HAL_GPIO_Init+0x482>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a4a      	ldr	r2, [pc, #296]	@ (80027dc <HAL_GPIO_Init+0x5a0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d101      	bne.n	80026ba <HAL_GPIO_Init+0x47e>
 80026b6:	2307      	movs	r3, #7
 80026b8:	e00e      	b.n	80026d8 <HAL_GPIO_Init+0x49c>
 80026ba:	2308      	movs	r3, #8
 80026bc:	e00c      	b.n	80026d8 <HAL_GPIO_Init+0x49c>
 80026be:	2306      	movs	r3, #6
 80026c0:	e00a      	b.n	80026d8 <HAL_GPIO_Init+0x49c>
 80026c2:	2305      	movs	r3, #5
 80026c4:	e008      	b.n	80026d8 <HAL_GPIO_Init+0x49c>
 80026c6:	2304      	movs	r3, #4
 80026c8:	e006      	b.n	80026d8 <HAL_GPIO_Init+0x49c>
 80026ca:	2303      	movs	r3, #3
 80026cc:	e004      	b.n	80026d8 <HAL_GPIO_Init+0x49c>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e002      	b.n	80026d8 <HAL_GPIO_Init+0x49c>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <HAL_GPIO_Init+0x49c>
 80026d6:	2300      	movs	r3, #0
 80026d8:	69fa      	ldr	r2, [r7, #28]
 80026da:	f002 0203 	and.w	r2, r2, #3
 80026de:	0092      	lsls	r2, r2, #2
 80026e0:	4093      	lsls	r3, r2
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026e8:	4934      	ldr	r1, [pc, #208]	@ (80027bc <HAL_GPIO_Init+0x580>)
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	089b      	lsrs	r3, r3, #2
 80026ee:	3302      	adds	r3, #2
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026f6:	4b3a      	ldr	r3, [pc, #232]	@ (80027e0 <HAL_GPIO_Init+0x5a4>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_GPIO_Init+0x4de>
        {
          temp |= iocurrent;
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800271a:	4a31      	ldr	r2, [pc, #196]	@ (80027e0 <HAL_GPIO_Init+0x5a4>)
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002720:	4b2f      	ldr	r3, [pc, #188]	@ (80027e0 <HAL_GPIO_Init+0x5a4>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_GPIO_Init+0x508>
        {
          temp |= iocurrent;
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002744:	4a26      	ldr	r2, [pc, #152]	@ (80027e0 <HAL_GPIO_Init+0x5a4>)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800274a:	4b25      	ldr	r3, [pc, #148]	@ (80027e0 <HAL_GPIO_Init+0x5a4>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_GPIO_Init+0x532>
        {
          temp |= iocurrent;
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800276e:	4a1c      	ldr	r2, [pc, #112]	@ (80027e0 <HAL_GPIO_Init+0x5a4>)
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002774:	4b1a      	ldr	r3, [pc, #104]	@ (80027e0 <HAL_GPIO_Init+0x5a4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <HAL_GPIO_Init+0x55c>
        {
          temp |= iocurrent;
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002798:	4a11      	ldr	r2, [pc, #68]	@ (80027e0 <HAL_GPIO_Init+0x5a4>)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3301      	adds	r3, #1
 80027a2:	61fb      	str	r3, [r7, #28]
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	2b0f      	cmp	r3, #15
 80027a8:	f67f adda 	bls.w	8002360 <HAL_GPIO_Init+0x124>
      }
    }
  }
}
 80027ac:	bf00      	nop
 80027ae:	bf00      	nop
 80027b0:	3720      	adds	r7, #32
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40013800 	.word	0x40013800
 80027c0:	40020000 	.word	0x40020000
 80027c4:	40020400 	.word	0x40020400
 80027c8:	40020800 	.word	0x40020800
 80027cc:	40020c00 	.word	0x40020c00
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40021400 	.word	0x40021400
 80027d8:	40021800 	.word	0x40021800
 80027dc:	40021c00 	.word	0x40021c00
 80027e0:	40013c00 	.word	0x40013c00

080027e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	807b      	strh	r3, [r7, #2]
 80027f0:	4613      	mov	r3, r2
 80027f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80027f4:	887b      	ldrh	r3, [r7, #2]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d104      	bne.n	8002804 <HAL_GPIO_WritePin+0x20>
 80027fa:	f240 119d 	movw	r1, #413	@ 0x19d
 80027fe:	480e      	ldr	r0, [pc, #56]	@ (8002838 <HAL_GPIO_WritePin+0x54>)
 8002800:	f7fe f9a8 	bl	8000b54 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002804:	787b      	ldrb	r3, [r7, #1]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d007      	beq.n	800281a <HAL_GPIO_WritePin+0x36>
 800280a:	787b      	ldrb	r3, [r7, #1]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d004      	beq.n	800281a <HAL_GPIO_WritePin+0x36>
 8002810:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 8002814:	4808      	ldr	r0, [pc, #32]	@ (8002838 <HAL_GPIO_WritePin+0x54>)
 8002816:	f7fe f99d 	bl	8000b54 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800281a:	787b      	ldrb	r3, [r7, #1]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002820:	887a      	ldrh	r2, [r7, #2]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002826:	e003      	b.n	8002830 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002828:	887b      	ldrh	r3, [r7, #2]
 800282a:	041a      	lsls	r2, r3, #16
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	619a      	str	r2, [r3, #24]
}
 8002830:	bf00      	nop
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	0800c450 	.word	0x0800c450

0800283c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002848:	887b      	ldrh	r3, [r7, #2]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d104      	bne.n	8002858 <HAL_GPIO_TogglePin+0x1c>
 800284e:	f44f 71db 	mov.w	r1, #438	@ 0x1b6
 8002852:	480a      	ldr	r0, [pc, #40]	@ (800287c <HAL_GPIO_TogglePin+0x40>)
 8002854:	f7fe f97e 	bl	8000b54 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800285e:	887a      	ldrh	r2, [r7, #2]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4013      	ands	r3, r2
 8002864:	041a      	lsls	r2, r3, #16
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	43d9      	mvns	r1, r3
 800286a:	887b      	ldrh	r3, [r7, #2]
 800286c:	400b      	ands	r3, r1
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	619a      	str	r2, [r3, #24]
}
 8002874:	bf00      	nop
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	0800c450 	.word	0x0800c450

08002880 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800288a:	4b08      	ldr	r3, [pc, #32]	@ (80028ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	88fb      	ldrh	r3, [r7, #6]
 8002890:	4013      	ands	r3, r2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d006      	beq.n	80028a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002896:	4a05      	ldr	r2, [pc, #20]	@ (80028ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800289c:	88fb      	ldrh	r3, [r7, #6]
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 f806 	bl	80028b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80028a4:	bf00      	nop
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40013c00 	.word	0x40013c00

080028b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
	...

080028c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e10f      	b.n	8002afa <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028e2:	d008      	beq.n	80028f6 <HAL_PCD_Init+0x2e>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a86      	ldr	r2, [pc, #536]	@ (8002b04 <HAL_PCD_Init+0x23c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d003      	beq.n	80028f6 <HAL_PCD_Init+0x2e>
 80028ee:	2189      	movs	r1, #137	@ 0x89
 80028f0:	4885      	ldr	r0, [pc, #532]	@ (8002b08 <HAL_PCD_Init+0x240>)
 80028f2:	f7fe f92f 	bl	8000b54 <assert_failed>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	d106      	bne.n	8002916 <HAL_PCD_Init+0x4e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7fe fd37 	bl	8001384 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2203      	movs	r2, #3
 800291a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002924:	d102      	bne.n	800292c <HAL_PCD_Init+0x64>
  {
    hpcd->Init.dma_enable = 0U;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f005 fe2c 	bl	800858e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	7c1a      	ldrb	r2, [r3, #16]
 800293e:	f88d 2000 	strb.w	r2, [sp]
 8002942:	3304      	adds	r3, #4
 8002944:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002946:	f005 fd0b 	bl	8008360 <USB_CoreInit>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_PCD_Init+0x94>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e0ce      	b.n	8002afa <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2100      	movs	r1, #0
 8002962:	4618      	mov	r0, r3
 8002964:	f005 fe24 	bl	80085b0 <USB_SetCurrentMode>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d005      	beq.n	800297a <HAL_PCD_Init+0xb2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2202      	movs	r2, #2
 8002972:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e0bf      	b.n	8002afa <HAL_PCD_Init+0x232>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800297a:	2300      	movs	r3, #0
 800297c:	73fb      	strb	r3, [r7, #15]
 800297e:	e04a      	b.n	8002a16 <HAL_PCD_Init+0x14e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002980:	7bfa      	ldrb	r2, [r7, #15]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	4413      	add	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	3315      	adds	r3, #21
 8002990:	2201      	movs	r2, #1
 8002992:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002994:	7bfa      	ldrb	r2, [r7, #15]
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4413      	add	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	3314      	adds	r3, #20
 80029a4:	7bfa      	ldrb	r2, [r7, #15]
 80029a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029a8:	7bfa      	ldrb	r2, [r7, #15]
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	b298      	uxth	r0, r3
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4413      	add	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	332e      	adds	r3, #46	@ 0x2e
 80029bc:	4602      	mov	r2, r0
 80029be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029c0:	7bfa      	ldrb	r2, [r7, #15]
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4413      	add	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	3318      	adds	r3, #24
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029d4:	7bfa      	ldrb	r2, [r7, #15]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	331c      	adds	r3, #28
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029e8:	7bfa      	ldrb	r2, [r7, #15]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	3320      	adds	r3, #32
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029fc:	7bfa      	ldrb	r2, [r7, #15]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	4413      	add	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	3324      	adds	r3, #36	@ 0x24
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	3301      	adds	r3, #1
 8002a14:	73fb      	strb	r3, [r7, #15]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	791b      	ldrb	r3, [r3, #4]
 8002a1a:	7bfa      	ldrb	r2, [r7, #15]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d3af      	bcc.n	8002980 <HAL_PCD_Init+0xb8>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a20:	2300      	movs	r3, #0
 8002a22:	73fb      	strb	r3, [r7, #15]
 8002a24:	e044      	b.n	8002ab0 <HAL_PCD_Init+0x1e8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a26:	7bfa      	ldrb	r2, [r7, #15]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	4413      	add	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	440b      	add	r3, r1
 8002a34:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a3c:	7bfa      	ldrb	r2, [r7, #15]
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4413      	add	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002a4e:	7bfa      	ldrb	r2, [r7, #15]
 8002a50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a52:	7bfa      	ldrb	r2, [r7, #15]
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	4613      	mov	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	440b      	add	r3, r1
 8002a60:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a68:	7bfa      	ldrb	r2, [r7, #15]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4413      	add	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a7e:	7bfa      	ldrb	r2, [r7, #15]
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a94:	7bfa      	ldrb	r2, [r7, #15]
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
 8002aac:	3301      	adds	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	791b      	ldrb	r3, [r3, #4]
 8002ab4:	7bfa      	ldrb	r2, [r7, #15]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d3b5      	bcc.n	8002a26 <HAL_PCD_Init+0x15e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6818      	ldr	r0, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	7c1a      	ldrb	r2, [r3, #16]
 8002ac2:	f88d 2000 	strb.w	r2, [sp]
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aca:	f005 fdbd 	bl	8008648 <USB_DevInit>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_PCD_Init+0x218>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e00c      	b.n	8002afa <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f006 fe07 	bl	8009706 <USB_DevDisconnect>

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40040000 	.word	0x40040000
 8002b08:	0800c4c8 	.word	0x0800c4c8

08002b0c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_PCD_Start+0x1c>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e022      	b.n	8002b6e <HAL_PCD_Start+0x62>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d009      	beq.n	8002b50 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d105      	bne.n	8002b50 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b48:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f005 fd09 	bl	800856c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f006 fdb0 	bl	80096c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b76:	b590      	push	{r4, r7, lr}
 8002b78:	b08d      	sub	sp, #52	@ 0x34
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f006 fe6e 	bl	800986e <USB_GetMode>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f040 848c 	bne.w	80034b2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f006 fdd2 	bl	8009748 <USB_ReadInterrupts>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 8482 	beq.w	80034b0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	0a1b      	lsrs	r3, r3, #8
 8002bb6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f006 fdbf 	bl	8009748 <USB_ReadInterrupts>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d107      	bne.n	8002be4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695a      	ldr	r2, [r3, #20]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f002 0202 	and.w	r2, r2, #2
 8002be2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f006 fdad 	bl	8009748 <USB_ReadInterrupts>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	2b10      	cmp	r3, #16
 8002bf6:	d161      	bne.n	8002cbc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699a      	ldr	r2, [r3, #24]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0210 	bic.w	r2, r2, #16
 8002c06:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	f003 020f 	and.w	r2, r3, #15
 8002c14:	4613      	mov	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	4413      	add	r3, r2
 8002c24:	3304      	adds	r3, #4
 8002c26:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	0c5b      	lsrs	r3, r3, #17
 8002c2c:	f003 030f 	and.w	r3, r3, #15
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d124      	bne.n	8002c7e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d035      	beq.n	8002cac <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	091b      	lsrs	r3, r3, #4
 8002c48:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	461a      	mov	r2, r3
 8002c52:	6a38      	ldr	r0, [r7, #32]
 8002c54:	f006 fbe4 	bl	8009420 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	091b      	lsrs	r3, r3, #4
 8002c60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c64:	441a      	add	r2, r3
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	695a      	ldr	r2, [r3, #20]
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	091b      	lsrs	r3, r3, #4
 8002c72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c76:	441a      	add	r2, r3
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	615a      	str	r2, [r3, #20]
 8002c7c:	e016      	b.n	8002cac <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	0c5b      	lsrs	r3, r3, #17
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	2b06      	cmp	r3, #6
 8002c88:	d110      	bne.n	8002cac <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c90:	2208      	movs	r2, #8
 8002c92:	4619      	mov	r1, r3
 8002c94:	6a38      	ldr	r0, [r7, #32]
 8002c96:	f006 fbc3 	bl	8009420 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ca6:	441a      	add	r2, r3
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699a      	ldr	r2, [r3, #24]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0210 	orr.w	r2, r2, #16
 8002cba:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f006 fd41 	bl	8009748 <USB_ReadInterrupts>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ccc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002cd0:	f040 80a7 	bne.w	8002e22 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f006 fd46 	bl	800976e <USB_ReadDevAllOutEpInterrupt>
 8002ce2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002ce4:	e099      	b.n	8002e1a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 808e 	beq.w	8002e0e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f006 fd6a 	bl	80097d6 <USB_ReadDevOutEPInterrupt>
 8002d02:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00c      	beq.n	8002d28 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002d20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 fea4 	bl	8003a70 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00c      	beq.n	8002d4c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d34:	015a      	lsls	r2, r3, #5
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	4413      	add	r3, r2
 8002d3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d3e:	461a      	mov	r2, r3
 8002d40:	2308      	movs	r3, #8
 8002d42:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002d44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 ff7a 	bl	8003c40 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	f003 0310 	and.w	r3, r3, #16
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d008      	beq.n	8002d68 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d58:	015a      	lsls	r2, r3, #5
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d62:	461a      	mov	r2, r3
 8002d64:	2310      	movs	r3, #16
 8002d66:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d030      	beq.n	8002dd4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d7a:	2b80      	cmp	r3, #128	@ 0x80
 8002d7c:	d109      	bne.n	8002d92 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	69fa      	ldr	r2, [r7, #28]
 8002d88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d8c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d90:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d94:	4613      	mov	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	4413      	add	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	4413      	add	r3, r2
 8002da4:	3304      	adds	r3, #4
 8002da6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	78db      	ldrb	r3, [r3, #3]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d108      	bne.n	8002dc2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2200      	movs	r2, #0
 8002db4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	4619      	mov	r1, r3
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7fe fbe7 	bl	8001590 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc4:	015a      	lsls	r2, r3, #5
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	4413      	add	r3, r2
 8002dca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dce:	461a      	mov	r2, r3
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f003 0320 	and.w	r3, r3, #32
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d008      	beq.n	8002df0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dea:	461a      	mov	r2, r3
 8002dec:	2320      	movs	r3, #32
 8002dee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d009      	beq.n	8002e0e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfc:	015a      	lsls	r2, r3, #5
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e06:	461a      	mov	r2, r3
 8002e08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e0c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e10:	3301      	adds	r3, #1
 8002e12:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e16:	085b      	lsrs	r3, r3, #1
 8002e18:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f47f af62 	bne.w	8002ce6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f006 fc8e 	bl	8009748 <USB_ReadInterrupts>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e36:	f040 80db 	bne.w	8002ff0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f006 fcaf 	bl	80097a2 <USB_ReadDevAllInEpInterrupt>
 8002e44:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002e4a:	e0cd      	b.n	8002fe8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 80c2 	beq.w	8002fdc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	4611      	mov	r1, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f006 fcd5 	bl	8009812 <USB_ReadDevInEPInterrupt>
 8002e68:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d057      	beq.n	8002f24 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69f9      	ldr	r1, [r7, #28]
 8002e90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002e94:	4013      	ands	r3, r2
 8002e96:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	799b      	ldrb	r3, [r3, #6]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d132      	bne.n	8002f18 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4413      	add	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3320      	adds	r3, #32
 8002ec2:	6819      	ldr	r1, [r3, #0]
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ec8:	4613      	mov	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	4413      	add	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4403      	add	r3, r0
 8002ed2:	331c      	adds	r3, #28
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4419      	add	r1, r3
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002edc:	4613      	mov	r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4403      	add	r3, r0
 8002ee6:	3320      	adds	r3, #32
 8002ee8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d113      	bne.n	8002f18 <HAL_PCD_IRQHandler+0x3a2>
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	3324      	adds	r3, #36	@ 0x24
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d108      	bne.n	8002f18 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f10:	461a      	mov	r2, r3
 8002f12:	2101      	movs	r1, #1
 8002f14:	f006 fcdc 	bl	80098d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7fe fab1 	bl	8001486 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d008      	beq.n	8002f40 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f30:	015a      	lsls	r2, r3, #5
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	4413      	add	r3, r2
 8002f36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	2308      	movs	r3, #8
 8002f3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d008      	beq.n	8002f5c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4c:	015a      	lsls	r2, r3, #5
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f56:	461a      	mov	r2, r3
 8002f58:	2310      	movs	r3, #16
 8002f5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d008      	beq.n	8002f78 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f68:	015a      	lsls	r2, r3, #5
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f72:	461a      	mov	r2, r3
 8002f74:	2340      	movs	r3, #64	@ 0x40
 8002f76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d023      	beq.n	8002fca <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002f82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f84:	6a38      	ldr	r0, [r7, #32]
 8002f86:	f005 fcc3 	bl	8008910 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	4413      	add	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	3310      	adds	r3, #16
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	4413      	add	r3, r2
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	78db      	ldrb	r3, [r3, #3]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d108      	bne.n	8002fb8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7fe fafe 	bl	80015b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002fd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 fcbd 	bl	8003956 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fde:	3301      	adds	r3, #1
 8002fe0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe4:	085b      	lsrs	r3, r3, #1
 8002fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f47f af2e 	bne.w	8002e4c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f006 fba7 	bl	8009748 <USB_ReadInterrupts>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003000:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003004:	d122      	bne.n	800304c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	69fa      	ldr	r2, [r7, #28]
 8003010:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003014:	f023 0301 	bic.w	r3, r3, #1
 8003018:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003020:	2b01      	cmp	r3, #1
 8003022:	d108      	bne.n	8003036 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800302c:	2100      	movs	r1, #0
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fea4 	bl	8003d7c <HAL_PCDEx_LPM_Callback>
 8003034:	e002      	b.n	800303c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fe fa9c 	bl	8001574 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	695a      	ldr	r2, [r3, #20]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800304a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f006 fb79 	bl	8009748 <USB_ReadInterrupts>
 8003056:	4603      	mov	r3, r0
 8003058:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800305c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003060:	d112      	bne.n	8003088 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b01      	cmp	r3, #1
 8003070:	d102      	bne.n	8003078 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7fe fa58 	bl	8001528 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695a      	ldr	r2, [r3, #20]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003086:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f006 fb5b 	bl	8009748 <USB_ReadInterrupts>
 8003092:	4603      	mov	r3, r0
 8003094:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003098:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800309c:	f040 80b7 	bne.w	800320e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	69fa      	ldr	r2, [r7, #28]
 80030aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030ae:	f023 0301 	bic.w	r3, r3, #1
 80030b2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2110      	movs	r1, #16
 80030ba:	4618      	mov	r0, r3
 80030bc:	f005 fc28 	bl	8008910 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030c0:	2300      	movs	r3, #0
 80030c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030c4:	e046      	b.n	8003154 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80030c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c8:	015a      	lsls	r2, r3, #5
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030d2:	461a      	mov	r2, r3
 80030d4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80030d8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80030da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030dc:	015a      	lsls	r2, r3, #5
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	4413      	add	r3, r2
 80030e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030ea:	0151      	lsls	r1, r2, #5
 80030ec:	69fa      	ldr	r2, [r7, #28]
 80030ee:	440a      	add	r2, r1
 80030f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80030f4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80030f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80030fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030fc:	015a      	lsls	r2, r3, #5
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	4413      	add	r3, r2
 8003102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003106:	461a      	mov	r2, r3
 8003108:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800310c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800310e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003110:	015a      	lsls	r2, r3, #5
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	4413      	add	r3, r2
 8003116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800311e:	0151      	lsls	r1, r2, #5
 8003120:	69fa      	ldr	r2, [r7, #28]
 8003122:	440a      	add	r2, r1
 8003124:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003128:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800312c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800312e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003130:	015a      	lsls	r2, r3, #5
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	4413      	add	r3, r2
 8003136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800313e:	0151      	lsls	r1, r2, #5
 8003140:	69fa      	ldr	r2, [r7, #28]
 8003142:	440a      	add	r2, r1
 8003144:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003148:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800314c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800314e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003150:	3301      	adds	r3, #1
 8003152:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	791b      	ldrb	r3, [r3, #4]
 8003158:	461a      	mov	r2, r3
 800315a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800315c:	4293      	cmp	r3, r2
 800315e:	d3b2      	bcc.n	80030c6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	69fa      	ldr	r2, [r7, #28]
 800316a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800316e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003172:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	7bdb      	ldrb	r3, [r3, #15]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d016      	beq.n	80031aa <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003182:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003186:	69fa      	ldr	r2, [r7, #28]
 8003188:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800318c:	f043 030b 	orr.w	r3, r3, #11
 8003190:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800319a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319c:	69fa      	ldr	r2, [r7, #28]
 800319e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031a2:	f043 030b 	orr.w	r3, r3, #11
 80031a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80031a8:	e015      	b.n	80031d6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031b8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80031bc:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80031c0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	69fa      	ldr	r2, [r7, #28]
 80031cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031d0:	f043 030b 	orr.w	r3, r3, #11
 80031d4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	69fa      	ldr	r2, [r7, #28]
 80031e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031e4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80031e8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031f8:	461a      	mov	r2, r3
 80031fa:	f006 fb69 	bl	80098d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695a      	ldr	r2, [r3, #20]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800320c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f006 fa98 	bl	8009748 <USB_ReadInterrupts>
 8003218:	4603      	mov	r3, r0
 800321a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800321e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003222:	d123      	bne.n	800326c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f006 fb2e 	bl	800988a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f005 fbe5 	bl	8008a02 <USB_GetDevSpeed>
 8003238:	4603      	mov	r3, r0
 800323a:	461a      	mov	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681c      	ldr	r4, [r3, #0]
 8003244:	f001 fb80 	bl	8004948 <HAL_RCC_GetHCLKFreq>
 8003248:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800324e:	461a      	mov	r2, r3
 8003250:	4620      	mov	r0, r4
 8003252:	f005 f8e9 	bl	8008428 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fe f93d 	bl	80014d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695a      	ldr	r2, [r3, #20]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800326a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f006 fa69 	bl	8009748 <USB_ReadInterrupts>
 8003276:	4603      	mov	r3, r0
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	2b08      	cmp	r3, #8
 800327e:	d10a      	bne.n	8003296 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7fe f91a 	bl	80014ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695a      	ldr	r2, [r3, #20]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f002 0208 	and.w	r2, r2, #8
 8003294:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f006 fa54 	bl	8009748 <USB_ReadInterrupts>
 80032a0:	4603      	mov	r3, r0
 80032a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a6:	2b80      	cmp	r3, #128	@ 0x80
 80032a8:	d123      	bne.n	80032f2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032b6:	2301      	movs	r3, #1
 80032b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80032ba:	e014      	b.n	80032e6 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032c0:	4613      	mov	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d105      	bne.n	80032e0 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80032d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	4619      	mov	r1, r3
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fb0a 	bl	80038f4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e2:	3301      	adds	r3, #1
 80032e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	791b      	ldrb	r3, [r3, #4]
 80032ea:	461a      	mov	r2, r3
 80032ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d3e4      	bcc.n	80032bc <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f006 fa26 	bl	8009748 <USB_ReadInterrupts>
 80032fc:	4603      	mov	r3, r0
 80032fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003302:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003306:	d13c      	bne.n	8003382 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003308:	2301      	movs	r3, #1
 800330a:	627b      	str	r3, [r7, #36]	@ 0x24
 800330c:	e02b      	b.n	8003366 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800330e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003310:	015a      	lsls	r2, r3, #5
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	4413      	add	r3, r2
 8003316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003322:	4613      	mov	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	4413      	add	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	3318      	adds	r3, #24
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d115      	bne.n	8003360 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003334:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003336:	2b00      	cmp	r3, #0
 8003338:	da12      	bge.n	8003360 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800333e:	4613      	mov	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	4413      	add	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	3317      	adds	r3, #23
 800334a:	2201      	movs	r2, #1
 800334c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800334e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003350:	b2db      	uxtb	r3, r3
 8003352:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003356:	b2db      	uxtb	r3, r3
 8003358:	4619      	mov	r1, r3
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 faca 	bl	80038f4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003362:	3301      	adds	r3, #1
 8003364:	627b      	str	r3, [r7, #36]	@ 0x24
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	791b      	ldrb	r3, [r3, #4]
 800336a:	461a      	mov	r2, r3
 800336c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336e:	4293      	cmp	r3, r2
 8003370:	d3cd      	bcc.n	800330e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695a      	ldr	r2, [r3, #20]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003380:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f006 f9de 	bl	8009748 <USB_ReadInterrupts>
 800338c:	4603      	mov	r3, r0
 800338e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003392:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003396:	d156      	bne.n	8003446 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003398:	2301      	movs	r3, #1
 800339a:	627b      	str	r3, [r7, #36]	@ 0x24
 800339c:	e045      	b.n	800342a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800339e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033b2:	4613      	mov	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	4413      	add	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d12e      	bne.n	8003424 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033c6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	da2b      	bge.n	8003424 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80033d8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033dc:	429a      	cmp	r2, r3
 80033de:	d121      	bne.n	8003424 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033e4:	4613      	mov	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4413      	add	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80033f2:	2201      	movs	r2, #1
 80033f4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10a      	bne.n	8003424 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	69fa      	ldr	r2, [r7, #28]
 8003418:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800341c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003420:	6053      	str	r3, [r2, #4]
            break;
 8003422:	e008      	b.n	8003436 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003426:	3301      	adds	r3, #1
 8003428:	627b      	str	r3, [r7, #36]	@ 0x24
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	791b      	ldrb	r3, [r3, #4]
 800342e:	461a      	mov	r2, r3
 8003430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003432:	4293      	cmp	r3, r2
 8003434:	d3b3      	bcc.n	800339e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695a      	ldr	r2, [r3, #20]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003444:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f006 f97c 	bl	8009748 <USB_ReadInterrupts>
 8003450:	4603      	mov	r3, r0
 8003452:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800345a:	d10a      	bne.n	8003472 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7fe f8bb 	bl	80015d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695a      	ldr	r2, [r3, #20]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003470:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f006 f966 	bl	8009748 <USB_ReadInterrupts>
 800347c:	4603      	mov	r3, r0
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b04      	cmp	r3, #4
 8003484:	d115      	bne.n	80034b2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7fe f8ab 	bl	80015f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6859      	ldr	r1, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	e000      	b.n	80034b2 <HAL_PCD_IRQHandler+0x93c>
      return;
 80034b0:	bf00      	nop
    }
  }
}
 80034b2:	3734      	adds	r7, #52	@ 0x34
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd90      	pop	{r4, r7, pc}

080034b8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d101      	bne.n	80034d2 <HAL_PCD_SetAddress+0x1a>
 80034ce:	2302      	movs	r3, #2
 80034d0:	e012      	b.n	80034f8 <HAL_PCD_SetAddress+0x40>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	78fa      	ldrb	r2, [r7, #3]
 80034de:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	78fa      	ldrb	r2, [r7, #3]
 80034e6:	4611      	mov	r1, r2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f006 f8c5 	bl	8009678 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	4608      	mov	r0, r1
 800350a:	4611      	mov	r1, r2
 800350c:	461a      	mov	r2, r3
 800350e:	4603      	mov	r3, r0
 8003510:	70fb      	strb	r3, [r7, #3]
 8003512:	460b      	mov	r3, r1
 8003514:	803b      	strh	r3, [r7, #0]
 8003516:	4613      	mov	r3, r2
 8003518:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800351e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003522:	2b00      	cmp	r3, #0
 8003524:	da0f      	bge.n	8003546 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003526:	78fb      	ldrb	r3, [r7, #3]
 8003528:	f003 020f 	and.w	r2, r3, #15
 800352c:	4613      	mov	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	3310      	adds	r3, #16
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	4413      	add	r3, r2
 800353a:	3304      	adds	r3, #4
 800353c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2201      	movs	r2, #1
 8003542:	705a      	strb	r2, [r3, #1]
 8003544:	e00f      	b.n	8003566 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003546:	78fb      	ldrb	r3, [r7, #3]
 8003548:	f003 020f 	and.w	r2, r3, #15
 800354c:	4613      	mov	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	4413      	add	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	4413      	add	r3, r2
 800355c:	3304      	adds	r3, #4
 800355e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003566:	78fb      	ldrb	r3, [r7, #3]
 8003568:	f003 030f 	and.w	r3, r3, #15
 800356c:	b2da      	uxtb	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003572:	883b      	ldrh	r3, [r7, #0]
 8003574:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	78ba      	ldrb	r2, [r7, #2]
 8003580:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	785b      	ldrb	r3, [r3, #1]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d004      	beq.n	8003594 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	461a      	mov	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003594:	78bb      	ldrb	r3, [r7, #2]
 8003596:	2b02      	cmp	r3, #2
 8003598:	d102      	bne.n	80035a0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d101      	bne.n	80035ae <HAL_PCD_EP_Open+0xae>
 80035aa:	2302      	movs	r3, #2
 80035ac:	e00e      	b.n	80035cc <HAL_PCD_EP_Open+0xcc>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68f9      	ldr	r1, [r7, #12]
 80035bc:	4618      	mov	r0, r3
 80035be:	f005 fa45 	bl	8008a4c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80035ca:	7afb      	ldrb	r3, [r7, #11]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	460b      	mov	r3, r1
 80035de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	da0f      	bge.n	8003608 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	f003 020f 	and.w	r2, r3, #15
 80035ee:	4613      	mov	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	3310      	adds	r3, #16
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	4413      	add	r3, r2
 80035fc:	3304      	adds	r3, #4
 80035fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2201      	movs	r2, #1
 8003604:	705a      	strb	r2, [r3, #1]
 8003606:	e00f      	b.n	8003628 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003608:	78fb      	ldrb	r3, [r7, #3]
 800360a:	f003 020f 	and.w	r2, r3, #15
 800360e:	4613      	mov	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	4413      	add	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	4413      	add	r3, r2
 800361e:	3304      	adds	r3, #4
 8003620:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003628:	78fb      	ldrb	r3, [r7, #3]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	b2da      	uxtb	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <HAL_PCD_EP_Close+0x6e>
 800363e:	2302      	movs	r3, #2
 8003640:	e00e      	b.n	8003660 <HAL_PCD_EP_Close+0x8c>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68f9      	ldr	r1, [r7, #12]
 8003650:	4618      	mov	r0, r3
 8003652:	f005 fa83 	bl	8008b5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	607a      	str	r2, [r7, #4]
 8003672:	603b      	str	r3, [r7, #0]
 8003674:	460b      	mov	r3, r1
 8003676:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003678:	7afb      	ldrb	r3, [r7, #11]
 800367a:	f003 020f 	and.w	r2, r3, #15
 800367e:	4613      	mov	r3, r2
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	4413      	add	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4413      	add	r3, r2
 800368e:	3304      	adds	r3, #4
 8003690:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2200      	movs	r2, #0
 80036a2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	2200      	movs	r2, #0
 80036a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036aa:	7afb      	ldrb	r3, [r7, #11]
 80036ac:	f003 030f 	and.w	r3, r3, #15
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	799b      	ldrb	r3, [r3, #6]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d102      	bne.n	80036c4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6818      	ldr	r0, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	799b      	ldrb	r3, [r3, #6]
 80036cc:	461a      	mov	r2, r3
 80036ce:	6979      	ldr	r1, [r7, #20]
 80036d0:	f005 fb20 	bl	8008d14 <USB_EPStartXfer>

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
 80036e6:	460b      	mov	r3, r1
 80036e8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80036ea:	78fb      	ldrb	r3, [r7, #3]
 80036ec:	f003 020f 	and.w	r2, r3, #15
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	4613      	mov	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	4413      	add	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	440b      	add	r3, r1
 80036fc:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003700:	681b      	ldr	r3, [r3, #0]
}
 8003702:	4618      	mov	r0, r3
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b086      	sub	sp, #24
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
 800371a:	460b      	mov	r3, r1
 800371c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800371e:	7afb      	ldrb	r3, [r7, #11]
 8003720:	f003 020f 	and.w	r2, r3, #15
 8003724:	4613      	mov	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	3310      	adds	r3, #16
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	4413      	add	r3, r2
 8003732:	3304      	adds	r3, #4
 8003734:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2200      	movs	r2, #0
 8003746:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	2201      	movs	r2, #1
 800374c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800374e:	7afb      	ldrb	r3, [r7, #11]
 8003750:	f003 030f 	and.w	r3, r3, #15
 8003754:	b2da      	uxtb	r2, r3
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	799b      	ldrb	r3, [r3, #6]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d102      	bne.n	8003768 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	799b      	ldrb	r3, [r3, #6]
 8003770:	461a      	mov	r2, r3
 8003772:	6979      	ldr	r1, [r7, #20]
 8003774:	f005 face 	bl	8008d14 <USB_EPStartXfer>

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b084      	sub	sp, #16
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	460b      	mov	r3, r1
 800378c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800378e:	78fb      	ldrb	r3, [r7, #3]
 8003790:	f003 030f 	and.w	r3, r3, #15
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	7912      	ldrb	r2, [r2, #4]
 8003798:	4293      	cmp	r3, r2
 800379a:	d901      	bls.n	80037a0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e04f      	b.n	8003840 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	da0f      	bge.n	80037c8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037a8:	78fb      	ldrb	r3, [r7, #3]
 80037aa:	f003 020f 	and.w	r2, r3, #15
 80037ae:	4613      	mov	r3, r2
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	4413      	add	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	3310      	adds	r3, #16
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	4413      	add	r3, r2
 80037bc:	3304      	adds	r3, #4
 80037be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2201      	movs	r2, #1
 80037c4:	705a      	strb	r2, [r3, #1]
 80037c6:	e00d      	b.n	80037e4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037c8:	78fa      	ldrb	r2, [r7, #3]
 80037ca:	4613      	mov	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4413      	add	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	4413      	add	r3, r2
 80037da:	3304      	adds	r3, #4
 80037dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2201      	movs	r2, #1
 80037e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037ea:	78fb      	ldrb	r3, [r7, #3]
 80037ec:	f003 030f 	and.w	r3, r3, #15
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d101      	bne.n	8003804 <HAL_PCD_EP_SetStall+0x82>
 8003800:	2302      	movs	r3, #2
 8003802:	e01d      	b.n	8003840 <HAL_PCD_EP_SetStall+0xbe>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68f9      	ldr	r1, [r7, #12]
 8003812:	4618      	mov	r0, r3
 8003814:	f005 fe5c 	bl	80094d0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003818:	78fb      	ldrb	r3, [r7, #3]
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	2b00      	cmp	r3, #0
 8003820:	d109      	bne.n	8003836 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6818      	ldr	r0, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	7999      	ldrb	r1, [r3, #6]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003830:	461a      	mov	r2, r3
 8003832:	f006 f84d 	bl	80098d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	460b      	mov	r3, r1
 8003852:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003854:	78fb      	ldrb	r3, [r7, #3]
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	7912      	ldrb	r2, [r2, #4]
 800385e:	4293      	cmp	r3, r2
 8003860:	d901      	bls.n	8003866 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e042      	b.n	80038ec <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003866:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800386a:	2b00      	cmp	r3, #0
 800386c:	da0f      	bge.n	800388e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	f003 020f 	and.w	r2, r3, #15
 8003874:	4613      	mov	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	3310      	adds	r3, #16
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	4413      	add	r3, r2
 8003882:	3304      	adds	r3, #4
 8003884:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2201      	movs	r2, #1
 800388a:	705a      	strb	r2, [r3, #1]
 800388c:	e00f      	b.n	80038ae <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800388e:	78fb      	ldrb	r3, [r7, #3]
 8003890:	f003 020f 	and.w	r2, r3, #15
 8003894:	4613      	mov	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4413      	add	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	4413      	add	r3, r2
 80038a4:	3304      	adds	r3, #4
 80038a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038b4:	78fb      	ldrb	r3, [r7, #3]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d101      	bne.n	80038ce <HAL_PCD_EP_ClrStall+0x86>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e00e      	b.n	80038ec <HAL_PCD_EP_ClrStall+0xa4>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68f9      	ldr	r1, [r7, #12]
 80038dc:	4618      	mov	r0, r3
 80038de:	f005 fe65 	bl	80095ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003900:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003904:	2b00      	cmp	r3, #0
 8003906:	da0c      	bge.n	8003922 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	f003 020f 	and.w	r2, r3, #15
 800390e:	4613      	mov	r3, r2
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	4413      	add	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	3310      	adds	r3, #16
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	4413      	add	r3, r2
 800391c:	3304      	adds	r3, #4
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	e00c      	b.n	800393c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003922:	78fb      	ldrb	r3, [r7, #3]
 8003924:	f003 020f 	and.w	r2, r3, #15
 8003928:	4613      	mov	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	4413      	add	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	4413      	add	r3, r2
 8003938:	3304      	adds	r3, #4
 800393a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68f9      	ldr	r1, [r7, #12]
 8003942:	4618      	mov	r0, r3
 8003944:	f005 fc84 	bl	8009250 <USB_EPStopXfer>
 8003948:	4603      	mov	r3, r0
 800394a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800394c:	7afb      	ldrb	r3, [r7, #11]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b08a      	sub	sp, #40	@ 0x28
 800395a:	af02      	add	r7, sp, #8
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	4613      	mov	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	4413      	add	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	3310      	adds	r3, #16
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	4413      	add	r3, r2
 800397a:	3304      	adds	r3, #4
 800397c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	695a      	ldr	r2, [r3, #20]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	429a      	cmp	r2, r3
 8003988:	d901      	bls.n	800398e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e06b      	b.n	8003a66 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	691a      	ldr	r2, [r3, #16]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	69fa      	ldr	r2, [r7, #28]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d902      	bls.n	80039aa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	3303      	adds	r3, #3
 80039ae:	089b      	lsrs	r3, r3, #2
 80039b0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039b2:	e02a      	b.n	8003a0a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	69fa      	ldr	r2, [r7, #28]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d902      	bls.n	80039d0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	3303      	adds	r3, #3
 80039d4:	089b      	lsrs	r3, r3, #2
 80039d6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	68d9      	ldr	r1, [r3, #12]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	4603      	mov	r3, r0
 80039ec:	6978      	ldr	r0, [r7, #20]
 80039ee:	f005 fcd9 	bl	80093a4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	441a      	add	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	695a      	ldr	r2, [r3, #20]
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	441a      	add	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d809      	bhi.n	8003a34 <PCD_WriteEmptyTxFifo+0xde>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	695a      	ldr	r2, [r3, #20]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d203      	bcs.n	8003a34 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1bf      	bne.n	80039b4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d811      	bhi.n	8003a64 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	2201      	movs	r2, #1
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	6939      	ldr	r1, [r7, #16]
 8003a5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a60:	4013      	ands	r3, r2
 8003a62:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3720      	adds	r7, #32
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b088      	sub	sp, #32
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	333c      	adds	r3, #60	@ 0x3c
 8003a88:	3304      	adds	r3, #4
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	015a      	lsls	r2, r3, #5
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	4413      	add	r3, r2
 8003a96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	799b      	ldrb	r3, [r3, #6]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d17b      	bne.n	8003b9e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d015      	beq.n	8003adc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	4a61      	ldr	r2, [pc, #388]	@ (8003c38 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	f240 80b9 	bls.w	8003c2c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 80b3 	beq.w	8003c2c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	015a      	lsls	r2, r3, #5
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ad8:	6093      	str	r3, [r2, #8]
 8003ada:	e0a7      	b.n	8003c2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d009      	beq.n	8003afa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003af2:	461a      	mov	r2, r3
 8003af4:	2320      	movs	r3, #32
 8003af6:	6093      	str	r3, [r2, #8]
 8003af8:	e098      	b.n	8003c2c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f040 8093 	bne.w	8003c2c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	4a4b      	ldr	r2, [pc, #300]	@ (8003c38 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d90f      	bls.n	8003b2e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b24:	461a      	mov	r2, r3
 8003b26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b2a:	6093      	str	r3, [r2, #8]
 8003b2c:	e07e      	b.n	8003c2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	4613      	mov	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	4413      	add	r3, r2
 8003b40:	3304      	adds	r3, #4
 8003b42:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a1a      	ldr	r2, [r3, #32]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	0159      	lsls	r1, r3, #5
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	440b      	add	r3, r1
 8003b50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b5a:	1ad2      	subs	r2, r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d114      	bne.n	8003b90 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d109      	bne.n	8003b82 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6818      	ldr	r0, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b78:	461a      	mov	r2, r3
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	f005 fea8 	bl	80098d0 <USB_EP0_OutStart>
 8003b80:	e006      	b.n	8003b90 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	441a      	add	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	4619      	mov	r1, r3
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7fd fc5a 	bl	8001450 <HAL_PCD_DataOutStageCallback>
 8003b9c:	e046      	b.n	8003c2c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	4a26      	ldr	r2, [pc, #152]	@ (8003c3c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d124      	bne.n	8003bf0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bc2:	6093      	str	r3, [r2, #8]
 8003bc4:	e032      	b.n	8003c2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f003 0320 	and.w	r3, r3, #32
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d008      	beq.n	8003be2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bdc:	461a      	mov	r2, r3
 8003bde:	2320      	movs	r3, #32
 8003be0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	4619      	mov	r1, r3
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7fd fc31 	bl	8001450 <HAL_PCD_DataOutStageCallback>
 8003bee:	e01d      	b.n	8003c2c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d114      	bne.n	8003c20 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	4413      	add	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	440b      	add	r3, r1
 8003c04:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d108      	bne.n	8003c20 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c18:	461a      	mov	r2, r3
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	f005 fe58 	bl	80098d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	4619      	mov	r1, r3
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fd fc12 	bl	8001450 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3720      	adds	r7, #32
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	4f54300a 	.word	0x4f54300a
 8003c3c:	4f54310a 	.word	0x4f54310a

08003c40 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	333c      	adds	r3, #60	@ 0x3c
 8003c58:	3304      	adds	r3, #4
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4a15      	ldr	r2, [pc, #84]	@ (8003cc8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d90e      	bls.n	8003c94 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d009      	beq.n	8003c94 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c92:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7fd fbc9 	bl	800142c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8003cc8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d90c      	bls.n	8003cbc <PCD_EP_OutSetupPacket_int+0x7c>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	799b      	ldrb	r3, [r3, #6]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d108      	bne.n	8003cbc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6818      	ldr	r0, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	f005 fe0a 	bl	80098d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	4f54300a 	.word	0x4f54300a

08003ccc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	70fb      	strb	r3, [r7, #3]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ce4:	78fb      	ldrb	r3, [r7, #3]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d107      	bne.n	8003cfa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003cea:	883b      	ldrh	r3, [r7, #0]
 8003cec:	0419      	lsls	r1, r3, #16
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cf8:	e028      	b.n	8003d4c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d00:	0c1b      	lsrs	r3, r3, #16
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	4413      	add	r3, r2
 8003d06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d08:	2300      	movs	r3, #0
 8003d0a:	73fb      	strb	r3, [r7, #15]
 8003d0c:	e00d      	b.n	8003d2a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
 8003d14:	3340      	adds	r3, #64	@ 0x40
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	0c1b      	lsrs	r3, r3, #16
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	4413      	add	r3, r2
 8003d22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	3301      	adds	r3, #1
 8003d28:	73fb      	strb	r3, [r7, #15]
 8003d2a:	7bfa      	ldrb	r2, [r7, #15]
 8003d2c:	78fb      	ldrb	r3, [r7, #3]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d3ec      	bcc.n	8003d0e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003d34:	883b      	ldrh	r3, [r7, #0]
 8003d36:	0418      	lsls	r0, r3, #16
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6819      	ldr	r1, [r3, #0]
 8003d3c:	78fb      	ldrb	r3, [r7, #3]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	4302      	orrs	r2, r0
 8003d44:	3340      	adds	r3, #64	@ 0x40
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	460b      	mov	r3, r1
 8003d64:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	887a      	ldrh	r2, [r7, #2]
 8003d6c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8003d98:	4b06      	ldr	r3, [pc, #24]	@ (8003db4 <HAL_PWR_PVD_IRQHandler+0x20>)
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8003da4:	f000 f808 	bl	8003db8 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8003da8:	4b02      	ldr	r3, [pc, #8]	@ (8003db4 <HAL_PWR_PVD_IRQHandler+0x20>)
 8003daa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003dae:	615a      	str	r2, [r3, #20]
  }
}
 8003db0:	bf00      	nop
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40013c00 	.word	0x40013c00

08003db8 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8003dbc:	bf00      	nop
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
	...

08003dc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e318      	b.n	800440c <HAL_RCC_OscConfig+0x644>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b0f      	cmp	r3, #15
 8003de0:	d903      	bls.n	8003dea <HAL_RCC_OscConfig+0x22>
 8003de2:	21e6      	movs	r1, #230	@ 0xe6
 8003de4:	4897      	ldr	r0, [pc, #604]	@ (8004044 <HAL_RCC_OscConfig+0x27c>)
 8003de6:	f7fc feb5 	bl	8000b54 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 8088 	beq.w	8003f08 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00d      	beq.n	8003e1c <HAL_RCC_OscConfig+0x54>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e08:	d008      	beq.n	8003e1c <HAL_RCC_OscConfig+0x54>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e12:	d003      	beq.n	8003e1c <HAL_RCC_OscConfig+0x54>
 8003e14:	21eb      	movs	r1, #235	@ 0xeb
 8003e16:	488b      	ldr	r0, [pc, #556]	@ (8004044 <HAL_RCC_OscConfig+0x27c>)
 8003e18:	f7fc fe9c 	bl	8000b54 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e1c:	4b8a      	ldr	r3, [pc, #552]	@ (8004048 <HAL_RCC_OscConfig+0x280>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 030c 	and.w	r3, r3, #12
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	d00c      	beq.n	8003e42 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e28:	4b87      	ldr	r3, [pc, #540]	@ (8004048 <HAL_RCC_OscConfig+0x280>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d112      	bne.n	8003e5a <HAL_RCC_OscConfig+0x92>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e34:	4b84      	ldr	r3, [pc, #528]	@ (8004048 <HAL_RCC_OscConfig+0x280>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e40:	d10b      	bne.n	8003e5a <HAL_RCC_OscConfig+0x92>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e42:	4b81      	ldr	r3, [pc, #516]	@ (8004048 <HAL_RCC_OscConfig+0x280>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d05b      	beq.n	8003f06 <HAL_RCC_OscConfig+0x13e>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d157      	bne.n	8003f06 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e2d8      	b.n	800440c <HAL_RCC_OscConfig+0x644>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e62:	d106      	bne.n	8003e72 <HAL_RCC_OscConfig+0xaa>
 8003e64:	4b78      	ldr	r3, [pc, #480]	@ (8004048 <HAL_RCC_OscConfig+0x280>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a77      	ldr	r2, [pc, #476]	@ (8004048 <HAL_RCC_OscConfig+0x280>)
 8003e6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e6e:	6013      	str	r3, [r2, #0]
 8003e70:	e01d      	b.n	8003eae <HAL_RCC_OscConfig+0xe6>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e7a:	d10c      	bne.n	8003e96 <HAL_RCC_OscConfig+0xce>
 8003e7c:	4b72      	ldr	r3, [pc, #456]	@ (8004048 <HAL_RCC_OscConfig+0x280>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a71      	ldr	r2, [pc, #452]	@ (8004048 <HAL_RCC_OscConfig+0x280>)
 8003e82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e86:	6013      	str	r3, [r2, #0]
 8003e88:	4b6f      	ldr	r3, [pc, #444]	@ (8004048 <HAL_RCC_OscConfig+0x280>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a6e      	ldr	r2, [pc, #440]	@ (8004048 <HAL_RCC_OscConfig+0x280>)
 8003e8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e92:	6013      	str	r3, [r2, #0]
 8003e94:	e00b      	b.n	8003eae <HAL_RCC_OscConfig+0xe6>
 8003e96:	4b6c      	ldr	r3, [pc, #432]	@ (8004048 <HAL_RCC_OscConfig+0x280>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a6b      	ldr	r2, [pc, #428]	@ (8004048 <HAL_RCC_OscConfig+0x280>)
 8003e9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	4b69      	ldr	r3, [pc, #420]	@ (8004048 <HAL_RCC_OscConfig+0x280>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a68      	ldr	r2, [pc, #416]	@ (8004048 <HAL_RCC_OscConfig+0x280>)
 8003ea8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003eac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d013      	beq.n	8003ede <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb6:	f7fd fdf1 	bl	8001a9c <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ebe:	f7fd fded 	bl	8001a9c <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b64      	cmp	r3, #100	@ 0x64
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e29d      	b.n	800440c <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed0:	4b5d      	ldr	r3, [pc, #372]	@ (8004048 <HAL_RCC_OscConfig+0x280>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d0f0      	beq.n	8003ebe <HAL_RCC_OscConfig+0xf6>
 8003edc:	e014      	b.n	8003f08 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ede:	f7fd fddd 	bl	8001a9c <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ee6:	f7fd fdd9 	bl	8001a9c <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b64      	cmp	r3, #100	@ 0x64
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e289      	b.n	800440c <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ef8:	4b53      	ldr	r3, [pc, #332]	@ (8004048 <HAL_RCC_OscConfig+0x280>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1f0      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x11e>
 8003f04:	e000      	b.n	8003f08 <HAL_RCC_OscConfig+0x140>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f06:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d079      	beq.n	8004008 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d008      	beq.n	8003f2e <HAL_RCC_OscConfig+0x166>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d004      	beq.n	8003f2e <HAL_RCC_OscConfig+0x166>
 8003f24:	f240 111d 	movw	r1, #285	@ 0x11d
 8003f28:	4846      	ldr	r0, [pc, #280]	@ (8004044 <HAL_RCC_OscConfig+0x27c>)
 8003f2a:	f7fc fe13 	bl	8000b54 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	2b1f      	cmp	r3, #31
 8003f34:	d904      	bls.n	8003f40 <HAL_RCC_OscConfig+0x178>
 8003f36:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8003f3a:	4842      	ldr	r0, [pc, #264]	@ (8004044 <HAL_RCC_OscConfig+0x27c>)
 8003f3c:	f7fc fe0a 	bl	8000b54 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f40:	4b41      	ldr	r3, [pc, #260]	@ (8004048 <HAL_RCC_OscConfig+0x280>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 030c 	and.w	r3, r3, #12
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00b      	beq.n	8003f64 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f4c:	4b3e      	ldr	r3, [pc, #248]	@ (8004048 <HAL_RCC_OscConfig+0x280>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d11c      	bne.n	8003f92 <HAL_RCC_OscConfig+0x1ca>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f58:	4b3b      	ldr	r3, [pc, #236]	@ (8004048 <HAL_RCC_OscConfig+0x280>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d116      	bne.n	8003f92 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f64:	4b38      	ldr	r3, [pc, #224]	@ (8004048 <HAL_RCC_OscConfig+0x280>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d005      	beq.n	8003f7c <HAL_RCC_OscConfig+0x1b4>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d001      	beq.n	8003f7c <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e247      	b.n	800440c <HAL_RCC_OscConfig+0x644>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f7c:	4b32      	ldr	r3, [pc, #200]	@ (8004048 <HAL_RCC_OscConfig+0x280>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	492f      	ldr	r1, [pc, #188]	@ (8004048 <HAL_RCC_OscConfig+0x280>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f90:	e03a      	b.n	8004008 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d020      	beq.n	8003fdc <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f9a:	4b2c      	ldr	r3, [pc, #176]	@ (800404c <HAL_RCC_OscConfig+0x284>)
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa0:	f7fd fd7c 	bl	8001a9c <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa8:	f7fd fd78 	bl	8001a9c <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e228      	b.n	800440c <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fba:	4b23      	ldr	r3, [pc, #140]	@ (8004048 <HAL_RCC_OscConfig+0x280>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0f0      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc6:	4b20      	ldr	r3, [pc, #128]	@ (8004048 <HAL_RCC_OscConfig+0x280>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	491c      	ldr	r1, [pc, #112]	@ (8004048 <HAL_RCC_OscConfig+0x280>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]
 8003fda:	e015      	b.n	8004008 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800404c <HAL_RCC_OscConfig+0x284>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe2:	f7fd fd5b 	bl	8001a9c <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fe8:	e008      	b.n	8003ffc <HAL_RCC_OscConfig+0x234>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fea:	f7fd fd57 	bl	8001a9c <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e207      	b.n	800440c <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ffc:	4b12      	ldr	r3, [pc, #72]	@ (8004048 <HAL_RCC_OscConfig+0x280>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1f0      	bne.n	8003fea <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0308 	and.w	r3, r3, #8
 8004010:	2b00      	cmp	r3, #0
 8004012:	d045      	beq.n	80040a0 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <HAL_RCC_OscConfig+0x266>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d004      	beq.n	800402e <HAL_RCC_OscConfig+0x266>
 8004024:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8004028:	4806      	ldr	r0, [pc, #24]	@ (8004044 <HAL_RCC_OscConfig+0x27c>)
 800402a:	f7fc fd93 	bl	8000b54 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d01e      	beq.n	8004074 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004036:	4b06      	ldr	r3, [pc, #24]	@ (8004050 <HAL_RCC_OscConfig+0x288>)
 8004038:	2201      	movs	r2, #1
 800403a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403c:	f7fd fd2e 	bl	8001a9c <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004042:	e010      	b.n	8004066 <HAL_RCC_OscConfig+0x29e>
 8004044:	0800c540 	.word	0x0800c540
 8004048:	40023800 	.word	0x40023800
 800404c:	42470000 	.word	0x42470000
 8004050:	42470e80 	.word	0x42470e80
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004054:	f7fd fd22 	bl	8001a9c <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e1d2      	b.n	800440c <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004066:	4b5e      	ldr	r3, [pc, #376]	@ (80041e0 <HAL_RCC_OscConfig+0x418>)
 8004068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0f0      	beq.n	8004054 <HAL_RCC_OscConfig+0x28c>
 8004072:	e015      	b.n	80040a0 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004074:	4b5b      	ldr	r3, [pc, #364]	@ (80041e4 <HAL_RCC_OscConfig+0x41c>)
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800407a:	f7fd fd0f 	bl	8001a9c <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x2cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004082:	f7fd fd0b 	bl	8001a9c <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e1bb      	b.n	800440c <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004094:	4b52      	ldr	r3, [pc, #328]	@ (80041e0 <HAL_RCC_OscConfig+0x418>)
 8004096:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1f0      	bne.n	8004082 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 80b0 	beq.w	800420e <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ae:	2300      	movs	r3, #0
 80040b0:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00c      	beq.n	80040d4 <HAL_RCC_OscConfig+0x30c>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d008      	beq.n	80040d4 <HAL_RCC_OscConfig+0x30c>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	2b05      	cmp	r3, #5
 80040c8:	d004      	beq.n	80040d4 <HAL_RCC_OscConfig+0x30c>
 80040ca:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 80040ce:	4846      	ldr	r0, [pc, #280]	@ (80041e8 <HAL_RCC_OscConfig+0x420>)
 80040d0:	f7fc fd40 	bl	8000b54 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040d4:	4b42      	ldr	r3, [pc, #264]	@ (80041e0 <HAL_RCC_OscConfig+0x418>)
 80040d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10f      	bne.n	8004100 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040e0:	2300      	movs	r3, #0
 80040e2:	60bb      	str	r3, [r7, #8]
 80040e4:	4b3e      	ldr	r3, [pc, #248]	@ (80041e0 <HAL_RCC_OscConfig+0x418>)
 80040e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e8:	4a3d      	ldr	r2, [pc, #244]	@ (80041e0 <HAL_RCC_OscConfig+0x418>)
 80040ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80040f0:	4b3b      	ldr	r3, [pc, #236]	@ (80041e0 <HAL_RCC_OscConfig+0x418>)
 80040f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040f8:	60bb      	str	r3, [r7, #8]
 80040fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040fc:	2301      	movs	r3, #1
 80040fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004100:	4b3a      	ldr	r3, [pc, #232]	@ (80041ec <HAL_RCC_OscConfig+0x424>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004108:	2b00      	cmp	r3, #0
 800410a:	d118      	bne.n	800413e <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800410c:	4b37      	ldr	r3, [pc, #220]	@ (80041ec <HAL_RCC_OscConfig+0x424>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a36      	ldr	r2, [pc, #216]	@ (80041ec <HAL_RCC_OscConfig+0x424>)
 8004112:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004116:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004118:	f7fd fcc0 	bl	8001a9c <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x36a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004120:	f7fd fcbc 	bl	8001a9c <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e16c      	b.n	800440c <HAL_RCC_OscConfig+0x644>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004132:	4b2e      	ldr	r3, [pc, #184]	@ (80041ec <HAL_RCC_OscConfig+0x424>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0f0      	beq.n	8004120 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d106      	bne.n	8004154 <HAL_RCC_OscConfig+0x38c>
 8004146:	4b26      	ldr	r3, [pc, #152]	@ (80041e0 <HAL_RCC_OscConfig+0x418>)
 8004148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800414a:	4a25      	ldr	r2, [pc, #148]	@ (80041e0 <HAL_RCC_OscConfig+0x418>)
 800414c:	f043 0301 	orr.w	r3, r3, #1
 8004150:	6713      	str	r3, [r2, #112]	@ 0x70
 8004152:	e01c      	b.n	800418e <HAL_RCC_OscConfig+0x3c6>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2b05      	cmp	r3, #5
 800415a:	d10c      	bne.n	8004176 <HAL_RCC_OscConfig+0x3ae>
 800415c:	4b20      	ldr	r3, [pc, #128]	@ (80041e0 <HAL_RCC_OscConfig+0x418>)
 800415e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004160:	4a1f      	ldr	r2, [pc, #124]	@ (80041e0 <HAL_RCC_OscConfig+0x418>)
 8004162:	f043 0304 	orr.w	r3, r3, #4
 8004166:	6713      	str	r3, [r2, #112]	@ 0x70
 8004168:	4b1d      	ldr	r3, [pc, #116]	@ (80041e0 <HAL_RCC_OscConfig+0x418>)
 800416a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800416c:	4a1c      	ldr	r2, [pc, #112]	@ (80041e0 <HAL_RCC_OscConfig+0x418>)
 800416e:	f043 0301 	orr.w	r3, r3, #1
 8004172:	6713      	str	r3, [r2, #112]	@ 0x70
 8004174:	e00b      	b.n	800418e <HAL_RCC_OscConfig+0x3c6>
 8004176:	4b1a      	ldr	r3, [pc, #104]	@ (80041e0 <HAL_RCC_OscConfig+0x418>)
 8004178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417a:	4a19      	ldr	r2, [pc, #100]	@ (80041e0 <HAL_RCC_OscConfig+0x418>)
 800417c:	f023 0301 	bic.w	r3, r3, #1
 8004180:	6713      	str	r3, [r2, #112]	@ 0x70
 8004182:	4b17      	ldr	r3, [pc, #92]	@ (80041e0 <HAL_RCC_OscConfig+0x418>)
 8004184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004186:	4a16      	ldr	r2, [pc, #88]	@ (80041e0 <HAL_RCC_OscConfig+0x418>)
 8004188:	f023 0304 	bic.w	r3, r3, #4
 800418c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d015      	beq.n	80041c2 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004196:	f7fd fc81 	bl	8001a9c <HAL_GetTick>
 800419a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419c:	e00a      	b.n	80041b4 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800419e:	f7fd fc7d 	bl	8001a9c <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e12b      	b.n	800440c <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b4:	4b0a      	ldr	r3, [pc, #40]	@ (80041e0 <HAL_RCC_OscConfig+0x418>)
 80041b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0ee      	beq.n	800419e <HAL_RCC_OscConfig+0x3d6>
 80041c0:	e01c      	b.n	80041fc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041c2:	f7fd fc6b 	bl	8001a9c <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041c8:	e012      	b.n	80041f0 <HAL_RCC_OscConfig+0x428>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ca:	f7fd fc67 	bl	8001a9c <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041d8:	4293      	cmp	r3, r2
 80041da:	d909      	bls.n	80041f0 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e115      	b.n	800440c <HAL_RCC_OscConfig+0x644>
 80041e0:	40023800 	.word	0x40023800
 80041e4:	42470e80 	.word	0x42470e80
 80041e8:	0800c540 	.word	0x0800c540
 80041ec:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041f0:	4b88      	ldr	r3, [pc, #544]	@ (8004414 <HAL_RCC_OscConfig+0x64c>)
 80041f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e6      	bne.n	80041ca <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041fc:	7dfb      	ldrb	r3, [r7, #23]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d105      	bne.n	800420e <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004202:	4b84      	ldr	r3, [pc, #528]	@ (8004414 <HAL_RCC_OscConfig+0x64c>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004206:	4a83      	ldr	r2, [pc, #524]	@ (8004414 <HAL_RCC_OscConfig+0x64c>)
 8004208:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800420c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00c      	beq.n	8004230 <HAL_RCC_OscConfig+0x468>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d008      	beq.n	8004230 <HAL_RCC_OscConfig+0x468>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d004      	beq.n	8004230 <HAL_RCC_OscConfig+0x468>
 8004226:	f240 11cd 	movw	r1, #461	@ 0x1cd
 800422a:	487b      	ldr	r0, [pc, #492]	@ (8004418 <HAL_RCC_OscConfig+0x650>)
 800422c:	f7fc fc92 	bl	8000b54 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 80e8 	beq.w	800440a <HAL_RCC_OscConfig+0x642>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800423a:	4b76      	ldr	r3, [pc, #472]	@ (8004414 <HAL_RCC_OscConfig+0x64c>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 030c 	and.w	r3, r3, #12
 8004242:	2b08      	cmp	r3, #8
 8004244:	f000 80a9 	beq.w	800439a <HAL_RCC_OscConfig+0x5d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	2b02      	cmp	r3, #2
 800424e:	f040 808d 	bne.w	800436c <HAL_RCC_OscConfig+0x5a4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d009      	beq.n	800426e <HAL_RCC_OscConfig+0x4a6>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004262:	d004      	beq.n	800426e <HAL_RCC_OscConfig+0x4a6>
 8004264:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
 8004268:	486b      	ldr	r0, [pc, #428]	@ (8004418 <HAL_RCC_OscConfig+0x650>)
 800426a:	f7fc fc73 	bl	8000b54 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d903      	bls.n	800427e <HAL_RCC_OscConfig+0x4b6>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	2b3f      	cmp	r3, #63	@ 0x3f
 800427c:	d904      	bls.n	8004288 <HAL_RCC_OscConfig+0x4c0>
 800427e:	f240 11d7 	movw	r1, #471	@ 0x1d7
 8004282:	4865      	ldr	r0, [pc, #404]	@ (8004418 <HAL_RCC_OscConfig+0x650>)
 8004284:	f7fc fc66 	bl	8000b54 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428c:	2b31      	cmp	r3, #49	@ 0x31
 800428e:	d904      	bls.n	800429a <HAL_RCC_OscConfig+0x4d2>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004294:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8004298:	d904      	bls.n	80042a4 <HAL_RCC_OscConfig+0x4dc>
 800429a:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 800429e:	485e      	ldr	r0, [pc, #376]	@ (8004418 <HAL_RCC_OscConfig+0x650>)
 80042a0:	f7fc fc58 	bl	8000b54 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d010      	beq.n	80042ce <HAL_RCC_OscConfig+0x506>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b0:	2b04      	cmp	r3, #4
 80042b2:	d00c      	beq.n	80042ce <HAL_RCC_OscConfig+0x506>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b8:	2b06      	cmp	r3, #6
 80042ba:	d008      	beq.n	80042ce <HAL_RCC_OscConfig+0x506>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d004      	beq.n	80042ce <HAL_RCC_OscConfig+0x506>
 80042c4:	f240 11d9 	movw	r1, #473	@ 0x1d9
 80042c8:	4853      	ldr	r0, [pc, #332]	@ (8004418 <HAL_RCC_OscConfig+0x650>)
 80042ca:	f7fc fc43 	bl	8000b54 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d903      	bls.n	80042de <HAL_RCC_OscConfig+0x516>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042da:	2b0f      	cmp	r3, #15
 80042dc:	d904      	bls.n	80042e8 <HAL_RCC_OscConfig+0x520>
 80042de:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 80042e2:	484d      	ldr	r0, [pc, #308]	@ (8004418 <HAL_RCC_OscConfig+0x650>)
 80042e4:	f7fc fc36 	bl	8000b54 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e8:	4b4c      	ldr	r3, [pc, #304]	@ (800441c <HAL_RCC_OscConfig+0x654>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ee:	f7fd fbd5 	bl	8001a9c <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f4:	e008      	b.n	8004308 <HAL_RCC_OscConfig+0x540>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f6:	f7fd fbd1 	bl	8001a9c <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x540>
          {
            return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e081      	b.n	800440c <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004308:	4b42      	ldr	r3, [pc, #264]	@ (8004414 <HAL_RCC_OscConfig+0x64c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1f0      	bne.n	80042f6 <HAL_RCC_OscConfig+0x52e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	69da      	ldr	r2, [r3, #28]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004322:	019b      	lsls	r3, r3, #6
 8004324:	431a      	orrs	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432a:	085b      	lsrs	r3, r3, #1
 800432c:	3b01      	subs	r3, #1
 800432e:	041b      	lsls	r3, r3, #16
 8004330:	431a      	orrs	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004336:	061b      	lsls	r3, r3, #24
 8004338:	4936      	ldr	r1, [pc, #216]	@ (8004414 <HAL_RCC_OscConfig+0x64c>)
 800433a:	4313      	orrs	r3, r2
 800433c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800433e:	4b37      	ldr	r3, [pc, #220]	@ (800441c <HAL_RCC_OscConfig+0x654>)
 8004340:	2201      	movs	r2, #1
 8004342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004344:	f7fd fbaa 	bl	8001a9c <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x596>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800434c:	f7fd fba6 	bl	8001a9c <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e056      	b.n	800440c <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800435e:	4b2d      	ldr	r3, [pc, #180]	@ (8004414 <HAL_RCC_OscConfig+0x64c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0f0      	beq.n	800434c <HAL_RCC_OscConfig+0x584>
 800436a:	e04e      	b.n	800440a <HAL_RCC_OscConfig+0x642>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800436c:	4b2b      	ldr	r3, [pc, #172]	@ (800441c <HAL_RCC_OscConfig+0x654>)
 800436e:	2200      	movs	r2, #0
 8004370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004372:	f7fd fb93 	bl	8001a9c <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004378:	e008      	b.n	800438c <HAL_RCC_OscConfig+0x5c4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800437a:	f7fd fb8f 	bl	8001a9c <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e03f      	b.n	800440c <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438c:	4b21      	ldr	r3, [pc, #132]	@ (8004414 <HAL_RCC_OscConfig+0x64c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1f0      	bne.n	800437a <HAL_RCC_OscConfig+0x5b2>
 8004398:	e037      	b.n	800440a <HAL_RCC_OscConfig+0x642>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d101      	bne.n	80043a6 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e032      	b.n	800440c <HAL_RCC_OscConfig+0x644>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004414 <HAL_RCC_OscConfig+0x64c>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d028      	beq.n	8004406 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043be:	429a      	cmp	r2, r3
 80043c0:	d121      	bne.n	8004406 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d11a      	bne.n	8004406 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80043d6:	4013      	ands	r3, r2
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80043dc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043de:	4293      	cmp	r3, r2
 80043e0:	d111      	bne.n	8004406 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ec:	085b      	lsrs	r3, r3, #1
 80043ee:	3b01      	subs	r3, #1
 80043f0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d107      	bne.n	8004406 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004400:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004402:	429a      	cmp	r2, r3
 8004404:	d001      	beq.n	800440a <HAL_RCC_OscConfig+0x642>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e000      	b.n	800440c <HAL_RCC_OscConfig+0x644>
        }
      }
    }
  }
  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3718      	adds	r7, #24
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40023800 	.word	0x40023800
 8004418:	0800c540 	.word	0x0800c540
 800441c:	42470060 	.word	0x42470060

08004420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e174      	b.n	800471e <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <HAL_RCC_ClockConfig+0x24>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b0f      	cmp	r3, #15
 8004442:	d904      	bls.n	800444e <HAL_RCC_ClockConfig+0x2e>
 8004444:	f240 215a 	movw	r1, #602	@ 0x25a
 8004448:	487b      	ldr	r0, [pc, #492]	@ (8004638 <HAL_RCC_ClockConfig+0x218>)
 800444a:	f7fc fb83 	bl	8000b54 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d019      	beq.n	8004488 <HAL_RCC_ClockConfig+0x68>
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d016      	beq.n	8004488 <HAL_RCC_ClockConfig+0x68>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b02      	cmp	r3, #2
 800445e:	d013      	beq.n	8004488 <HAL_RCC_ClockConfig+0x68>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2b03      	cmp	r3, #3
 8004464:	d010      	beq.n	8004488 <HAL_RCC_ClockConfig+0x68>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b04      	cmp	r3, #4
 800446a:	d00d      	beq.n	8004488 <HAL_RCC_ClockConfig+0x68>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	2b05      	cmp	r3, #5
 8004470:	d00a      	beq.n	8004488 <HAL_RCC_ClockConfig+0x68>
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2b06      	cmp	r3, #6
 8004476:	d007      	beq.n	8004488 <HAL_RCC_ClockConfig+0x68>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	2b07      	cmp	r3, #7
 800447c:	d004      	beq.n	8004488 <HAL_RCC_ClockConfig+0x68>
 800447e:	f240 215b 	movw	r1, #603	@ 0x25b
 8004482:	486d      	ldr	r0, [pc, #436]	@ (8004638 <HAL_RCC_ClockConfig+0x218>)
 8004484:	f7fc fb66 	bl	8000b54 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004488:	4b6c      	ldr	r3, [pc, #432]	@ (800463c <HAL_RCC_ClockConfig+0x21c>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d90c      	bls.n	80044b0 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004496:	4b69      	ldr	r3, [pc, #420]	@ (800463c <HAL_RCC_ClockConfig+0x21c>)
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800449e:	4b67      	ldr	r3, [pc, #412]	@ (800463c <HAL_RCC_ClockConfig+0x21c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d001      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e136      	b.n	800471e <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d049      	beq.n	8004550 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d005      	beq.n	80044d4 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044c8:	4b5d      	ldr	r3, [pc, #372]	@ (8004640 <HAL_RCC_ClockConfig+0x220>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	4a5c      	ldr	r2, [pc, #368]	@ (8004640 <HAL_RCC_ClockConfig+0x220>)
 80044ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80044d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d005      	beq.n	80044ec <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044e0:	4b57      	ldr	r3, [pc, #348]	@ (8004640 <HAL_RCC_ClockConfig+0x220>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	4a56      	ldr	r2, [pc, #344]	@ (8004640 <HAL_RCC_ClockConfig+0x220>)
 80044e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80044ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d024      	beq.n	800453e <HAL_RCC_ClockConfig+0x11e>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	2b80      	cmp	r3, #128	@ 0x80
 80044fa:	d020      	beq.n	800453e <HAL_RCC_ClockConfig+0x11e>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	2b90      	cmp	r3, #144	@ 0x90
 8004502:	d01c      	beq.n	800453e <HAL_RCC_ClockConfig+0x11e>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	2ba0      	cmp	r3, #160	@ 0xa0
 800450a:	d018      	beq.n	800453e <HAL_RCC_ClockConfig+0x11e>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	2bb0      	cmp	r3, #176	@ 0xb0
 8004512:	d014      	beq.n	800453e <HAL_RCC_ClockConfig+0x11e>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	2bc0      	cmp	r3, #192	@ 0xc0
 800451a:	d010      	beq.n	800453e <HAL_RCC_ClockConfig+0x11e>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	2bd0      	cmp	r3, #208	@ 0xd0
 8004522:	d00c      	beq.n	800453e <HAL_RCC_ClockConfig+0x11e>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2be0      	cmp	r3, #224	@ 0xe0
 800452a:	d008      	beq.n	800453e <HAL_RCC_ClockConfig+0x11e>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	2bf0      	cmp	r3, #240	@ 0xf0
 8004532:	d004      	beq.n	800453e <HAL_RCC_ClockConfig+0x11e>
 8004534:	f240 217e 	movw	r1, #638	@ 0x27e
 8004538:	483f      	ldr	r0, [pc, #252]	@ (8004638 <HAL_RCC_ClockConfig+0x218>)
 800453a:	f7fc fb0b 	bl	8000b54 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800453e:	4b40      	ldr	r3, [pc, #256]	@ (8004640 <HAL_RCC_ClockConfig+0x220>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	493d      	ldr	r1, [pc, #244]	@ (8004640 <HAL_RCC_ClockConfig+0x220>)
 800454c:	4313      	orrs	r3, r2
 800454e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d059      	beq.n	8004610 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d010      	beq.n	8004586 <HAL_RCC_ClockConfig+0x166>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d00c      	beq.n	8004586 <HAL_RCC_ClockConfig+0x166>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b02      	cmp	r3, #2
 8004572:	d008      	beq.n	8004586 <HAL_RCC_ClockConfig+0x166>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2b03      	cmp	r3, #3
 800457a:	d004      	beq.n	8004586 <HAL_RCC_ClockConfig+0x166>
 800457c:	f240 2185 	movw	r1, #645	@ 0x285
 8004580:	482d      	ldr	r0, [pc, #180]	@ (8004638 <HAL_RCC_ClockConfig+0x218>)
 8004582:	f7fc fae7 	bl	8000b54 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d107      	bne.n	800459e <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800458e:	4b2c      	ldr	r3, [pc, #176]	@ (8004640 <HAL_RCC_ClockConfig+0x220>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d119      	bne.n	80045ce <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e0bf      	b.n	800471e <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d003      	beq.n	80045ae <HAL_RCC_ClockConfig+0x18e>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	d107      	bne.n	80045be <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ae:	4b24      	ldr	r3, [pc, #144]	@ (8004640 <HAL_RCC_ClockConfig+0x220>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d109      	bne.n	80045ce <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e0af      	b.n	800471e <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045be:	4b20      	ldr	r3, [pc, #128]	@ (8004640 <HAL_RCC_ClockConfig+0x220>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e0a7      	b.n	800471e <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ce:	4b1c      	ldr	r3, [pc, #112]	@ (8004640 <HAL_RCC_ClockConfig+0x220>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f023 0203 	bic.w	r2, r3, #3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	4919      	ldr	r1, [pc, #100]	@ (8004640 <HAL_RCC_ClockConfig+0x220>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045e0:	f7fd fa5c 	bl	8001a9c <HAL_GetTick>
 80045e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e6:	e00a      	b.n	80045fe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e8:	f7fd fa58 	bl	8001a9c <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e08f      	b.n	800471e <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fe:	4b10      	ldr	r3, [pc, #64]	@ (8004640 <HAL_RCC_ClockConfig+0x220>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 020c 	and.w	r2, r3, #12
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	429a      	cmp	r2, r3
 800460e:	d1eb      	bne.n	80045e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004610:	4b0a      	ldr	r3, [pc, #40]	@ (800463c <HAL_RCC_ClockConfig+0x21c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d212      	bcs.n	8004644 <HAL_RCC_ClockConfig+0x224>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800461e:	4b07      	ldr	r3, [pc, #28]	@ (800463c <HAL_RCC_ClockConfig+0x21c>)
 8004620:	683a      	ldr	r2, [r7, #0]
 8004622:	b2d2      	uxtb	r2, r2
 8004624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004626:	4b05      	ldr	r3, [pc, #20]	@ (800463c <HAL_RCC_ClockConfig+0x21c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	429a      	cmp	r2, r3
 8004632:	d007      	beq.n	8004644 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e072      	b.n	800471e <HAL_RCC_ClockConfig+0x2fe>
 8004638:	0800c540 	.word	0x0800c540
 800463c:	40023c00 	.word	0x40023c00
 8004640:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	d025      	beq.n	800469c <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d018      	beq.n	800468a <HAL_RCC_ClockConfig+0x26a>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004660:	d013      	beq.n	800468a <HAL_RCC_ClockConfig+0x26a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800466a:	d00e      	beq.n	800468a <HAL_RCC_ClockConfig+0x26a>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8004674:	d009      	beq.n	800468a <HAL_RCC_ClockConfig+0x26a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 800467e:	d004      	beq.n	800468a <HAL_RCC_ClockConfig+0x26a>
 8004680:	f240 21c3 	movw	r1, #707	@ 0x2c3
 8004684:	4828      	ldr	r0, [pc, #160]	@ (8004728 <HAL_RCC_ClockConfig+0x308>)
 8004686:	f7fc fa65 	bl	8000b54 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800468a:	4b28      	ldr	r3, [pc, #160]	@ (800472c <HAL_RCC_ClockConfig+0x30c>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	4925      	ldr	r1, [pc, #148]	@ (800472c <HAL_RCC_ClockConfig+0x30c>)
 8004698:	4313      	orrs	r3, r2
 800469a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0308 	and.w	r3, r3, #8
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d026      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d018      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x2c2>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046b8:	d013      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x2c2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80046c2:	d00e      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x2c2>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80046cc:	d009      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x2c2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 80046d6:	d004      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x2c2>
 80046d8:	f240 21ca 	movw	r1, #714	@ 0x2ca
 80046dc:	4812      	ldr	r0, [pc, #72]	@ (8004728 <HAL_RCC_ClockConfig+0x308>)
 80046de:	f7fc fa39 	bl	8000b54 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046e2:	4b12      	ldr	r3, [pc, #72]	@ (800472c <HAL_RCC_ClockConfig+0x30c>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	490e      	ldr	r1, [pc, #56]	@ (800472c <HAL_RCC_ClockConfig+0x30c>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046f6:	f000 f821 	bl	800473c <HAL_RCC_GetSysClockFreq>
 80046fa:	4602      	mov	r2, r0
 80046fc:	4b0b      	ldr	r3, [pc, #44]	@ (800472c <HAL_RCC_ClockConfig+0x30c>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	091b      	lsrs	r3, r3, #4
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	490a      	ldr	r1, [pc, #40]	@ (8004730 <HAL_RCC_ClockConfig+0x310>)
 8004708:	5ccb      	ldrb	r3, [r1, r3]
 800470a:	fa22 f303 	lsr.w	r3, r2, r3
 800470e:	4a09      	ldr	r2, [pc, #36]	@ (8004734 <HAL_RCC_ClockConfig+0x314>)
 8004710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004712:	4b09      	ldr	r3, [pc, #36]	@ (8004738 <HAL_RCC_ClockConfig+0x318>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7fd f97c 	bl	8001a14 <HAL_InitTick>

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	0800c540 	.word	0x0800c540
 800472c:	40023800 	.word	0x40023800
 8004730:	0800c79c 	.word	0x0800c79c
 8004734:	200000b0 	.word	0x200000b0
 8004738:	200000b4 	.word	0x200000b4

0800473c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800473c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004740:	b094      	sub	sp, #80	@ 0x50
 8004742:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004754:	4b79      	ldr	r3, [pc, #484]	@ (800493c <HAL_RCC_GetSysClockFreq+0x200>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 030c 	and.w	r3, r3, #12
 800475c:	2b08      	cmp	r3, #8
 800475e:	d00d      	beq.n	800477c <HAL_RCC_GetSysClockFreq+0x40>
 8004760:	2b08      	cmp	r3, #8
 8004762:	f200 80e1 	bhi.w	8004928 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <HAL_RCC_GetSysClockFreq+0x34>
 800476a:	2b04      	cmp	r3, #4
 800476c:	d003      	beq.n	8004776 <HAL_RCC_GetSysClockFreq+0x3a>
 800476e:	e0db      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004770:	4b73      	ldr	r3, [pc, #460]	@ (8004940 <HAL_RCC_GetSysClockFreq+0x204>)
 8004772:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004774:	e0db      	b.n	800492e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004776:	4b73      	ldr	r3, [pc, #460]	@ (8004944 <HAL_RCC_GetSysClockFreq+0x208>)
 8004778:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800477a:	e0d8      	b.n	800492e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800477c:	4b6f      	ldr	r3, [pc, #444]	@ (800493c <HAL_RCC_GetSysClockFreq+0x200>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004784:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004786:	4b6d      	ldr	r3, [pc, #436]	@ (800493c <HAL_RCC_GetSysClockFreq+0x200>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d063      	beq.n	800485a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004792:	4b6a      	ldr	r3, [pc, #424]	@ (800493c <HAL_RCC_GetSysClockFreq+0x200>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	099b      	lsrs	r3, r3, #6
 8004798:	2200      	movs	r2, #0
 800479a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800479c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800479e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80047a6:	2300      	movs	r3, #0
 80047a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80047aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80047ae:	4622      	mov	r2, r4
 80047b0:	462b      	mov	r3, r5
 80047b2:	f04f 0000 	mov.w	r0, #0
 80047b6:	f04f 0100 	mov.w	r1, #0
 80047ba:	0159      	lsls	r1, r3, #5
 80047bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047c0:	0150      	lsls	r0, r2, #5
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	4621      	mov	r1, r4
 80047c8:	1a51      	subs	r1, r2, r1
 80047ca:	6139      	str	r1, [r7, #16]
 80047cc:	4629      	mov	r1, r5
 80047ce:	eb63 0301 	sbc.w	r3, r3, r1
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047e0:	4659      	mov	r1, fp
 80047e2:	018b      	lsls	r3, r1, #6
 80047e4:	4651      	mov	r1, sl
 80047e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047ea:	4651      	mov	r1, sl
 80047ec:	018a      	lsls	r2, r1, #6
 80047ee:	4651      	mov	r1, sl
 80047f0:	ebb2 0801 	subs.w	r8, r2, r1
 80047f4:	4659      	mov	r1, fp
 80047f6:	eb63 0901 	sbc.w	r9, r3, r1
 80047fa:	f04f 0200 	mov.w	r2, #0
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004806:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800480a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800480e:	4690      	mov	r8, r2
 8004810:	4699      	mov	r9, r3
 8004812:	4623      	mov	r3, r4
 8004814:	eb18 0303 	adds.w	r3, r8, r3
 8004818:	60bb      	str	r3, [r7, #8]
 800481a:	462b      	mov	r3, r5
 800481c:	eb49 0303 	adc.w	r3, r9, r3
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800482e:	4629      	mov	r1, r5
 8004830:	024b      	lsls	r3, r1, #9
 8004832:	4621      	mov	r1, r4
 8004834:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004838:	4621      	mov	r1, r4
 800483a:	024a      	lsls	r2, r1, #9
 800483c:	4610      	mov	r0, r2
 800483e:	4619      	mov	r1, r3
 8004840:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004842:	2200      	movs	r2, #0
 8004844:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004846:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004848:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800484c:	f7fb fd18 	bl	8000280 <__aeabi_uldivmod>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4613      	mov	r3, r2
 8004856:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004858:	e058      	b.n	800490c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800485a:	4b38      	ldr	r3, [pc, #224]	@ (800493c <HAL_RCC_GetSysClockFreq+0x200>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	099b      	lsrs	r3, r3, #6
 8004860:	2200      	movs	r2, #0
 8004862:	4618      	mov	r0, r3
 8004864:	4611      	mov	r1, r2
 8004866:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800486a:	623b      	str	r3, [r7, #32]
 800486c:	2300      	movs	r3, #0
 800486e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004870:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004874:	4642      	mov	r2, r8
 8004876:	464b      	mov	r3, r9
 8004878:	f04f 0000 	mov.w	r0, #0
 800487c:	f04f 0100 	mov.w	r1, #0
 8004880:	0159      	lsls	r1, r3, #5
 8004882:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004886:	0150      	lsls	r0, r2, #5
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4641      	mov	r1, r8
 800488e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004892:	4649      	mov	r1, r9
 8004894:	eb63 0b01 	sbc.w	fp, r3, r1
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	f04f 0300 	mov.w	r3, #0
 80048a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048ac:	ebb2 040a 	subs.w	r4, r2, sl
 80048b0:	eb63 050b 	sbc.w	r5, r3, fp
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	00eb      	lsls	r3, r5, #3
 80048be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048c2:	00e2      	lsls	r2, r4, #3
 80048c4:	4614      	mov	r4, r2
 80048c6:	461d      	mov	r5, r3
 80048c8:	4643      	mov	r3, r8
 80048ca:	18e3      	adds	r3, r4, r3
 80048cc:	603b      	str	r3, [r7, #0]
 80048ce:	464b      	mov	r3, r9
 80048d0:	eb45 0303 	adc.w	r3, r5, r3
 80048d4:	607b      	str	r3, [r7, #4]
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	f04f 0300 	mov.w	r3, #0
 80048de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048e2:	4629      	mov	r1, r5
 80048e4:	028b      	lsls	r3, r1, #10
 80048e6:	4621      	mov	r1, r4
 80048e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048ec:	4621      	mov	r1, r4
 80048ee:	028a      	lsls	r2, r1, #10
 80048f0:	4610      	mov	r0, r2
 80048f2:	4619      	mov	r1, r3
 80048f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048f6:	2200      	movs	r2, #0
 80048f8:	61bb      	str	r3, [r7, #24]
 80048fa:	61fa      	str	r2, [r7, #28]
 80048fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004900:	f7fb fcbe 	bl	8000280 <__aeabi_uldivmod>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4613      	mov	r3, r2
 800490a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800490c:	4b0b      	ldr	r3, [pc, #44]	@ (800493c <HAL_RCC_GetSysClockFreq+0x200>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	0c1b      	lsrs	r3, r3, #16
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	3301      	adds	r3, #1
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800491c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800491e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004926:	e002      	b.n	800492e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004928:	4b05      	ldr	r3, [pc, #20]	@ (8004940 <HAL_RCC_GetSysClockFreq+0x204>)
 800492a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800492c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800492e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004930:	4618      	mov	r0, r3
 8004932:	3750      	adds	r7, #80	@ 0x50
 8004934:	46bd      	mov	sp, r7
 8004936:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800493a:	bf00      	nop
 800493c:	40023800 	.word	0x40023800
 8004940:	00f42400 	.word	0x00f42400
 8004944:	007a1200 	.word	0x007a1200

08004948 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800494c:	4b03      	ldr	r3, [pc, #12]	@ (800495c <HAL_RCC_GetHCLKFreq+0x14>)
 800494e:	681b      	ldr	r3, [r3, #0]
}
 8004950:	4618      	mov	r0, r3
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	200000b0 	.word	0x200000b0

08004960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004964:	f7ff fff0 	bl	8004948 <HAL_RCC_GetHCLKFreq>
 8004968:	4602      	mov	r2, r0
 800496a:	4b05      	ldr	r3, [pc, #20]	@ (8004980 <HAL_RCC_GetPCLK1Freq+0x20>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	0a9b      	lsrs	r3, r3, #10
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	4903      	ldr	r1, [pc, #12]	@ (8004984 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004976:	5ccb      	ldrb	r3, [r1, r3]
 8004978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800497c:	4618      	mov	r0, r3
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40023800 	.word	0x40023800
 8004984:	0800c7ac 	.word	0x0800c7ac

08004988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800498c:	f7ff ffdc 	bl	8004948 <HAL_RCC_GetHCLKFreq>
 8004990:	4602      	mov	r2, r0
 8004992:	4b05      	ldr	r3, [pc, #20]	@ (80049a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	0b5b      	lsrs	r3, r3, #13
 8004998:	f003 0307 	and.w	r3, r3, #7
 800499c:	4903      	ldr	r1, [pc, #12]	@ (80049ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800499e:	5ccb      	ldrb	r3, [r1, r3]
 80049a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40023800 	.word	0x40023800
 80049ac:	0800c7ac 	.word	0x0800c7ac

080049b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e17e      	b.n	8004cc0 <HAL_SPI_Init+0x310>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a70      	ldr	r2, [pc, #448]	@ (8004b88 <HAL_SPI_Init+0x1d8>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d00e      	beq.n	80049ea <HAL_SPI_Init+0x3a>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a6e      	ldr	r2, [pc, #440]	@ (8004b8c <HAL_SPI_Init+0x1dc>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d009      	beq.n	80049ea <HAL_SPI_Init+0x3a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a6d      	ldr	r2, [pc, #436]	@ (8004b90 <HAL_SPI_Init+0x1e0>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d004      	beq.n	80049ea <HAL_SPI_Init+0x3a>
 80049e0:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80049e4:	486b      	ldr	r0, [pc, #428]	@ (8004b94 <HAL_SPI_Init+0x1e4>)
 80049e6:	f7fc f8b5 	bl	8000b54 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d009      	beq.n	8004a06 <HAL_SPI_Init+0x56>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049fa:	d004      	beq.n	8004a06 <HAL_SPI_Init+0x56>
 80049fc:	f240 1141 	movw	r1, #321	@ 0x141
 8004a00:	4864      	ldr	r0, [pc, #400]	@ (8004b94 <HAL_SPI_Init+0x1e4>)
 8004a02:	f7fc f8a7 	bl	8000b54 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00e      	beq.n	8004a2c <HAL_SPI_Init+0x7c>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a16:	d009      	beq.n	8004a2c <HAL_SPI_Init+0x7c>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a20:	d004      	beq.n	8004a2c <HAL_SPI_Init+0x7c>
 8004a22:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 8004a26:	485b      	ldr	r0, [pc, #364]	@ (8004b94 <HAL_SPI_Init+0x1e4>)
 8004a28:	f7fc f894 	bl	8000b54 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a34:	d008      	beq.n	8004a48 <HAL_SPI_Init+0x98>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d004      	beq.n	8004a48 <HAL_SPI_Init+0x98>
 8004a3e:	f240 1143 	movw	r1, #323	@ 0x143
 8004a42:	4854      	ldr	r0, [pc, #336]	@ (8004b94 <HAL_SPI_Init+0x1e4>)
 8004a44:	f7fc f886 	bl	8000b54 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a50:	d00d      	beq.n	8004a6e <HAL_SPI_Init+0xbe>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d009      	beq.n	8004a6e <HAL_SPI_Init+0xbe>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a62:	d004      	beq.n	8004a6e <HAL_SPI_Init+0xbe>
 8004a64:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8004a68:	484a      	ldr	r0, [pc, #296]	@ (8004b94 <HAL_SPI_Init+0x1e4>)
 8004a6a:	f7fc f873 	bl	8000b54 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d020      	beq.n	8004ab8 <HAL_SPI_Init+0x108>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	2b08      	cmp	r3, #8
 8004a7c:	d01c      	beq.n	8004ab8 <HAL_SPI_Init+0x108>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	2b10      	cmp	r3, #16
 8004a84:	d018      	beq.n	8004ab8 <HAL_SPI_Init+0x108>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	2b18      	cmp	r3, #24
 8004a8c:	d014      	beq.n	8004ab8 <HAL_SPI_Init+0x108>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	2b20      	cmp	r3, #32
 8004a94:	d010      	beq.n	8004ab8 <HAL_SPI_Init+0x108>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	2b28      	cmp	r3, #40	@ 0x28
 8004a9c:	d00c      	beq.n	8004ab8 <HAL_SPI_Init+0x108>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	2b30      	cmp	r3, #48	@ 0x30
 8004aa4:	d008      	beq.n	8004ab8 <HAL_SPI_Init+0x108>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	2b38      	cmp	r3, #56	@ 0x38
 8004aac:	d004      	beq.n	8004ab8 <HAL_SPI_Init+0x108>
 8004aae:	f240 1145 	movw	r1, #325	@ 0x145
 8004ab2:	4838      	ldr	r0, [pc, #224]	@ (8004b94 <HAL_SPI_Init+0x1e4>)
 8004ab4:	f7fc f84e 	bl	8000b54 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d008      	beq.n	8004ad2 <HAL_SPI_Init+0x122>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	2b80      	cmp	r3, #128	@ 0x80
 8004ac6:	d004      	beq.n	8004ad2 <HAL_SPI_Init+0x122>
 8004ac8:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 8004acc:	4831      	ldr	r0, [pc, #196]	@ (8004b94 <HAL_SPI_Init+0x1e4>)
 8004ace:	f7fc f841 	bl	8000b54 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d008      	beq.n	8004aec <HAL_SPI_Init+0x13c>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ade:	2b10      	cmp	r3, #16
 8004ae0:	d004      	beq.n	8004aec <HAL_SPI_Init+0x13c>
 8004ae2:	f240 1147 	movw	r1, #327	@ 0x147
 8004ae6:	482b      	ldr	r0, [pc, #172]	@ (8004b94 <HAL_SPI_Init+0x1e4>)
 8004ae8:	f7fc f834 	bl	8000b54 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d151      	bne.n	8004b98 <HAL_SPI_Init+0x1e8>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d008      	beq.n	8004b0e <HAL_SPI_Init+0x15e>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d004      	beq.n	8004b0e <HAL_SPI_Init+0x15e>
 8004b04:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8004b08:	4822      	ldr	r0, [pc, #136]	@ (8004b94 <HAL_SPI_Init+0x1e4>)
 8004b0a:	f7fc f823 	bl	8000b54 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d008      	beq.n	8004b28 <HAL_SPI_Init+0x178>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d004      	beq.n	8004b28 <HAL_SPI_Init+0x178>
 8004b1e:	f240 114b 	movw	r1, #331	@ 0x14b
 8004b22:	481c      	ldr	r0, [pc, #112]	@ (8004b94 <HAL_SPI_Init+0x1e4>)
 8004b24:	f7fc f816 	bl	8000b54 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b30:	d125      	bne.n	8004b7e <HAL_SPI_Init+0x1ce>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d059      	beq.n	8004bee <HAL_SPI_Init+0x23e>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	d055      	beq.n	8004bee <HAL_SPI_Init+0x23e>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	2b10      	cmp	r3, #16
 8004b48:	d051      	beq.n	8004bee <HAL_SPI_Init+0x23e>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	2b18      	cmp	r3, #24
 8004b50:	d04d      	beq.n	8004bee <HAL_SPI_Init+0x23e>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	2b20      	cmp	r3, #32
 8004b58:	d049      	beq.n	8004bee <HAL_SPI_Init+0x23e>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	2b28      	cmp	r3, #40	@ 0x28
 8004b60:	d045      	beq.n	8004bee <HAL_SPI_Init+0x23e>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	2b30      	cmp	r3, #48	@ 0x30
 8004b68:	d041      	beq.n	8004bee <HAL_SPI_Init+0x23e>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	2b38      	cmp	r3, #56	@ 0x38
 8004b70:	d03d      	beq.n	8004bee <HAL_SPI_Init+0x23e>
 8004b72:	f240 114f 	movw	r1, #335	@ 0x14f
 8004b76:	4807      	ldr	r0, [pc, #28]	@ (8004b94 <HAL_SPI_Init+0x1e4>)
 8004b78:	f7fb ffec 	bl	8000b54 <assert_failed>
 8004b7c:	e037      	b.n	8004bee <HAL_SPI_Init+0x23e>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	61da      	str	r2, [r3, #28]
 8004b84:	e033      	b.n	8004bee <HAL_SPI_Init+0x23e>
 8004b86:	bf00      	nop
 8004b88:	40013000 	.word	0x40013000
 8004b8c:	40003800 	.word	0x40003800
 8004b90:	40003c00 	.word	0x40003c00
 8004b94:	0800c5b8 	.word	0x0800c5b8
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	69db      	ldr	r3, [r3, #28]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d020      	beq.n	8004be2 <HAL_SPI_Init+0x232>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d01c      	beq.n	8004be2 <HAL_SPI_Init+0x232>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	2b10      	cmp	r3, #16
 8004bae:	d018      	beq.n	8004be2 <HAL_SPI_Init+0x232>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	69db      	ldr	r3, [r3, #28]
 8004bb4:	2b18      	cmp	r3, #24
 8004bb6:	d014      	beq.n	8004be2 <HAL_SPI_Init+0x232>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	2b20      	cmp	r3, #32
 8004bbe:	d010      	beq.n	8004be2 <HAL_SPI_Init+0x232>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	2b28      	cmp	r3, #40	@ 0x28
 8004bc6:	d00c      	beq.n	8004be2 <HAL_SPI_Init+0x232>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	2b30      	cmp	r3, #48	@ 0x30
 8004bce:	d008      	beq.n	8004be2 <HAL_SPI_Init+0x232>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	2b38      	cmp	r3, #56	@ 0x38
 8004bd6:	d004      	beq.n	8004be2 <HAL_SPI_Init+0x232>
 8004bd8:	f240 1159 	movw	r1, #345	@ 0x159
 8004bdc:	483a      	ldr	r0, [pc, #232]	@ (8004cc8 <HAL_SPI_Init+0x318>)
 8004bde:	f7fb ffb9 	bl	8000b54 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d106      	bne.n	8004c0e <HAL_SPI_Init+0x25e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7fb fff5 	bl	8000bf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2202      	movs	r2, #2
 8004c12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c24:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c40:	431a      	orrs	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c72:	ea42 0103 	orr.w	r1, r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	0c1b      	lsrs	r3, r3, #16
 8004c8c:	f003 0104 	and.w	r1, r3, #4
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c94:	f003 0210 	and.w	r2, r3, #16
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	69da      	ldr	r2, [r3, #28]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	0800c5b8 	.word	0x0800c5b8

08004ccc <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d004      	beq.n	8004cec <HAL_SPI_TransmitReceive_IT+0x20>
 8004ce2:	f240 611d 	movw	r1, #1565	@ 0x61d
 8004ce6:	4840      	ldr	r0, [pc, #256]	@ (8004de8 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8004ce8:	f7fb ff34 	bl	8000b54 <assert_failed>

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cf2:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004cfa:	7dfb      	ldrb	r3, [r7, #23]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d00c      	beq.n	8004d1a <HAL_SPI_TransmitReceive_IT+0x4e>
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d06:	d106      	bne.n	8004d16 <HAL_SPI_TransmitReceive_IT+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d102      	bne.n	8004d16 <HAL_SPI_TransmitReceive_IT+0x4a>
 8004d10:	7dfb      	ldrb	r3, [r7, #23]
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d001      	beq.n	8004d1a <HAL_SPI_TransmitReceive_IT+0x4e>
  {
    return HAL_BUSY;
 8004d16:	2302      	movs	r3, #2
 8004d18:	e061      	b.n	8004dde <HAL_SPI_TransmitReceive_IT+0x112>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d005      	beq.n	8004d2c <HAL_SPI_TransmitReceive_IT+0x60>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d002      	beq.n	8004d2c <HAL_SPI_TransmitReceive_IT+0x60>
 8004d26:	887b      	ldrh	r3, [r7, #2]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_SPI_TransmitReceive_IT+0x64>
  {
    return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e056      	b.n	8004dde <HAL_SPI_TransmitReceive_IT+0x112>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d101      	bne.n	8004d3e <HAL_SPI_TransmitReceive_IT+0x72>
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	e04f      	b.n	8004dde <HAL_SPI_TransmitReceive_IT+0x112>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d003      	beq.n	8004d5a <HAL_SPI_TransmitReceive_IT+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2205      	movs	r2, #5
 8004d56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	887a      	ldrh	r2, [r7, #2]
 8004d6a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	887a      	ldrh	r2, [r7, #2]
 8004d70:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	887a      	ldrh	r2, [r7, #2]
 8004d7c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	887a      	ldrh	r2, [r7, #2]
 8004d82:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d006      	beq.n	8004d9a <HAL_SPI_TransmitReceive_IT+0xce>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4a17      	ldr	r2, [pc, #92]	@ (8004dec <HAL_SPI_TransmitReceive_IT+0x120>)
 8004d90:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	4a16      	ldr	r2, [pc, #88]	@ (8004df0 <HAL_SPI_TransmitReceive_IT+0x124>)
 8004d96:	645a      	str	r2, [r3, #68]	@ 0x44
 8004d98:	e005      	b.n	8004da6 <HAL_SPI_TransmitReceive_IT+0xda>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	4a15      	ldr	r2, [pc, #84]	@ (8004df4 <HAL_SPI_TransmitReceive_IT+0x128>)
 8004d9e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	4a15      	ldr	r2, [pc, #84]	@ (8004df8 <HAL_SPI_TransmitReceive_IT+0x12c>)
 8004da4:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db0:	2b40      	cmp	r3, #64	@ 0x40
 8004db2:	d007      	beq.n	8004dc4 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004dc2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8004dda:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3718      	adds	r7, #24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	0800c5b8 	.word	0x0800c5b8
 8004dec:	080050f9 	.word	0x080050f9
 8004df0:	08005159 	.word	0x08005159
 8004df4:	08005035 	.word	0x08005035
 8004df8:	08005099 	.word	0x08005099

08004dfc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b088      	sub	sp, #32
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10e      	bne.n	8004e3c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d009      	beq.n	8004e3c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d004      	beq.n	8004e3c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	4798      	blx	r3
    return;
 8004e3a:	e0ce      	b.n	8004fda <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d009      	beq.n	8004e5a <HAL_SPI_IRQHandler+0x5e>
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d004      	beq.n	8004e5a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	4798      	blx	r3
    return;
 8004e58:	e0bf      	b.n	8004fda <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	f003 0320 	and.w	r3, r3, #32
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10a      	bne.n	8004e7a <HAL_SPI_IRQHandler+0x7e>
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d105      	bne.n	8004e7a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 80b0 	beq.w	8004fda <HAL_SPI_IRQHandler+0x1de>
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	f003 0320 	and.w	r3, r3, #32
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 80aa 	beq.w	8004fda <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d023      	beq.n	8004ed8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b03      	cmp	r3, #3
 8004e9a:	d011      	beq.n	8004ec0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea0:	f043 0204 	orr.w	r2, r3, #4
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	617b      	str	r3, [r7, #20]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	e00b      	b.n	8004ed8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	613b      	str	r3, [r7, #16]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	613b      	str	r3, [r7, #16]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	613b      	str	r3, [r7, #16]
 8004ed4:	693b      	ldr	r3, [r7, #16]
        return;
 8004ed6:	e080      	b.n	8004fda <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	f003 0320 	and.w	r3, r3, #32
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d014      	beq.n	8004f0c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ee6:	f043 0201 	orr.w	r2, r3, #1
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00c      	beq.n	8004f30 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f1a:	f043 0208 	orr.w	r2, r3, #8
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004f22:	2300      	movs	r3, #0
 8004f24:	60bb      	str	r3, [r7, #8]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	60bb      	str	r3, [r7, #8]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d04f      	beq.n	8004fd8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f46:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d104      	bne.n	8004f64 <HAL_SPI_IRQHandler+0x168>
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d034      	beq.n	8004fce <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0203 	bic.w	r2, r2, #3
 8004f72:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d011      	beq.n	8004fa0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f80:	4a17      	ldr	r2, [pc, #92]	@ (8004fe0 <HAL_SPI_IRQHandler+0x1e4>)
 8004f82:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7fc ff67 	bl	8001e5c <HAL_DMA_Abort_IT>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d005      	beq.n	8004fa0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f98:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d016      	beq.n	8004fd6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fac:	4a0c      	ldr	r2, [pc, #48]	@ (8004fe0 <HAL_SPI_IRQHandler+0x1e4>)
 8004fae:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7fc ff51 	bl	8001e5c <HAL_DMA_Abort_IT>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00a      	beq.n	8004fd6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fc4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8004fcc:	e003      	b.n	8004fd6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f812 	bl	8004ff8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004fd4:	e000      	b.n	8004fd8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004fd6:	bf00      	nop
    return;
 8004fd8:	bf00      	nop
  }
}
 8004fda:	3720      	adds	r7, #32
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	0800500d 	.word	0x0800500d

08004fe4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005018:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f7ff ffe6 	bl	8004ff8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800502c:	bf00      	nop
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f103 020c 	add.w	r2, r3, #12
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005048:	7812      	ldrb	r2, [r2, #0]
 800504a:	b2d2      	uxtb	r2, r2
 800504c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800505c:	b29b      	uxth	r3, r3
 800505e:	3b01      	subs	r3, #1
 8005060:	b29a      	uxth	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800506a:	b29b      	uxth	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10f      	bne.n	8005090 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800507e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005084:	b29b      	uxth	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d102      	bne.n	8005090 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f970 	bl	8005370 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005090:	bf00      	nop
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	330c      	adds	r3, #12
 80050aa:	7812      	ldrb	r2, [r2, #0]
 80050ac:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050bc:	b29b      	uxth	r3, r3
 80050be:	3b01      	subs	r3, #1
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10f      	bne.n	80050f0 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80050de:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d102      	bne.n	80050f0 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f940 	bl	8005370 <SPI_CloseRxTx_ISR>
    }
  }
}
 80050f0:	bf00      	nop
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800510a:	b292      	uxth	r2, r2
 800510c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005112:	1c9a      	adds	r2, r3, #2
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800511c:	b29b      	uxth	r3, r3
 800511e:	3b01      	subs	r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800512a:	b29b      	uxth	r3, r3
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10f      	bne.n	8005150 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800513e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005144:	b29b      	uxth	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d102      	bne.n	8005150 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f910 	bl	8005370 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005150:	bf00      	nop
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005164:	881a      	ldrh	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005170:	1c9a      	adds	r2, r3, #2
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800517a:	b29b      	uxth	r3, r3
 800517c:	3b01      	subs	r3, #1
 800517e:	b29a      	uxth	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005188:	b29b      	uxth	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10f      	bne.n	80051ae <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800519c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d102      	bne.n	80051ae <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f8e1 	bl	8005370 <SPI_CloseRxTx_ISR>
    }
  }
}
 80051ae:	bf00      	nop
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b088      	sub	sp, #32
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	4613      	mov	r3, r2
 80051c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80051c8:	f7fc fc68 	bl	8001a9c <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d0:	1a9b      	subs	r3, r3, r2
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	4413      	add	r3, r2
 80051d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051d8:	f7fc fc60 	bl	8001a9c <HAL_GetTick>
 80051dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051de:	4b39      	ldr	r3, [pc, #228]	@ (80052c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	015b      	lsls	r3, r3, #5
 80051e4:	0d1b      	lsrs	r3, r3, #20
 80051e6:	69fa      	ldr	r2, [r7, #28]
 80051e8:	fb02 f303 	mul.w	r3, r2, r3
 80051ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051ee:	e054      	b.n	800529a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f6:	d050      	beq.n	800529a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051f8:	f7fc fc50 	bl	8001a9c <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	69fa      	ldr	r2, [r7, #28]
 8005204:	429a      	cmp	r2, r3
 8005206:	d902      	bls.n	800520e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d13d      	bne.n	800528a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800521c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005226:	d111      	bne.n	800524c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005230:	d004      	beq.n	800523c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800523a:	d107      	bne.n	800524c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800524a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005250:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005254:	d10f      	bne.n	8005276 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005274:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e017      	b.n	80052ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d101      	bne.n	8005294 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	3b01      	subs	r3, #1
 8005298:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	4013      	ands	r3, r2
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	bf0c      	ite	eq
 80052aa:	2301      	moveq	r3, #1
 80052ac:	2300      	movne	r3, #0
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	461a      	mov	r2, r3
 80052b2:	79fb      	ldrb	r3, [r7, #7]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d19b      	bne.n	80051f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3720      	adds	r7, #32
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	200000b0 	.word	0x200000b0

080052c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b088      	sub	sp, #32
 80052cc:	af02      	add	r7, sp, #8
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2201      	movs	r2, #1
 80052dc:	2102      	movs	r1, #2
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f7ff ff6a 	bl	80051b8 <SPI_WaitFlagStateUntilTimeout>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d007      	beq.n	80052fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ee:	f043 0220 	orr.w	r2, r3, #32
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e032      	b.n	8005360 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80052fa:	4b1b      	ldr	r3, [pc, #108]	@ (8005368 <SPI_EndRxTxTransaction+0xa0>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a1b      	ldr	r2, [pc, #108]	@ (800536c <SPI_EndRxTxTransaction+0xa4>)
 8005300:	fba2 2303 	umull	r2, r3, r2, r3
 8005304:	0d5b      	lsrs	r3, r3, #21
 8005306:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800530a:	fb02 f303 	mul.w	r3, r2, r3
 800530e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005318:	d112      	bne.n	8005340 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2200      	movs	r2, #0
 8005322:	2180      	movs	r1, #128	@ 0x80
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f7ff ff47 	bl	80051b8 <SPI_WaitFlagStateUntilTimeout>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d016      	beq.n	800535e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005334:	f043 0220 	orr.w	r2, r3, #32
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e00f      	b.n	8005360 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00a      	beq.n	800535c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	3b01      	subs	r3, #1
 800534a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005356:	2b80      	cmp	r3, #128	@ 0x80
 8005358:	d0f2      	beq.n	8005340 <SPI_EndRxTxTransaction+0x78>
 800535a:	e000      	b.n	800535e <SPI_EndRxTxTransaction+0x96>
        break;
 800535c:	bf00      	nop
  }

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3718      	adds	r7, #24
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	200000b0 	.word	0x200000b0
 800536c:	165e9f81 	.word	0x165e9f81

08005370 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005378:	4b35      	ldr	r3, [pc, #212]	@ (8005450 <SPI_CloseRxTx_ISR+0xe0>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a35      	ldr	r2, [pc, #212]	@ (8005454 <SPI_CloseRxTx_ISR+0xe4>)
 800537e:	fba2 2303 	umull	r2, r3, r2, r3
 8005382:	0a5b      	lsrs	r3, r3, #9
 8005384:	2264      	movs	r2, #100	@ 0x64
 8005386:	fb02 f303 	mul.w	r3, r2, r3
 800538a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800538c:	f7fc fb86 	bl	8001a9c <HAL_GetTick>
 8005390:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 0220 	bic.w	r2, r2, #32
 80053a0:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d106      	bne.n	80053b6 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ac:	f043 0220 	orr.w	r2, r3, #32
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80053b4:	e009      	b.n	80053ca <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	3b01      	subs	r3, #1
 80053ba:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d0eb      	beq.n	80053a2 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	2164      	movs	r1, #100	@ 0x64
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7ff ff7a 	bl	80052c8 <SPI_EndRxTxTransaction>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d005      	beq.n	80053e6 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053de:	f043 0220 	orr.w	r2, r3, #32
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10a      	bne.n	8005404 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053ee:	2300      	movs	r3, #0
 80053f0:	60fb      	str	r3, [r7, #12]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	60fb      	str	r3, [r7, #12]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	60fb      	str	r3, [r7, #12]
 8005402:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005408:	2b00      	cmp	r3, #0
 800540a:	d115      	bne.n	8005438 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b04      	cmp	r3, #4
 8005416:	d107      	bne.n	8005428 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f7ff fddf 	bl	8004fe4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005426:	e00e      	b.n	8005446 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7fb facf 	bl	80009d4 <HAL_SPI_TxRxCpltCallback>
}
 8005436:	e006      	b.n	8005446 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7ff fdd9 	bl	8004ff8 <HAL_SPI_ErrorCallback>
}
 8005446:	bf00      	nop
 8005448:	3718      	adds	r7, #24
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	200000b0 	.word	0x200000b0
 8005454:	057619f1 	.word	0x057619f1

08005458 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e0ed      	b.n	8005646 <HAL_TIM_Base_Init+0x1ee>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a78      	ldr	r2, [pc, #480]	@ (8005650 <HAL_TIM_Base_Init+0x1f8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d045      	beq.n	8005500 <HAL_TIM_Base_Init+0xa8>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800547c:	d040      	beq.n	8005500 <HAL_TIM_Base_Init+0xa8>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a74      	ldr	r2, [pc, #464]	@ (8005654 <HAL_TIM_Base_Init+0x1fc>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d03b      	beq.n	8005500 <HAL_TIM_Base_Init+0xa8>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a72      	ldr	r2, [pc, #456]	@ (8005658 <HAL_TIM_Base_Init+0x200>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d036      	beq.n	8005500 <HAL_TIM_Base_Init+0xa8>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a71      	ldr	r2, [pc, #452]	@ (800565c <HAL_TIM_Base_Init+0x204>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d031      	beq.n	8005500 <HAL_TIM_Base_Init+0xa8>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a6f      	ldr	r2, [pc, #444]	@ (8005660 <HAL_TIM_Base_Init+0x208>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d02c      	beq.n	8005500 <HAL_TIM_Base_Init+0xa8>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a6e      	ldr	r2, [pc, #440]	@ (8005664 <HAL_TIM_Base_Init+0x20c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d027      	beq.n	8005500 <HAL_TIM_Base_Init+0xa8>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a6c      	ldr	r2, [pc, #432]	@ (8005668 <HAL_TIM_Base_Init+0x210>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d022      	beq.n	8005500 <HAL_TIM_Base_Init+0xa8>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a6b      	ldr	r2, [pc, #428]	@ (800566c <HAL_TIM_Base_Init+0x214>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d01d      	beq.n	8005500 <HAL_TIM_Base_Init+0xa8>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a69      	ldr	r2, [pc, #420]	@ (8005670 <HAL_TIM_Base_Init+0x218>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d018      	beq.n	8005500 <HAL_TIM_Base_Init+0xa8>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a68      	ldr	r2, [pc, #416]	@ (8005674 <HAL_TIM_Base_Init+0x21c>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d013      	beq.n	8005500 <HAL_TIM_Base_Init+0xa8>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a66      	ldr	r2, [pc, #408]	@ (8005678 <HAL_TIM_Base_Init+0x220>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d00e      	beq.n	8005500 <HAL_TIM_Base_Init+0xa8>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a65      	ldr	r2, [pc, #404]	@ (800567c <HAL_TIM_Base_Init+0x224>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d009      	beq.n	8005500 <HAL_TIM_Base_Init+0xa8>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a63      	ldr	r2, [pc, #396]	@ (8005680 <HAL_TIM_Base_Init+0x228>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d004      	beq.n	8005500 <HAL_TIM_Base_Init+0xa8>
 80054f6:	f240 1113 	movw	r1, #275	@ 0x113
 80054fa:	4862      	ldr	r0, [pc, #392]	@ (8005684 <HAL_TIM_Base_Init+0x22c>)
 80054fc:	f7fb fb2a 	bl	8000b54 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d014      	beq.n	8005532 <HAL_TIM_Base_Init+0xda>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	2b10      	cmp	r3, #16
 800550e:	d010      	beq.n	8005532 <HAL_TIM_Base_Init+0xda>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	2b20      	cmp	r3, #32
 8005516:	d00c      	beq.n	8005532 <HAL_TIM_Base_Init+0xda>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	2b40      	cmp	r3, #64	@ 0x40
 800551e:	d008      	beq.n	8005532 <HAL_TIM_Base_Init+0xda>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	2b60      	cmp	r3, #96	@ 0x60
 8005526:	d004      	beq.n	8005532 <HAL_TIM_Base_Init+0xda>
 8005528:	f44f 718a 	mov.w	r1, #276	@ 0x114
 800552c:	4855      	ldr	r0, [pc, #340]	@ (8005684 <HAL_TIM_Base_Init+0x22c>)
 800552e:	f7fb fb11 	bl	8000b54 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00e      	beq.n	8005558 <HAL_TIM_Base_Init+0x100>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005542:	d009      	beq.n	8005558 <HAL_TIM_Base_Init+0x100>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800554c:	d004      	beq.n	8005558 <HAL_TIM_Base_Init+0x100>
 800554e:	f240 1115 	movw	r1, #277	@ 0x115
 8005552:	484c      	ldr	r0, [pc, #304]	@ (8005684 <HAL_TIM_Base_Init+0x22c>)
 8005554:	f7fb fafe 	bl	8000b54 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005560:	d004      	beq.n	800556c <HAL_TIM_Base_Init+0x114>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a3d      	ldr	r2, [pc, #244]	@ (800565c <HAL_TIM_Base_Init+0x204>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d107      	bne.n	800557c <HAL_TIM_Base_Init+0x124>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	2b00      	cmp	r3, #0
 8005572:	bf14      	ite	ne
 8005574:	2301      	movne	r3, #1
 8005576:	2300      	moveq	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	e00e      	b.n	800559a <HAL_TIM_Base_Init+0x142>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d006      	beq.n	8005592 <HAL_TIM_Base_Init+0x13a>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800558c:	d201      	bcs.n	8005592 <HAL_TIM_Base_Init+0x13a>
 800558e:	2301      	movs	r3, #1
 8005590:	e000      	b.n	8005594 <HAL_TIM_Base_Init+0x13c>
 8005592:	2300      	movs	r3, #0
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d104      	bne.n	80055a8 <HAL_TIM_Base_Init+0x150>
 800559e:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80055a2:	4838      	ldr	r0, [pc, #224]	@ (8005684 <HAL_TIM_Base_Init+0x22c>)
 80055a4:	f7fb fad6 	bl	8000b54 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d008      	beq.n	80055c2 <HAL_TIM_Base_Init+0x16a>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	2b80      	cmp	r3, #128	@ 0x80
 80055b6:	d004      	beq.n	80055c2 <HAL_TIM_Base_Init+0x16a>
 80055b8:	f240 1117 	movw	r1, #279	@ 0x117
 80055bc:	4831      	ldr	r0, [pc, #196]	@ (8005684 <HAL_TIM_Base_Init+0x22c>)
 80055be:	f7fb fac9 	bl	8000b54 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d106      	bne.n	80055dc <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7fb fb5e 	bl	8000c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2202      	movs	r2, #2
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	3304      	adds	r3, #4
 80055ec:	4619      	mov	r1, r3
 80055ee:	4610      	mov	r0, r2
 80055f0:	f001 f94c 	bl	800688c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	40010000 	.word	0x40010000
 8005654:	40000400 	.word	0x40000400
 8005658:	40000800 	.word	0x40000800
 800565c:	40000c00 	.word	0x40000c00
 8005660:	40001000 	.word	0x40001000
 8005664:	40001400 	.word	0x40001400
 8005668:	40010400 	.word	0x40010400
 800566c:	40014000 	.word	0x40014000
 8005670:	40014400 	.word	0x40014400
 8005674:	40014800 	.word	0x40014800
 8005678:	40001800 	.word	0x40001800
 800567c:	40001c00 	.word	0x40001c00
 8005680:	40002000 	.word	0x40002000
 8005684:	0800c630 	.word	0x0800c630

08005688 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e0ed      	b.n	8005876 <HAL_TIM_OC_Init+0x1ee>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a78      	ldr	r2, [pc, #480]	@ (8005880 <HAL_TIM_OC_Init+0x1f8>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d045      	beq.n	8005730 <HAL_TIM_OC_Init+0xa8>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ac:	d040      	beq.n	8005730 <HAL_TIM_OC_Init+0xa8>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a74      	ldr	r2, [pc, #464]	@ (8005884 <HAL_TIM_OC_Init+0x1fc>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d03b      	beq.n	8005730 <HAL_TIM_OC_Init+0xa8>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a72      	ldr	r2, [pc, #456]	@ (8005888 <HAL_TIM_OC_Init+0x200>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d036      	beq.n	8005730 <HAL_TIM_OC_Init+0xa8>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a71      	ldr	r2, [pc, #452]	@ (800588c <HAL_TIM_OC_Init+0x204>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d031      	beq.n	8005730 <HAL_TIM_OC_Init+0xa8>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a6f      	ldr	r2, [pc, #444]	@ (8005890 <HAL_TIM_OC_Init+0x208>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d02c      	beq.n	8005730 <HAL_TIM_OC_Init+0xa8>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a6e      	ldr	r2, [pc, #440]	@ (8005894 <HAL_TIM_OC_Init+0x20c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d027      	beq.n	8005730 <HAL_TIM_OC_Init+0xa8>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a6c      	ldr	r2, [pc, #432]	@ (8005898 <HAL_TIM_OC_Init+0x210>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d022      	beq.n	8005730 <HAL_TIM_OC_Init+0xa8>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a6b      	ldr	r2, [pc, #428]	@ (800589c <HAL_TIM_OC_Init+0x214>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d01d      	beq.n	8005730 <HAL_TIM_OC_Init+0xa8>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a69      	ldr	r2, [pc, #420]	@ (80058a0 <HAL_TIM_OC_Init+0x218>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d018      	beq.n	8005730 <HAL_TIM_OC_Init+0xa8>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a68      	ldr	r2, [pc, #416]	@ (80058a4 <HAL_TIM_OC_Init+0x21c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d013      	beq.n	8005730 <HAL_TIM_OC_Init+0xa8>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a66      	ldr	r2, [pc, #408]	@ (80058a8 <HAL_TIM_OC_Init+0x220>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00e      	beq.n	8005730 <HAL_TIM_OC_Init+0xa8>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a65      	ldr	r2, [pc, #404]	@ (80058ac <HAL_TIM_OC_Init+0x224>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d009      	beq.n	8005730 <HAL_TIM_OC_Init+0xa8>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a63      	ldr	r2, [pc, #396]	@ (80058b0 <HAL_TIM_OC_Init+0x228>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d004      	beq.n	8005730 <HAL_TIM_OC_Init+0xa8>
 8005726:	f240 2193 	movw	r1, #659	@ 0x293
 800572a:	4862      	ldr	r0, [pc, #392]	@ (80058b4 <HAL_TIM_OC_Init+0x22c>)
 800572c:	f7fb fa12 	bl	8000b54 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d014      	beq.n	8005762 <HAL_TIM_OC_Init+0xda>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	2b10      	cmp	r3, #16
 800573e:	d010      	beq.n	8005762 <HAL_TIM_OC_Init+0xda>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	2b20      	cmp	r3, #32
 8005746:	d00c      	beq.n	8005762 <HAL_TIM_OC_Init+0xda>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	2b40      	cmp	r3, #64	@ 0x40
 800574e:	d008      	beq.n	8005762 <HAL_TIM_OC_Init+0xda>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	2b60      	cmp	r3, #96	@ 0x60
 8005756:	d004      	beq.n	8005762 <HAL_TIM_OC_Init+0xda>
 8005758:	f44f 7125 	mov.w	r1, #660	@ 0x294
 800575c:	4855      	ldr	r0, [pc, #340]	@ (80058b4 <HAL_TIM_OC_Init+0x22c>)
 800575e:	f7fb f9f9 	bl	8000b54 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00e      	beq.n	8005788 <HAL_TIM_OC_Init+0x100>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005772:	d009      	beq.n	8005788 <HAL_TIM_OC_Init+0x100>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800577c:	d004      	beq.n	8005788 <HAL_TIM_OC_Init+0x100>
 800577e:	f240 2195 	movw	r1, #661	@ 0x295
 8005782:	484c      	ldr	r0, [pc, #304]	@ (80058b4 <HAL_TIM_OC_Init+0x22c>)
 8005784:	f7fb f9e6 	bl	8000b54 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005790:	d004      	beq.n	800579c <HAL_TIM_OC_Init+0x114>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a3d      	ldr	r2, [pc, #244]	@ (800588c <HAL_TIM_OC_Init+0x204>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d107      	bne.n	80057ac <HAL_TIM_OC_Init+0x124>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	bf14      	ite	ne
 80057a4:	2301      	movne	r3, #1
 80057a6:	2300      	moveq	r3, #0
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	e00e      	b.n	80057ca <HAL_TIM_OC_Init+0x142>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d006      	beq.n	80057c2 <HAL_TIM_OC_Init+0x13a>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057bc:	d201      	bcs.n	80057c2 <HAL_TIM_OC_Init+0x13a>
 80057be:	2301      	movs	r3, #1
 80057c0:	e000      	b.n	80057c4 <HAL_TIM_OC_Init+0x13c>
 80057c2:	2300      	movs	r3, #0
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d104      	bne.n	80057d8 <HAL_TIM_OC_Init+0x150>
 80057ce:	f240 2196 	movw	r1, #662	@ 0x296
 80057d2:	4838      	ldr	r0, [pc, #224]	@ (80058b4 <HAL_TIM_OC_Init+0x22c>)
 80057d4:	f7fb f9be 	bl	8000b54 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d008      	beq.n	80057f2 <HAL_TIM_OC_Init+0x16a>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	2b80      	cmp	r3, #128	@ 0x80
 80057e6:	d004      	beq.n	80057f2 <HAL_TIM_OC_Init+0x16a>
 80057e8:	f240 2197 	movw	r1, #663	@ 0x297
 80057ec:	4831      	ldr	r0, [pc, #196]	@ (80058b4 <HAL_TIM_OC_Init+0x22c>)
 80057ee:	f7fb f9b1 	bl	8000b54 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d106      	bne.n	800580c <HAL_TIM_OC_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f856 	bl	80058b8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2202      	movs	r2, #2
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	3304      	adds	r3, #4
 800581c:	4619      	mov	r1, r3
 800581e:	4610      	mov	r0, r2
 8005820:	f001 f834 	bl	800688c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	40010000 	.word	0x40010000
 8005884:	40000400 	.word	0x40000400
 8005888:	40000800 	.word	0x40000800
 800588c:	40000c00 	.word	0x40000c00
 8005890:	40001000 	.word	0x40001000
 8005894:	40001400 	.word	0x40001400
 8005898:	40010400 	.word	0x40010400
 800589c:	40014000 	.word	0x40014000
 80058a0:	40014400 	.word	0x40014400
 80058a4:	40014800 	.word	0x40014800
 80058a8:	40001800 	.word	0x40001800
 80058ac:	40001c00 	.word	0x40001c00
 80058b0:	40002000 	.word	0x40002000
 80058b4:	0800c630 	.word	0x0800c630

080058b8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058d6:	2300      	movs	r3, #0
 80058d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a90      	ldr	r2, [pc, #576]	@ (8005b20 <HAL_TIM_OC_Start_IT+0x254>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d10f      	bne.n	8005904 <HAL_TIM_OC_Start_IT+0x38>
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 809f 	beq.w	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	f000 809b 	beq.w	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	2b08      	cmp	r3, #8
 80058f8:	f000 8097 	beq.w	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	2b0c      	cmp	r3, #12
 8005900:	f000 8093 	beq.w	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800590c:	d10e      	bne.n	800592c <HAL_TIM_OC_Start_IT+0x60>
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 808a 	beq.w	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b04      	cmp	r3, #4
 800591a:	f000 8086 	beq.w	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b08      	cmp	r3, #8
 8005922:	f000 8082 	beq.w	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b0c      	cmp	r3, #12
 800592a:	d07e      	beq.n	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a7c      	ldr	r2, [pc, #496]	@ (8005b24 <HAL_TIM_OC_Start_IT+0x258>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d10b      	bne.n	800594e <HAL_TIM_OC_Start_IT+0x82>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d076      	beq.n	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	2b04      	cmp	r3, #4
 8005940:	d073      	beq.n	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b08      	cmp	r3, #8
 8005946:	d070      	beq.n	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	2b0c      	cmp	r3, #12
 800594c:	d06d      	beq.n	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a75      	ldr	r2, [pc, #468]	@ (8005b28 <HAL_TIM_OC_Start_IT+0x25c>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d10b      	bne.n	8005970 <HAL_TIM_OC_Start_IT+0xa4>
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d065      	beq.n	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2b04      	cmp	r3, #4
 8005962:	d062      	beq.n	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	2b08      	cmp	r3, #8
 8005968:	d05f      	beq.n	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b0c      	cmp	r3, #12
 800596e:	d05c      	beq.n	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a6d      	ldr	r2, [pc, #436]	@ (8005b2c <HAL_TIM_OC_Start_IT+0x260>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d10b      	bne.n	8005992 <HAL_TIM_OC_Start_IT+0xc6>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d054      	beq.n	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2b04      	cmp	r3, #4
 8005984:	d051      	beq.n	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b08      	cmp	r3, #8
 800598a:	d04e      	beq.n	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	2b0c      	cmp	r3, #12
 8005990:	d04b      	beq.n	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a66      	ldr	r2, [pc, #408]	@ (8005b30 <HAL_TIM_OC_Start_IT+0x264>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d10b      	bne.n	80059b4 <HAL_TIM_OC_Start_IT+0xe8>
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d043      	beq.n	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d040      	beq.n	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	2b08      	cmp	r3, #8
 80059ac:	d03d      	beq.n	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b0c      	cmp	r3, #12
 80059b2:	d03a      	beq.n	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a5e      	ldr	r2, [pc, #376]	@ (8005b34 <HAL_TIM_OC_Start_IT+0x268>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d105      	bne.n	80059ca <HAL_TIM_OC_Start_IT+0xfe>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d032      	beq.n	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	d02f      	beq.n	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a5a      	ldr	r2, [pc, #360]	@ (8005b38 <HAL_TIM_OC_Start_IT+0x26c>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d102      	bne.n	80059da <HAL_TIM_OC_Start_IT+0x10e>
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d027      	beq.n	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a57      	ldr	r2, [pc, #348]	@ (8005b3c <HAL_TIM_OC_Start_IT+0x270>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d102      	bne.n	80059ea <HAL_TIM_OC_Start_IT+0x11e>
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d01f      	beq.n	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a54      	ldr	r2, [pc, #336]	@ (8005b40 <HAL_TIM_OC_Start_IT+0x274>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d105      	bne.n	8005a00 <HAL_TIM_OC_Start_IT+0x134>
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d017      	beq.n	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b04      	cmp	r3, #4
 80059fe:	d014      	beq.n	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a4f      	ldr	r2, [pc, #316]	@ (8005b44 <HAL_TIM_OC_Start_IT+0x278>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d102      	bne.n	8005a10 <HAL_TIM_OC_Start_IT+0x144>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00c      	beq.n	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a4c      	ldr	r2, [pc, #304]	@ (8005b48 <HAL_TIM_OC_Start_IT+0x27c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d102      	bne.n	8005a20 <HAL_TIM_OC_Start_IT+0x154>
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d004      	beq.n	8005a2a <HAL_TIM_OC_Start_IT+0x15e>
 8005a20:	f44f 715d 	mov.w	r1, #884	@ 0x374
 8005a24:	4849      	ldr	r0, [pc, #292]	@ (8005b4c <HAL_TIM_OC_Start_IT+0x280>)
 8005a26:	f7fb f895 	bl	8000b54 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d109      	bne.n	8005a44 <HAL_TIM_OC_Start_IT+0x178>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	bf14      	ite	ne
 8005a3c:	2301      	movne	r3, #1
 8005a3e:	2300      	moveq	r3, #0
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	e022      	b.n	8005a8a <HAL_TIM_OC_Start_IT+0x1be>
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d109      	bne.n	8005a5e <HAL_TIM_OC_Start_IT+0x192>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	bf14      	ite	ne
 8005a56:	2301      	movne	r3, #1
 8005a58:	2300      	moveq	r3, #0
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	e015      	b.n	8005a8a <HAL_TIM_OC_Start_IT+0x1be>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	d109      	bne.n	8005a78 <HAL_TIM_OC_Start_IT+0x1ac>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	bf14      	ite	ne
 8005a70:	2301      	movne	r3, #1
 8005a72:	2300      	moveq	r3, #0
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	e008      	b.n	8005a8a <HAL_TIM_OC_Start_IT+0x1be>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	bf14      	ite	ne
 8005a84:	2301      	movne	r3, #1
 8005a86:	2300      	moveq	r3, #0
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <HAL_TIM_OC_Start_IT+0x1c6>
  {
    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e0e0      	b.n	8005c54 <HAL_TIM_OC_Start_IT+0x388>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d104      	bne.n	8005aa2 <HAL_TIM_OC_Start_IT+0x1d6>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005aa0:	e013      	b.n	8005aca <HAL_TIM_OC_Start_IT+0x1fe>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	d104      	bne.n	8005ab2 <HAL_TIM_OC_Start_IT+0x1e6>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ab0:	e00b      	b.n	8005aca <HAL_TIM_OC_Start_IT+0x1fe>
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b08      	cmp	r3, #8
 8005ab6:	d104      	bne.n	8005ac2 <HAL_TIM_OC_Start_IT+0x1f6>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2202      	movs	r2, #2
 8005abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ac0:	e003      	b.n	8005aca <HAL_TIM_OC_Start_IT+0x1fe>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b0c      	cmp	r3, #12
 8005ace:	d85a      	bhi.n	8005b86 <HAL_TIM_OC_Start_IT+0x2ba>
 8005ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ad8 <HAL_TIM_OC_Start_IT+0x20c>)
 8005ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad6:	bf00      	nop
 8005ad8:	08005b0d 	.word	0x08005b0d
 8005adc:	08005b87 	.word	0x08005b87
 8005ae0:	08005b87 	.word	0x08005b87
 8005ae4:	08005b87 	.word	0x08005b87
 8005ae8:	08005b51 	.word	0x08005b51
 8005aec:	08005b87 	.word	0x08005b87
 8005af0:	08005b87 	.word	0x08005b87
 8005af4:	08005b87 	.word	0x08005b87
 8005af8:	08005b63 	.word	0x08005b63
 8005afc:	08005b87 	.word	0x08005b87
 8005b00:	08005b87 	.word	0x08005b87
 8005b04:	08005b87 	.word	0x08005b87
 8005b08:	08005b75 	.word	0x08005b75
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68da      	ldr	r2, [r3, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0202 	orr.w	r2, r2, #2
 8005b1a:	60da      	str	r2, [r3, #12]
      break;
 8005b1c:	e036      	b.n	8005b8c <HAL_TIM_OC_Start_IT+0x2c0>
 8005b1e:	bf00      	nop
 8005b20:	40010000 	.word	0x40010000
 8005b24:	40000400 	.word	0x40000400
 8005b28:	40000800 	.word	0x40000800
 8005b2c:	40000c00 	.word	0x40000c00
 8005b30:	40010400 	.word	0x40010400
 8005b34:	40014000 	.word	0x40014000
 8005b38:	40014400 	.word	0x40014400
 8005b3c:	40014800 	.word	0x40014800
 8005b40:	40001800 	.word	0x40001800
 8005b44:	40001c00 	.word	0x40001c00
 8005b48:	40002000 	.word	0x40002000
 8005b4c:	0800c630 	.word	0x0800c630
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68da      	ldr	r2, [r3, #12]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f042 0204 	orr.w	r2, r2, #4
 8005b5e:	60da      	str	r2, [r3, #12]
      break;
 8005b60:	e014      	b.n	8005b8c <HAL_TIM_OC_Start_IT+0x2c0>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68da      	ldr	r2, [r3, #12]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f042 0208 	orr.w	r2, r2, #8
 8005b70:	60da      	str	r2, [r3, #12]
      break;
 8005b72:	e00b      	b.n	8005b8c <HAL_TIM_OC_Start_IT+0x2c0>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0210 	orr.w	r2, r2, #16
 8005b82:	60da      	str	r2, [r3, #12]
      break;
 8005b84:	e002      	b.n	8005b8c <HAL_TIM_OC_Start_IT+0x2c0>
    }

    default:
      status = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	73fb      	strb	r3, [r7, #15]
      break;
 8005b8a:	bf00      	nop
  }

  if (status == HAL_OK)
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d15f      	bne.n	8005c52 <HAL_TIM_OC_Start_IT+0x386>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2201      	movs	r2, #1
 8005b98:	6839      	ldr	r1, [r7, #0]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f001 f9f6 	bl	8006f8c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a2d      	ldr	r2, [pc, #180]	@ (8005c5c <HAL_TIM_OC_Start_IT+0x390>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d004      	beq.n	8005bb4 <HAL_TIM_OC_Start_IT+0x2e8>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a2c      	ldr	r2, [pc, #176]	@ (8005c60 <HAL_TIM_OC_Start_IT+0x394>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d101      	bne.n	8005bb8 <HAL_TIM_OC_Start_IT+0x2ec>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e000      	b.n	8005bba <HAL_TIM_OC_Start_IT+0x2ee>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d007      	beq.n	8005bce <HAL_TIM_OC_Start_IT+0x302>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bcc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a22      	ldr	r2, [pc, #136]	@ (8005c5c <HAL_TIM_OC_Start_IT+0x390>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d022      	beq.n	8005c1e <HAL_TIM_OC_Start_IT+0x352>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005be0:	d01d      	beq.n	8005c1e <HAL_TIM_OC_Start_IT+0x352>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a1f      	ldr	r2, [pc, #124]	@ (8005c64 <HAL_TIM_OC_Start_IT+0x398>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d018      	beq.n	8005c1e <HAL_TIM_OC_Start_IT+0x352>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8005c68 <HAL_TIM_OC_Start_IT+0x39c>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d013      	beq.n	8005c1e <HAL_TIM_OC_Start_IT+0x352>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a1c      	ldr	r2, [pc, #112]	@ (8005c6c <HAL_TIM_OC_Start_IT+0x3a0>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d00e      	beq.n	8005c1e <HAL_TIM_OC_Start_IT+0x352>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a16      	ldr	r2, [pc, #88]	@ (8005c60 <HAL_TIM_OC_Start_IT+0x394>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d009      	beq.n	8005c1e <HAL_TIM_OC_Start_IT+0x352>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a18      	ldr	r2, [pc, #96]	@ (8005c70 <HAL_TIM_OC_Start_IT+0x3a4>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d004      	beq.n	8005c1e <HAL_TIM_OC_Start_IT+0x352>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a16      	ldr	r2, [pc, #88]	@ (8005c74 <HAL_TIM_OC_Start_IT+0x3a8>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d111      	bne.n	8005c42 <HAL_TIM_OC_Start_IT+0x376>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f003 0307 	and.w	r3, r3, #7
 8005c28:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	2b06      	cmp	r3, #6
 8005c2e:	d010      	beq.n	8005c52 <HAL_TIM_OC_Start_IT+0x386>
      {
        __HAL_TIM_ENABLE(htim);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f042 0201 	orr.w	r2, r2, #1
 8005c3e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c40:	e007      	b.n	8005c52 <HAL_TIM_OC_Start_IT+0x386>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f042 0201 	orr.w	r2, r2, #1
 8005c50:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	40010000 	.word	0x40010000
 8005c60:	40010400 	.word	0x40010400
 8005c64:	40000400 	.word	0x40000400
 8005c68:	40000800 	.word	0x40000800
 8005c6c:	40000c00 	.word	0x40000c00
 8005c70:	40014000 	.word	0x40014000
 8005c74:	40001800 	.word	0x40001800

08005c78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d020      	beq.n	8005cdc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d01b      	beq.n	8005cdc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f06f 0202 	mvn.w	r2, #2
 8005cac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fdc4 	bl	8006850 <HAL_TIM_IC_CaptureCallback>
 8005cc8:	e005      	b.n	8005cd6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7fa fed8 	bl	8000a80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 fdc7 	bl	8006864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f003 0304 	and.w	r3, r3, #4
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d020      	beq.n	8005d28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f003 0304 	and.w	r3, r3, #4
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d01b      	beq.n	8005d28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f06f 0204 	mvn.w	r2, #4
 8005cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fd9e 	bl	8006850 <HAL_TIM_IC_CaptureCallback>
 8005d14:	e005      	b.n	8005d22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7fa feb2 	bl	8000a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 fda1 	bl	8006864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f003 0308 	and.w	r3, r3, #8
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d020      	beq.n	8005d74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f003 0308 	and.w	r3, r3, #8
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d01b      	beq.n	8005d74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f06f 0208 	mvn.w	r2, #8
 8005d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2204      	movs	r2, #4
 8005d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	f003 0303 	and.w	r3, r3, #3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 fd78 	bl	8006850 <HAL_TIM_IC_CaptureCallback>
 8005d60:	e005      	b.n	8005d6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7fa fe8c 	bl	8000a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 fd7b 	bl	8006864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f003 0310 	and.w	r3, r3, #16
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d020      	beq.n	8005dc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f003 0310 	and.w	r3, r3, #16
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d01b      	beq.n	8005dc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f06f 0210 	mvn.w	r2, #16
 8005d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2208      	movs	r2, #8
 8005d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fd52 	bl	8006850 <HAL_TIM_IC_CaptureCallback>
 8005dac:	e005      	b.n	8005dba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7fa fe66 	bl	8000a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 fd55 	bl	8006864 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00c      	beq.n	8005de4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d007      	beq.n	8005de4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f06f 0201 	mvn.w	r2, #1
 8005ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fd2c 	bl	800683c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00c      	beq.n	8005e08 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d007      	beq.n	8005e08 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f001 fa2e 	bl	8007264 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00c      	beq.n	8005e2c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d007      	beq.n	8005e2c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fd26 	bl	8006878 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	f003 0320 	and.w	r3, r3, #32
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00c      	beq.n	8005e50 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f003 0320 	and.w	r3, r3, #32
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d007      	beq.n	8005e50 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f06f 0220 	mvn.w	r2, #32
 8005e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f001 fa00 	bl	8007250 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e50:	bf00      	nop
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e64:	2300      	movs	r3, #0
 8005e66:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d010      	beq.n	8005e90 <HAL_TIM_OC_ConfigChannel+0x38>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2b04      	cmp	r3, #4
 8005e72:	d00d      	beq.n	8005e90 <HAL_TIM_OC_ConfigChannel+0x38>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b08      	cmp	r3, #8
 8005e78:	d00a      	beq.n	8005e90 <HAL_TIM_OC_ConfigChannel+0x38>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b0c      	cmp	r3, #12
 8005e7e:	d007      	beq.n	8005e90 <HAL_TIM_OC_ConfigChannel+0x38>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b3c      	cmp	r3, #60	@ 0x3c
 8005e84:	d004      	beq.n	8005e90 <HAL_TIM_OC_ConfigChannel+0x38>
 8005e86:	f44f 617d 	mov.w	r1, #4048	@ 0xfd0
 8005e8a:	487f      	ldr	r0, [pc, #508]	@ (8006088 <HAL_TIM_OC_ConfigChannel+0x230>)
 8005e8c:	f7fa fe62 	bl	8000b54 <assert_failed>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d018      	beq.n	8005eca <HAL_TIM_OC_ConfigChannel+0x72>
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b10      	cmp	r3, #16
 8005e9e:	d014      	beq.n	8005eca <HAL_TIM_OC_ConfigChannel+0x72>
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b20      	cmp	r3, #32
 8005ea6:	d010      	beq.n	8005eca <HAL_TIM_OC_ConfigChannel+0x72>
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b30      	cmp	r3, #48	@ 0x30
 8005eae:	d00c      	beq.n	8005eca <HAL_TIM_OC_ConfigChannel+0x72>
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2b50      	cmp	r3, #80	@ 0x50
 8005eb6:	d008      	beq.n	8005eca <HAL_TIM_OC_ConfigChannel+0x72>
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b40      	cmp	r3, #64	@ 0x40
 8005ebe:	d004      	beq.n	8005eca <HAL_TIM_OC_ConfigChannel+0x72>
 8005ec0:	f640 71d1 	movw	r1, #4049	@ 0xfd1
 8005ec4:	4870      	ldr	r0, [pc, #448]	@ (8006088 <HAL_TIM_OC_ConfigChannel+0x230>)
 8005ec6:	f7fa fe45 	bl	8000b54 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d008      	beq.n	8005ee4 <HAL_TIM_OC_ConfigChannel+0x8c>
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d004      	beq.n	8005ee4 <HAL_TIM_OC_ConfigChannel+0x8c>
 8005eda:	f640 71d2 	movw	r1, #4050	@ 0xfd2
 8005ede:	486a      	ldr	r0, [pc, #424]	@ (8006088 <HAL_TIM_OC_ConfigChannel+0x230>)
 8005ee0:	f7fa fe38 	bl	8000b54 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d101      	bne.n	8005ef2 <HAL_TIM_OC_ConfigChannel+0x9a>
 8005eee:	2302      	movs	r3, #2
 8005ef0:	e114      	b.n	800611c <HAL_TIM_OC_ConfigChannel+0x2c4>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b0c      	cmp	r3, #12
 8005efe:	f200 8105 	bhi.w	800610c <HAL_TIM_OC_ConfigChannel+0x2b4>
 8005f02:	a201      	add	r2, pc, #4	@ (adr r2, 8005f08 <HAL_TIM_OC_ConfigChannel+0xb0>)
 8005f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f08:	08005f3d 	.word	0x08005f3d
 8005f0c:	0800610d 	.word	0x0800610d
 8005f10:	0800610d 	.word	0x0800610d
 8005f14:	0800610d 	.word	0x0800610d
 8005f18:	08005fcd 	.word	0x08005fcd
 8005f1c:	0800610d 	.word	0x0800610d
 8005f20:	0800610d 	.word	0x0800610d
 8005f24:	0800610d 	.word	0x0800610d
 8005f28:	08006035 	.word	0x08006035
 8005f2c:	0800610d 	.word	0x0800610d
 8005f30:	0800610d 	.word	0x0800610d
 8005f34:	0800610d 	.word	0x0800610d
 8005f38:	080060b9 	.word	0x080060b9
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a52      	ldr	r2, [pc, #328]	@ (800608c <HAL_TIM_OC_ConfigChannel+0x234>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d03b      	beq.n	8005fbe <HAL_TIM_OC_ConfigChannel+0x166>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f4e:	d036      	beq.n	8005fbe <HAL_TIM_OC_ConfigChannel+0x166>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a4e      	ldr	r2, [pc, #312]	@ (8006090 <HAL_TIM_OC_ConfigChannel+0x238>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d031      	beq.n	8005fbe <HAL_TIM_OC_ConfigChannel+0x166>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a4d      	ldr	r2, [pc, #308]	@ (8006094 <HAL_TIM_OC_ConfigChannel+0x23c>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d02c      	beq.n	8005fbe <HAL_TIM_OC_ConfigChannel+0x166>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a4b      	ldr	r2, [pc, #300]	@ (8006098 <HAL_TIM_OC_ConfigChannel+0x240>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d027      	beq.n	8005fbe <HAL_TIM_OC_ConfigChannel+0x166>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a4a      	ldr	r2, [pc, #296]	@ (800609c <HAL_TIM_OC_ConfigChannel+0x244>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d022      	beq.n	8005fbe <HAL_TIM_OC_ConfigChannel+0x166>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a48      	ldr	r2, [pc, #288]	@ (80060a0 <HAL_TIM_OC_ConfigChannel+0x248>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d01d      	beq.n	8005fbe <HAL_TIM_OC_ConfigChannel+0x166>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a47      	ldr	r2, [pc, #284]	@ (80060a4 <HAL_TIM_OC_ConfigChannel+0x24c>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d018      	beq.n	8005fbe <HAL_TIM_OC_ConfigChannel+0x166>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a45      	ldr	r2, [pc, #276]	@ (80060a8 <HAL_TIM_OC_ConfigChannel+0x250>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d013      	beq.n	8005fbe <HAL_TIM_OC_ConfigChannel+0x166>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a44      	ldr	r2, [pc, #272]	@ (80060ac <HAL_TIM_OC_ConfigChannel+0x254>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d00e      	beq.n	8005fbe <HAL_TIM_OC_ConfigChannel+0x166>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a42      	ldr	r2, [pc, #264]	@ (80060b0 <HAL_TIM_OC_ConfigChannel+0x258>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d009      	beq.n	8005fbe <HAL_TIM_OC_ConfigChannel+0x166>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a41      	ldr	r2, [pc, #260]	@ (80060b4 <HAL_TIM_OC_ConfigChannel+0x25c>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d004      	beq.n	8005fbe <HAL_TIM_OC_ConfigChannel+0x166>
 8005fb4:	f640 71dc 	movw	r1, #4060	@ 0xfdc
 8005fb8:	4833      	ldr	r0, [pc, #204]	@ (8006088 <HAL_TIM_OC_ConfigChannel+0x230>)
 8005fba:	f7fa fdcb 	bl	8000b54 <assert_failed>

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68b9      	ldr	r1, [r7, #8]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f000 fd0d 	bl	80069e4 <TIM_OC1_SetConfig>
      break;
 8005fca:	e0a2      	b.n	8006112 <HAL_TIM_OC_ConfigChannel+0x2ba>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a2e      	ldr	r2, [pc, #184]	@ (800608c <HAL_TIM_OC_ConfigChannel+0x234>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d027      	beq.n	8006026 <HAL_TIM_OC_ConfigChannel+0x1ce>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fde:	d022      	beq.n	8006026 <HAL_TIM_OC_ConfigChannel+0x1ce>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a2a      	ldr	r2, [pc, #168]	@ (8006090 <HAL_TIM_OC_ConfigChannel+0x238>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d01d      	beq.n	8006026 <HAL_TIM_OC_ConfigChannel+0x1ce>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a29      	ldr	r2, [pc, #164]	@ (8006094 <HAL_TIM_OC_ConfigChannel+0x23c>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d018      	beq.n	8006026 <HAL_TIM_OC_ConfigChannel+0x1ce>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a27      	ldr	r2, [pc, #156]	@ (8006098 <HAL_TIM_OC_ConfigChannel+0x240>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d013      	beq.n	8006026 <HAL_TIM_OC_ConfigChannel+0x1ce>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a26      	ldr	r2, [pc, #152]	@ (800609c <HAL_TIM_OC_ConfigChannel+0x244>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d00e      	beq.n	8006026 <HAL_TIM_OC_ConfigChannel+0x1ce>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a24      	ldr	r2, [pc, #144]	@ (80060a0 <HAL_TIM_OC_ConfigChannel+0x248>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d009      	beq.n	8006026 <HAL_TIM_OC_ConfigChannel+0x1ce>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a25      	ldr	r2, [pc, #148]	@ (80060ac <HAL_TIM_OC_ConfigChannel+0x254>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d004      	beq.n	8006026 <HAL_TIM_OC_ConfigChannel+0x1ce>
 800601c:	f640 71e6 	movw	r1, #4070	@ 0xfe6
 8006020:	4819      	ldr	r0, [pc, #100]	@ (8006088 <HAL_TIM_OC_ConfigChannel+0x230>)
 8006022:	f7fa fd97 	bl	8000b54 <assert_failed>

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68b9      	ldr	r1, [r7, #8]
 800602c:	4618      	mov	r0, r3
 800602e:	f000 fd73 	bl	8006b18 <TIM_OC2_SetConfig>
      break;
 8006032:	e06e      	b.n	8006112 <HAL_TIM_OC_ConfigChannel+0x2ba>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a14      	ldr	r2, [pc, #80]	@ (800608c <HAL_TIM_OC_ConfigChannel+0x234>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d01d      	beq.n	800607a <HAL_TIM_OC_ConfigChannel+0x222>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006046:	d018      	beq.n	800607a <HAL_TIM_OC_ConfigChannel+0x222>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a10      	ldr	r2, [pc, #64]	@ (8006090 <HAL_TIM_OC_ConfigChannel+0x238>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d013      	beq.n	800607a <HAL_TIM_OC_ConfigChannel+0x222>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a0f      	ldr	r2, [pc, #60]	@ (8006094 <HAL_TIM_OC_ConfigChannel+0x23c>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d00e      	beq.n	800607a <HAL_TIM_OC_ConfigChannel+0x222>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a0d      	ldr	r2, [pc, #52]	@ (8006098 <HAL_TIM_OC_ConfigChannel+0x240>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d009      	beq.n	800607a <HAL_TIM_OC_ConfigChannel+0x222>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a0c      	ldr	r2, [pc, #48]	@ (800609c <HAL_TIM_OC_ConfigChannel+0x244>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d004      	beq.n	800607a <HAL_TIM_OC_ConfigChannel+0x222>
 8006070:	f44f 617f 	mov.w	r1, #4080	@ 0xff0
 8006074:	4804      	ldr	r0, [pc, #16]	@ (8006088 <HAL_TIM_OC_ConfigChannel+0x230>)
 8006076:	f7fa fd6d 	bl	8000b54 <assert_failed>

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68b9      	ldr	r1, [r7, #8]
 8006080:	4618      	mov	r0, r3
 8006082:	f000 fde7 	bl	8006c54 <TIM_OC3_SetConfig>
      break;
 8006086:	e044      	b.n	8006112 <HAL_TIM_OC_ConfigChannel+0x2ba>
 8006088:	0800c630 	.word	0x0800c630
 800608c:	40010000 	.word	0x40010000
 8006090:	40000400 	.word	0x40000400
 8006094:	40000800 	.word	0x40000800
 8006098:	40000c00 	.word	0x40000c00
 800609c:	40010400 	.word	0x40010400
 80060a0:	40014000 	.word	0x40014000
 80060a4:	40014400 	.word	0x40014400
 80060a8:	40014800 	.word	0x40014800
 80060ac:	40001800 	.word	0x40001800
 80060b0:	40001c00 	.word	0x40001c00
 80060b4:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a19      	ldr	r2, [pc, #100]	@ (8006124 <HAL_TIM_OC_ConfigChannel+0x2cc>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d01d      	beq.n	80060fe <HAL_TIM_OC_ConfigChannel+0x2a6>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060ca:	d018      	beq.n	80060fe <HAL_TIM_OC_ConfigChannel+0x2a6>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a15      	ldr	r2, [pc, #84]	@ (8006128 <HAL_TIM_OC_ConfigChannel+0x2d0>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d013      	beq.n	80060fe <HAL_TIM_OC_ConfigChannel+0x2a6>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a14      	ldr	r2, [pc, #80]	@ (800612c <HAL_TIM_OC_ConfigChannel+0x2d4>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d00e      	beq.n	80060fe <HAL_TIM_OC_ConfigChannel+0x2a6>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a12      	ldr	r2, [pc, #72]	@ (8006130 <HAL_TIM_OC_ConfigChannel+0x2d8>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d009      	beq.n	80060fe <HAL_TIM_OC_ConfigChannel+0x2a6>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a11      	ldr	r2, [pc, #68]	@ (8006134 <HAL_TIM_OC_ConfigChannel+0x2dc>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d004      	beq.n	80060fe <HAL_TIM_OC_ConfigChannel+0x2a6>
 80060f4:	f640 71fa 	movw	r1, #4090	@ 0xffa
 80060f8:	480f      	ldr	r0, [pc, #60]	@ (8006138 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 80060fa:	f7fa fd2b 	bl	8000b54 <assert_failed>

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68b9      	ldr	r1, [r7, #8]
 8006104:	4618      	mov	r0, r3
 8006106:	f000 fe43 	bl	8006d90 <TIM_OC4_SetConfig>
      break;
 800610a:	e002      	b.n	8006112 <HAL_TIM_OC_ConfigChannel+0x2ba>
    }

    default:
      status = HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	75fb      	strb	r3, [r7, #23]
      break;
 8006110:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800611a:	7dfb      	ldrb	r3, [r7, #23]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3718      	adds	r7, #24
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	40010000 	.word	0x40010000
 8006128:	40000400 	.word	0x40000400
 800612c:	40000800 	.word	0x40000800
 8006130:	40000c00 	.word	0x40000c00
 8006134:	40010400 	.word	0x40010400
 8006138:	0800c630 	.word	0x0800c630

0800613c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006150:	2b01      	cmp	r3, #1
 8006152:	d101      	bne.n	8006158 <HAL_TIM_ConfigClockSource+0x1c>
 8006154:	2302      	movs	r3, #2
 8006156:	e35c      	b.n	8006812 <HAL_TIM_ConfigClockSource+0x6d6>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2202      	movs	r2, #2
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006170:	d029      	beq.n	80061c6 <HAL_TIM_ConfigClockSource+0x8a>
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2b70      	cmp	r3, #112	@ 0x70
 8006178:	d025      	beq.n	80061c6 <HAL_TIM_ConfigClockSource+0x8a>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006182:	d020      	beq.n	80061c6 <HAL_TIM_ConfigClockSource+0x8a>
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b40      	cmp	r3, #64	@ 0x40
 800618a:	d01c      	beq.n	80061c6 <HAL_TIM_ConfigClockSource+0x8a>
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b50      	cmp	r3, #80	@ 0x50
 8006192:	d018      	beq.n	80061c6 <HAL_TIM_ConfigClockSource+0x8a>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2b60      	cmp	r3, #96	@ 0x60
 800619a:	d014      	beq.n	80061c6 <HAL_TIM_ConfigClockSource+0x8a>
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d010      	beq.n	80061c6 <HAL_TIM_ConfigClockSource+0x8a>
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b10      	cmp	r3, #16
 80061aa:	d00c      	beq.n	80061c6 <HAL_TIM_ConfigClockSource+0x8a>
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b20      	cmp	r3, #32
 80061b2:	d008      	beq.n	80061c6 <HAL_TIM_ConfigClockSource+0x8a>
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b30      	cmp	r3, #48	@ 0x30
 80061ba:	d004      	beq.n	80061c6 <HAL_TIM_ConfigClockSource+0x8a>
 80061bc:	f241 41c3 	movw	r1, #5315	@ 0x14c3
 80061c0:	4893      	ldr	r0, [pc, #588]	@ (8006410 <HAL_TIM_ConfigClockSource+0x2d4>)
 80061c2:	f7fa fcc7 	bl	8000b54 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80061d4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061dc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061ee:	f000 812b 	beq.w	8006448 <HAL_TIM_ConfigClockSource+0x30c>
 80061f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061f6:	f200 82ff 	bhi.w	80067f8 <HAL_TIM_ConfigClockSource+0x6bc>
 80061fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061fe:	d02e      	beq.n	800625e <HAL_TIM_ConfigClockSource+0x122>
 8006200:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006204:	f200 82f8 	bhi.w	80067f8 <HAL_TIM_ConfigClockSource+0x6bc>
 8006208:	2b70      	cmp	r3, #112	@ 0x70
 800620a:	f000 8082 	beq.w	8006312 <HAL_TIM_ConfigClockSource+0x1d6>
 800620e:	2b70      	cmp	r3, #112	@ 0x70
 8006210:	f200 82f2 	bhi.w	80067f8 <HAL_TIM_ConfigClockSource+0x6bc>
 8006214:	2b60      	cmp	r3, #96	@ 0x60
 8006216:	f000 81f9 	beq.w	800660c <HAL_TIM_ConfigClockSource+0x4d0>
 800621a:	2b60      	cmp	r3, #96	@ 0x60
 800621c:	f200 82ec 	bhi.w	80067f8 <HAL_TIM_ConfigClockSource+0x6bc>
 8006220:	2b50      	cmp	r3, #80	@ 0x50
 8006222:	f000 8182 	beq.w	800652a <HAL_TIM_ConfigClockSource+0x3ee>
 8006226:	2b50      	cmp	r3, #80	@ 0x50
 8006228:	f200 82e6 	bhi.w	80067f8 <HAL_TIM_ConfigClockSource+0x6bc>
 800622c:	2b40      	cmp	r3, #64	@ 0x40
 800622e:	f000 824d 	beq.w	80066cc <HAL_TIM_ConfigClockSource+0x590>
 8006232:	2b40      	cmp	r3, #64	@ 0x40
 8006234:	f200 82e0 	bhi.w	80067f8 <HAL_TIM_ConfigClockSource+0x6bc>
 8006238:	2b30      	cmp	r3, #48	@ 0x30
 800623a:	f000 82a7 	beq.w	800678c <HAL_TIM_ConfigClockSource+0x650>
 800623e:	2b30      	cmp	r3, #48	@ 0x30
 8006240:	f200 82da 	bhi.w	80067f8 <HAL_TIM_ConfigClockSource+0x6bc>
 8006244:	2b20      	cmp	r3, #32
 8006246:	f000 82a1 	beq.w	800678c <HAL_TIM_ConfigClockSource+0x650>
 800624a:	2b20      	cmp	r3, #32
 800624c:	f200 82d4 	bhi.w	80067f8 <HAL_TIM_ConfigClockSource+0x6bc>
 8006250:	2b00      	cmp	r3, #0
 8006252:	f000 829b 	beq.w	800678c <HAL_TIM_ConfigClockSource+0x650>
 8006256:	2b10      	cmp	r3, #16
 8006258:	f000 8298 	beq.w	800678c <HAL_TIM_ConfigClockSource+0x650>
 800625c:	e2cc      	b.n	80067f8 <HAL_TIM_ConfigClockSource+0x6bc>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a6c      	ldr	r2, [pc, #432]	@ (8006414 <HAL_TIM_ConfigClockSource+0x2d8>)
 8006264:	4293      	cmp	r3, r2
 8006266:	f000 82ca 	beq.w	80067fe <HAL_TIM_ConfigClockSource+0x6c2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006272:	f000 82c4 	beq.w	80067fe <HAL_TIM_ConfigClockSource+0x6c2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a67      	ldr	r2, [pc, #412]	@ (8006418 <HAL_TIM_ConfigClockSource+0x2dc>)
 800627c:	4293      	cmp	r3, r2
 800627e:	f000 82be 	beq.w	80067fe <HAL_TIM_ConfigClockSource+0x6c2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a65      	ldr	r2, [pc, #404]	@ (800641c <HAL_TIM_ConfigClockSource+0x2e0>)
 8006288:	4293      	cmp	r3, r2
 800628a:	f000 82b8 	beq.w	80067fe <HAL_TIM_ConfigClockSource+0x6c2>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a63      	ldr	r2, [pc, #396]	@ (8006420 <HAL_TIM_ConfigClockSource+0x2e4>)
 8006294:	4293      	cmp	r3, r2
 8006296:	f000 82b2 	beq.w	80067fe <HAL_TIM_ConfigClockSource+0x6c2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a61      	ldr	r2, [pc, #388]	@ (8006424 <HAL_TIM_ConfigClockSource+0x2e8>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	f000 82ac 	beq.w	80067fe <HAL_TIM_ConfigClockSource+0x6c2>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a5f      	ldr	r2, [pc, #380]	@ (8006428 <HAL_TIM_ConfigClockSource+0x2ec>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	f000 82a6 	beq.w	80067fe <HAL_TIM_ConfigClockSource+0x6c2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a5d      	ldr	r2, [pc, #372]	@ (800642c <HAL_TIM_ConfigClockSource+0x2f0>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	f000 82a0 	beq.w	80067fe <HAL_TIM_ConfigClockSource+0x6c2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a5b      	ldr	r2, [pc, #364]	@ (8006430 <HAL_TIM_ConfigClockSource+0x2f4>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	f000 829a 	beq.w	80067fe <HAL_TIM_ConfigClockSource+0x6c2>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a59      	ldr	r2, [pc, #356]	@ (8006434 <HAL_TIM_ConfigClockSource+0x2f8>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	f000 8294 	beq.w	80067fe <HAL_TIM_ConfigClockSource+0x6c2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a57      	ldr	r2, [pc, #348]	@ (8006438 <HAL_TIM_ConfigClockSource+0x2fc>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	f000 828e 	beq.w	80067fe <HAL_TIM_ConfigClockSource+0x6c2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a55      	ldr	r2, [pc, #340]	@ (800643c <HAL_TIM_ConfigClockSource+0x300>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	f000 8288 	beq.w	80067fe <HAL_TIM_ConfigClockSource+0x6c2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a53      	ldr	r2, [pc, #332]	@ (8006440 <HAL_TIM_ConfigClockSource+0x304>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	f000 8282 	beq.w	80067fe <HAL_TIM_ConfigClockSource+0x6c2>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a51      	ldr	r2, [pc, #324]	@ (8006444 <HAL_TIM_ConfigClockSource+0x308>)
 8006300:	4293      	cmp	r3, r2
 8006302:	f000 827c 	beq.w	80067fe <HAL_TIM_ConfigClockSource+0x6c2>
 8006306:	f241 41cf 	movw	r1, #5327	@ 0x14cf
 800630a:	4841      	ldr	r0, [pc, #260]	@ (8006410 <HAL_TIM_ConfigClockSource+0x2d4>)
 800630c:	f7fa fc22 	bl	8000b54 <assert_failed>
      break;
 8006310:	e275      	b.n	80067fe <HAL_TIM_ConfigClockSource+0x6c2>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a3f      	ldr	r2, [pc, #252]	@ (8006414 <HAL_TIM_ConfigClockSource+0x2d8>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d027      	beq.n	800636c <HAL_TIM_ConfigClockSource+0x230>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006324:	d022      	beq.n	800636c <HAL_TIM_ConfigClockSource+0x230>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a3b      	ldr	r2, [pc, #236]	@ (8006418 <HAL_TIM_ConfigClockSource+0x2dc>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d01d      	beq.n	800636c <HAL_TIM_ConfigClockSource+0x230>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a39      	ldr	r2, [pc, #228]	@ (800641c <HAL_TIM_ConfigClockSource+0x2e0>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d018      	beq.n	800636c <HAL_TIM_ConfigClockSource+0x230>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a38      	ldr	r2, [pc, #224]	@ (8006420 <HAL_TIM_ConfigClockSource+0x2e4>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d013      	beq.n	800636c <HAL_TIM_ConfigClockSource+0x230>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a38      	ldr	r2, [pc, #224]	@ (800642c <HAL_TIM_ConfigClockSource+0x2f0>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d00e      	beq.n	800636c <HAL_TIM_ConfigClockSource+0x230>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a37      	ldr	r2, [pc, #220]	@ (8006430 <HAL_TIM_ConfigClockSource+0x2f4>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d009      	beq.n	800636c <HAL_TIM_ConfigClockSource+0x230>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a37      	ldr	r2, [pc, #220]	@ (800643c <HAL_TIM_ConfigClockSource+0x300>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d004      	beq.n	800636c <HAL_TIM_ConfigClockSource+0x230>
 8006362:	f241 41d6 	movw	r1, #5334	@ 0x14d6
 8006366:	482a      	ldr	r0, [pc, #168]	@ (8006410 <HAL_TIM_ConfigClockSource+0x2d4>)
 8006368:	f7fa fbf4 	bl	8000b54 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d013      	beq.n	800639c <HAL_TIM_ConfigClockSource+0x260>
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800637c:	d00e      	beq.n	800639c <HAL_TIM_ConfigClockSource+0x260>
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006386:	d009      	beq.n	800639c <HAL_TIM_ConfigClockSource+0x260>
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006390:	d004      	beq.n	800639c <HAL_TIM_ConfigClockSource+0x260>
 8006392:	f241 41d9 	movw	r1, #5337	@ 0x14d9
 8006396:	481e      	ldr	r0, [pc, #120]	@ (8006410 <HAL_TIM_ConfigClockSource+0x2d4>)
 8006398:	f7fa fbdc 	bl	8000b54 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063a4:	d014      	beq.n	80063d0 <HAL_TIM_ConfigClockSource+0x294>
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d010      	beq.n	80063d0 <HAL_TIM_ConfigClockSource+0x294>
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00c      	beq.n	80063d0 <HAL_TIM_ConfigClockSource+0x294>
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d008      	beq.n	80063d0 <HAL_TIM_ConfigClockSource+0x294>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	2b0a      	cmp	r3, #10
 80063c4:	d004      	beq.n	80063d0 <HAL_TIM_ConfigClockSource+0x294>
 80063c6:	f241 41da 	movw	r1, #5338	@ 0x14da
 80063ca:	4811      	ldr	r0, [pc, #68]	@ (8006410 <HAL_TIM_ConfigClockSource+0x2d4>)
 80063cc:	f7fa fbc2 	bl	8000b54 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	2b0f      	cmp	r3, #15
 80063d6:	d904      	bls.n	80063e2 <HAL_TIM_ConfigClockSource+0x2a6>
 80063d8:	f241 41db 	movw	r1, #5339	@ 0x14db
 80063dc:	480c      	ldr	r0, [pc, #48]	@ (8006410 <HAL_TIM_ConfigClockSource+0x2d4>)
 80063de:	f7fa fbb9 	bl	8000b54 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063f2:	f000 fdab 	bl	8006f4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006404:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	609a      	str	r2, [r3, #8]
      break;
 800640e:	e1f7      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x6c4>
 8006410:	0800c630 	.word	0x0800c630
 8006414:	40010000 	.word	0x40010000
 8006418:	40000400 	.word	0x40000400
 800641c:	40000800 	.word	0x40000800
 8006420:	40000c00 	.word	0x40000c00
 8006424:	40001000 	.word	0x40001000
 8006428:	40001400 	.word	0x40001400
 800642c:	40010400 	.word	0x40010400
 8006430:	40014000 	.word	0x40014000
 8006434:	40014400 	.word	0x40014400
 8006438:	40014800 	.word	0x40014800
 800643c:	40001800 	.word	0x40001800
 8006440:	40001c00 	.word	0x40001c00
 8006444:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a67      	ldr	r2, [pc, #412]	@ (80065ec <HAL_TIM_ConfigClockSource+0x4b0>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d01d      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x352>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800645a:	d018      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x352>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a63      	ldr	r2, [pc, #396]	@ (80065f0 <HAL_TIM_ConfigClockSource+0x4b4>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d013      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x352>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a62      	ldr	r2, [pc, #392]	@ (80065f4 <HAL_TIM_ConfigClockSource+0x4b8>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d00e      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x352>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a60      	ldr	r2, [pc, #384]	@ (80065f8 <HAL_TIM_ConfigClockSource+0x4bc>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d009      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x352>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a5f      	ldr	r2, [pc, #380]	@ (80065fc <HAL_TIM_ConfigClockSource+0x4c0>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d004      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x352>
 8006484:	f241 41ee 	movw	r1, #5358	@ 0x14ee
 8006488:	485d      	ldr	r0, [pc, #372]	@ (8006600 <HAL_TIM_ConfigClockSource+0x4c4>)
 800648a:	f7fa fb63 	bl	8000b54 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d013      	beq.n	80064be <HAL_TIM_ConfigClockSource+0x382>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800649e:	d00e      	beq.n	80064be <HAL_TIM_ConfigClockSource+0x382>
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064a8:	d009      	beq.n	80064be <HAL_TIM_ConfigClockSource+0x382>
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80064b2:	d004      	beq.n	80064be <HAL_TIM_ConfigClockSource+0x382>
 80064b4:	f241 41f1 	movw	r1, #5361	@ 0x14f1
 80064b8:	4851      	ldr	r0, [pc, #324]	@ (8006600 <HAL_TIM_ConfigClockSource+0x4c4>)
 80064ba:	f7fa fb4b 	bl	8000b54 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064c6:	d014      	beq.n	80064f2 <HAL_TIM_ConfigClockSource+0x3b6>
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d010      	beq.n	80064f2 <HAL_TIM_ConfigClockSource+0x3b6>
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00c      	beq.n	80064f2 <HAL_TIM_ConfigClockSource+0x3b6>
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d008      	beq.n	80064f2 <HAL_TIM_ConfigClockSource+0x3b6>
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	2b0a      	cmp	r3, #10
 80064e6:	d004      	beq.n	80064f2 <HAL_TIM_ConfigClockSource+0x3b6>
 80064e8:	f241 41f2 	movw	r1, #5362	@ 0x14f2
 80064ec:	4844      	ldr	r0, [pc, #272]	@ (8006600 <HAL_TIM_ConfigClockSource+0x4c4>)
 80064ee:	f7fa fb31 	bl	8000b54 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	2b0f      	cmp	r3, #15
 80064f8:	d904      	bls.n	8006504 <HAL_TIM_ConfigClockSource+0x3c8>
 80064fa:	f241 41f3 	movw	r1, #5363	@ 0x14f3
 80064fe:	4840      	ldr	r0, [pc, #256]	@ (8006600 <HAL_TIM_ConfigClockSource+0x4c4>)
 8006500:	f7fa fb28 	bl	8000b54 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006514:	f000 fd1a 	bl	8006f4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689a      	ldr	r2, [r3, #8]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006526:	609a      	str	r2, [r3, #8]
      break;
 8006528:	e16a      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a2f      	ldr	r2, [pc, #188]	@ (80065ec <HAL_TIM_ConfigClockSource+0x4b0>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d027      	beq.n	8006584 <HAL_TIM_ConfigClockSource+0x448>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800653c:	d022      	beq.n	8006584 <HAL_TIM_ConfigClockSource+0x448>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a2b      	ldr	r2, [pc, #172]	@ (80065f0 <HAL_TIM_ConfigClockSource+0x4b4>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d01d      	beq.n	8006584 <HAL_TIM_ConfigClockSource+0x448>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a29      	ldr	r2, [pc, #164]	@ (80065f4 <HAL_TIM_ConfigClockSource+0x4b8>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d018      	beq.n	8006584 <HAL_TIM_ConfigClockSource+0x448>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a28      	ldr	r2, [pc, #160]	@ (80065f8 <HAL_TIM_ConfigClockSource+0x4bc>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d013      	beq.n	8006584 <HAL_TIM_ConfigClockSource+0x448>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a26      	ldr	r2, [pc, #152]	@ (80065fc <HAL_TIM_ConfigClockSource+0x4c0>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d00e      	beq.n	8006584 <HAL_TIM_ConfigClockSource+0x448>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a26      	ldr	r2, [pc, #152]	@ (8006604 <HAL_TIM_ConfigClockSource+0x4c8>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d009      	beq.n	8006584 <HAL_TIM_ConfigClockSource+0x448>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a24      	ldr	r2, [pc, #144]	@ (8006608 <HAL_TIM_ConfigClockSource+0x4cc>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d004      	beq.n	8006584 <HAL_TIM_ConfigClockSource+0x448>
 800657a:	f241 5102 	movw	r1, #5378	@ 0x1502
 800657e:	4820      	ldr	r0, [pc, #128]	@ (8006600 <HAL_TIM_ConfigClockSource+0x4c4>)
 8006580:	f7fa fae8 	bl	8000b54 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800658c:	d014      	beq.n	80065b8 <HAL_TIM_ConfigClockSource+0x47c>
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d010      	beq.n	80065b8 <HAL_TIM_ConfigClockSource+0x47c>
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00c      	beq.n	80065b8 <HAL_TIM_ConfigClockSource+0x47c>
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d008      	beq.n	80065b8 <HAL_TIM_ConfigClockSource+0x47c>
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	2b0a      	cmp	r3, #10
 80065ac:	d004      	beq.n	80065b8 <HAL_TIM_ConfigClockSource+0x47c>
 80065ae:	f241 5105 	movw	r1, #5381	@ 0x1505
 80065b2:	4813      	ldr	r0, [pc, #76]	@ (8006600 <HAL_TIM_ConfigClockSource+0x4c4>)
 80065b4:	f7fa face 	bl	8000b54 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	2b0f      	cmp	r3, #15
 80065be:	d904      	bls.n	80065ca <HAL_TIM_ConfigClockSource+0x48e>
 80065c0:	f241 5106 	movw	r1, #5382	@ 0x1506
 80065c4:	480e      	ldr	r0, [pc, #56]	@ (8006600 <HAL_TIM_ConfigClockSource+0x4c4>)
 80065c6:	f7fa fac5 	bl	8000b54 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065d6:	461a      	mov	r2, r3
 80065d8:	f000 fc3e 	bl	8006e58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2150      	movs	r1, #80	@ 0x50
 80065e2:	4618      	mov	r0, r3
 80065e4:	f000 fc97 	bl	8006f16 <TIM_ITRx_SetConfig>
      break;
 80065e8:	e10a      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x6c4>
 80065ea:	bf00      	nop
 80065ec:	40010000 	.word	0x40010000
 80065f0:	40000400 	.word	0x40000400
 80065f4:	40000800 	.word	0x40000800
 80065f8:	40000c00 	.word	0x40000c00
 80065fc:	40010400 	.word	0x40010400
 8006600:	0800c630 	.word	0x0800c630
 8006604:	40014000 	.word	0x40014000
 8006608:	40001800 	.word	0x40001800
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a82      	ldr	r2, [pc, #520]	@ (800681c <HAL_TIM_ConfigClockSource+0x6e0>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d027      	beq.n	8006666 <HAL_TIM_ConfigClockSource+0x52a>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800661e:	d022      	beq.n	8006666 <HAL_TIM_ConfigClockSource+0x52a>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a7e      	ldr	r2, [pc, #504]	@ (8006820 <HAL_TIM_ConfigClockSource+0x6e4>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d01d      	beq.n	8006666 <HAL_TIM_ConfigClockSource+0x52a>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a7d      	ldr	r2, [pc, #500]	@ (8006824 <HAL_TIM_ConfigClockSource+0x6e8>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d018      	beq.n	8006666 <HAL_TIM_ConfigClockSource+0x52a>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a7b      	ldr	r2, [pc, #492]	@ (8006828 <HAL_TIM_ConfigClockSource+0x6ec>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d013      	beq.n	8006666 <HAL_TIM_ConfigClockSource+0x52a>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a7a      	ldr	r2, [pc, #488]	@ (800682c <HAL_TIM_ConfigClockSource+0x6f0>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d00e      	beq.n	8006666 <HAL_TIM_ConfigClockSource+0x52a>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a78      	ldr	r2, [pc, #480]	@ (8006830 <HAL_TIM_ConfigClockSource+0x6f4>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d009      	beq.n	8006666 <HAL_TIM_ConfigClockSource+0x52a>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a77      	ldr	r2, [pc, #476]	@ (8006834 <HAL_TIM_ConfigClockSource+0x6f8>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d004      	beq.n	8006666 <HAL_TIM_ConfigClockSource+0x52a>
 800665c:	f241 5112 	movw	r1, #5394	@ 0x1512
 8006660:	4875      	ldr	r0, [pc, #468]	@ (8006838 <HAL_TIM_ConfigClockSource+0x6fc>)
 8006662:	f7fa fa77 	bl	8000b54 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800666e:	d014      	beq.n	800669a <HAL_TIM_ConfigClockSource+0x55e>
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d010      	beq.n	800669a <HAL_TIM_ConfigClockSource+0x55e>
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00c      	beq.n	800669a <HAL_TIM_ConfigClockSource+0x55e>
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	2b02      	cmp	r3, #2
 8006686:	d008      	beq.n	800669a <HAL_TIM_ConfigClockSource+0x55e>
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	2b0a      	cmp	r3, #10
 800668e:	d004      	beq.n	800669a <HAL_TIM_ConfigClockSource+0x55e>
 8006690:	f241 5115 	movw	r1, #5397	@ 0x1515
 8006694:	4868      	ldr	r0, [pc, #416]	@ (8006838 <HAL_TIM_ConfigClockSource+0x6fc>)
 8006696:	f7fa fa5d 	bl	8000b54 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	2b0f      	cmp	r3, #15
 80066a0:	d904      	bls.n	80066ac <HAL_TIM_ConfigClockSource+0x570>
 80066a2:	f241 5116 	movw	r1, #5398	@ 0x1516
 80066a6:	4864      	ldr	r0, [pc, #400]	@ (8006838 <HAL_TIM_ConfigClockSource+0x6fc>)
 80066a8:	f7fa fa54 	bl	8000b54 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066b8:	461a      	mov	r2, r3
 80066ba:	f000 fbfc 	bl	8006eb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2160      	movs	r1, #96	@ 0x60
 80066c4:	4618      	mov	r0, r3
 80066c6:	f000 fc26 	bl	8006f16 <TIM_ITRx_SetConfig>
      break;
 80066ca:	e099      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a52      	ldr	r2, [pc, #328]	@ (800681c <HAL_TIM_ConfigClockSource+0x6e0>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d027      	beq.n	8006726 <HAL_TIM_ConfigClockSource+0x5ea>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066de:	d022      	beq.n	8006726 <HAL_TIM_ConfigClockSource+0x5ea>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a4e      	ldr	r2, [pc, #312]	@ (8006820 <HAL_TIM_ConfigClockSource+0x6e4>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d01d      	beq.n	8006726 <HAL_TIM_ConfigClockSource+0x5ea>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a4d      	ldr	r2, [pc, #308]	@ (8006824 <HAL_TIM_ConfigClockSource+0x6e8>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d018      	beq.n	8006726 <HAL_TIM_ConfigClockSource+0x5ea>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a4b      	ldr	r2, [pc, #300]	@ (8006828 <HAL_TIM_ConfigClockSource+0x6ec>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d013      	beq.n	8006726 <HAL_TIM_ConfigClockSource+0x5ea>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a4a      	ldr	r2, [pc, #296]	@ (800682c <HAL_TIM_ConfigClockSource+0x6f0>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d00e      	beq.n	8006726 <HAL_TIM_ConfigClockSource+0x5ea>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a48      	ldr	r2, [pc, #288]	@ (8006830 <HAL_TIM_ConfigClockSource+0x6f4>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d009      	beq.n	8006726 <HAL_TIM_ConfigClockSource+0x5ea>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a47      	ldr	r2, [pc, #284]	@ (8006834 <HAL_TIM_ConfigClockSource+0x6f8>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d004      	beq.n	8006726 <HAL_TIM_ConfigClockSource+0x5ea>
 800671c:	f241 5122 	movw	r1, #5410	@ 0x1522
 8006720:	4845      	ldr	r0, [pc, #276]	@ (8006838 <HAL_TIM_ConfigClockSource+0x6fc>)
 8006722:	f7fa fa17 	bl	8000b54 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800672e:	d014      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x61e>
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d010      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x61e>
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00c      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x61e>
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	2b02      	cmp	r3, #2
 8006746:	d008      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x61e>
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	2b0a      	cmp	r3, #10
 800674e:	d004      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x61e>
 8006750:	f241 5125 	movw	r1, #5413	@ 0x1525
 8006754:	4838      	ldr	r0, [pc, #224]	@ (8006838 <HAL_TIM_ConfigClockSource+0x6fc>)
 8006756:	f7fa f9fd 	bl	8000b54 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	2b0f      	cmp	r3, #15
 8006760:	d904      	bls.n	800676c <HAL_TIM_ConfigClockSource+0x630>
 8006762:	f241 5126 	movw	r1, #5414	@ 0x1526
 8006766:	4834      	ldr	r0, [pc, #208]	@ (8006838 <HAL_TIM_ConfigClockSource+0x6fc>)
 8006768:	f7fa f9f4 	bl	8000b54 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006778:	461a      	mov	r2, r3
 800677a:	f000 fb6d 	bl	8006e58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2140      	movs	r1, #64	@ 0x40
 8006784:	4618      	mov	r0, r3
 8006786:	f000 fbc6 	bl	8006f16 <TIM_ITRx_SetConfig>
      break;
 800678a:	e039      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x6c4>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a22      	ldr	r2, [pc, #136]	@ (800681c <HAL_TIM_ConfigClockSource+0x6e0>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d027      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x6aa>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800679e:	d022      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x6aa>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a1e      	ldr	r2, [pc, #120]	@ (8006820 <HAL_TIM_ConfigClockSource+0x6e4>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d01d      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x6aa>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a1d      	ldr	r2, [pc, #116]	@ (8006824 <HAL_TIM_ConfigClockSource+0x6e8>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d018      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x6aa>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a1b      	ldr	r2, [pc, #108]	@ (8006828 <HAL_TIM_ConfigClockSource+0x6ec>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d013      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x6aa>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a1a      	ldr	r2, [pc, #104]	@ (800682c <HAL_TIM_ConfigClockSource+0x6f0>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d00e      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x6aa>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a18      	ldr	r2, [pc, #96]	@ (8006830 <HAL_TIM_ConfigClockSource+0x6f4>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d009      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x6aa>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a17      	ldr	r2, [pc, #92]	@ (8006834 <HAL_TIM_ConfigClockSource+0x6f8>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d004      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x6aa>
 80067dc:	f241 5135 	movw	r1, #5429	@ 0x1535
 80067e0:	4815      	ldr	r0, [pc, #84]	@ (8006838 <HAL_TIM_ConfigClockSource+0x6fc>)
 80067e2:	f7fa f9b7 	bl	8000b54 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4619      	mov	r1, r3
 80067f0:	4610      	mov	r0, r2
 80067f2:	f000 fb90 	bl	8006f16 <TIM_ITRx_SetConfig>
      break;
 80067f6:	e003      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x6c4>
    }

    default:
      status = HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	73fb      	strb	r3, [r7, #15]
      break;
 80067fc:	e000      	b.n	8006800 <HAL_TIM_ConfigClockSource+0x6c4>
      break;
 80067fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006810:	7bfb      	ldrb	r3, [r7, #15]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	40010000 	.word	0x40010000
 8006820:	40000400 	.word	0x40000400
 8006824:	40000800 	.word	0x40000800
 8006828:	40000c00 	.word	0x40000c00
 800682c:	40010400 	.word	0x40010400
 8006830:	40014000 	.word	0x40014000
 8006834:	40001800 	.word	0x40001800
 8006838:	0800c630 	.word	0x0800c630

0800683c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006858:	bf00      	nop
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a46      	ldr	r2, [pc, #280]	@ (80069b8 <TIM_Base_SetConfig+0x12c>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d013      	beq.n	80068cc <TIM_Base_SetConfig+0x40>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068aa:	d00f      	beq.n	80068cc <TIM_Base_SetConfig+0x40>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a43      	ldr	r2, [pc, #268]	@ (80069bc <TIM_Base_SetConfig+0x130>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d00b      	beq.n	80068cc <TIM_Base_SetConfig+0x40>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a42      	ldr	r2, [pc, #264]	@ (80069c0 <TIM_Base_SetConfig+0x134>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d007      	beq.n	80068cc <TIM_Base_SetConfig+0x40>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a41      	ldr	r2, [pc, #260]	@ (80069c4 <TIM_Base_SetConfig+0x138>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d003      	beq.n	80068cc <TIM_Base_SetConfig+0x40>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a40      	ldr	r2, [pc, #256]	@ (80069c8 <TIM_Base_SetConfig+0x13c>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d108      	bne.n	80068de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	4313      	orrs	r3, r2
 80068dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a35      	ldr	r2, [pc, #212]	@ (80069b8 <TIM_Base_SetConfig+0x12c>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d02b      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068ec:	d027      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a32      	ldr	r2, [pc, #200]	@ (80069bc <TIM_Base_SetConfig+0x130>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d023      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a31      	ldr	r2, [pc, #196]	@ (80069c0 <TIM_Base_SetConfig+0x134>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d01f      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a30      	ldr	r2, [pc, #192]	@ (80069c4 <TIM_Base_SetConfig+0x138>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d01b      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a2f      	ldr	r2, [pc, #188]	@ (80069c8 <TIM_Base_SetConfig+0x13c>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d017      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a2e      	ldr	r2, [pc, #184]	@ (80069cc <TIM_Base_SetConfig+0x140>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d013      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a2d      	ldr	r2, [pc, #180]	@ (80069d0 <TIM_Base_SetConfig+0x144>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d00f      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a2c      	ldr	r2, [pc, #176]	@ (80069d4 <TIM_Base_SetConfig+0x148>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d00b      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a2b      	ldr	r2, [pc, #172]	@ (80069d8 <TIM_Base_SetConfig+0x14c>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d007      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a2a      	ldr	r2, [pc, #168]	@ (80069dc <TIM_Base_SetConfig+0x150>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d003      	beq.n	800693e <TIM_Base_SetConfig+0xb2>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a29      	ldr	r2, [pc, #164]	@ (80069e0 <TIM_Base_SetConfig+0x154>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d108      	bne.n	8006950 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	4313      	orrs	r3, r2
 800694e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	4313      	orrs	r3, r2
 800695c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	689a      	ldr	r2, [r3, #8]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a10      	ldr	r2, [pc, #64]	@ (80069b8 <TIM_Base_SetConfig+0x12c>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d003      	beq.n	8006984 <TIM_Base_SetConfig+0xf8>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a12      	ldr	r2, [pc, #72]	@ (80069c8 <TIM_Base_SetConfig+0x13c>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d103      	bne.n	800698c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	691a      	ldr	r2, [r3, #16]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	2b01      	cmp	r3, #1
 800699c:	d105      	bne.n	80069aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f023 0201 	bic.w	r2, r3, #1
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	611a      	str	r2, [r3, #16]
  }
}
 80069aa:	bf00      	nop
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	40010000 	.word	0x40010000
 80069bc:	40000400 	.word	0x40000400
 80069c0:	40000800 	.word	0x40000800
 80069c4:	40000c00 	.word	0x40000c00
 80069c8:	40010400 	.word	0x40010400
 80069cc:	40014000 	.word	0x40014000
 80069d0:	40014400 	.word	0x40014400
 80069d4:	40014800 	.word	0x40014800
 80069d8:	40001800 	.word	0x40001800
 80069dc:	40001c00 	.word	0x40001c00
 80069e0:	40002000 	.word	0x40002000

080069e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	f023 0201 	bic.w	r2, r3, #1
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f023 0303 	bic.w	r3, r3, #3
 8006a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	f023 0302 	bic.w	r3, r3, #2
 8006a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a34      	ldr	r2, [pc, #208]	@ (8006b0c <TIM_OC1_SetConfig+0x128>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d003      	beq.n	8006a48 <TIM_OC1_SetConfig+0x64>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a33      	ldr	r2, [pc, #204]	@ (8006b10 <TIM_OC1_SetConfig+0x12c>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d119      	bne.n	8006a7c <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d008      	beq.n	8006a62 <TIM_OC1_SetConfig+0x7e>
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	2b08      	cmp	r3, #8
 8006a56:	d004      	beq.n	8006a62 <TIM_OC1_SetConfig+0x7e>
 8006a58:	f641 21d0 	movw	r1, #6864	@ 0x1ad0
 8006a5c:	482d      	ldr	r0, [pc, #180]	@ (8006b14 <TIM_OC1_SetConfig+0x130>)
 8006a5e:	f7fa f879 	bl	8000b54 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f023 0308 	bic.w	r3, r3, #8
 8006a68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	f023 0304 	bic.w	r3, r3, #4
 8006a7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a23      	ldr	r2, [pc, #140]	@ (8006b0c <TIM_OC1_SetConfig+0x128>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d003      	beq.n	8006a8c <TIM_OC1_SetConfig+0xa8>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a22      	ldr	r2, [pc, #136]	@ (8006b10 <TIM_OC1_SetConfig+0x12c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d12d      	bne.n	8006ae8 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a94:	d008      	beq.n	8006aa8 <TIM_OC1_SetConfig+0xc4>
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d004      	beq.n	8006aa8 <TIM_OC1_SetConfig+0xc4>
 8006a9e:	f641 21dd 	movw	r1, #6877	@ 0x1add
 8006aa2:	481c      	ldr	r0, [pc, #112]	@ (8006b14 <TIM_OC1_SetConfig+0x130>)
 8006aa4:	f7fa f856 	bl	8000b54 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	695b      	ldr	r3, [r3, #20]
 8006aac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ab0:	d008      	beq.n	8006ac4 <TIM_OC1_SetConfig+0xe0>
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	695b      	ldr	r3, [r3, #20]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d004      	beq.n	8006ac4 <TIM_OC1_SetConfig+0xe0>
 8006aba:	f641 21de 	movw	r1, #6878	@ 0x1ade
 8006abe:	4815      	ldr	r0, [pc, #84]	@ (8006b14 <TIM_OC1_SetConfig+0x130>)
 8006ac0:	f7fa f848 	bl	8000b54 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006aca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	695b      	ldr	r3, [r3, #20]
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	621a      	str	r2, [r3, #32]
}
 8006b02:	bf00      	nop
 8006b04:	3718      	adds	r7, #24
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	40010000 	.word	0x40010000
 8006b10:	40010400 	.word	0x40010400
 8006b14:	0800c630 	.word	0x0800c630

08006b18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	f023 0210 	bic.w	r2, r3, #16
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	021b      	lsls	r3, r3, #8
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	f023 0320 	bic.w	r3, r3, #32
 8006b62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	011b      	lsls	r3, r3, #4
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a35      	ldr	r2, [pc, #212]	@ (8006c48 <TIM_OC2_SetConfig+0x130>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d003      	beq.n	8006b80 <TIM_OC2_SetConfig+0x68>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a34      	ldr	r2, [pc, #208]	@ (8006c4c <TIM_OC2_SetConfig+0x134>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d11a      	bne.n	8006bb6 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d008      	beq.n	8006b9a <TIM_OC2_SetConfig+0x82>
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	2b08      	cmp	r3, #8
 8006b8e:	d004      	beq.n	8006b9a <TIM_OC2_SetConfig+0x82>
 8006b90:	f641 311c 	movw	r1, #6940	@ 0x1b1c
 8006b94:	482e      	ldr	r0, [pc, #184]	@ (8006c50 <TIM_OC2_SetConfig+0x138>)
 8006b96:	f7f9 ffdd 	bl	8000b54 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ba0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	011b      	lsls	r3, r3, #4
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a23      	ldr	r2, [pc, #140]	@ (8006c48 <TIM_OC2_SetConfig+0x130>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d003      	beq.n	8006bc6 <TIM_OC2_SetConfig+0xae>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a22      	ldr	r2, [pc, #136]	@ (8006c4c <TIM_OC2_SetConfig+0x134>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d12f      	bne.n	8006c26 <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bce:	d008      	beq.n	8006be2 <TIM_OC2_SetConfig+0xca>
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	699b      	ldr	r3, [r3, #24]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d004      	beq.n	8006be2 <TIM_OC2_SetConfig+0xca>
 8006bd8:	f641 3129 	movw	r1, #6953	@ 0x1b29
 8006bdc:	481c      	ldr	r0, [pc, #112]	@ (8006c50 <TIM_OC2_SetConfig+0x138>)
 8006bde:	f7f9 ffb9 	bl	8000b54 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bea:	d008      	beq.n	8006bfe <TIM_OC2_SetConfig+0xe6>
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d004      	beq.n	8006bfe <TIM_OC2_SetConfig+0xe6>
 8006bf4:	f641 312a 	movw	r1, #6954	@ 0x1b2a
 8006bf8:	4815      	ldr	r0, [pc, #84]	@ (8006c50 <TIM_OC2_SetConfig+0x138>)
 8006bfa:	f7f9 ffab 	bl	8000b54 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	621a      	str	r2, [r3, #32]
}
 8006c40:	bf00      	nop
 8006c42:	3718      	adds	r7, #24
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	40010000 	.word	0x40010000
 8006c4c:	40010400 	.word	0x40010400
 8006c50:	0800c630 	.word	0x0800c630

08006c54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b086      	sub	sp, #24
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f023 0303 	bic.w	r3, r3, #3
 8006c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	021b      	lsls	r3, r3, #8
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a35      	ldr	r2, [pc, #212]	@ (8006d84 <TIM_OC3_SetConfig+0x130>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d003      	beq.n	8006cba <TIM_OC3_SetConfig+0x66>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a34      	ldr	r2, [pc, #208]	@ (8006d88 <TIM_OC3_SetConfig+0x134>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d11a      	bne.n	8006cf0 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d008      	beq.n	8006cd4 <TIM_OC3_SetConfig+0x80>
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	2b08      	cmp	r3, #8
 8006cc8:	d004      	beq.n	8006cd4 <TIM_OC3_SetConfig+0x80>
 8006cca:	f641 3167 	movw	r1, #7015	@ 0x1b67
 8006cce:	482f      	ldr	r0, [pc, #188]	@ (8006d8c <TIM_OC3_SetConfig+0x138>)
 8006cd0:	f7f9 ff40 	bl	8000b54 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006cda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	021b      	lsls	r3, r3, #8
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006cee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a24      	ldr	r2, [pc, #144]	@ (8006d84 <TIM_OC3_SetConfig+0x130>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d003      	beq.n	8006d00 <TIM_OC3_SetConfig+0xac>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a23      	ldr	r2, [pc, #140]	@ (8006d88 <TIM_OC3_SetConfig+0x134>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d12f      	bne.n	8006d60 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d08:	d008      	beq.n	8006d1c <TIM_OC3_SetConfig+0xc8>
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d004      	beq.n	8006d1c <TIM_OC3_SetConfig+0xc8>
 8006d12:	f641 3174 	movw	r1, #7028	@ 0x1b74
 8006d16:	481d      	ldr	r0, [pc, #116]	@ (8006d8c <TIM_OC3_SetConfig+0x138>)
 8006d18:	f7f9 ff1c 	bl	8000b54 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d24:	d008      	beq.n	8006d38 <TIM_OC3_SetConfig+0xe4>
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d004      	beq.n	8006d38 <TIM_OC3_SetConfig+0xe4>
 8006d2e:	f641 3175 	movw	r1, #7029	@ 0x1b75
 8006d32:	4816      	ldr	r0, [pc, #88]	@ (8006d8c <TIM_OC3_SetConfig+0x138>)
 8006d34:	f7f9 ff0e 	bl	8000b54 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	695b      	ldr	r3, [r3, #20]
 8006d4c:	011b      	lsls	r3, r3, #4
 8006d4e:	693a      	ldr	r2, [r7, #16]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	011b      	lsls	r3, r3, #4
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	621a      	str	r2, [r3, #32]
}
 8006d7a:	bf00      	nop
 8006d7c:	3718      	adds	r7, #24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	40010000 	.word	0x40010000
 8006d88:	40010400 	.word	0x40010400
 8006d8c:	0800c630 	.word	0x0800c630

08006d90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a1b      	ldr	r3, [r3, #32]
 8006da4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	69db      	ldr	r3, [r3, #28]
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	021b      	lsls	r3, r3, #8
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006dda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	031b      	lsls	r3, r3, #12
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a18      	ldr	r2, [pc, #96]	@ (8006e4c <TIM_OC4_SetConfig+0xbc>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d003      	beq.n	8006df8 <TIM_OC4_SetConfig+0x68>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a17      	ldr	r2, [pc, #92]	@ (8006e50 <TIM_OC4_SetConfig+0xc0>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d117      	bne.n	8006e28 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	695b      	ldr	r3, [r3, #20]
 8006dfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e00:	d008      	beq.n	8006e14 <TIM_OC4_SetConfig+0x84>
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d004      	beq.n	8006e14 <TIM_OC4_SetConfig+0x84>
 8006e0a:	f641 31b4 	movw	r1, #7092	@ 0x1bb4
 8006e0e:	4811      	ldr	r0, [pc, #68]	@ (8006e54 <TIM_OC4_SetConfig+0xc4>)
 8006e10:	f7f9 fea0 	bl	8000b54 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	019b      	lsls	r3, r3, #6
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	621a      	str	r2, [r3, #32]
}
 8006e42:	bf00      	nop
 8006e44:	3718      	adds	r7, #24
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	40010000 	.word	0x40010000
 8006e50:	40010400 	.word	0x40010400
 8006e54:	0800c630 	.word	0x0800c630

08006e58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b087      	sub	sp, #28
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6a1b      	ldr	r3, [r3, #32]
 8006e68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	f023 0201 	bic.w	r2, r3, #1
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	699b      	ldr	r3, [r3, #24]
 8006e7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	011b      	lsls	r3, r3, #4
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f023 030a 	bic.w	r3, r3, #10
 8006e94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	621a      	str	r2, [r3, #32]
}
 8006eaa:	bf00      	nop
 8006eac:	371c      	adds	r7, #28
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b087      	sub	sp, #28
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	60f8      	str	r0, [r7, #12]
 8006ebe:	60b9      	str	r1, [r7, #8]
 8006ec0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	f023 0210 	bic.w	r2, r3, #16
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ee0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	031b      	lsls	r3, r3, #12
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ef2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	011b      	lsls	r3, r3, #4
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	697a      	ldr	r2, [r7, #20]
 8006f08:	621a      	str	r2, [r3, #32]
}
 8006f0a:	bf00      	nop
 8006f0c:	371c      	adds	r7, #28
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b085      	sub	sp, #20
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
 8006f1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	f043 0307 	orr.w	r3, r3, #7
 8006f38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	609a      	str	r2, [r3, #8]
}
 8006f40:	bf00      	nop
 8006f42:	3714      	adds	r7, #20
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b087      	sub	sp, #28
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	607a      	str	r2, [r7, #4]
 8006f58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	021a      	lsls	r2, r3, #8
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	431a      	orrs	r2, r3
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	697a      	ldr	r2, [r7, #20]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	697a      	ldr	r2, [r7, #20]
 8006f7e:	609a      	str	r2, [r3, #8]
}
 8006f80:	bf00      	nop
 8006f82:	371c      	adds	r7, #28
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b086      	sub	sp, #24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	4a32      	ldr	r2, [pc, #200]	@ (8007064 <TIM_CCxChannelCmd+0xd8>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d030      	beq.n	8007002 <TIM_CCxChannelCmd+0x76>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fa6:	d02c      	beq.n	8007002 <TIM_CCxChannelCmd+0x76>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	4a2f      	ldr	r2, [pc, #188]	@ (8007068 <TIM_CCxChannelCmd+0xdc>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d028      	beq.n	8007002 <TIM_CCxChannelCmd+0x76>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	4a2e      	ldr	r2, [pc, #184]	@ (800706c <TIM_CCxChannelCmd+0xe0>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d024      	beq.n	8007002 <TIM_CCxChannelCmd+0x76>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	4a2d      	ldr	r2, [pc, #180]	@ (8007070 <TIM_CCxChannelCmd+0xe4>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d020      	beq.n	8007002 <TIM_CCxChannelCmd+0x76>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	4a2c      	ldr	r2, [pc, #176]	@ (8007074 <TIM_CCxChannelCmd+0xe8>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d01c      	beq.n	8007002 <TIM_CCxChannelCmd+0x76>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	4a2b      	ldr	r2, [pc, #172]	@ (8007078 <TIM_CCxChannelCmd+0xec>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d018      	beq.n	8007002 <TIM_CCxChannelCmd+0x76>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	4a2a      	ldr	r2, [pc, #168]	@ (800707c <TIM_CCxChannelCmd+0xf0>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d014      	beq.n	8007002 <TIM_CCxChannelCmd+0x76>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	4a29      	ldr	r2, [pc, #164]	@ (8007080 <TIM_CCxChannelCmd+0xf4>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d010      	beq.n	8007002 <TIM_CCxChannelCmd+0x76>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	4a28      	ldr	r2, [pc, #160]	@ (8007084 <TIM_CCxChannelCmd+0xf8>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d00c      	beq.n	8007002 <TIM_CCxChannelCmd+0x76>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4a27      	ldr	r2, [pc, #156]	@ (8007088 <TIM_CCxChannelCmd+0xfc>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d008      	beq.n	8007002 <TIM_CCxChannelCmd+0x76>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	4a26      	ldr	r2, [pc, #152]	@ (800708c <TIM_CCxChannelCmd+0x100>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d004      	beq.n	8007002 <TIM_CCxChannelCmd+0x76>
 8006ff8:	f641 519f 	movw	r1, #7583	@ 0x1d9f
 8006ffc:	4824      	ldr	r0, [pc, #144]	@ (8007090 <TIM_CCxChannelCmd+0x104>)
 8006ffe:	f7f9 fda9 	bl	8000b54 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d010      	beq.n	800702a <TIM_CCxChannelCmd+0x9e>
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	2b04      	cmp	r3, #4
 800700c:	d00d      	beq.n	800702a <TIM_CCxChannelCmd+0x9e>
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2b08      	cmp	r3, #8
 8007012:	d00a      	beq.n	800702a <TIM_CCxChannelCmd+0x9e>
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2b0c      	cmp	r3, #12
 8007018:	d007      	beq.n	800702a <TIM_CCxChannelCmd+0x9e>
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2b3c      	cmp	r3, #60	@ 0x3c
 800701e:	d004      	beq.n	800702a <TIM_CCxChannelCmd+0x9e>
 8007020:	f44f 51ed 	mov.w	r1, #7584	@ 0x1da0
 8007024:	481a      	ldr	r0, [pc, #104]	@ (8007090 <TIM_CCxChannelCmd+0x104>)
 8007026:	f7f9 fd95 	bl	8000b54 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	f003 031f 	and.w	r3, r3, #31
 8007030:	2201      	movs	r2, #1
 8007032:	fa02 f303 	lsl.w	r3, r2, r3
 8007036:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6a1a      	ldr	r2, [r3, #32]
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	43db      	mvns	r3, r3
 8007040:	401a      	ands	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6a1a      	ldr	r2, [r3, #32]
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	f003 031f 	and.w	r3, r3, #31
 8007050:	6879      	ldr	r1, [r7, #4]
 8007052:	fa01 f303 	lsl.w	r3, r1, r3
 8007056:	431a      	orrs	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	621a      	str	r2, [r3, #32]
}
 800705c:	bf00      	nop
 800705e:	3718      	adds	r7, #24
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	40010000 	.word	0x40010000
 8007068:	40000400 	.word	0x40000400
 800706c:	40000800 	.word	0x40000800
 8007070:	40000c00 	.word	0x40000c00
 8007074:	40010400 	.word	0x40010400
 8007078:	40014000 	.word	0x40014000
 800707c:	40014400 	.word	0x40014400
 8007080:	40014800 	.word	0x40014800
 8007084:	40001800 	.word	0x40001800
 8007088:	40001c00 	.word	0x40001c00
 800708c:	40002000 	.word	0x40002000
 8007090:	0800c630 	.word	0x0800c630

08007094 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a61      	ldr	r2, [pc, #388]	@ (8007228 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d027      	beq.n	80070f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070b0:	d022      	beq.n	80070f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a5d      	ldr	r2, [pc, #372]	@ (800722c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d01d      	beq.n	80070f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a5b      	ldr	r2, [pc, #364]	@ (8007230 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d018      	beq.n	80070f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a5a      	ldr	r2, [pc, #360]	@ (8007234 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d013      	beq.n	80070f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a58      	ldr	r2, [pc, #352]	@ (8007238 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d00e      	beq.n	80070f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a57      	ldr	r2, [pc, #348]	@ (800723c <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d009      	beq.n	80070f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a55      	ldr	r2, [pc, #340]	@ (8007240 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d004      	beq.n	80070f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80070ee:	f240 71a9 	movw	r1, #1961	@ 0x7a9
 80070f2:	4854      	ldr	r0, [pc, #336]	@ (8007244 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 80070f4:	f7f9 fd2e 	bl	8000b54 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d020      	beq.n	8007142 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b10      	cmp	r3, #16
 8007106:	d01c      	beq.n	8007142 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b20      	cmp	r3, #32
 800710e:	d018      	beq.n	8007142 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2b30      	cmp	r3, #48	@ 0x30
 8007116:	d014      	beq.n	8007142 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b40      	cmp	r3, #64	@ 0x40
 800711e:	d010      	beq.n	8007142 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2b50      	cmp	r3, #80	@ 0x50
 8007126:	d00c      	beq.n	8007142 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2b60      	cmp	r3, #96	@ 0x60
 800712e:	d008      	beq.n	8007142 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2b70      	cmp	r3, #112	@ 0x70
 8007136:	d004      	beq.n	8007142 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007138:	f240 71aa 	movw	r1, #1962	@ 0x7aa
 800713c:	4841      	ldr	r0, [pc, #260]	@ (8007244 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800713e:	f7f9 fd09 	bl	8000b54 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	2b80      	cmp	r3, #128	@ 0x80
 8007148:	d008      	beq.n	800715c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d004      	beq.n	800715c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007152:	f240 71ab 	movw	r1, #1963	@ 0x7ab
 8007156:	483b      	ldr	r0, [pc, #236]	@ (8007244 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 8007158:	f7f9 fcfc 	bl	8000b54 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007162:	2b01      	cmp	r3, #1
 8007164:	d101      	bne.n	800716a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007166:	2302      	movs	r3, #2
 8007168:	e05a      	b.n	8007220 <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2202      	movs	r2, #2
 8007176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007190:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	4313      	orrs	r3, r2
 800719a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a1f      	ldr	r2, [pc, #124]	@ (8007228 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d022      	beq.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071b6:	d01d      	beq.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a1b      	ldr	r2, [pc, #108]	@ (800722c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d018      	beq.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a1a      	ldr	r2, [pc, #104]	@ (8007230 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d013      	beq.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a18      	ldr	r2, [pc, #96]	@ (8007234 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d00e      	beq.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a19      	ldr	r2, [pc, #100]	@ (8007240 <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d009      	beq.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a18      	ldr	r2, [pc, #96]	@ (8007248 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d004      	beq.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a17      	ldr	r2, [pc, #92]	@ (800724c <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d10c      	bne.n	800720e <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	4313      	orrs	r3, r2
 8007204:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	40010000 	.word	0x40010000
 800722c:	40000400 	.word	0x40000400
 8007230:	40000800 	.word	0x40000800
 8007234:	40000c00 	.word	0x40000c00
 8007238:	40001000 	.word	0x40001000
 800723c:	40001400 	.word	0x40001400
 8007240:	40010400 	.word	0x40010400
 8007244:	0800c6a8 	.word	0x0800c6a8
 8007248:	40014000 	.word	0x40014000
 800724c:	40001800 	.word	0x40001800

08007250 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d101      	bne.n	800728a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e0b7      	b.n	80073fa <HAL_UART_Init+0x182>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d031      	beq.n	80072f6 <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a5b      	ldr	r2, [pc, #364]	@ (8007404 <HAL_UART_Init+0x18c>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d013      	beq.n	80072c4 <HAL_UART_Init+0x4c>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a59      	ldr	r2, [pc, #356]	@ (8007408 <HAL_UART_Init+0x190>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d00e      	beq.n	80072c4 <HAL_UART_Init+0x4c>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a58      	ldr	r2, [pc, #352]	@ (800740c <HAL_UART_Init+0x194>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d009      	beq.n	80072c4 <HAL_UART_Init+0x4c>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a56      	ldr	r2, [pc, #344]	@ (8007410 <HAL_UART_Init+0x198>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d004      	beq.n	80072c4 <HAL_UART_Init+0x4c>
 80072ba:	f240 1173 	movw	r1, #371	@ 0x173
 80072be:	4855      	ldr	r0, [pc, #340]	@ (8007414 <HAL_UART_Init+0x19c>)
 80072c0:	f7f9 fc48 	bl	8000b54 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d037      	beq.n	800733c <HAL_UART_Init+0xc4>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072d4:	d032      	beq.n	800733c <HAL_UART_Init+0xc4>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072de:	d02d      	beq.n	800733c <HAL_UART_Init+0xc4>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072e8:	d028      	beq.n	800733c <HAL_UART_Init+0xc4>
 80072ea:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 80072ee:	4849      	ldr	r0, [pc, #292]	@ (8007414 <HAL_UART_Init+0x19c>)
 80072f0:	f7f9 fc30 	bl	8000b54 <assert_failed>
 80072f4:	e022      	b.n	800733c <HAL_UART_Init+0xc4>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a42      	ldr	r2, [pc, #264]	@ (8007404 <HAL_UART_Init+0x18c>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d01d      	beq.n	800733c <HAL_UART_Init+0xc4>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a40      	ldr	r2, [pc, #256]	@ (8007408 <HAL_UART_Init+0x190>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d018      	beq.n	800733c <HAL_UART_Init+0xc4>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a3f      	ldr	r2, [pc, #252]	@ (800740c <HAL_UART_Init+0x194>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d013      	beq.n	800733c <HAL_UART_Init+0xc4>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a3f      	ldr	r2, [pc, #252]	@ (8007418 <HAL_UART_Init+0x1a0>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d00e      	beq.n	800733c <HAL_UART_Init+0xc4>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a3e      	ldr	r2, [pc, #248]	@ (800741c <HAL_UART_Init+0x1a4>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d009      	beq.n	800733c <HAL_UART_Init+0xc4>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a38      	ldr	r2, [pc, #224]	@ (8007410 <HAL_UART_Init+0x198>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d004      	beq.n	800733c <HAL_UART_Init+0xc4>
 8007332:	f44f 71bc 	mov.w	r1, #376	@ 0x178
 8007336:	4837      	ldr	r0, [pc, #220]	@ (8007414 <HAL_UART_Init+0x19c>)
 8007338:	f7f9 fc0c 	bl	8000b54 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d009      	beq.n	8007358 <HAL_UART_Init+0xe0>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800734c:	d004      	beq.n	8007358 <HAL_UART_Init+0xe0>
 800734e:	f44f 71bd 	mov.w	r1, #378	@ 0x17a
 8007352:	4830      	ldr	r0, [pc, #192]	@ (8007414 <HAL_UART_Init+0x19c>)
 8007354:	f7f9 fbfe 	bl	8000b54 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	69db      	ldr	r3, [r3, #28]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d009      	beq.n	8007374 <HAL_UART_Init+0xfc>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	69db      	ldr	r3, [r3, #28]
 8007364:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007368:	d004      	beq.n	8007374 <HAL_UART_Init+0xfc>
 800736a:	f240 117b 	movw	r1, #379	@ 0x17b
 800736e:	4829      	ldr	r0, [pc, #164]	@ (8007414 <HAL_UART_Init+0x19c>)
 8007370:	f7f9 fbf0 	bl	8000b54 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b00      	cmp	r3, #0
 800737e:	d106      	bne.n	800738e <HAL_UART_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7f9 fcab 	bl	8000ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2224      	movs	r2, #36	@ 0x24
 8007392:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68da      	ldr	r2, [r3, #12]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80073a4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fd20 	bl	8007dec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	691a      	ldr	r2, [r3, #16]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80073ba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	695a      	ldr	r2, [r3, #20]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80073ca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68da      	ldr	r2, [r3, #12]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80073da:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2220      	movs	r2, #32
 80073e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2220      	movs	r2, #32
 80073ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	40011000 	.word	0x40011000
 8007408:	40004400 	.word	0x40004400
 800740c:	40004800 	.word	0x40004800
 8007410:	40011400 	.word	0x40011400
 8007414:	0800c724 	.word	0x0800c724
 8007418:	40004c00 	.word	0x40004c00
 800741c:	40005000 	.word	0x40005000

08007420 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	4613      	mov	r3, r2
 800742c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b20      	cmp	r3, #32
 8007438:	d121      	bne.n	800747e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d002      	beq.n	8007446 <HAL_UART_Transmit_IT+0x26>
 8007440:	88fb      	ldrh	r3, [r7, #6]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d101      	bne.n	800744a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e01a      	b.n	8007480 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	88fa      	ldrh	r2, [r7, #6]
 8007454:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	88fa      	ldrh	r2, [r7, #6]
 800745a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2221      	movs	r2, #33	@ 0x21
 8007466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68da      	ldr	r2, [r3, #12]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007478:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800747a:	2300      	movs	r3, #0
 800747c:	e000      	b.n	8007480 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800747e:	2302      	movs	r3, #2
  }
}
 8007480:	4618      	mov	r0, r3
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	4613      	mov	r3, r2
 8007498:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b20      	cmp	r3, #32
 80074a4:	d112      	bne.n	80074cc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d002      	beq.n	80074b2 <HAL_UART_Receive_IT+0x26>
 80074ac:	88fb      	ldrh	r3, [r7, #6]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d101      	bne.n	80074b6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e00b      	b.n	80074ce <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80074bc:	88fb      	ldrh	r3, [r7, #6]
 80074be:	461a      	mov	r2, r3
 80074c0:	68b9      	ldr	r1, [r7, #8]
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 faba 	bl	8007a3c <UART_Start_Receive_IT>
 80074c8:	4603      	mov	r3, r0
 80074ca:	e000      	b.n	80074ce <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80074cc:	2302      	movs	r3, #2
  }
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
	...

080074d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b0ba      	sub	sp, #232	@ 0xe8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80074fe:	2300      	movs	r3, #0
 8007500:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007504:	2300      	movs	r3, #0
 8007506:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800750a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800750e:	f003 030f 	and.w	r3, r3, #15
 8007512:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007516:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10f      	bne.n	800753e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800751e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007522:	f003 0320 	and.w	r3, r3, #32
 8007526:	2b00      	cmp	r3, #0
 8007528:	d009      	beq.n	800753e <HAL_UART_IRQHandler+0x66>
 800752a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800752e:	f003 0320 	and.w	r3, r3, #32
 8007532:	2b00      	cmp	r3, #0
 8007534:	d003      	beq.n	800753e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fb99 	bl	8007c6e <UART_Receive_IT>
      return;
 800753c:	e25b      	b.n	80079f6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800753e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007542:	2b00      	cmp	r3, #0
 8007544:	f000 80de 	beq.w	8007704 <HAL_UART_IRQHandler+0x22c>
 8007548:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	2b00      	cmp	r3, #0
 8007552:	d106      	bne.n	8007562 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007558:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800755c:	2b00      	cmp	r3, #0
 800755e:	f000 80d1 	beq.w	8007704 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00b      	beq.n	8007586 <HAL_UART_IRQHandler+0xae>
 800756e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007576:	2b00      	cmp	r3, #0
 8007578:	d005      	beq.n	8007586 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800757e:	f043 0201 	orr.w	r2, r3, #1
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800758a:	f003 0304 	and.w	r3, r3, #4
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00b      	beq.n	80075aa <HAL_UART_IRQHandler+0xd2>
 8007592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	2b00      	cmp	r3, #0
 800759c:	d005      	beq.n	80075aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075a2:	f043 0202 	orr.w	r2, r3, #2
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075ae:	f003 0302 	and.w	r3, r3, #2
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00b      	beq.n	80075ce <HAL_UART_IRQHandler+0xf6>
 80075b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d005      	beq.n	80075ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075c6:	f043 0204 	orr.w	r2, r3, #4
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80075ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075d2:	f003 0308 	and.w	r3, r3, #8
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d011      	beq.n	80075fe <HAL_UART_IRQHandler+0x126>
 80075da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075de:	f003 0320 	and.w	r3, r3, #32
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d105      	bne.n	80075f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80075e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d005      	beq.n	80075fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075f6:	f043 0208 	orr.w	r2, r3, #8
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 81f2 	beq.w	80079ec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800760c:	f003 0320 	and.w	r3, r3, #32
 8007610:	2b00      	cmp	r3, #0
 8007612:	d008      	beq.n	8007626 <HAL_UART_IRQHandler+0x14e>
 8007614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007618:	f003 0320 	and.w	r3, r3, #32
 800761c:	2b00      	cmp	r3, #0
 800761e:	d002      	beq.n	8007626 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fb24 	bl	8007c6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007630:	2b40      	cmp	r3, #64	@ 0x40
 8007632:	bf0c      	ite	eq
 8007634:	2301      	moveq	r3, #1
 8007636:	2300      	movne	r3, #0
 8007638:	b2db      	uxtb	r3, r3
 800763a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007642:	f003 0308 	and.w	r3, r3, #8
 8007646:	2b00      	cmp	r3, #0
 8007648:	d103      	bne.n	8007652 <HAL_UART_IRQHandler+0x17a>
 800764a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800764e:	2b00      	cmp	r3, #0
 8007650:	d04f      	beq.n	80076f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fa2c 	bl	8007ab0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007662:	2b40      	cmp	r3, #64	@ 0x40
 8007664:	d141      	bne.n	80076ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	3314      	adds	r3, #20
 800766c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007670:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007674:	e853 3f00 	ldrex	r3, [r3]
 8007678:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800767c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007680:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007684:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	3314      	adds	r3, #20
 800768e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007692:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007696:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800769e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80076a2:	e841 2300 	strex	r3, r2, [r1]
 80076a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80076aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1d9      	bne.n	8007666 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d013      	beq.n	80076e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076be:	4a7e      	ldr	r2, [pc, #504]	@ (80078b8 <HAL_UART_IRQHandler+0x3e0>)
 80076c0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fa fbc8 	bl	8001e5c <HAL_DMA_Abort_IT>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d016      	beq.n	8007700 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80076dc:	4610      	mov	r0, r2
 80076de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076e0:	e00e      	b.n	8007700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f994 	bl	8007a10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076e8:	e00a      	b.n	8007700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f990 	bl	8007a10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076f0:	e006      	b.n	8007700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f98c 	bl	8007a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80076fe:	e175      	b.n	80079ec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007700:	bf00      	nop
    return;
 8007702:	e173      	b.n	80079ec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007708:	2b01      	cmp	r3, #1
 800770a:	f040 814f 	bne.w	80079ac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800770e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007712:	f003 0310 	and.w	r3, r3, #16
 8007716:	2b00      	cmp	r3, #0
 8007718:	f000 8148 	beq.w	80079ac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800771c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007720:	f003 0310 	and.w	r3, r3, #16
 8007724:	2b00      	cmp	r3, #0
 8007726:	f000 8141 	beq.w	80079ac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800772a:	2300      	movs	r3, #0
 800772c:	60bb      	str	r3, [r7, #8]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	60bb      	str	r3, [r7, #8]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	60bb      	str	r3, [r7, #8]
 800773e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800774a:	2b40      	cmp	r3, #64	@ 0x40
 800774c:	f040 80b6 	bne.w	80078bc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800775c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007760:	2b00      	cmp	r3, #0
 8007762:	f000 8145 	beq.w	80079f0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800776a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800776e:	429a      	cmp	r2, r3
 8007770:	f080 813e 	bcs.w	80079f0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800777a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007786:	f000 8088 	beq.w	800789a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	330c      	adds	r3, #12
 8007790:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007794:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007798:	e853 3f00 	ldrex	r3, [r3]
 800779c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80077a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80077a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	330c      	adds	r3, #12
 80077b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80077b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80077ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80077c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80077c6:	e841 2300 	strex	r3, r2, [r1]
 80077ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80077ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1d9      	bne.n	800778a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	3314      	adds	r3, #20
 80077dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80077e0:	e853 3f00 	ldrex	r3, [r3]
 80077e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80077e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80077e8:	f023 0301 	bic.w	r3, r3, #1
 80077ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3314      	adds	r3, #20
 80077f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80077fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80077fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007800:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007802:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007806:	e841 2300 	strex	r3, r2, [r1]
 800780a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800780c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1e1      	bne.n	80077d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	3314      	adds	r3, #20
 8007818:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800781c:	e853 3f00 	ldrex	r3, [r3]
 8007820:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007822:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007824:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007828:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	3314      	adds	r3, #20
 8007832:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007836:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007838:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800783c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800783e:	e841 2300 	strex	r3, r2, [r1]
 8007842:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007844:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1e3      	bne.n	8007812 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2220      	movs	r2, #32
 800784e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	330c      	adds	r3, #12
 800785e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007860:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007862:	e853 3f00 	ldrex	r3, [r3]
 8007866:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007868:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800786a:	f023 0310 	bic.w	r3, r3, #16
 800786e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	330c      	adds	r3, #12
 8007878:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800787c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800787e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007880:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007882:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007884:	e841 2300 	strex	r3, r2, [r1]
 8007888:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800788a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1e3      	bne.n	8007858 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007894:	4618      	mov	r0, r3
 8007896:	f7fa fa71 	bl	8001d7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2202      	movs	r2, #2
 800789e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	4619      	mov	r1, r3
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f8b7 	bl	8007a24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80078b6:	e09b      	b.n	80079f0 <HAL_UART_IRQHandler+0x518>
 80078b8:	08007b77 	.word	0x08007b77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f000 808e 	beq.w	80079f4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80078d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f000 8089 	beq.w	80079f4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	330c      	adds	r3, #12
 80078e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ec:	e853 3f00 	ldrex	r3, [r3]
 80078f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80078f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	330c      	adds	r3, #12
 8007902:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007906:	647a      	str	r2, [r7, #68]	@ 0x44
 8007908:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800790c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800790e:	e841 2300 	strex	r3, r2, [r1]
 8007912:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1e3      	bne.n	80078e2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	3314      	adds	r3, #20
 8007920:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007924:	e853 3f00 	ldrex	r3, [r3]
 8007928:	623b      	str	r3, [r7, #32]
   return(result);
 800792a:	6a3b      	ldr	r3, [r7, #32]
 800792c:	f023 0301 	bic.w	r3, r3, #1
 8007930:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	3314      	adds	r3, #20
 800793a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800793e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007940:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007942:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007944:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007946:	e841 2300 	strex	r3, r2, [r1]
 800794a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800794c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1e3      	bne.n	800791a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2220      	movs	r2, #32
 8007956:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	330c      	adds	r3, #12
 8007966:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	e853 3f00 	ldrex	r3, [r3]
 800796e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f023 0310 	bic.w	r3, r3, #16
 8007976:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	330c      	adds	r3, #12
 8007980:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007984:	61fa      	str	r2, [r7, #28]
 8007986:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007988:	69b9      	ldr	r1, [r7, #24]
 800798a:	69fa      	ldr	r2, [r7, #28]
 800798c:	e841 2300 	strex	r3, r2, [r1]
 8007990:	617b      	str	r3, [r7, #20]
   return(result);
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1e3      	bne.n	8007960 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2202      	movs	r2, #2
 800799c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800799e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80079a2:	4619      	mov	r1, r3
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f83d 	bl	8007a24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079aa:	e023      	b.n	80079f4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80079ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d009      	beq.n	80079cc <HAL_UART_IRQHandler+0x4f4>
 80079b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d003      	beq.n	80079cc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f8ea 	bl	8007b9e <UART_Transmit_IT>
    return;
 80079ca:	e014      	b.n	80079f6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80079cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00e      	beq.n	80079f6 <HAL_UART_IRQHandler+0x51e>
 80079d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d008      	beq.n	80079f6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 f92a 	bl	8007c3e <UART_EndTransmit_IT>
    return;
 80079ea:	e004      	b.n	80079f6 <HAL_UART_IRQHandler+0x51e>
    return;
 80079ec:	bf00      	nop
 80079ee:	e002      	b.n	80079f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80079f0:	bf00      	nop
 80079f2:	e000      	b.n	80079f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80079f4:	bf00      	nop
  }
}
 80079f6:	37e8      	adds	r7, #232	@ 0xe8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007a18:	bf00      	nop
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a30:	bf00      	nop
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	4613      	mov	r3, r2
 8007a48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	88fa      	ldrh	r2, [r7, #6]
 8007a54:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	88fa      	ldrh	r2, [r7, #6]
 8007a5a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2222      	movs	r2, #34	@ 0x22
 8007a66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d007      	beq.n	8007a82 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68da      	ldr	r2, [r3, #12]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a80:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	695a      	ldr	r2, [r3, #20]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f042 0201 	orr.w	r2, r2, #1
 8007a90:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68da      	ldr	r2, [r3, #12]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f042 0220 	orr.w	r2, r2, #32
 8007aa0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3714      	adds	r7, #20
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b095      	sub	sp, #84	@ 0x54
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	330c      	adds	r3, #12
 8007abe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ac2:	e853 3f00 	ldrex	r3, [r3]
 8007ac6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	330c      	adds	r3, #12
 8007ad6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007ad8:	643a      	str	r2, [r7, #64]	@ 0x40
 8007ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007adc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ade:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ae0:	e841 2300 	strex	r3, r2, [r1]
 8007ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1e5      	bne.n	8007ab8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3314      	adds	r3, #20
 8007af2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af4:	6a3b      	ldr	r3, [r7, #32]
 8007af6:	e853 3f00 	ldrex	r3, [r3]
 8007afa:	61fb      	str	r3, [r7, #28]
   return(result);
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	f023 0301 	bic.w	r3, r3, #1
 8007b02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	3314      	adds	r3, #20
 8007b0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b14:	e841 2300 	strex	r3, r2, [r1]
 8007b18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1e5      	bne.n	8007aec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d119      	bne.n	8007b5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	330c      	adds	r3, #12
 8007b2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	e853 3f00 	ldrex	r3, [r3]
 8007b36:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	f023 0310 	bic.w	r3, r3, #16
 8007b3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	330c      	adds	r3, #12
 8007b46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b48:	61ba      	str	r2, [r7, #24]
 8007b4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4c:	6979      	ldr	r1, [r7, #20]
 8007b4e:	69ba      	ldr	r2, [r7, #24]
 8007b50:	e841 2300 	strex	r3, r2, [r1]
 8007b54:	613b      	str	r3, [r7, #16]
   return(result);
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1e5      	bne.n	8007b28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2220      	movs	r2, #32
 8007b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007b6a:	bf00      	nop
 8007b6c:	3754      	adds	r7, #84	@ 0x54
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b084      	sub	sp, #16
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f7ff ff3d 	bl	8007a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b96:	bf00      	nop
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b085      	sub	sp, #20
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	2b21      	cmp	r3, #33	@ 0x21
 8007bb0:	d13e      	bne.n	8007c30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bba:	d114      	bne.n	8007be6 <UART_Transmit_IT+0x48>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d110      	bne.n	8007be6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a1b      	ldr	r3, [r3, #32]
 8007bc8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	881b      	ldrh	r3, [r3, #0]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bd8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	1c9a      	adds	r2, r3, #2
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	621a      	str	r2, [r3, #32]
 8007be4:	e008      	b.n	8007bf8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a1b      	ldr	r3, [r3, #32]
 8007bea:	1c59      	adds	r1, r3, #1
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	6211      	str	r1, [r2, #32]
 8007bf0:	781a      	ldrb	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	4619      	mov	r1, r3
 8007c06:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d10f      	bne.n	8007c2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68da      	ldr	r2, [r3, #12]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007c1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68da      	ldr	r2, [r3, #12]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	e000      	b.n	8007c32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007c30:	2302      	movs	r3, #2
  }
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3714      	adds	r7, #20
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr

08007c3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b082      	sub	sp, #8
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	68da      	ldr	r2, [r3, #12]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2220      	movs	r2, #32
 8007c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f7ff fecc 	bl	80079fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b08c      	sub	sp, #48	@ 0x30
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b22      	cmp	r3, #34	@ 0x22
 8007c80:	f040 80ae 	bne.w	8007de0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c8c:	d117      	bne.n	8007cbe <UART_Receive_IT+0x50>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d113      	bne.n	8007cbe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007c96:	2300      	movs	r3, #0
 8007c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cb6:	1c9a      	adds	r2, r3, #2
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	629a      	str	r2, [r3, #40]	@ 0x28
 8007cbc:	e026      	b.n	8007d0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cd0:	d007      	beq.n	8007ce2 <UART_Receive_IT+0x74>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10a      	bne.n	8007cf0 <UART_Receive_IT+0x82>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d106      	bne.n	8007cf0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cec:	701a      	strb	r2, [r3, #0]
 8007cee:	e008      	b.n	8007d02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cfc:	b2da      	uxtb	r2, r3
 8007cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d06:	1c5a      	adds	r2, r3, #1
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	3b01      	subs	r3, #1
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	4619      	mov	r1, r3
 8007d1a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d15d      	bne.n	8007ddc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68da      	ldr	r2, [r3, #12]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f022 0220 	bic.w	r2, r2, #32
 8007d2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68da      	ldr	r2, [r3, #12]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007d3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	695a      	ldr	r2, [r3, #20]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f022 0201 	bic.w	r2, r2, #1
 8007d4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2220      	movs	r2, #32
 8007d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d135      	bne.n	8007dd2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	330c      	adds	r3, #12
 8007d72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	e853 3f00 	ldrex	r3, [r3]
 8007d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	f023 0310 	bic.w	r3, r3, #16
 8007d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	330c      	adds	r3, #12
 8007d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d8c:	623a      	str	r2, [r7, #32]
 8007d8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d90:	69f9      	ldr	r1, [r7, #28]
 8007d92:	6a3a      	ldr	r2, [r7, #32]
 8007d94:	e841 2300 	strex	r3, r2, [r1]
 8007d98:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1e5      	bne.n	8007d6c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 0310 	and.w	r3, r3, #16
 8007daa:	2b10      	cmp	r3, #16
 8007dac:	d10a      	bne.n	8007dc4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007dae:	2300      	movs	r3, #0
 8007db0:	60fb      	str	r3, [r7, #12]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	60fb      	str	r3, [r7, #12]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	60fb      	str	r3, [r7, #12]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007dc8:	4619      	mov	r1, r3
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f7ff fe2a 	bl	8007a24 <HAL_UARTEx_RxEventCallback>
 8007dd0:	e002      	b.n	8007dd8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f7f8 fe3a 	bl	8000a4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	e002      	b.n	8007de2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	e000      	b.n	8007de2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007de0:	2302      	movs	r3, #2
  }
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3730      	adds	r7, #48	@ 0x30
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
	...

08007dec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007df0:	b0c0      	sub	sp, #256	@ 0x100
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8007df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dfc:	685a      	ldr	r2, [r3, #4]
 8007dfe:	4bcf      	ldr	r3, [pc, #828]	@ (800813c <UART_SetConfig+0x350>)
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d904      	bls.n	8007e0e <UART_SetConfig+0x22>
 8007e04:	f640 6175 	movw	r1, #3701	@ 0xe75
 8007e08:	48cd      	ldr	r0, [pc, #820]	@ (8008140 <UART_SetConfig+0x354>)
 8007e0a:	f7f8 fea3 	bl	8000b54 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8007e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00a      	beq.n	8007e2e <UART_SetConfig+0x42>
 8007e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e22:	d004      	beq.n	8007e2e <UART_SetConfig+0x42>
 8007e24:	f640 6176 	movw	r1, #3702	@ 0xe76
 8007e28:	48c5      	ldr	r0, [pc, #788]	@ (8008140 <UART_SetConfig+0x354>)
 8007e2a:	f7f8 fe93 	bl	8000b54 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8007e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d010      	beq.n	8007e5a <UART_SetConfig+0x6e>
 8007e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e42:	d00a      	beq.n	8007e5a <UART_SetConfig+0x6e>
 8007e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007e4e:	d004      	beq.n	8007e5a <UART_SetConfig+0x6e>
 8007e50:	f640 6177 	movw	r1, #3703	@ 0xe77
 8007e54:	48ba      	ldr	r0, [pc, #744]	@ (8008140 <UART_SetConfig+0x354>)
 8007e56:	f7f8 fe7d 	bl	8000b54 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8007e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e5e:	695a      	ldr	r2, [r3, #20]
 8007e60:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 8007e64:	4013      	ands	r3, r2
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d104      	bne.n	8007e74 <UART_SetConfig+0x88>
 8007e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e6e:	695b      	ldr	r3, [r3, #20]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d104      	bne.n	8007e7e <UART_SetConfig+0x92>
 8007e74:	f640 6178 	movw	r1, #3704	@ 0xe78
 8007e78:	48b1      	ldr	r0, [pc, #708]	@ (8008140 <UART_SetConfig+0x354>)
 8007e7a:	f7f8 fe6b 	bl	8000b54 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e8e:	68d9      	ldr	r1, [r3, #12]
 8007e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	ea40 0301 	orr.w	r3, r0, r1
 8007e9a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ea0:	689a      	ldr	r2, [r3, #8]
 8007ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	431a      	orrs	r2, r3
 8007eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eae:	695b      	ldr	r3, [r3, #20]
 8007eb0:	431a      	orrs	r2, r3
 8007eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eb6:	69db      	ldr	r3, [r3, #28]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007eca:	f021 010c 	bic.w	r1, r1, #12
 8007ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007ed8:	430b      	orrs	r3, r1
 8007eda:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	695b      	ldr	r3, [r3, #20]
 8007ee4:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eec:	6999      	ldr	r1, [r3, #24]
 8007eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	ea40 0301 	orr.w	r3, r0, r1
 8007ef8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	4b90      	ldr	r3, [pc, #576]	@ (8008144 <UART_SetConfig+0x358>)
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d005      	beq.n	8007f12 <UART_SetConfig+0x126>
 8007f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	4b8e      	ldr	r3, [pc, #568]	@ (8008148 <UART_SetConfig+0x35c>)
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d104      	bne.n	8007f1c <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f12:	f7fc fd39 	bl	8004988 <HAL_RCC_GetPCLK2Freq>
 8007f16:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007f1a:	e003      	b.n	8007f24 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f1c:	f7fc fd20 	bl	8004960 <HAL_RCC_GetPCLK1Freq>
 8007f20:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f28:	69db      	ldr	r3, [r3, #28]
 8007f2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f2e:	f040 810f 	bne.w	8008150 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f36:	2200      	movs	r2, #0
 8007f38:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f3c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007f40:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007f44:	4622      	mov	r2, r4
 8007f46:	462b      	mov	r3, r5
 8007f48:	1891      	adds	r1, r2, r2
 8007f4a:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007f4c:	415b      	adcs	r3, r3
 8007f4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007f54:	4621      	mov	r1, r4
 8007f56:	eb12 0801 	adds.w	r8, r2, r1
 8007f5a:	4629      	mov	r1, r5
 8007f5c:	eb43 0901 	adc.w	r9, r3, r1
 8007f60:	f04f 0200 	mov.w	r2, #0
 8007f64:	f04f 0300 	mov.w	r3, #0
 8007f68:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f6c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f70:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f74:	4690      	mov	r8, r2
 8007f76:	4699      	mov	r9, r3
 8007f78:	4623      	mov	r3, r4
 8007f7a:	eb18 0303 	adds.w	r3, r8, r3
 8007f7e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f82:	462b      	mov	r3, r5
 8007f84:	eb49 0303 	adc.w	r3, r9, r3
 8007f88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007f98:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007f9c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	18db      	adds	r3, r3, r3
 8007fa4:	653b      	str	r3, [r7, #80]	@ 0x50
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	eb42 0303 	adc.w	r3, r2, r3
 8007fac:	657b      	str	r3, [r7, #84]	@ 0x54
 8007fae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007fb2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007fb6:	f7f8 f963 	bl	8000280 <__aeabi_uldivmod>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	4b63      	ldr	r3, [pc, #396]	@ (800814c <UART_SetConfig+0x360>)
 8007fc0:	fba3 2302 	umull	r2, r3, r3, r2
 8007fc4:	095b      	lsrs	r3, r3, #5
 8007fc6:	011c      	lsls	r4, r3, #4
 8007fc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007fd2:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007fd6:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007fda:	4642      	mov	r2, r8
 8007fdc:	464b      	mov	r3, r9
 8007fde:	1891      	adds	r1, r2, r2
 8007fe0:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007fe2:	415b      	adcs	r3, r3
 8007fe4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fe6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007fea:	4641      	mov	r1, r8
 8007fec:	eb12 0a01 	adds.w	sl, r2, r1
 8007ff0:	4649      	mov	r1, r9
 8007ff2:	eb43 0b01 	adc.w	fp, r3, r1
 8007ff6:	f04f 0200 	mov.w	r2, #0
 8007ffa:	f04f 0300 	mov.w	r3, #0
 8007ffe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008002:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008006:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800800a:	4692      	mov	sl, r2
 800800c:	469b      	mov	fp, r3
 800800e:	4643      	mov	r3, r8
 8008010:	eb1a 0303 	adds.w	r3, sl, r3
 8008014:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008018:	464b      	mov	r3, r9
 800801a:	eb4b 0303 	adc.w	r3, fp, r3
 800801e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800802e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008032:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008036:	460b      	mov	r3, r1
 8008038:	18db      	adds	r3, r3, r3
 800803a:	643b      	str	r3, [r7, #64]	@ 0x40
 800803c:	4613      	mov	r3, r2
 800803e:	eb42 0303 	adc.w	r3, r2, r3
 8008042:	647b      	str	r3, [r7, #68]	@ 0x44
 8008044:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008048:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800804c:	f7f8 f918 	bl	8000280 <__aeabi_uldivmod>
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	4611      	mov	r1, r2
 8008056:	4b3d      	ldr	r3, [pc, #244]	@ (800814c <UART_SetConfig+0x360>)
 8008058:	fba3 2301 	umull	r2, r3, r3, r1
 800805c:	095b      	lsrs	r3, r3, #5
 800805e:	2264      	movs	r2, #100	@ 0x64
 8008060:	fb02 f303 	mul.w	r3, r2, r3
 8008064:	1acb      	subs	r3, r1, r3
 8008066:	00db      	lsls	r3, r3, #3
 8008068:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800806c:	4b37      	ldr	r3, [pc, #220]	@ (800814c <UART_SetConfig+0x360>)
 800806e:	fba3 2302 	umull	r2, r3, r3, r2
 8008072:	095b      	lsrs	r3, r3, #5
 8008074:	005b      	lsls	r3, r3, #1
 8008076:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800807a:	441c      	add	r4, r3
 800807c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008080:	2200      	movs	r2, #0
 8008082:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008086:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800808a:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800808e:	4642      	mov	r2, r8
 8008090:	464b      	mov	r3, r9
 8008092:	1891      	adds	r1, r2, r2
 8008094:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008096:	415b      	adcs	r3, r3
 8008098:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800809a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800809e:	4641      	mov	r1, r8
 80080a0:	1851      	adds	r1, r2, r1
 80080a2:	6339      	str	r1, [r7, #48]	@ 0x30
 80080a4:	4649      	mov	r1, r9
 80080a6:	414b      	adcs	r3, r1
 80080a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80080aa:	f04f 0200 	mov.w	r2, #0
 80080ae:	f04f 0300 	mov.w	r3, #0
 80080b2:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80080b6:	4659      	mov	r1, fp
 80080b8:	00cb      	lsls	r3, r1, #3
 80080ba:	4651      	mov	r1, sl
 80080bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080c0:	4651      	mov	r1, sl
 80080c2:	00ca      	lsls	r2, r1, #3
 80080c4:	4610      	mov	r0, r2
 80080c6:	4619      	mov	r1, r3
 80080c8:	4603      	mov	r3, r0
 80080ca:	4642      	mov	r2, r8
 80080cc:	189b      	adds	r3, r3, r2
 80080ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80080d2:	464b      	mov	r3, r9
 80080d4:	460a      	mov	r2, r1
 80080d6:	eb42 0303 	adc.w	r3, r2, r3
 80080da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80080ea:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80080ee:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80080f2:	460b      	mov	r3, r1
 80080f4:	18db      	adds	r3, r3, r3
 80080f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80080f8:	4613      	mov	r3, r2
 80080fa:	eb42 0303 	adc.w	r3, r2, r3
 80080fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008100:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008104:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008108:	f7f8 f8ba 	bl	8000280 <__aeabi_uldivmod>
 800810c:	4602      	mov	r2, r0
 800810e:	460b      	mov	r3, r1
 8008110:	4b0e      	ldr	r3, [pc, #56]	@ (800814c <UART_SetConfig+0x360>)
 8008112:	fba3 1302 	umull	r1, r3, r3, r2
 8008116:	095b      	lsrs	r3, r3, #5
 8008118:	2164      	movs	r1, #100	@ 0x64
 800811a:	fb01 f303 	mul.w	r3, r1, r3
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	00db      	lsls	r3, r3, #3
 8008122:	3332      	adds	r3, #50	@ 0x32
 8008124:	4a09      	ldr	r2, [pc, #36]	@ (800814c <UART_SetConfig+0x360>)
 8008126:	fba2 2303 	umull	r2, r3, r2, r3
 800812a:	095b      	lsrs	r3, r3, #5
 800812c:	f003 0207 	and.w	r2, r3, #7
 8008130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4422      	add	r2, r4
 8008138:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800813a:	e109      	b.n	8008350 <UART_SetConfig+0x564>
 800813c:	00a037a0 	.word	0x00a037a0
 8008140:	0800c724 	.word	0x0800c724
 8008144:	40011000 	.word	0x40011000
 8008148:	40011400 	.word	0x40011400
 800814c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008154:	2200      	movs	r2, #0
 8008156:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800815a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800815e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008162:	4642      	mov	r2, r8
 8008164:	464b      	mov	r3, r9
 8008166:	1891      	adds	r1, r2, r2
 8008168:	6239      	str	r1, [r7, #32]
 800816a:	415b      	adcs	r3, r3
 800816c:	627b      	str	r3, [r7, #36]	@ 0x24
 800816e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008172:	4641      	mov	r1, r8
 8008174:	1854      	adds	r4, r2, r1
 8008176:	4649      	mov	r1, r9
 8008178:	eb43 0501 	adc.w	r5, r3, r1
 800817c:	f04f 0200 	mov.w	r2, #0
 8008180:	f04f 0300 	mov.w	r3, #0
 8008184:	00eb      	lsls	r3, r5, #3
 8008186:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800818a:	00e2      	lsls	r2, r4, #3
 800818c:	4614      	mov	r4, r2
 800818e:	461d      	mov	r5, r3
 8008190:	4643      	mov	r3, r8
 8008192:	18e3      	adds	r3, r4, r3
 8008194:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008198:	464b      	mov	r3, r9
 800819a:	eb45 0303 	adc.w	r3, r5, r3
 800819e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80081a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80081ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80081b2:	f04f 0200 	mov.w	r2, #0
 80081b6:	f04f 0300 	mov.w	r3, #0
 80081ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80081be:	4629      	mov	r1, r5
 80081c0:	008b      	lsls	r3, r1, #2
 80081c2:	4621      	mov	r1, r4
 80081c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081c8:	4621      	mov	r1, r4
 80081ca:	008a      	lsls	r2, r1, #2
 80081cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80081d0:	f7f8 f856 	bl	8000280 <__aeabi_uldivmod>
 80081d4:	4602      	mov	r2, r0
 80081d6:	460b      	mov	r3, r1
 80081d8:	4b60      	ldr	r3, [pc, #384]	@ (800835c <UART_SetConfig+0x570>)
 80081da:	fba3 2302 	umull	r2, r3, r3, r2
 80081de:	095b      	lsrs	r3, r3, #5
 80081e0:	011c      	lsls	r4, r3, #4
 80081e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081e6:	2200      	movs	r2, #0
 80081e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80081ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80081f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80081f4:	4642      	mov	r2, r8
 80081f6:	464b      	mov	r3, r9
 80081f8:	1891      	adds	r1, r2, r2
 80081fa:	61b9      	str	r1, [r7, #24]
 80081fc:	415b      	adcs	r3, r3
 80081fe:	61fb      	str	r3, [r7, #28]
 8008200:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008204:	4641      	mov	r1, r8
 8008206:	1851      	adds	r1, r2, r1
 8008208:	6139      	str	r1, [r7, #16]
 800820a:	4649      	mov	r1, r9
 800820c:	414b      	adcs	r3, r1
 800820e:	617b      	str	r3, [r7, #20]
 8008210:	f04f 0200 	mov.w	r2, #0
 8008214:	f04f 0300 	mov.w	r3, #0
 8008218:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800821c:	4659      	mov	r1, fp
 800821e:	00cb      	lsls	r3, r1, #3
 8008220:	4651      	mov	r1, sl
 8008222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008226:	4651      	mov	r1, sl
 8008228:	00ca      	lsls	r2, r1, #3
 800822a:	4610      	mov	r0, r2
 800822c:	4619      	mov	r1, r3
 800822e:	4603      	mov	r3, r0
 8008230:	4642      	mov	r2, r8
 8008232:	189b      	adds	r3, r3, r2
 8008234:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008238:	464b      	mov	r3, r9
 800823a:	460a      	mov	r2, r1
 800823c:	eb42 0303 	adc.w	r3, r2, r3
 8008240:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800824e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008250:	f04f 0200 	mov.w	r2, #0
 8008254:	f04f 0300 	mov.w	r3, #0
 8008258:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800825c:	4649      	mov	r1, r9
 800825e:	008b      	lsls	r3, r1, #2
 8008260:	4641      	mov	r1, r8
 8008262:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008266:	4641      	mov	r1, r8
 8008268:	008a      	lsls	r2, r1, #2
 800826a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800826e:	f7f8 f807 	bl	8000280 <__aeabi_uldivmod>
 8008272:	4602      	mov	r2, r0
 8008274:	460b      	mov	r3, r1
 8008276:	4611      	mov	r1, r2
 8008278:	4b38      	ldr	r3, [pc, #224]	@ (800835c <UART_SetConfig+0x570>)
 800827a:	fba3 2301 	umull	r2, r3, r3, r1
 800827e:	095b      	lsrs	r3, r3, #5
 8008280:	2264      	movs	r2, #100	@ 0x64
 8008282:	fb02 f303 	mul.w	r3, r2, r3
 8008286:	1acb      	subs	r3, r1, r3
 8008288:	011b      	lsls	r3, r3, #4
 800828a:	3332      	adds	r3, #50	@ 0x32
 800828c:	4a33      	ldr	r2, [pc, #204]	@ (800835c <UART_SetConfig+0x570>)
 800828e:	fba2 2303 	umull	r2, r3, r2, r3
 8008292:	095b      	lsrs	r3, r3, #5
 8008294:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008298:	441c      	add	r4, r3
 800829a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800829e:	2200      	movs	r2, #0
 80082a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80082a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80082a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80082a8:	4642      	mov	r2, r8
 80082aa:	464b      	mov	r3, r9
 80082ac:	1891      	adds	r1, r2, r2
 80082ae:	60b9      	str	r1, [r7, #8]
 80082b0:	415b      	adcs	r3, r3
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80082b8:	4641      	mov	r1, r8
 80082ba:	1851      	adds	r1, r2, r1
 80082bc:	6039      	str	r1, [r7, #0]
 80082be:	4649      	mov	r1, r9
 80082c0:	414b      	adcs	r3, r1
 80082c2:	607b      	str	r3, [r7, #4]
 80082c4:	f04f 0200 	mov.w	r2, #0
 80082c8:	f04f 0300 	mov.w	r3, #0
 80082cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80082d0:	4659      	mov	r1, fp
 80082d2:	00cb      	lsls	r3, r1, #3
 80082d4:	4651      	mov	r1, sl
 80082d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082da:	4651      	mov	r1, sl
 80082dc:	00ca      	lsls	r2, r1, #3
 80082de:	4610      	mov	r0, r2
 80082e0:	4619      	mov	r1, r3
 80082e2:	4603      	mov	r3, r0
 80082e4:	4642      	mov	r2, r8
 80082e6:	189b      	adds	r3, r3, r2
 80082e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80082ea:	464b      	mov	r3, r9
 80082ec:	460a      	mov	r2, r1
 80082ee:	eb42 0303 	adc.w	r3, r2, r3
 80082f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80082f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80082fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8008300:	f04f 0200 	mov.w	r2, #0
 8008304:	f04f 0300 	mov.w	r3, #0
 8008308:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800830c:	4649      	mov	r1, r9
 800830e:	008b      	lsls	r3, r1, #2
 8008310:	4641      	mov	r1, r8
 8008312:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008316:	4641      	mov	r1, r8
 8008318:	008a      	lsls	r2, r1, #2
 800831a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800831e:	f7f7 ffaf 	bl	8000280 <__aeabi_uldivmod>
 8008322:	4602      	mov	r2, r0
 8008324:	460b      	mov	r3, r1
 8008326:	4b0d      	ldr	r3, [pc, #52]	@ (800835c <UART_SetConfig+0x570>)
 8008328:	fba3 1302 	umull	r1, r3, r3, r2
 800832c:	095b      	lsrs	r3, r3, #5
 800832e:	2164      	movs	r1, #100	@ 0x64
 8008330:	fb01 f303 	mul.w	r3, r1, r3
 8008334:	1ad3      	subs	r3, r2, r3
 8008336:	011b      	lsls	r3, r3, #4
 8008338:	3332      	adds	r3, #50	@ 0x32
 800833a:	4a08      	ldr	r2, [pc, #32]	@ (800835c <UART_SetConfig+0x570>)
 800833c:	fba2 2303 	umull	r2, r3, r2, r3
 8008340:	095b      	lsrs	r3, r3, #5
 8008342:	f003 020f 	and.w	r2, r3, #15
 8008346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4422      	add	r2, r4
 800834e:	609a      	str	r2, [r3, #8]
}
 8008350:	bf00      	nop
 8008352:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008356:	46bd      	mov	sp, r7
 8008358:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800835c:	51eb851f 	.word	0x51eb851f

08008360 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008360:	b084      	sub	sp, #16
 8008362:	b580      	push	{r7, lr}
 8008364:	b084      	sub	sp, #16
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
 800836a:	f107 001c 	add.w	r0, r7, #28
 800836e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008372:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008376:	2b01      	cmp	r3, #1
 8008378:	d123      	bne.n	80083c2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800837e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800838e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80083a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d105      	bne.n	80083b6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f001 fae8 	bl	800998c <USB_CoreReset>
 80083bc:	4603      	mov	r3, r0
 80083be:	73fb      	strb	r3, [r7, #15]
 80083c0:	e01b      	b.n	80083fa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f001 fadc 	bl	800998c <USB_CoreReset>
 80083d4:	4603      	mov	r3, r0
 80083d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80083d8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d106      	bne.n	80083ee <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083e4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80083ec:	e005      	b.n	80083fa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80083fa:	7fbb      	ldrb	r3, [r7, #30]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d10b      	bne.n	8008418 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	f043 0206 	orr.w	r2, r3, #6
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	f043 0220 	orr.w	r2, r3, #32
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008418:	7bfb      	ldrb	r3, [r7, #15]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008424:	b004      	add	sp, #16
 8008426:	4770      	bx	lr

08008428 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008428:	b480      	push	{r7}
 800842a:	b087      	sub	sp, #28
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	4613      	mov	r3, r2
 8008434:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008436:	79fb      	ldrb	r3, [r7, #7]
 8008438:	2b02      	cmp	r3, #2
 800843a:	d165      	bne.n	8008508 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	4a41      	ldr	r2, [pc, #260]	@ (8008544 <USB_SetTurnaroundTime+0x11c>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d906      	bls.n	8008452 <USB_SetTurnaroundTime+0x2a>
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	4a40      	ldr	r2, [pc, #256]	@ (8008548 <USB_SetTurnaroundTime+0x120>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d202      	bcs.n	8008452 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800844c:	230f      	movs	r3, #15
 800844e:	617b      	str	r3, [r7, #20]
 8008450:	e062      	b.n	8008518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	4a3c      	ldr	r2, [pc, #240]	@ (8008548 <USB_SetTurnaroundTime+0x120>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d306      	bcc.n	8008468 <USB_SetTurnaroundTime+0x40>
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	4a3b      	ldr	r2, [pc, #236]	@ (800854c <USB_SetTurnaroundTime+0x124>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d202      	bcs.n	8008468 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008462:	230e      	movs	r3, #14
 8008464:	617b      	str	r3, [r7, #20]
 8008466:	e057      	b.n	8008518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	4a38      	ldr	r2, [pc, #224]	@ (800854c <USB_SetTurnaroundTime+0x124>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d306      	bcc.n	800847e <USB_SetTurnaroundTime+0x56>
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	4a37      	ldr	r2, [pc, #220]	@ (8008550 <USB_SetTurnaroundTime+0x128>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d202      	bcs.n	800847e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008478:	230d      	movs	r3, #13
 800847a:	617b      	str	r3, [r7, #20]
 800847c:	e04c      	b.n	8008518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	4a33      	ldr	r2, [pc, #204]	@ (8008550 <USB_SetTurnaroundTime+0x128>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d306      	bcc.n	8008494 <USB_SetTurnaroundTime+0x6c>
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	4a32      	ldr	r2, [pc, #200]	@ (8008554 <USB_SetTurnaroundTime+0x12c>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d802      	bhi.n	8008494 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800848e:	230c      	movs	r3, #12
 8008490:	617b      	str	r3, [r7, #20]
 8008492:	e041      	b.n	8008518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	4a2f      	ldr	r2, [pc, #188]	@ (8008554 <USB_SetTurnaroundTime+0x12c>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d906      	bls.n	80084aa <USB_SetTurnaroundTime+0x82>
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	4a2e      	ldr	r2, [pc, #184]	@ (8008558 <USB_SetTurnaroundTime+0x130>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d802      	bhi.n	80084aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80084a4:	230b      	movs	r3, #11
 80084a6:	617b      	str	r3, [r7, #20]
 80084a8:	e036      	b.n	8008518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	4a2a      	ldr	r2, [pc, #168]	@ (8008558 <USB_SetTurnaroundTime+0x130>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d906      	bls.n	80084c0 <USB_SetTurnaroundTime+0x98>
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	4a29      	ldr	r2, [pc, #164]	@ (800855c <USB_SetTurnaroundTime+0x134>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d802      	bhi.n	80084c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80084ba:	230a      	movs	r3, #10
 80084bc:	617b      	str	r3, [r7, #20]
 80084be:	e02b      	b.n	8008518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	4a26      	ldr	r2, [pc, #152]	@ (800855c <USB_SetTurnaroundTime+0x134>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d906      	bls.n	80084d6 <USB_SetTurnaroundTime+0xae>
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	4a25      	ldr	r2, [pc, #148]	@ (8008560 <USB_SetTurnaroundTime+0x138>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d202      	bcs.n	80084d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80084d0:	2309      	movs	r3, #9
 80084d2:	617b      	str	r3, [r7, #20]
 80084d4:	e020      	b.n	8008518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	4a21      	ldr	r2, [pc, #132]	@ (8008560 <USB_SetTurnaroundTime+0x138>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d306      	bcc.n	80084ec <USB_SetTurnaroundTime+0xc4>
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	4a20      	ldr	r2, [pc, #128]	@ (8008564 <USB_SetTurnaroundTime+0x13c>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d802      	bhi.n	80084ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80084e6:	2308      	movs	r3, #8
 80084e8:	617b      	str	r3, [r7, #20]
 80084ea:	e015      	b.n	8008518 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	4a1d      	ldr	r2, [pc, #116]	@ (8008564 <USB_SetTurnaroundTime+0x13c>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d906      	bls.n	8008502 <USB_SetTurnaroundTime+0xda>
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	4a1c      	ldr	r2, [pc, #112]	@ (8008568 <USB_SetTurnaroundTime+0x140>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d202      	bcs.n	8008502 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80084fc:	2307      	movs	r3, #7
 80084fe:	617b      	str	r3, [r7, #20]
 8008500:	e00a      	b.n	8008518 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008502:	2306      	movs	r3, #6
 8008504:	617b      	str	r3, [r7, #20]
 8008506:	e007      	b.n	8008518 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008508:	79fb      	ldrb	r3, [r7, #7]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d102      	bne.n	8008514 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800850e:	2309      	movs	r3, #9
 8008510:	617b      	str	r3, [r7, #20]
 8008512:	e001      	b.n	8008518 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008514:	2309      	movs	r3, #9
 8008516:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	68da      	ldr	r2, [r3, #12]
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	029b      	lsls	r3, r3, #10
 800852c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008530:	431a      	orrs	r2, r3
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	371c      	adds	r7, #28
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr
 8008544:	00d8acbf 	.word	0x00d8acbf
 8008548:	00e4e1c0 	.word	0x00e4e1c0
 800854c:	00f42400 	.word	0x00f42400
 8008550:	01067380 	.word	0x01067380
 8008554:	011a499f 	.word	0x011a499f
 8008558:	01312cff 	.word	0x01312cff
 800855c:	014ca43f 	.word	0x014ca43f
 8008560:	016e3600 	.word	0x016e3600
 8008564:	01a6ab1f 	.word	0x01a6ab1f
 8008568:	01e84800 	.word	0x01e84800

0800856c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	f043 0201 	orr.w	r2, r3, #1
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800858e:	b480      	push	{r7}
 8008590:	b083      	sub	sp, #12
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	f023 0201 	bic.w	r2, r3, #1
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	460b      	mov	r3, r1
 80085ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80085bc:	2300      	movs	r3, #0
 80085be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80085cc:	78fb      	ldrb	r3, [r7, #3]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d115      	bne.n	80085fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80085de:	200a      	movs	r0, #10
 80085e0:	f7f9 fa68 	bl	8001ab4 <HAL_Delay>
      ms += 10U;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	330a      	adds	r3, #10
 80085e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f001 f93f 	bl	800986e <USB_GetMode>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d01e      	beq.n	8008634 <USB_SetCurrentMode+0x84>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2bc7      	cmp	r3, #199	@ 0xc7
 80085fa:	d9f0      	bls.n	80085de <USB_SetCurrentMode+0x2e>
 80085fc:	e01a      	b.n	8008634 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80085fe:	78fb      	ldrb	r3, [r7, #3]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d115      	bne.n	8008630 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008610:	200a      	movs	r0, #10
 8008612:	f7f9 fa4f 	bl	8001ab4 <HAL_Delay>
      ms += 10U;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	330a      	adds	r3, #10
 800861a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f001 f926 	bl	800986e <USB_GetMode>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d005      	beq.n	8008634 <USB_SetCurrentMode+0x84>
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2bc7      	cmp	r3, #199	@ 0xc7
 800862c:	d9f0      	bls.n	8008610 <USB_SetCurrentMode+0x60>
 800862e:	e001      	b.n	8008634 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e005      	b.n	8008640 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2bc8      	cmp	r3, #200	@ 0xc8
 8008638:	d101      	bne.n	800863e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e000      	b.n	8008640 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3710      	adds	r7, #16
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008648:	b084      	sub	sp, #16
 800864a:	b580      	push	{r7, lr}
 800864c:	b086      	sub	sp, #24
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
 8008652:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008656:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800865a:	2300      	movs	r3, #0
 800865c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008662:	2300      	movs	r3, #0
 8008664:	613b      	str	r3, [r7, #16]
 8008666:	e009      	b.n	800867c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	3340      	adds	r3, #64	@ 0x40
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	4413      	add	r3, r2
 8008672:	2200      	movs	r2, #0
 8008674:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	3301      	adds	r3, #1
 800867a:	613b      	str	r3, [r7, #16]
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	2b0e      	cmp	r3, #14
 8008680:	d9f2      	bls.n	8008668 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008682:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008686:	2b00      	cmp	r3, #0
 8008688:	d11c      	bne.n	80086c4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008698:	f043 0302 	orr.w	r3, r3, #2
 800869c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086a2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ae:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ba:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80086c2:	e00b      	b.n	80086dc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086c8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80086e2:	461a      	mov	r2, r3
 80086e4:	2300      	movs	r3, #0
 80086e6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80086e8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d10d      	bne.n	800870c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80086f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d104      	bne.n	8008702 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80086f8:	2100      	movs	r1, #0
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f968 	bl	80089d0 <USB_SetDevSpeed>
 8008700:	e008      	b.n	8008714 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008702:	2101      	movs	r1, #1
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f963 	bl	80089d0 <USB_SetDevSpeed>
 800870a:	e003      	b.n	8008714 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800870c:	2103      	movs	r1, #3
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 f95e 	bl	80089d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008714:	2110      	movs	r1, #16
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f8fa 	bl	8008910 <USB_FlushTxFifo>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d001      	beq.n	8008726 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f924 	bl	8008974 <USB_FlushRxFifo>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d001      	beq.n	8008736 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800873c:	461a      	mov	r2, r3
 800873e:	2300      	movs	r3, #0
 8008740:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008748:	461a      	mov	r2, r3
 800874a:	2300      	movs	r3, #0
 800874c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008754:	461a      	mov	r2, r3
 8008756:	2300      	movs	r3, #0
 8008758:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800875a:	2300      	movs	r3, #0
 800875c:	613b      	str	r3, [r7, #16]
 800875e:	e043      	b.n	80087e8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	015a      	lsls	r2, r3, #5
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	4413      	add	r3, r2
 8008768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008772:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008776:	d118      	bne.n	80087aa <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d10a      	bne.n	8008794 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	015a      	lsls	r2, r3, #5
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	4413      	add	r3, r2
 8008786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800878a:	461a      	mov	r2, r3
 800878c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008790:	6013      	str	r3, [r2, #0]
 8008792:	e013      	b.n	80087bc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	015a      	lsls	r2, r3, #5
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	4413      	add	r3, r2
 800879c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087a0:	461a      	mov	r2, r3
 80087a2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80087a6:	6013      	str	r3, [r2, #0]
 80087a8:	e008      	b.n	80087bc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	015a      	lsls	r2, r3, #5
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	4413      	add	r3, r2
 80087b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087b6:	461a      	mov	r2, r3
 80087b8:	2300      	movs	r3, #0
 80087ba:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	015a      	lsls	r2, r3, #5
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	4413      	add	r3, r2
 80087c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087c8:	461a      	mov	r2, r3
 80087ca:	2300      	movs	r3, #0
 80087cc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	015a      	lsls	r2, r3, #5
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	4413      	add	r3, r2
 80087d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087da:	461a      	mov	r2, r3
 80087dc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80087e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	3301      	adds	r3, #1
 80087e6:	613b      	str	r3, [r7, #16]
 80087e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80087ec:	461a      	mov	r2, r3
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d3b5      	bcc.n	8008760 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087f4:	2300      	movs	r3, #0
 80087f6:	613b      	str	r3, [r7, #16]
 80087f8:	e043      	b.n	8008882 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	015a      	lsls	r2, r3, #5
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	4413      	add	r3, r2
 8008802:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800880c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008810:	d118      	bne.n	8008844 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d10a      	bne.n	800882e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	015a      	lsls	r2, r3, #5
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	4413      	add	r3, r2
 8008820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008824:	461a      	mov	r2, r3
 8008826:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800882a:	6013      	str	r3, [r2, #0]
 800882c:	e013      	b.n	8008856 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	015a      	lsls	r2, r3, #5
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	4413      	add	r3, r2
 8008836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800883a:	461a      	mov	r2, r3
 800883c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008840:	6013      	str	r3, [r2, #0]
 8008842:	e008      	b.n	8008856 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	015a      	lsls	r2, r3, #5
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	4413      	add	r3, r2
 800884c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008850:	461a      	mov	r2, r3
 8008852:	2300      	movs	r3, #0
 8008854:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	015a      	lsls	r2, r3, #5
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	4413      	add	r3, r2
 800885e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008862:	461a      	mov	r2, r3
 8008864:	2300      	movs	r3, #0
 8008866:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	015a      	lsls	r2, r3, #5
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	4413      	add	r3, r2
 8008870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008874:	461a      	mov	r2, r3
 8008876:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800887a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	3301      	adds	r3, #1
 8008880:	613b      	str	r3, [r7, #16]
 8008882:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008886:	461a      	mov	r2, r3
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	4293      	cmp	r3, r2
 800888c:	d3b5      	bcc.n	80087fa <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800889c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088a0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80088ae:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80088b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d105      	bne.n	80088c4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	699b      	ldr	r3, [r3, #24]
 80088bc:	f043 0210 	orr.w	r2, r3, #16
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	699a      	ldr	r2, [r3, #24]
 80088c8:	4b10      	ldr	r3, [pc, #64]	@ (800890c <USB_DevInit+0x2c4>)
 80088ca:	4313      	orrs	r3, r2
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80088d0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d005      	beq.n	80088e4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	f043 0208 	orr.w	r2, r3, #8
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80088e4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d107      	bne.n	80088fc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	699b      	ldr	r3, [r3, #24]
 80088f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80088f4:	f043 0304 	orr.w	r3, r3, #4
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80088fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3718      	adds	r7, #24
 8008902:	46bd      	mov	sp, r7
 8008904:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008908:	b004      	add	sp, #16
 800890a:	4770      	bx	lr
 800890c:	803c3800 	.word	0x803c3800

08008910 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800891a:	2300      	movs	r3, #0
 800891c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	3301      	adds	r3, #1
 8008922:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800892a:	d901      	bls.n	8008930 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800892c:	2303      	movs	r3, #3
 800892e:	e01b      	b.n	8008968 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	2b00      	cmp	r3, #0
 8008936:	daf2      	bge.n	800891e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008938:	2300      	movs	r3, #0
 800893a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	019b      	lsls	r3, r3, #6
 8008940:	f043 0220 	orr.w	r2, r3, #32
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	3301      	adds	r3, #1
 800894c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008954:	d901      	bls.n	800895a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008956:	2303      	movs	r3, #3
 8008958:	e006      	b.n	8008968 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	f003 0320 	and.w	r3, r3, #32
 8008962:	2b20      	cmp	r3, #32
 8008964:	d0f0      	beq.n	8008948 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3714      	adds	r7, #20
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800897c:	2300      	movs	r3, #0
 800897e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	3301      	adds	r3, #1
 8008984:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800898c:	d901      	bls.n	8008992 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800898e:	2303      	movs	r3, #3
 8008990:	e018      	b.n	80089c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	2b00      	cmp	r3, #0
 8008998:	daf2      	bge.n	8008980 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800899a:	2300      	movs	r3, #0
 800899c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2210      	movs	r2, #16
 80089a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	3301      	adds	r3, #1
 80089a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80089b0:	d901      	bls.n	80089b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80089b2:	2303      	movs	r3, #3
 80089b4:	e006      	b.n	80089c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	f003 0310 	and.w	r3, r3, #16
 80089be:	2b10      	cmp	r3, #16
 80089c0:	d0f0      	beq.n	80089a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3714      	adds	r7, #20
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	460b      	mov	r3, r1
 80089da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	78fb      	ldrb	r3, [r7, #3]
 80089ea:	68f9      	ldr	r1, [r7, #12]
 80089ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80089f0:	4313      	orrs	r3, r2
 80089f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3714      	adds	r7, #20
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr

08008a02 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a02:	b480      	push	{r7}
 8008a04:	b087      	sub	sp, #28
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	f003 0306 	and.w	r3, r3, #6
 8008a1a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d102      	bne.n	8008a28 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008a22:	2300      	movs	r3, #0
 8008a24:	75fb      	strb	r3, [r7, #23]
 8008a26:	e00a      	b.n	8008a3e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d002      	beq.n	8008a34 <USB_GetDevSpeed+0x32>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2b06      	cmp	r3, #6
 8008a32:	d102      	bne.n	8008a3a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008a34:	2302      	movs	r3, #2
 8008a36:	75fb      	strb	r3, [r7, #23]
 8008a38:	e001      	b.n	8008a3e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008a3a:	230f      	movs	r3, #15
 8008a3c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	371c      	adds	r7, #28
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	785b      	ldrb	r3, [r3, #1]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d13a      	bne.n	8008ade <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a6e:	69da      	ldr	r2, [r3, #28]
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	f003 030f 	and.w	r3, r3, #15
 8008a78:	2101      	movs	r1, #1
 8008a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	68f9      	ldr	r1, [r7, #12]
 8008a82:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008a86:	4313      	orrs	r3, r2
 8008a88:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	015a      	lsls	r2, r3, #5
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	4413      	add	r3, r2
 8008a92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d155      	bne.n	8008b4c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	015a      	lsls	r2, r3, #5
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	791b      	ldrb	r3, [r3, #4]
 8008aba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008abc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	059b      	lsls	r3, r3, #22
 8008ac2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	0151      	lsls	r1, r2, #5
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	440a      	add	r2, r1
 8008ace:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ad2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ad6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ada:	6013      	str	r3, [r2, #0]
 8008adc:	e036      	b.n	8008b4c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ae4:	69da      	ldr	r2, [r3, #28]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	f003 030f 	and.w	r3, r3, #15
 8008aee:	2101      	movs	r1, #1
 8008af0:	fa01 f303 	lsl.w	r3, r1, r3
 8008af4:	041b      	lsls	r3, r3, #16
 8008af6:	68f9      	ldr	r1, [r7, #12]
 8008af8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008afc:	4313      	orrs	r3, r2
 8008afe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	015a      	lsls	r2, r3, #5
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	4413      	add	r3, r2
 8008b08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d11a      	bne.n	8008b4c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	015a      	lsls	r2, r3, #5
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	791b      	ldrb	r3, [r3, #4]
 8008b30:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008b32:	430b      	orrs	r3, r1
 8008b34:	4313      	orrs	r3, r2
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	0151      	lsls	r1, r2, #5
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	440a      	add	r2, r1
 8008b3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b4a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3714      	adds	r7, #20
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr
	...

08008b5c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b085      	sub	sp, #20
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	785b      	ldrb	r3, [r3, #1]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d161      	bne.n	8008c3c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	015a      	lsls	r2, r3, #5
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	4413      	add	r3, r2
 8008b80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b8e:	d11f      	bne.n	8008bd0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	015a      	lsls	r2, r3, #5
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	4413      	add	r3, r2
 8008b98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	0151      	lsls	r1, r2, #5
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	440a      	add	r2, r1
 8008ba6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008baa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008bae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	015a      	lsls	r2, r3, #5
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68ba      	ldr	r2, [r7, #8]
 8008bc0:	0151      	lsls	r1, r2, #5
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	440a      	add	r2, r1
 8008bc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008bce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	f003 030f 	and.w	r3, r3, #15
 8008be0:	2101      	movs	r1, #1
 8008be2:	fa01 f303 	lsl.w	r3, r1, r3
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	43db      	mvns	r3, r3
 8008bea:	68f9      	ldr	r1, [r7, #12]
 8008bec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008bf0:	4013      	ands	r3, r2
 8008bf2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bfa:	69da      	ldr	r2, [r3, #28]
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	f003 030f 	and.w	r3, r3, #15
 8008c04:	2101      	movs	r1, #1
 8008c06:	fa01 f303 	lsl.w	r3, r1, r3
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	43db      	mvns	r3, r3
 8008c0e:	68f9      	ldr	r1, [r7, #12]
 8008c10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008c14:	4013      	ands	r3, r2
 8008c16:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	015a      	lsls	r2, r3, #5
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	4413      	add	r3, r2
 8008c20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	0159      	lsls	r1, r3, #5
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	440b      	add	r3, r1
 8008c2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c32:	4619      	mov	r1, r3
 8008c34:	4b35      	ldr	r3, [pc, #212]	@ (8008d0c <USB_DeactivateEndpoint+0x1b0>)
 8008c36:	4013      	ands	r3, r2
 8008c38:	600b      	str	r3, [r1, #0]
 8008c3a:	e060      	b.n	8008cfe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	015a      	lsls	r2, r3, #5
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	4413      	add	r3, r2
 8008c44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c52:	d11f      	bne.n	8008c94 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	015a      	lsls	r2, r3, #5
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	0151      	lsls	r1, r2, #5
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	440a      	add	r2, r1
 8008c6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c6e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008c72:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	015a      	lsls	r2, r3, #5
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68ba      	ldr	r2, [r7, #8]
 8008c84:	0151      	lsls	r1, r2, #5
 8008c86:	68fa      	ldr	r2, [r7, #12]
 8008c88:	440a      	add	r2, r1
 8008c8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c8e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008c92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	f003 030f 	and.w	r3, r3, #15
 8008ca4:	2101      	movs	r1, #1
 8008ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8008caa:	041b      	lsls	r3, r3, #16
 8008cac:	43db      	mvns	r3, r3
 8008cae:	68f9      	ldr	r1, [r7, #12]
 8008cb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008cb4:	4013      	ands	r3, r2
 8008cb6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cbe:	69da      	ldr	r2, [r3, #28]
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	f003 030f 	and.w	r3, r3, #15
 8008cc8:	2101      	movs	r1, #1
 8008cca:	fa01 f303 	lsl.w	r3, r1, r3
 8008cce:	041b      	lsls	r3, r3, #16
 8008cd0:	43db      	mvns	r3, r3
 8008cd2:	68f9      	ldr	r1, [r7, #12]
 8008cd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008cd8:	4013      	ands	r3, r2
 8008cda:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	015a      	lsls	r2, r3, #5
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	0159      	lsls	r1, r3, #5
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	440b      	add	r3, r1
 8008cf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	4b05      	ldr	r3, [pc, #20]	@ (8008d10 <USB_DeactivateEndpoint+0x1b4>)
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3714      	adds	r7, #20
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	ec337800 	.word	0xec337800
 8008d10:	eff37800 	.word	0xeff37800

08008d14 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b08a      	sub	sp, #40	@ 0x28
 8008d18:	af02      	add	r7, sp, #8
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	4613      	mov	r3, r2
 8008d20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	785b      	ldrb	r3, [r3, #1]
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	f040 817f 	bne.w	8009034 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	691b      	ldr	r3, [r3, #16]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d132      	bne.n	8008da4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	015a      	lsls	r2, r3, #5
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	4413      	add	r3, r2
 8008d46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d4a:	691b      	ldr	r3, [r3, #16]
 8008d4c:	69ba      	ldr	r2, [r7, #24]
 8008d4e:	0151      	lsls	r1, r2, #5
 8008d50:	69fa      	ldr	r2, [r7, #28]
 8008d52:	440a      	add	r2, r1
 8008d54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d58:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008d5c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008d60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	015a      	lsls	r2, r3, #5
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	4413      	add	r3, r2
 8008d6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d6e:	691b      	ldr	r3, [r3, #16]
 8008d70:	69ba      	ldr	r2, [r7, #24]
 8008d72:	0151      	lsls	r1, r2, #5
 8008d74:	69fa      	ldr	r2, [r7, #28]
 8008d76:	440a      	add	r2, r1
 8008d78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	015a      	lsls	r2, r3, #5
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	4413      	add	r3, r2
 8008d8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	69ba      	ldr	r2, [r7, #24]
 8008d92:	0151      	lsls	r1, r2, #5
 8008d94:	69fa      	ldr	r2, [r7, #28]
 8008d96:	440a      	add	r2, r1
 8008d98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d9c:	0cdb      	lsrs	r3, r3, #19
 8008d9e:	04db      	lsls	r3, r3, #19
 8008da0:	6113      	str	r3, [r2, #16]
 8008da2:	e097      	b.n	8008ed4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	015a      	lsls	r2, r3, #5
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	4413      	add	r3, r2
 8008dac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	69ba      	ldr	r2, [r7, #24]
 8008db4:	0151      	lsls	r1, r2, #5
 8008db6:	69fa      	ldr	r2, [r7, #28]
 8008db8:	440a      	add	r2, r1
 8008dba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008dbe:	0cdb      	lsrs	r3, r3, #19
 8008dc0:	04db      	lsls	r3, r3, #19
 8008dc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	015a      	lsls	r2, r3, #5
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	4413      	add	r3, r2
 8008dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	69ba      	ldr	r2, [r7, #24]
 8008dd4:	0151      	lsls	r1, r2, #5
 8008dd6:	69fa      	ldr	r2, [r7, #28]
 8008dd8:	440a      	add	r2, r1
 8008dda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008dde:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008de2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008de6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d11a      	bne.n	8008e24 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	691a      	ldr	r2, [r3, #16]
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d903      	bls.n	8008e02 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	689a      	ldr	r2, [r3, #8]
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	015a      	lsls	r2, r3, #5
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	4413      	add	r3, r2
 8008e0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	69ba      	ldr	r2, [r7, #24]
 8008e12:	0151      	lsls	r1, r2, #5
 8008e14:	69fa      	ldr	r2, [r7, #28]
 8008e16:	440a      	add	r2, r1
 8008e18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e1c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008e20:	6113      	str	r3, [r2, #16]
 8008e22:	e044      	b.n	8008eae <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	691a      	ldr	r2, [r3, #16]
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	1e5a      	subs	r2, r3, #1
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e38:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	015a      	lsls	r2, r3, #5
 8008e3e:	69fb      	ldr	r3, [r7, #28]
 8008e40:	4413      	add	r3, r2
 8008e42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e46:	691a      	ldr	r2, [r3, #16]
 8008e48:	8afb      	ldrh	r3, [r7, #22]
 8008e4a:	04d9      	lsls	r1, r3, #19
 8008e4c:	4ba4      	ldr	r3, [pc, #656]	@ (80090e0 <USB_EPStartXfer+0x3cc>)
 8008e4e:	400b      	ands	r3, r1
 8008e50:	69b9      	ldr	r1, [r7, #24]
 8008e52:	0148      	lsls	r0, r1, #5
 8008e54:	69f9      	ldr	r1, [r7, #28]
 8008e56:	4401      	add	r1, r0
 8008e58:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	791b      	ldrb	r3, [r3, #4]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d122      	bne.n	8008eae <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	015a      	lsls	r2, r3, #5
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	4413      	add	r3, r2
 8008e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	69ba      	ldr	r2, [r7, #24]
 8008e78:	0151      	lsls	r1, r2, #5
 8008e7a:	69fa      	ldr	r2, [r7, #28]
 8008e7c:	440a      	add	r2, r1
 8008e7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e82:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008e86:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	015a      	lsls	r2, r3, #5
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	4413      	add	r3, r2
 8008e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e94:	691a      	ldr	r2, [r3, #16]
 8008e96:	8afb      	ldrh	r3, [r7, #22]
 8008e98:	075b      	lsls	r3, r3, #29
 8008e9a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008e9e:	69b9      	ldr	r1, [r7, #24]
 8008ea0:	0148      	lsls	r0, r1, #5
 8008ea2:	69f9      	ldr	r1, [r7, #28]
 8008ea4:	4401      	add	r1, r0
 8008ea6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	015a      	lsls	r2, r3, #5
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008eba:	691a      	ldr	r2, [r3, #16]
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ec4:	69b9      	ldr	r1, [r7, #24]
 8008ec6:	0148      	lsls	r0, r1, #5
 8008ec8:	69f9      	ldr	r1, [r7, #28]
 8008eca:	4401      	add	r1, r0
 8008ecc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008ed4:	79fb      	ldrb	r3, [r7, #7]
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d14b      	bne.n	8008f72 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	69db      	ldr	r3, [r3, #28]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d009      	beq.n	8008ef6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	015a      	lsls	r2, r3, #5
 8008ee6:	69fb      	ldr	r3, [r7, #28]
 8008ee8:	4413      	add	r3, r2
 8008eea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008eee:	461a      	mov	r2, r3
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	69db      	ldr	r3, [r3, #28]
 8008ef4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	791b      	ldrb	r3, [r3, #4]
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d128      	bne.n	8008f50 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d110      	bne.n	8008f30 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	015a      	lsls	r2, r3, #5
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	4413      	add	r3, r2
 8008f16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	69ba      	ldr	r2, [r7, #24]
 8008f1e:	0151      	lsls	r1, r2, #5
 8008f20:	69fa      	ldr	r2, [r7, #28]
 8008f22:	440a      	add	r2, r1
 8008f24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f28:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008f2c:	6013      	str	r3, [r2, #0]
 8008f2e:	e00f      	b.n	8008f50 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	015a      	lsls	r2, r3, #5
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	4413      	add	r3, r2
 8008f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	69ba      	ldr	r2, [r7, #24]
 8008f40:	0151      	lsls	r1, r2, #5
 8008f42:	69fa      	ldr	r2, [r7, #28]
 8008f44:	440a      	add	r2, r1
 8008f46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f4e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	015a      	lsls	r2, r3, #5
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	4413      	add	r3, r2
 8008f58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	69ba      	ldr	r2, [r7, #24]
 8008f60:	0151      	lsls	r1, r2, #5
 8008f62:	69fa      	ldr	r2, [r7, #28]
 8008f64:	440a      	add	r2, r1
 8008f66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f6a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008f6e:	6013      	str	r3, [r2, #0]
 8008f70:	e166      	b.n	8009240 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	015a      	lsls	r2, r3, #5
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	4413      	add	r3, r2
 8008f7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	69ba      	ldr	r2, [r7, #24]
 8008f82:	0151      	lsls	r1, r2, #5
 8008f84:	69fa      	ldr	r2, [r7, #28]
 8008f86:	440a      	add	r2, r1
 8008f88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f8c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008f90:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	791b      	ldrb	r3, [r3, #4]
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d015      	beq.n	8008fc6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	691b      	ldr	r3, [r3, #16]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f000 814e 	beq.w	8009240 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008faa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	f003 030f 	and.w	r3, r3, #15
 8008fb4:	2101      	movs	r1, #1
 8008fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8008fba:	69f9      	ldr	r1, [r7, #28]
 8008fbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	634b      	str	r3, [r1, #52]	@ 0x34
 8008fc4:	e13c      	b.n	8009240 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d110      	bne.n	8008ff8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	015a      	lsls	r2, r3, #5
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	4413      	add	r3, r2
 8008fde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	69ba      	ldr	r2, [r7, #24]
 8008fe6:	0151      	lsls	r1, r2, #5
 8008fe8:	69fa      	ldr	r2, [r7, #28]
 8008fea:	440a      	add	r2, r1
 8008fec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ff0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008ff4:	6013      	str	r3, [r2, #0]
 8008ff6:	e00f      	b.n	8009018 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	015a      	lsls	r2, r3, #5
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	4413      	add	r3, r2
 8009000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	69ba      	ldr	r2, [r7, #24]
 8009008:	0151      	lsls	r1, r2, #5
 800900a:	69fa      	ldr	r2, [r7, #28]
 800900c:	440a      	add	r2, r1
 800900e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009012:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009016:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	68d9      	ldr	r1, [r3, #12]
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	781a      	ldrb	r2, [r3, #0]
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	b298      	uxth	r0, r3
 8009026:	79fb      	ldrb	r3, [r7, #7]
 8009028:	9300      	str	r3, [sp, #0]
 800902a:	4603      	mov	r3, r0
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	f000 f9b9 	bl	80093a4 <USB_WritePacket>
 8009032:	e105      	b.n	8009240 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009034:	69bb      	ldr	r3, [r7, #24]
 8009036:	015a      	lsls	r2, r3, #5
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	4413      	add	r3, r2
 800903c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	69ba      	ldr	r2, [r7, #24]
 8009044:	0151      	lsls	r1, r2, #5
 8009046:	69fa      	ldr	r2, [r7, #28]
 8009048:	440a      	add	r2, r1
 800904a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800904e:	0cdb      	lsrs	r3, r3, #19
 8009050:	04db      	lsls	r3, r3, #19
 8009052:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	015a      	lsls	r2, r3, #5
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	4413      	add	r3, r2
 800905c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	69ba      	ldr	r2, [r7, #24]
 8009064:	0151      	lsls	r1, r2, #5
 8009066:	69fa      	ldr	r2, [r7, #28]
 8009068:	440a      	add	r2, r1
 800906a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800906e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009072:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009076:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d132      	bne.n	80090e4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	691b      	ldr	r3, [r3, #16]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d003      	beq.n	800908e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	689a      	ldr	r2, [r3, #8]
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	689a      	ldr	r2, [r3, #8]
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	015a      	lsls	r2, r3, #5
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	4413      	add	r3, r2
 800909e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090a2:	691a      	ldr	r2, [r3, #16]
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	6a1b      	ldr	r3, [r3, #32]
 80090a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090ac:	69b9      	ldr	r1, [r7, #24]
 80090ae:	0148      	lsls	r0, r1, #5
 80090b0:	69f9      	ldr	r1, [r7, #28]
 80090b2:	4401      	add	r1, r0
 80090b4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80090b8:	4313      	orrs	r3, r2
 80090ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	015a      	lsls	r2, r3, #5
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	4413      	add	r3, r2
 80090c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	69ba      	ldr	r2, [r7, #24]
 80090cc:	0151      	lsls	r1, r2, #5
 80090ce:	69fa      	ldr	r2, [r7, #28]
 80090d0:	440a      	add	r2, r1
 80090d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80090d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80090da:	6113      	str	r3, [r2, #16]
 80090dc:	e062      	b.n	80091a4 <USB_EPStartXfer+0x490>
 80090de:	bf00      	nop
 80090e0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d123      	bne.n	8009134 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	015a      	lsls	r2, r3, #5
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	4413      	add	r3, r2
 80090f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090f8:	691a      	ldr	r2, [r3, #16]
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009102:	69b9      	ldr	r1, [r7, #24]
 8009104:	0148      	lsls	r0, r1, #5
 8009106:	69f9      	ldr	r1, [r7, #28]
 8009108:	4401      	add	r1, r0
 800910a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800910e:	4313      	orrs	r3, r2
 8009110:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	015a      	lsls	r2, r3, #5
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	4413      	add	r3, r2
 800911a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	69ba      	ldr	r2, [r7, #24]
 8009122:	0151      	lsls	r1, r2, #5
 8009124:	69fa      	ldr	r2, [r7, #28]
 8009126:	440a      	add	r2, r1
 8009128:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800912c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009130:	6113      	str	r3, [r2, #16]
 8009132:	e037      	b.n	80091a4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	691a      	ldr	r2, [r3, #16]
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	4413      	add	r3, r2
 800913e:	1e5a      	subs	r2, r3, #1
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	fbb2 f3f3 	udiv	r3, r2, r3
 8009148:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	8afa      	ldrh	r2, [r7, #22]
 8009150:	fb03 f202 	mul.w	r2, r3, r2
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	015a      	lsls	r2, r3, #5
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	4413      	add	r3, r2
 8009160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009164:	691a      	ldr	r2, [r3, #16]
 8009166:	8afb      	ldrh	r3, [r7, #22]
 8009168:	04d9      	lsls	r1, r3, #19
 800916a:	4b38      	ldr	r3, [pc, #224]	@ (800924c <USB_EPStartXfer+0x538>)
 800916c:	400b      	ands	r3, r1
 800916e:	69b9      	ldr	r1, [r7, #24]
 8009170:	0148      	lsls	r0, r1, #5
 8009172:	69f9      	ldr	r1, [r7, #28]
 8009174:	4401      	add	r1, r0
 8009176:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800917a:	4313      	orrs	r3, r2
 800917c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	015a      	lsls	r2, r3, #5
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	4413      	add	r3, r2
 8009186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800918a:	691a      	ldr	r2, [r3, #16]
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	6a1b      	ldr	r3, [r3, #32]
 8009190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009194:	69b9      	ldr	r1, [r7, #24]
 8009196:	0148      	lsls	r0, r1, #5
 8009198:	69f9      	ldr	r1, [r7, #28]
 800919a:	4401      	add	r1, r0
 800919c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80091a0:	4313      	orrs	r3, r2
 80091a2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80091a4:	79fb      	ldrb	r3, [r7, #7]
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d10d      	bne.n	80091c6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d009      	beq.n	80091c6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	68d9      	ldr	r1, [r3, #12]
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	015a      	lsls	r2, r3, #5
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	4413      	add	r3, r2
 80091be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091c2:	460a      	mov	r2, r1
 80091c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	791b      	ldrb	r3, [r3, #4]
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d128      	bne.n	8009220 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d110      	bne.n	8009200 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	015a      	lsls	r2, r3, #5
 80091e2:	69fb      	ldr	r3, [r7, #28]
 80091e4:	4413      	add	r3, r2
 80091e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	69ba      	ldr	r2, [r7, #24]
 80091ee:	0151      	lsls	r1, r2, #5
 80091f0:	69fa      	ldr	r2, [r7, #28]
 80091f2:	440a      	add	r2, r1
 80091f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80091fc:	6013      	str	r3, [r2, #0]
 80091fe:	e00f      	b.n	8009220 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	015a      	lsls	r2, r3, #5
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	4413      	add	r3, r2
 8009208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	69ba      	ldr	r2, [r7, #24]
 8009210:	0151      	lsls	r1, r2, #5
 8009212:	69fa      	ldr	r2, [r7, #28]
 8009214:	440a      	add	r2, r1
 8009216:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800921a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800921e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	015a      	lsls	r2, r3, #5
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	4413      	add	r3, r2
 8009228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	69ba      	ldr	r2, [r7, #24]
 8009230:	0151      	lsls	r1, r2, #5
 8009232:	69fa      	ldr	r2, [r7, #28]
 8009234:	440a      	add	r2, r1
 8009236:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800923a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800923e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3720      	adds	r7, #32
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	1ff80000 	.word	0x1ff80000

08009250 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009250:	b480      	push	{r7}
 8009252:	b087      	sub	sp, #28
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800925a:	2300      	movs	r3, #0
 800925c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800925e:	2300      	movs	r3, #0
 8009260:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	785b      	ldrb	r3, [r3, #1]
 800926a:	2b01      	cmp	r3, #1
 800926c:	d14a      	bne.n	8009304 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	015a      	lsls	r2, r3, #5
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	4413      	add	r3, r2
 8009278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009282:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009286:	f040 8086 	bne.w	8009396 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	015a      	lsls	r2, r3, #5
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	4413      	add	r3, r2
 8009294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	683a      	ldr	r2, [r7, #0]
 800929c:	7812      	ldrb	r2, [r2, #0]
 800929e:	0151      	lsls	r1, r2, #5
 80092a0:	693a      	ldr	r2, [r7, #16]
 80092a2:	440a      	add	r2, r1
 80092a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092a8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80092ac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	015a      	lsls	r2, r3, #5
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	4413      	add	r3, r2
 80092b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	683a      	ldr	r2, [r7, #0]
 80092c0:	7812      	ldrb	r2, [r2, #0]
 80092c2:	0151      	lsls	r1, r2, #5
 80092c4:	693a      	ldr	r2, [r7, #16]
 80092c6:	440a      	add	r2, r1
 80092c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80092d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	3301      	adds	r3, #1
 80092d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f242 7210 	movw	r2, #10000	@ 0x2710
 80092de:	4293      	cmp	r3, r2
 80092e0:	d902      	bls.n	80092e8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	75fb      	strb	r3, [r7, #23]
          break;
 80092e6:	e056      	b.n	8009396 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	015a      	lsls	r2, r3, #5
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	4413      	add	r3, r2
 80092f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80092fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009300:	d0e7      	beq.n	80092d2 <USB_EPStopXfer+0x82>
 8009302:	e048      	b.n	8009396 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	015a      	lsls	r2, r3, #5
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	4413      	add	r3, r2
 800930e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009318:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800931c:	d13b      	bne.n	8009396 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	015a      	lsls	r2, r3, #5
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	4413      	add	r3, r2
 8009328:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	683a      	ldr	r2, [r7, #0]
 8009330:	7812      	ldrb	r2, [r2, #0]
 8009332:	0151      	lsls	r1, r2, #5
 8009334:	693a      	ldr	r2, [r7, #16]
 8009336:	440a      	add	r2, r1
 8009338:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800933c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009340:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	015a      	lsls	r2, r3, #5
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	4413      	add	r3, r2
 800934c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	683a      	ldr	r2, [r7, #0]
 8009354:	7812      	ldrb	r2, [r2, #0]
 8009356:	0151      	lsls	r1, r2, #5
 8009358:	693a      	ldr	r2, [r7, #16]
 800935a:	440a      	add	r2, r1
 800935c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009360:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009364:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	3301      	adds	r3, #1
 800936a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009372:	4293      	cmp	r3, r2
 8009374:	d902      	bls.n	800937c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009376:	2301      	movs	r3, #1
 8009378:	75fb      	strb	r3, [r7, #23]
          break;
 800937a:	e00c      	b.n	8009396 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	015a      	lsls	r2, r3, #5
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	4413      	add	r3, r2
 8009386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009390:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009394:	d0e7      	beq.n	8009366 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009396:	7dfb      	ldrb	r3, [r7, #23]
}
 8009398:	4618      	mov	r0, r3
 800939a:	371c      	adds	r7, #28
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b089      	sub	sp, #36	@ 0x24
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	4611      	mov	r1, r2
 80093b0:	461a      	mov	r2, r3
 80093b2:	460b      	mov	r3, r1
 80093b4:	71fb      	strb	r3, [r7, #7]
 80093b6:	4613      	mov	r3, r2
 80093b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80093c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d123      	bne.n	8009412 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80093ca:	88bb      	ldrh	r3, [r7, #4]
 80093cc:	3303      	adds	r3, #3
 80093ce:	089b      	lsrs	r3, r3, #2
 80093d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80093d2:	2300      	movs	r3, #0
 80093d4:	61bb      	str	r3, [r7, #24]
 80093d6:	e018      	b.n	800940a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80093d8:	79fb      	ldrb	r3, [r7, #7]
 80093da:	031a      	lsls	r2, r3, #12
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	4413      	add	r3, r2
 80093e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80093e4:	461a      	mov	r2, r3
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	3301      	adds	r3, #1
 80093f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	3301      	adds	r3, #1
 80093f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	3301      	adds	r3, #1
 80093fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	3301      	adds	r3, #1
 8009402:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009404:	69bb      	ldr	r3, [r7, #24]
 8009406:	3301      	adds	r3, #1
 8009408:	61bb      	str	r3, [r7, #24]
 800940a:	69ba      	ldr	r2, [r7, #24]
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	429a      	cmp	r2, r3
 8009410:	d3e2      	bcc.n	80093d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3724      	adds	r7, #36	@ 0x24
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009420:	b480      	push	{r7}
 8009422:	b08b      	sub	sp, #44	@ 0x2c
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	4613      	mov	r3, r2
 800942c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009436:	88fb      	ldrh	r3, [r7, #6]
 8009438:	089b      	lsrs	r3, r3, #2
 800943a:	b29b      	uxth	r3, r3
 800943c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800943e:	88fb      	ldrh	r3, [r7, #6]
 8009440:	f003 0303 	and.w	r3, r3, #3
 8009444:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009446:	2300      	movs	r3, #0
 8009448:	623b      	str	r3, [r7, #32]
 800944a:	e014      	b.n	8009476 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009456:	601a      	str	r2, [r3, #0]
    pDest++;
 8009458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800945a:	3301      	adds	r3, #1
 800945c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800945e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009460:	3301      	adds	r3, #1
 8009462:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009466:	3301      	adds	r3, #1
 8009468:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800946a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800946c:	3301      	adds	r3, #1
 800946e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009470:	6a3b      	ldr	r3, [r7, #32]
 8009472:	3301      	adds	r3, #1
 8009474:	623b      	str	r3, [r7, #32]
 8009476:	6a3a      	ldr	r2, [r7, #32]
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	429a      	cmp	r2, r3
 800947c:	d3e6      	bcc.n	800944c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800947e:	8bfb      	ldrh	r3, [r7, #30]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d01e      	beq.n	80094c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009484:	2300      	movs	r3, #0
 8009486:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800948e:	461a      	mov	r2, r3
 8009490:	f107 0310 	add.w	r3, r7, #16
 8009494:	6812      	ldr	r2, [r2, #0]
 8009496:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009498:	693a      	ldr	r2, [r7, #16]
 800949a:	6a3b      	ldr	r3, [r7, #32]
 800949c:	b2db      	uxtb	r3, r3
 800949e:	00db      	lsls	r3, r3, #3
 80094a0:	fa22 f303 	lsr.w	r3, r2, r3
 80094a4:	b2da      	uxtb	r2, r3
 80094a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a8:	701a      	strb	r2, [r3, #0]
      i++;
 80094aa:	6a3b      	ldr	r3, [r7, #32]
 80094ac:	3301      	adds	r3, #1
 80094ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80094b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b2:	3301      	adds	r3, #1
 80094b4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80094b6:	8bfb      	ldrh	r3, [r7, #30]
 80094b8:	3b01      	subs	r3, #1
 80094ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80094bc:	8bfb      	ldrh	r3, [r7, #30]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d1ea      	bne.n	8009498 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80094c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	372c      	adds	r7, #44	@ 0x2c
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b085      	sub	sp, #20
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	785b      	ldrb	r3, [r3, #1]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d12c      	bne.n	8009546 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	015a      	lsls	r2, r3, #5
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	4413      	add	r3, r2
 80094f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	db12      	blt.n	8009524 <USB_EPSetStall+0x54>
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d00f      	beq.n	8009524 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	015a      	lsls	r2, r3, #5
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	4413      	add	r3, r2
 800950c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	68ba      	ldr	r2, [r7, #8]
 8009514:	0151      	lsls	r1, r2, #5
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	440a      	add	r2, r1
 800951a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800951e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009522:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	015a      	lsls	r2, r3, #5
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	4413      	add	r3, r2
 800952c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	68ba      	ldr	r2, [r7, #8]
 8009534:	0151      	lsls	r1, r2, #5
 8009536:	68fa      	ldr	r2, [r7, #12]
 8009538:	440a      	add	r2, r1
 800953a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800953e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009542:	6013      	str	r3, [r2, #0]
 8009544:	e02b      	b.n	800959e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	015a      	lsls	r2, r3, #5
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	4413      	add	r3, r2
 800954e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	db12      	blt.n	800957e <USB_EPSetStall+0xae>
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00f      	beq.n	800957e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	015a      	lsls	r2, r3, #5
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	4413      	add	r3, r2
 8009566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68ba      	ldr	r2, [r7, #8]
 800956e:	0151      	lsls	r1, r2, #5
 8009570:	68fa      	ldr	r2, [r7, #12]
 8009572:	440a      	add	r2, r1
 8009574:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009578:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800957c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	015a      	lsls	r2, r3, #5
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	4413      	add	r3, r2
 8009586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	0151      	lsls	r1, r2, #5
 8009590:	68fa      	ldr	r2, [r7, #12]
 8009592:	440a      	add	r2, r1
 8009594:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009598:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800959c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3714      	adds	r7, #20
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	785b      	ldrb	r3, [r3, #1]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d128      	bne.n	800961a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	015a      	lsls	r2, r3, #5
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	4413      	add	r3, r2
 80095d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	68ba      	ldr	r2, [r7, #8]
 80095d8:	0151      	lsls	r1, r2, #5
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	440a      	add	r2, r1
 80095de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80095e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	791b      	ldrb	r3, [r3, #4]
 80095ec:	2b03      	cmp	r3, #3
 80095ee:	d003      	beq.n	80095f8 <USB_EPClearStall+0x4c>
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	791b      	ldrb	r3, [r3, #4]
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	d138      	bne.n	800966a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	015a      	lsls	r2, r3, #5
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	4413      	add	r3, r2
 8009600:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68ba      	ldr	r2, [r7, #8]
 8009608:	0151      	lsls	r1, r2, #5
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	440a      	add	r2, r1
 800960e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009612:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009616:	6013      	str	r3, [r2, #0]
 8009618:	e027      	b.n	800966a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	015a      	lsls	r2, r3, #5
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	4413      	add	r3, r2
 8009622:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	68ba      	ldr	r2, [r7, #8]
 800962a:	0151      	lsls	r1, r2, #5
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	440a      	add	r2, r1
 8009630:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009634:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009638:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	791b      	ldrb	r3, [r3, #4]
 800963e:	2b03      	cmp	r3, #3
 8009640:	d003      	beq.n	800964a <USB_EPClearStall+0x9e>
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	791b      	ldrb	r3, [r3, #4]
 8009646:	2b02      	cmp	r3, #2
 8009648:	d10f      	bne.n	800966a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	015a      	lsls	r2, r3, #5
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	4413      	add	r3, r2
 8009652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	68ba      	ldr	r2, [r7, #8]
 800965a:	0151      	lsls	r1, r2, #5
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	440a      	add	r2, r1
 8009660:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009668:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3714      	adds	r7, #20
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	460b      	mov	r3, r1
 8009682:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009696:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800969a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	78fb      	ldrb	r3, [r7, #3]
 80096a6:	011b      	lsls	r3, r3, #4
 80096a8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80096ac:	68f9      	ldr	r1, [r7, #12]
 80096ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80096b2:	4313      	orrs	r3, r2
 80096b4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3714      	adds	r7, #20
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b085      	sub	sp, #20
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80096de:	f023 0303 	bic.w	r3, r3, #3
 80096e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	68fa      	ldr	r2, [r7, #12]
 80096ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80096f2:	f023 0302 	bic.w	r3, r3, #2
 80096f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3714      	adds	r7, #20
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr

08009706 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009706:	b480      	push	{r7}
 8009708:	b085      	sub	sp, #20
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009720:	f023 0303 	bic.w	r3, r3, #3
 8009724:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	68fa      	ldr	r2, [r7, #12]
 8009730:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009734:	f043 0302 	orr.w	r3, r3, #2
 8009738:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800973a:	2300      	movs	r3, #0
}
 800973c:	4618      	mov	r0, r3
 800973e:	3714      	adds	r7, #20
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	695b      	ldr	r3, [r3, #20]
 8009754:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	699b      	ldr	r3, [r3, #24]
 800975a:	68fa      	ldr	r2, [r7, #12]
 800975c:	4013      	ands	r3, r2
 800975e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009760:	68fb      	ldr	r3, [r7, #12]
}
 8009762:	4618      	mov	r0, r3
 8009764:	3714      	adds	r7, #20
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr

0800976e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800976e:	b480      	push	{r7}
 8009770:	b085      	sub	sp, #20
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009780:	699b      	ldr	r3, [r3, #24]
 8009782:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800978a:	69db      	ldr	r3, [r3, #28]
 800978c:	68ba      	ldr	r2, [r7, #8]
 800978e:	4013      	ands	r3, r2
 8009790:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	0c1b      	lsrs	r3, r3, #16
}
 8009796:	4618      	mov	r0, r3
 8009798:	3714      	adds	r7, #20
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr

080097a2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80097a2:	b480      	push	{r7}
 80097a4:	b085      	sub	sp, #20
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097b4:	699b      	ldr	r3, [r3, #24]
 80097b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097be:	69db      	ldr	r3, [r3, #28]
 80097c0:	68ba      	ldr	r2, [r7, #8]
 80097c2:	4013      	ands	r3, r2
 80097c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	b29b      	uxth	r3, r3
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3714      	adds	r7, #20
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80097d6:	b480      	push	{r7}
 80097d8:	b085      	sub	sp, #20
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
 80097de:	460b      	mov	r3, r1
 80097e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80097e6:	78fb      	ldrb	r3, [r7, #3]
 80097e8:	015a      	lsls	r2, r3, #5
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	4413      	add	r3, r2
 80097ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097fc:	695b      	ldr	r3, [r3, #20]
 80097fe:	68ba      	ldr	r2, [r7, #8]
 8009800:	4013      	ands	r3, r2
 8009802:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009804:	68bb      	ldr	r3, [r7, #8]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3714      	adds	r7, #20
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr

08009812 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009812:	b480      	push	{r7}
 8009814:	b087      	sub	sp, #28
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
 800981a:	460b      	mov	r3, r1
 800981c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009828:	691b      	ldr	r3, [r3, #16]
 800982a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009834:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009836:	78fb      	ldrb	r3, [r7, #3]
 8009838:	f003 030f 	and.w	r3, r3, #15
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	fa22 f303 	lsr.w	r3, r2, r3
 8009842:	01db      	lsls	r3, r3, #7
 8009844:	b2db      	uxtb	r3, r3
 8009846:	693a      	ldr	r2, [r7, #16]
 8009848:	4313      	orrs	r3, r2
 800984a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800984c:	78fb      	ldrb	r3, [r7, #3]
 800984e:	015a      	lsls	r2, r3, #5
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	4413      	add	r3, r2
 8009854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	693a      	ldr	r2, [r7, #16]
 800985c:	4013      	ands	r3, r2
 800985e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009860:	68bb      	ldr	r3, [r7, #8]
}
 8009862:	4618      	mov	r0, r3
 8009864:	371c      	adds	r7, #28
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr

0800986e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800986e:	b480      	push	{r7}
 8009870:	b083      	sub	sp, #12
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	695b      	ldr	r3, [r3, #20]
 800987a:	f003 0301 	and.w	r3, r3, #1
}
 800987e:	4618      	mov	r0, r3
 8009880:	370c      	adds	r7, #12
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr

0800988a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800988a:	b480      	push	{r7}
 800988c:	b085      	sub	sp, #20
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	68fa      	ldr	r2, [r7, #12]
 80098a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098a4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80098a8:	f023 0307 	bic.w	r3, r3, #7
 80098ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	68fa      	ldr	r2, [r7, #12]
 80098b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80098bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80098c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3714      	adds	r7, #20
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b087      	sub	sp, #28
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	460b      	mov	r3, r1
 80098da:	607a      	str	r2, [r7, #4]
 80098dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	333c      	adds	r3, #60	@ 0x3c
 80098e6:	3304      	adds	r3, #4
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	4a26      	ldr	r2, [pc, #152]	@ (8009988 <USB_EP0_OutStart+0xb8>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d90a      	bls.n	800990a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009900:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009904:	d101      	bne.n	800990a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009906:	2300      	movs	r3, #0
 8009908:	e037      	b.n	800997a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009910:	461a      	mov	r2, r3
 8009912:	2300      	movs	r3, #0
 8009914:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	697a      	ldr	r2, [r7, #20]
 8009920:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009924:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009928:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009930:	691b      	ldr	r3, [r3, #16]
 8009932:	697a      	ldr	r2, [r7, #20]
 8009934:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009938:	f043 0318 	orr.w	r3, r3, #24
 800993c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009944:	691b      	ldr	r3, [r3, #16]
 8009946:	697a      	ldr	r2, [r7, #20]
 8009948:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800994c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009950:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009952:	7afb      	ldrb	r3, [r7, #11]
 8009954:	2b01      	cmp	r3, #1
 8009956:	d10f      	bne.n	8009978 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800995e:	461a      	mov	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	697a      	ldr	r2, [r7, #20]
 800996e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009972:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009976:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	371c      	adds	r7, #28
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	4f54300a 	.word	0x4f54300a

0800998c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800998c:	b480      	push	{r7}
 800998e:	b085      	sub	sp, #20
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009994:	2300      	movs	r3, #0
 8009996:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	3301      	adds	r3, #1
 800999c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099a4:	d901      	bls.n	80099aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80099a6:	2303      	movs	r3, #3
 80099a8:	e01b      	b.n	80099e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	daf2      	bge.n	8009998 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80099b2:	2300      	movs	r3, #0
 80099b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	691b      	ldr	r3, [r3, #16]
 80099ba:	f043 0201 	orr.w	r2, r3, #1
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	3301      	adds	r3, #1
 80099c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099ce:	d901      	bls.n	80099d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80099d0:	2303      	movs	r3, #3
 80099d2:	e006      	b.n	80099e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	f003 0301 	and.w	r3, r3, #1
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d0f0      	beq.n	80099c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3714      	adds	r7, #20
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr
	...

080099f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	460b      	mov	r3, r1
 80099fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80099fc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009a00:	f7f7 ff90 	bl	8001924 <USBD_static_malloc>
 8009a04:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d109      	bne.n	8009a20 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	32b0      	adds	r2, #176	@ 0xb0
 8009a16:	2100      	movs	r1, #0
 8009a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009a1c:	2302      	movs	r3, #2
 8009a1e:	e0d4      	b.n	8009bca <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009a20:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009a24:	2100      	movs	r1, #0
 8009a26:	68f8      	ldr	r0, [r7, #12]
 8009a28:	f001 ffd4 	bl	800b9d4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	32b0      	adds	r2, #176	@ 0xb0
 8009a36:	68f9      	ldr	r1, [r7, #12]
 8009a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	32b0      	adds	r2, #176	@ 0xb0
 8009a46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	7c1b      	ldrb	r3, [r3, #16]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d138      	bne.n	8009aca <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009a58:	4b5e      	ldr	r3, [pc, #376]	@ (8009bd4 <USBD_CDC_Init+0x1e4>)
 8009a5a:	7819      	ldrb	r1, [r3, #0]
 8009a5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a60:	2202      	movs	r2, #2
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f7f7 fe3b 	bl	80016de <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009a68:	4b5a      	ldr	r3, [pc, #360]	@ (8009bd4 <USBD_CDC_Init+0x1e4>)
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	f003 020f 	and.w	r2, r3, #15
 8009a70:	6879      	ldr	r1, [r7, #4]
 8009a72:	4613      	mov	r3, r2
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	4413      	add	r3, r2
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	440b      	add	r3, r1
 8009a7c:	3324      	adds	r3, #36	@ 0x24
 8009a7e:	2201      	movs	r2, #1
 8009a80:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009a82:	4b55      	ldr	r3, [pc, #340]	@ (8009bd8 <USBD_CDC_Init+0x1e8>)
 8009a84:	7819      	ldrb	r1, [r3, #0]
 8009a86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a8a:	2202      	movs	r2, #2
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f7f7 fe26 	bl	80016de <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009a92:	4b51      	ldr	r3, [pc, #324]	@ (8009bd8 <USBD_CDC_Init+0x1e8>)
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	f003 020f 	and.w	r2, r3, #15
 8009a9a:	6879      	ldr	r1, [r7, #4]
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	4413      	add	r3, r2
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	440b      	add	r3, r1
 8009aa6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009aaa:	2201      	movs	r2, #1
 8009aac:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009aae:	4b4b      	ldr	r3, [pc, #300]	@ (8009bdc <USBD_CDC_Init+0x1ec>)
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	f003 020f 	and.w	r2, r3, #15
 8009ab6:	6879      	ldr	r1, [r7, #4]
 8009ab8:	4613      	mov	r3, r2
 8009aba:	009b      	lsls	r3, r3, #2
 8009abc:	4413      	add	r3, r2
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	440b      	add	r3, r1
 8009ac2:	3326      	adds	r3, #38	@ 0x26
 8009ac4:	2210      	movs	r2, #16
 8009ac6:	801a      	strh	r2, [r3, #0]
 8009ac8:	e035      	b.n	8009b36 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009aca:	4b42      	ldr	r3, [pc, #264]	@ (8009bd4 <USBD_CDC_Init+0x1e4>)
 8009acc:	7819      	ldrb	r1, [r3, #0]
 8009ace:	2340      	movs	r3, #64	@ 0x40
 8009ad0:	2202      	movs	r2, #2
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f7f7 fe03 	bl	80016de <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009ad8:	4b3e      	ldr	r3, [pc, #248]	@ (8009bd4 <USBD_CDC_Init+0x1e4>)
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	f003 020f 	and.w	r2, r3, #15
 8009ae0:	6879      	ldr	r1, [r7, #4]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	4413      	add	r3, r2
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	440b      	add	r3, r1
 8009aec:	3324      	adds	r3, #36	@ 0x24
 8009aee:	2201      	movs	r2, #1
 8009af0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009af2:	4b39      	ldr	r3, [pc, #228]	@ (8009bd8 <USBD_CDC_Init+0x1e8>)
 8009af4:	7819      	ldrb	r1, [r3, #0]
 8009af6:	2340      	movs	r3, #64	@ 0x40
 8009af8:	2202      	movs	r2, #2
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f7f7 fdef 	bl	80016de <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009b00:	4b35      	ldr	r3, [pc, #212]	@ (8009bd8 <USBD_CDC_Init+0x1e8>)
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	f003 020f 	and.w	r2, r3, #15
 8009b08:	6879      	ldr	r1, [r7, #4]
 8009b0a:	4613      	mov	r3, r2
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	4413      	add	r3, r2
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	440b      	add	r3, r1
 8009b14:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009b18:	2201      	movs	r2, #1
 8009b1a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8009bdc <USBD_CDC_Init+0x1ec>)
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	f003 020f 	and.w	r2, r3, #15
 8009b24:	6879      	ldr	r1, [r7, #4]
 8009b26:	4613      	mov	r3, r2
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	4413      	add	r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	440b      	add	r3, r1
 8009b30:	3326      	adds	r3, #38	@ 0x26
 8009b32:	2210      	movs	r2, #16
 8009b34:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009b36:	4b29      	ldr	r3, [pc, #164]	@ (8009bdc <USBD_CDC_Init+0x1ec>)
 8009b38:	7819      	ldrb	r1, [r3, #0]
 8009b3a:	2308      	movs	r3, #8
 8009b3c:	2203      	movs	r2, #3
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f7f7 fdcd 	bl	80016de <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009b44:	4b25      	ldr	r3, [pc, #148]	@ (8009bdc <USBD_CDC_Init+0x1ec>)
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	f003 020f 	and.w	r2, r3, #15
 8009b4c:	6879      	ldr	r1, [r7, #4]
 8009b4e:	4613      	mov	r3, r2
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	4413      	add	r3, r2
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	440b      	add	r3, r1
 8009b58:	3324      	adds	r3, #36	@ 0x24
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	33b0      	adds	r3, #176	@ 0xb0
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	4413      	add	r3, r2
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d101      	bne.n	8009b98 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009b94:	2302      	movs	r3, #2
 8009b96:	e018      	b.n	8009bca <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	7c1b      	ldrb	r3, [r3, #16]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d10a      	bne.n	8009bb6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8009bd8 <USBD_CDC_Init+0x1e8>)
 8009ba2:	7819      	ldrb	r1, [r3, #0]
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009baa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f7f7 fe84 	bl	80018bc <USBD_LL_PrepareReceive>
 8009bb4:	e008      	b.n	8009bc8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009bb6:	4b08      	ldr	r3, [pc, #32]	@ (8009bd8 <USBD_CDC_Init+0x1e8>)
 8009bb8:	7819      	ldrb	r1, [r3, #0]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009bc0:	2340      	movs	r3, #64	@ 0x40
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f7f7 fe7a 	bl	80018bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	20000143 	.word	0x20000143
 8009bd8:	20000144 	.word	0x20000144
 8009bdc:	20000145 	.word	0x20000145

08009be0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	460b      	mov	r3, r1
 8009bea:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009bec:	4b3a      	ldr	r3, [pc, #232]	@ (8009cd8 <USBD_CDC_DeInit+0xf8>)
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f7f7 fd99 	bl	800172a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009bf8:	4b37      	ldr	r3, [pc, #220]	@ (8009cd8 <USBD_CDC_DeInit+0xf8>)
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	f003 020f 	and.w	r2, r3, #15
 8009c00:	6879      	ldr	r1, [r7, #4]
 8009c02:	4613      	mov	r3, r2
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	4413      	add	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	440b      	add	r3, r1
 8009c0c:	3324      	adds	r3, #36	@ 0x24
 8009c0e:	2200      	movs	r2, #0
 8009c10:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009c12:	4b32      	ldr	r3, [pc, #200]	@ (8009cdc <USBD_CDC_DeInit+0xfc>)
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	4619      	mov	r1, r3
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f7f7 fd86 	bl	800172a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009c1e:	4b2f      	ldr	r3, [pc, #188]	@ (8009cdc <USBD_CDC_DeInit+0xfc>)
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	f003 020f 	and.w	r2, r3, #15
 8009c26:	6879      	ldr	r1, [r7, #4]
 8009c28:	4613      	mov	r3, r2
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	4413      	add	r3, r2
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	440b      	add	r3, r1
 8009c32:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009c36:	2200      	movs	r2, #0
 8009c38:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009c3a:	4b29      	ldr	r3, [pc, #164]	@ (8009ce0 <USBD_CDC_DeInit+0x100>)
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	4619      	mov	r1, r3
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f7f7 fd72 	bl	800172a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009c46:	4b26      	ldr	r3, [pc, #152]	@ (8009ce0 <USBD_CDC_DeInit+0x100>)
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	f003 020f 	and.w	r2, r3, #15
 8009c4e:	6879      	ldr	r1, [r7, #4]
 8009c50:	4613      	mov	r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	4413      	add	r3, r2
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	440b      	add	r3, r1
 8009c5a:	3324      	adds	r3, #36	@ 0x24
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009c60:	4b1f      	ldr	r3, [pc, #124]	@ (8009ce0 <USBD_CDC_DeInit+0x100>)
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	f003 020f 	and.w	r2, r3, #15
 8009c68:	6879      	ldr	r1, [r7, #4]
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	4413      	add	r3, r2
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	440b      	add	r3, r1
 8009c74:	3326      	adds	r3, #38	@ 0x26
 8009c76:	2200      	movs	r2, #0
 8009c78:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	32b0      	adds	r2, #176	@ 0xb0
 8009c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d01f      	beq.n	8009ccc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	33b0      	adds	r3, #176	@ 0xb0
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	4413      	add	r3, r2
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	32b0      	adds	r2, #176	@ 0xb0
 8009caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7f7 fe46 	bl	8001940 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	32b0      	adds	r2, #176	@ 0xb0
 8009cbe:	2100      	movs	r1, #0
 8009cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3708      	adds	r7, #8
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	20000143 	.word	0x20000143
 8009cdc:	20000144 	.word	0x20000144
 8009ce0:	20000145 	.word	0x20000145

08009ce4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b086      	sub	sp, #24
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	32b0      	adds	r2, #176	@ 0xb0
 8009cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cfc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009d02:	2300      	movs	r3, #0
 8009d04:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d06:	2300      	movs	r3, #0
 8009d08:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d101      	bne.n	8009d14 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009d10:	2303      	movs	r3, #3
 8009d12:	e0bf      	b.n	8009e94 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d050      	beq.n	8009dc2 <USBD_CDC_Setup+0xde>
 8009d20:	2b20      	cmp	r3, #32
 8009d22:	f040 80af 	bne.w	8009e84 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	88db      	ldrh	r3, [r3, #6]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d03a      	beq.n	8009da4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	b25b      	sxtb	r3, r3
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	da1b      	bge.n	8009d70 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	33b0      	adds	r3, #176	@ 0xb0
 8009d42:	009b      	lsls	r3, r3, #2
 8009d44:	4413      	add	r3, r2
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	689b      	ldr	r3, [r3, #8]
 8009d4a:	683a      	ldr	r2, [r7, #0]
 8009d4c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009d4e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009d50:	683a      	ldr	r2, [r7, #0]
 8009d52:	88d2      	ldrh	r2, [r2, #6]
 8009d54:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	88db      	ldrh	r3, [r3, #6]
 8009d5a:	2b07      	cmp	r3, #7
 8009d5c:	bf28      	it	cs
 8009d5e:	2307      	movcs	r3, #7
 8009d60:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	89fa      	ldrh	r2, [r7, #14]
 8009d66:	4619      	mov	r1, r3
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f001 fd93 	bl	800b894 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009d6e:	e090      	b.n	8009e92 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	785a      	ldrb	r2, [r3, #1]
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	88db      	ldrh	r3, [r3, #6]
 8009d7e:	2b3f      	cmp	r3, #63	@ 0x3f
 8009d80:	d803      	bhi.n	8009d8a <USBD_CDC_Setup+0xa6>
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	88db      	ldrh	r3, [r3, #6]
 8009d86:	b2da      	uxtb	r2, r3
 8009d88:	e000      	b.n	8009d8c <USBD_CDC_Setup+0xa8>
 8009d8a:	2240      	movs	r2, #64	@ 0x40
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009d92:	6939      	ldr	r1, [r7, #16]
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f001 fda5 	bl	800b8ec <USBD_CtlPrepareRx>
      break;
 8009da2:	e076      	b.n	8009e92 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	33b0      	adds	r3, #176	@ 0xb0
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	4413      	add	r3, r2
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	683a      	ldr	r2, [r7, #0]
 8009db8:	7850      	ldrb	r0, [r2, #1]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	6839      	ldr	r1, [r7, #0]
 8009dbe:	4798      	blx	r3
      break;
 8009dc0:	e067      	b.n	8009e92 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	785b      	ldrb	r3, [r3, #1]
 8009dc6:	2b0b      	cmp	r3, #11
 8009dc8:	d851      	bhi.n	8009e6e <USBD_CDC_Setup+0x18a>
 8009dca:	a201      	add	r2, pc, #4	@ (adr r2, 8009dd0 <USBD_CDC_Setup+0xec>)
 8009dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd0:	08009e01 	.word	0x08009e01
 8009dd4:	08009e7d 	.word	0x08009e7d
 8009dd8:	08009e6f 	.word	0x08009e6f
 8009ddc:	08009e6f 	.word	0x08009e6f
 8009de0:	08009e6f 	.word	0x08009e6f
 8009de4:	08009e6f 	.word	0x08009e6f
 8009de8:	08009e6f 	.word	0x08009e6f
 8009dec:	08009e6f 	.word	0x08009e6f
 8009df0:	08009e6f 	.word	0x08009e6f
 8009df4:	08009e6f 	.word	0x08009e6f
 8009df8:	08009e2b 	.word	0x08009e2b
 8009dfc:	08009e55 	.word	0x08009e55
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	2b03      	cmp	r3, #3
 8009e0a:	d107      	bne.n	8009e1c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009e0c:	f107 030a 	add.w	r3, r7, #10
 8009e10:	2202      	movs	r2, #2
 8009e12:	4619      	mov	r1, r3
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f001 fd3d 	bl	800b894 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e1a:	e032      	b.n	8009e82 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009e1c:	6839      	ldr	r1, [r7, #0]
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f001 fcbb 	bl	800b79a <USBD_CtlError>
            ret = USBD_FAIL;
 8009e24:	2303      	movs	r3, #3
 8009e26:	75fb      	strb	r3, [r7, #23]
          break;
 8009e28:	e02b      	b.n	8009e82 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	2b03      	cmp	r3, #3
 8009e34:	d107      	bne.n	8009e46 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009e36:	f107 030d 	add.w	r3, r7, #13
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f001 fd28 	bl	800b894 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e44:	e01d      	b.n	8009e82 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009e46:	6839      	ldr	r1, [r7, #0]
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f001 fca6 	bl	800b79a <USBD_CtlError>
            ret = USBD_FAIL;
 8009e4e:	2303      	movs	r3, #3
 8009e50:	75fb      	strb	r3, [r7, #23]
          break;
 8009e52:	e016      	b.n	8009e82 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	2b03      	cmp	r3, #3
 8009e5e:	d00f      	beq.n	8009e80 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009e60:	6839      	ldr	r1, [r7, #0]
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f001 fc99 	bl	800b79a <USBD_CtlError>
            ret = USBD_FAIL;
 8009e68:	2303      	movs	r3, #3
 8009e6a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009e6c:	e008      	b.n	8009e80 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009e6e:	6839      	ldr	r1, [r7, #0]
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f001 fc92 	bl	800b79a <USBD_CtlError>
          ret = USBD_FAIL;
 8009e76:	2303      	movs	r3, #3
 8009e78:	75fb      	strb	r3, [r7, #23]
          break;
 8009e7a:	e002      	b.n	8009e82 <USBD_CDC_Setup+0x19e>
          break;
 8009e7c:	bf00      	nop
 8009e7e:	e008      	b.n	8009e92 <USBD_CDC_Setup+0x1ae>
          break;
 8009e80:	bf00      	nop
      }
      break;
 8009e82:	e006      	b.n	8009e92 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009e84:	6839      	ldr	r1, [r7, #0]
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f001 fc87 	bl	800b79a <USBD_CtlError>
      ret = USBD_FAIL;
 8009e8c:	2303      	movs	r3, #3
 8009e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8009e90:	bf00      	nop
  }

  return (uint8_t)ret;
 8009e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3718      	adds	r7, #24
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009eae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	32b0      	adds	r2, #176	@ 0xb0
 8009eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d101      	bne.n	8009ec6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	e065      	b.n	8009f92 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	32b0      	adds	r2, #176	@ 0xb0
 8009ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ed4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009ed6:	78fb      	ldrb	r3, [r7, #3]
 8009ed8:	f003 020f 	and.w	r2, r3, #15
 8009edc:	6879      	ldr	r1, [r7, #4]
 8009ede:	4613      	mov	r3, r2
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	4413      	add	r3, r2
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	440b      	add	r3, r1
 8009ee8:	3318      	adds	r3, #24
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d02f      	beq.n	8009f50 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009ef0:	78fb      	ldrb	r3, [r7, #3]
 8009ef2:	f003 020f 	and.w	r2, r3, #15
 8009ef6:	6879      	ldr	r1, [r7, #4]
 8009ef8:	4613      	mov	r3, r2
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	4413      	add	r3, r2
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	440b      	add	r3, r1
 8009f02:	3318      	adds	r3, #24
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	78fb      	ldrb	r3, [r7, #3]
 8009f08:	f003 010f 	and.w	r1, r3, #15
 8009f0c:	68f8      	ldr	r0, [r7, #12]
 8009f0e:	460b      	mov	r3, r1
 8009f10:	00db      	lsls	r3, r3, #3
 8009f12:	440b      	add	r3, r1
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	4403      	add	r3, r0
 8009f18:	331c      	adds	r3, #28
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009f20:	fb01 f303 	mul.w	r3, r1, r3
 8009f24:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d112      	bne.n	8009f50 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009f2a:	78fb      	ldrb	r3, [r7, #3]
 8009f2c:	f003 020f 	and.w	r2, r3, #15
 8009f30:	6879      	ldr	r1, [r7, #4]
 8009f32:	4613      	mov	r3, r2
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	4413      	add	r3, r2
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	440b      	add	r3, r1
 8009f3c:	3318      	adds	r3, #24
 8009f3e:	2200      	movs	r2, #0
 8009f40:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009f42:	78f9      	ldrb	r1, [r7, #3]
 8009f44:	2300      	movs	r3, #0
 8009f46:	2200      	movs	r2, #0
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f7f7 fc96 	bl	800187a <USBD_LL_Transmit>
 8009f4e:	e01f      	b.n	8009f90 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	2200      	movs	r2, #0
 8009f54:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	33b0      	adds	r3, #176	@ 0xb0
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	4413      	add	r3, r2
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	691b      	ldr	r3, [r3, #16]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d010      	beq.n	8009f90 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	33b0      	adds	r3, #176	@ 0xb0
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	4413      	add	r3, r2
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	691b      	ldr	r3, [r3, #16]
 8009f80:	68ba      	ldr	r2, [r7, #8]
 8009f82:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009f86:	68ba      	ldr	r2, [r7, #8]
 8009f88:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009f8c:	78fa      	ldrb	r2, [r7, #3]
 8009f8e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b084      	sub	sp, #16
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	32b0      	adds	r2, #176	@ 0xb0
 8009fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fb4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	32b0      	adds	r2, #176	@ 0xb0
 8009fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d101      	bne.n	8009fcc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009fc8:	2303      	movs	r3, #3
 8009fca:	e01a      	b.n	800a002 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009fcc:	78fb      	ldrb	r3, [r7, #3]
 8009fce:	4619      	mov	r1, r3
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f7f7 fc94 	bl	80018fe <USBD_LL_GetRxDataSize>
 8009fd6:	4602      	mov	r2, r0
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	33b0      	adds	r3, #176	@ 0xb0
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	4413      	add	r3, r2
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	68fa      	ldr	r2, [r7, #12]
 8009ff2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009ff6:	68fa      	ldr	r2, [r7, #12]
 8009ff8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009ffc:	4611      	mov	r1, r2
 8009ffe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a000:	2300      	movs	r3, #0
}
 800a002:	4618      	mov	r0, r3
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b084      	sub	sp, #16
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	32b0      	adds	r2, #176	@ 0xb0
 800a01c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a020:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d101      	bne.n	800a02c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a028:	2303      	movs	r3, #3
 800a02a:	e024      	b.n	800a076 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	33b0      	adds	r3, #176	@ 0xb0
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	4413      	add	r3, r2
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d019      	beq.n	800a074 <USBD_CDC_EP0_RxReady+0x6a>
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a046:	2bff      	cmp	r3, #255	@ 0xff
 800a048:	d014      	beq.n	800a074 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	33b0      	adds	r3, #176	@ 0xb0
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	4413      	add	r3, r2
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	68fa      	ldr	r2, [r7, #12]
 800a05e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a062:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a064:	68fa      	ldr	r2, [r7, #12]
 800a066:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a06a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	22ff      	movs	r2, #255	@ 0xff
 800a070:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
	...

0800a080 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b086      	sub	sp, #24
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a088:	2182      	movs	r1, #130	@ 0x82
 800a08a:	4818      	ldr	r0, [pc, #96]	@ (800a0ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a08c:	f000 fd4f 	bl	800ab2e <USBD_GetEpDesc>
 800a090:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a092:	2101      	movs	r1, #1
 800a094:	4815      	ldr	r0, [pc, #84]	@ (800a0ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a096:	f000 fd4a 	bl	800ab2e <USBD_GetEpDesc>
 800a09a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a09c:	2181      	movs	r1, #129	@ 0x81
 800a09e:	4813      	ldr	r0, [pc, #76]	@ (800a0ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a0a0:	f000 fd45 	bl	800ab2e <USBD_GetEpDesc>
 800a0a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d002      	beq.n	800a0b2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	2210      	movs	r2, #16
 800a0b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d006      	beq.n	800a0c6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a0c0:	711a      	strb	r2, [r3, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d006      	beq.n	800a0da <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a0d4:	711a      	strb	r2, [r3, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2243      	movs	r2, #67	@ 0x43
 800a0de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a0e0:	4b02      	ldr	r3, [pc, #8]	@ (800a0ec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3718      	adds	r7, #24
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	20000100 	.word	0x20000100

0800a0f0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b086      	sub	sp, #24
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a0f8:	2182      	movs	r1, #130	@ 0x82
 800a0fa:	4818      	ldr	r0, [pc, #96]	@ (800a15c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a0fc:	f000 fd17 	bl	800ab2e <USBD_GetEpDesc>
 800a100:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a102:	2101      	movs	r1, #1
 800a104:	4815      	ldr	r0, [pc, #84]	@ (800a15c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a106:	f000 fd12 	bl	800ab2e <USBD_GetEpDesc>
 800a10a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a10c:	2181      	movs	r1, #129	@ 0x81
 800a10e:	4813      	ldr	r0, [pc, #76]	@ (800a15c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a110:	f000 fd0d 	bl	800ab2e <USBD_GetEpDesc>
 800a114:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d002      	beq.n	800a122 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	2210      	movs	r2, #16
 800a120:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d006      	beq.n	800a136 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	2200      	movs	r2, #0
 800a12c:	711a      	strb	r2, [r3, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	f042 0202 	orr.w	r2, r2, #2
 800a134:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d006      	beq.n	800a14a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2200      	movs	r2, #0
 800a140:	711a      	strb	r2, [r3, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	f042 0202 	orr.w	r2, r2, #2
 800a148:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2243      	movs	r2, #67	@ 0x43
 800a14e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a150:	4b02      	ldr	r3, [pc, #8]	@ (800a15c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a152:	4618      	mov	r0, r3
 800a154:	3718      	adds	r7, #24
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	20000100 	.word	0x20000100

0800a160 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b086      	sub	sp, #24
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a168:	2182      	movs	r1, #130	@ 0x82
 800a16a:	4818      	ldr	r0, [pc, #96]	@ (800a1cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a16c:	f000 fcdf 	bl	800ab2e <USBD_GetEpDesc>
 800a170:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a172:	2101      	movs	r1, #1
 800a174:	4815      	ldr	r0, [pc, #84]	@ (800a1cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a176:	f000 fcda 	bl	800ab2e <USBD_GetEpDesc>
 800a17a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a17c:	2181      	movs	r1, #129	@ 0x81
 800a17e:	4813      	ldr	r0, [pc, #76]	@ (800a1cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a180:	f000 fcd5 	bl	800ab2e <USBD_GetEpDesc>
 800a184:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d002      	beq.n	800a192 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	2210      	movs	r2, #16
 800a190:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d006      	beq.n	800a1a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	2200      	movs	r2, #0
 800a19c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a1a0:	711a      	strb	r2, [r3, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d006      	beq.n	800a1ba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a1b4:	711a      	strb	r2, [r3, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2243      	movs	r2, #67	@ 0x43
 800a1be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a1c0:	4b02      	ldr	r3, [pc, #8]	@ (800a1cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3718      	adds	r7, #24
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	20000100 	.word	0x20000100

0800a1d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	220a      	movs	r2, #10
 800a1dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a1de:	4b03      	ldr	r3, [pc, #12]	@ (800a1ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	370c      	adds	r7, #12
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr
 800a1ec:	200000bc 	.word	0x200000bc

0800a1f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d101      	bne.n	800a204 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a200:	2303      	movs	r3, #3
 800a202:	e009      	b.n	800a218 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	33b0      	adds	r3, #176	@ 0xb0
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	4413      	add	r3, r2
 800a212:	683a      	ldr	r2, [r7, #0]
 800a214:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a224:	b480      	push	{r7}
 800a226:	b087      	sub	sp, #28
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	32b0      	adds	r2, #176	@ 0xb0
 800a23a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a23e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d101      	bne.n	800a24a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a246:	2303      	movs	r3, #3
 800a248:	e008      	b.n	800a25c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	68ba      	ldr	r2, [r7, #8]
 800a24e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a25a:	2300      	movs	r3, #0
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	371c      	adds	r7, #28
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a268:	b480      	push	{r7}
 800a26a:	b085      	sub	sp, #20
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	32b0      	adds	r2, #176	@ 0xb0
 800a27c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a280:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d101      	bne.n	800a28c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a288:	2303      	movs	r3, #3
 800a28a:	e004      	b.n	800a296 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	683a      	ldr	r2, [r7, #0]
 800a290:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a294:	2300      	movs	r3, #0
}
 800a296:	4618      	mov	r0, r3
 800a298:	3714      	adds	r7, #20
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr
	...

0800a2a4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	32b0      	adds	r2, #176	@ 0xb0
 800a2b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ba:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d101      	bne.n	800a2ca <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a2c6:	2303      	movs	r3, #3
 800a2c8:	e025      	b.n	800a316 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d11f      	bne.n	800a314 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a2dc:	4b10      	ldr	r3, [pc, #64]	@ (800a320 <USBD_CDC_TransmitPacket+0x7c>)
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	f003 020f 	and.w	r2, r3, #15
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	4613      	mov	r3, r2
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	4413      	add	r3, r2
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	4403      	add	r3, r0
 800a2f6:	3318      	adds	r3, #24
 800a2f8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a2fa:	4b09      	ldr	r3, [pc, #36]	@ (800a320 <USBD_CDC_TransmitPacket+0x7c>)
 800a2fc:	7819      	ldrb	r1, [r3, #0]
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f7f7 fab5 	bl	800187a <USBD_LL_Transmit>

    ret = USBD_OK;
 800a310:	2300      	movs	r3, #0
 800a312:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a314:	7bfb      	ldrb	r3, [r7, #15]
}
 800a316:	4618      	mov	r0, r3
 800a318:	3710      	adds	r7, #16
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	20000143 	.word	0x20000143

0800a324 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	32b0      	adds	r2, #176	@ 0xb0
 800a336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a33a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	32b0      	adds	r2, #176	@ 0xb0
 800a346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d101      	bne.n	800a352 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a34e:	2303      	movs	r3, #3
 800a350:	e018      	b.n	800a384 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	7c1b      	ldrb	r3, [r3, #16]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d10a      	bne.n	800a370 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a35a:	4b0c      	ldr	r3, [pc, #48]	@ (800a38c <USBD_CDC_ReceivePacket+0x68>)
 800a35c:	7819      	ldrb	r1, [r3, #0]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a364:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f7f7 faa7 	bl	80018bc <USBD_LL_PrepareReceive>
 800a36e:	e008      	b.n	800a382 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a370:	4b06      	ldr	r3, [pc, #24]	@ (800a38c <USBD_CDC_ReceivePacket+0x68>)
 800a372:	7819      	ldrb	r1, [r3, #0]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a37a:	2340      	movs	r3, #64	@ 0x40
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f7f7 fa9d 	bl	80018bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a382:	2300      	movs	r3, #0
}
 800a384:	4618      	mov	r0, r3
 800a386:	3710      	adds	r7, #16
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	20000144 	.word	0x20000144

0800a390 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	4613      	mov	r3, r2
 800a39c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d101      	bne.n	800a3a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a3a4:	2303      	movs	r3, #3
 800a3a6:	e01f      	b.n	800a3e8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d003      	beq.n	800a3ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	68ba      	ldr	r2, [r7, #8]
 800a3ca:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	79fa      	ldrb	r2, [r7, #7]
 800a3da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	f7f7 f917 	bl	8001610 <USBD_LL_Init>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a3e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3718      	adds	r7, #24
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d101      	bne.n	800a408 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a404:	2303      	movs	r3, #3
 800a406:	e025      	b.n	800a454 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	683a      	ldr	r2, [r7, #0]
 800a40c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	32ae      	adds	r2, #174	@ 0xae
 800a41a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a41e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a420:	2b00      	cmp	r3, #0
 800a422:	d00f      	beq.n	800a444 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	32ae      	adds	r2, #174	@ 0xae
 800a42e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a434:	f107 020e 	add.w	r2, r7, #14
 800a438:	4610      	mov	r0, r2
 800a43a:	4798      	blx	r3
 800a43c:	4602      	mov	r2, r0
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a44a:	1c5a      	adds	r2, r3, #1
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a452:	2300      	movs	r3, #0
}
 800a454:	4618      	mov	r0, r3
 800a456:	3710      	adds	r7, #16
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f7f7 f91f 	bl	80016a8 <USBD_LL_Start>
 800a46a:	4603      	mov	r3, r0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3708      	adds	r7, #8
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a47c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a47e:	4618      	mov	r0, r3
 800a480:	370c      	adds	r7, #12
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr

0800a48a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b084      	sub	sp, #16
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
 800a492:	460b      	mov	r3, r1
 800a494:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a496:	2300      	movs	r3, #0
 800a498:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d009      	beq.n	800a4b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	78fa      	ldrb	r2, [r7, #3]
 800a4ae:	4611      	mov	r1, r2
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	4798      	blx	r3
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a4b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	b084      	sub	sp, #16
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	78fa      	ldrb	r2, [r7, #3]
 800a4dc:	4611      	mov	r1, r2
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	4798      	blx	r3
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d001      	beq.n	800a4ec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a4e8:	2303      	movs	r3, #3
 800a4ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a4ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b084      	sub	sp, #16
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
 800a4fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a506:	6839      	ldr	r1, [r7, #0]
 800a508:	4618      	mov	r0, r3
 800a50a:	f001 f90c 	bl	800b726 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2201      	movs	r2, #1
 800a512:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a51c:	461a      	mov	r2, r3
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a52a:	f003 031f 	and.w	r3, r3, #31
 800a52e:	2b02      	cmp	r3, #2
 800a530:	d01a      	beq.n	800a568 <USBD_LL_SetupStage+0x72>
 800a532:	2b02      	cmp	r3, #2
 800a534:	d822      	bhi.n	800a57c <USBD_LL_SetupStage+0x86>
 800a536:	2b00      	cmp	r3, #0
 800a538:	d002      	beq.n	800a540 <USBD_LL_SetupStage+0x4a>
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d00a      	beq.n	800a554 <USBD_LL_SetupStage+0x5e>
 800a53e:	e01d      	b.n	800a57c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a546:	4619      	mov	r1, r3
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 fb63 	bl	800ac14 <USBD_StdDevReq>
 800a54e:	4603      	mov	r3, r0
 800a550:	73fb      	strb	r3, [r7, #15]
      break;
 800a552:	e020      	b.n	800a596 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a55a:	4619      	mov	r1, r3
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 fbcb 	bl	800acf8 <USBD_StdItfReq>
 800a562:	4603      	mov	r3, r0
 800a564:	73fb      	strb	r3, [r7, #15]
      break;
 800a566:	e016      	b.n	800a596 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a56e:	4619      	mov	r1, r3
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 fc2d 	bl	800add0 <USBD_StdEPReq>
 800a576:	4603      	mov	r3, r0
 800a578:	73fb      	strb	r3, [r7, #15]
      break;
 800a57a:	e00c      	b.n	800a596 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a582:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a586:	b2db      	uxtb	r3, r3
 800a588:	4619      	mov	r1, r3
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f7f7 f8ec 	bl	8001768 <USBD_LL_StallEP>
 800a590:	4603      	mov	r3, r0
 800a592:	73fb      	strb	r3, [r7, #15]
      break;
 800a594:	bf00      	nop
  }

  return ret;
 800a596:	7bfb      	ldrb	r3, [r7, #15]
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3710      	adds	r7, #16
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b086      	sub	sp, #24
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	607a      	str	r2, [r7, #4]
 800a5ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a5b2:	7afb      	ldrb	r3, [r7, #11]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d16e      	bne.n	800a696 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a5be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a5c6:	2b03      	cmp	r3, #3
 800a5c8:	f040 8098 	bne.w	800a6fc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	689a      	ldr	r2, [r3, #8]
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d913      	bls.n	800a600 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	689a      	ldr	r2, [r3, #8]
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	68db      	ldr	r3, [r3, #12]
 800a5e0:	1ad2      	subs	r2, r2, r3
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	68da      	ldr	r2, [r3, #12]
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	bf28      	it	cs
 800a5f2:	4613      	movcs	r3, r2
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	6879      	ldr	r1, [r7, #4]
 800a5f8:	68f8      	ldr	r0, [r7, #12]
 800a5fa:	f001 f994 	bl	800b926 <USBD_CtlContinueRx>
 800a5fe:	e07d      	b.n	800a6fc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a606:	f003 031f 	and.w	r3, r3, #31
 800a60a:	2b02      	cmp	r3, #2
 800a60c:	d014      	beq.n	800a638 <USBD_LL_DataOutStage+0x98>
 800a60e:	2b02      	cmp	r3, #2
 800a610:	d81d      	bhi.n	800a64e <USBD_LL_DataOutStage+0xae>
 800a612:	2b00      	cmp	r3, #0
 800a614:	d002      	beq.n	800a61c <USBD_LL_DataOutStage+0x7c>
 800a616:	2b01      	cmp	r3, #1
 800a618:	d003      	beq.n	800a622 <USBD_LL_DataOutStage+0x82>
 800a61a:	e018      	b.n	800a64e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a61c:	2300      	movs	r3, #0
 800a61e:	75bb      	strb	r3, [r7, #22]
            break;
 800a620:	e018      	b.n	800a654 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	4619      	mov	r1, r3
 800a62c:	68f8      	ldr	r0, [r7, #12]
 800a62e:	f000 fa64 	bl	800aafa <USBD_CoreFindIF>
 800a632:	4603      	mov	r3, r0
 800a634:	75bb      	strb	r3, [r7, #22]
            break;
 800a636:	e00d      	b.n	800a654 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	4619      	mov	r1, r3
 800a642:	68f8      	ldr	r0, [r7, #12]
 800a644:	f000 fa66 	bl	800ab14 <USBD_CoreFindEP>
 800a648:	4603      	mov	r3, r0
 800a64a:	75bb      	strb	r3, [r7, #22]
            break;
 800a64c:	e002      	b.n	800a654 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a64e:	2300      	movs	r3, #0
 800a650:	75bb      	strb	r3, [r7, #22]
            break;
 800a652:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a654:	7dbb      	ldrb	r3, [r7, #22]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d119      	bne.n	800a68e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a660:	b2db      	uxtb	r3, r3
 800a662:	2b03      	cmp	r3, #3
 800a664:	d113      	bne.n	800a68e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a666:	7dba      	ldrb	r2, [r7, #22]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	32ae      	adds	r2, #174	@ 0xae
 800a66c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d00b      	beq.n	800a68e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a676:	7dba      	ldrb	r2, [r7, #22]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a67e:	7dba      	ldrb	r2, [r7, #22]
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	32ae      	adds	r2, #174	@ 0xae
 800a684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a688:	691b      	ldr	r3, [r3, #16]
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a68e:	68f8      	ldr	r0, [r7, #12]
 800a690:	f001 f95a 	bl	800b948 <USBD_CtlSendStatus>
 800a694:	e032      	b.n	800a6fc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a696:	7afb      	ldrb	r3, [r7, #11]
 800a698:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	4619      	mov	r1, r3
 800a6a0:	68f8      	ldr	r0, [r7, #12]
 800a6a2:	f000 fa37 	bl	800ab14 <USBD_CoreFindEP>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6aa:	7dbb      	ldrb	r3, [r7, #22]
 800a6ac:	2bff      	cmp	r3, #255	@ 0xff
 800a6ae:	d025      	beq.n	800a6fc <USBD_LL_DataOutStage+0x15c>
 800a6b0:	7dbb      	ldrb	r3, [r7, #22]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d122      	bne.n	800a6fc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	2b03      	cmp	r3, #3
 800a6c0:	d117      	bne.n	800a6f2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a6c2:	7dba      	ldrb	r2, [r7, #22]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	32ae      	adds	r2, #174	@ 0xae
 800a6c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6cc:	699b      	ldr	r3, [r3, #24]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d00f      	beq.n	800a6f2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a6d2:	7dba      	ldrb	r2, [r7, #22]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a6da:	7dba      	ldrb	r2, [r7, #22]
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	32ae      	adds	r2, #174	@ 0xae
 800a6e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6e4:	699b      	ldr	r3, [r3, #24]
 800a6e6:	7afa      	ldrb	r2, [r7, #11]
 800a6e8:	4611      	mov	r1, r2
 800a6ea:	68f8      	ldr	r0, [r7, #12]
 800a6ec:	4798      	blx	r3
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a6f2:	7dfb      	ldrb	r3, [r7, #23]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d001      	beq.n	800a6fc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a6f8:	7dfb      	ldrb	r3, [r7, #23]
 800a6fa:	e000      	b.n	800a6fe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3718      	adds	r7, #24
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a706:	b580      	push	{r7, lr}
 800a708:	b086      	sub	sp, #24
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	60f8      	str	r0, [r7, #12]
 800a70e:	460b      	mov	r3, r1
 800a710:	607a      	str	r2, [r7, #4]
 800a712:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a714:	7afb      	ldrb	r3, [r7, #11]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d16f      	bne.n	800a7fa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	3314      	adds	r3, #20
 800a71e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a726:	2b02      	cmp	r3, #2
 800a728:	d15a      	bne.n	800a7e0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	689a      	ldr	r2, [r3, #8]
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	429a      	cmp	r2, r3
 800a734:	d914      	bls.n	800a760 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	689a      	ldr	r2, [r3, #8]
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	1ad2      	subs	r2, r2, r3
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	461a      	mov	r2, r3
 800a74a:	6879      	ldr	r1, [r7, #4]
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	f001 f8bc 	bl	800b8ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a752:	2300      	movs	r3, #0
 800a754:	2200      	movs	r2, #0
 800a756:	2100      	movs	r1, #0
 800a758:	68f8      	ldr	r0, [r7, #12]
 800a75a:	f7f7 f8af 	bl	80018bc <USBD_LL_PrepareReceive>
 800a75e:	e03f      	b.n	800a7e0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	68da      	ldr	r2, [r3, #12]
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	429a      	cmp	r2, r3
 800a76a:	d11c      	bne.n	800a7a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	685a      	ldr	r2, [r3, #4]
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a774:	429a      	cmp	r2, r3
 800a776:	d316      	bcc.n	800a7a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	685a      	ldr	r2, [r3, #4]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a782:	429a      	cmp	r2, r3
 800a784:	d20f      	bcs.n	800a7a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a786:	2200      	movs	r2, #0
 800a788:	2100      	movs	r1, #0
 800a78a:	68f8      	ldr	r0, [r7, #12]
 800a78c:	f001 f89d 	bl	800b8ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a798:	2300      	movs	r3, #0
 800a79a:	2200      	movs	r2, #0
 800a79c:	2100      	movs	r1, #0
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f7f7 f88c 	bl	80018bc <USBD_LL_PrepareReceive>
 800a7a4:	e01c      	b.n	800a7e0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	2b03      	cmp	r3, #3
 800a7b0:	d10f      	bne.n	800a7d2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d009      	beq.n	800a7d2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	68f8      	ldr	r0, [r7, #12]
 800a7d0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7d2:	2180      	movs	r1, #128	@ 0x80
 800a7d4:	68f8      	ldr	r0, [r7, #12]
 800a7d6:	f7f6 ffc7 	bl	8001768 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	f001 f8c7 	bl	800b96e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d03a      	beq.n	800a860 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a7ea:	68f8      	ldr	r0, [r7, #12]
 800a7ec:	f7ff fe42 	bl	800a474 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a7f8:	e032      	b.n	800a860 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a7fa:	7afb      	ldrb	r3, [r7, #11]
 800a7fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a800:	b2db      	uxtb	r3, r3
 800a802:	4619      	mov	r1, r3
 800a804:	68f8      	ldr	r0, [r7, #12]
 800a806:	f000 f985 	bl	800ab14 <USBD_CoreFindEP>
 800a80a:	4603      	mov	r3, r0
 800a80c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a80e:	7dfb      	ldrb	r3, [r7, #23]
 800a810:	2bff      	cmp	r3, #255	@ 0xff
 800a812:	d025      	beq.n	800a860 <USBD_LL_DataInStage+0x15a>
 800a814:	7dfb      	ldrb	r3, [r7, #23]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d122      	bne.n	800a860 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a820:	b2db      	uxtb	r3, r3
 800a822:	2b03      	cmp	r3, #3
 800a824:	d11c      	bne.n	800a860 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a826:	7dfa      	ldrb	r2, [r7, #23]
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	32ae      	adds	r2, #174	@ 0xae
 800a82c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a830:	695b      	ldr	r3, [r3, #20]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d014      	beq.n	800a860 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a836:	7dfa      	ldrb	r2, [r7, #23]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a83e:	7dfa      	ldrb	r2, [r7, #23]
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	32ae      	adds	r2, #174	@ 0xae
 800a844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a848:	695b      	ldr	r3, [r3, #20]
 800a84a:	7afa      	ldrb	r2, [r7, #11]
 800a84c:	4611      	mov	r1, r2
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	4798      	blx	r3
 800a852:	4603      	mov	r3, r0
 800a854:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a856:	7dbb      	ldrb	r3, [r7, #22]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d001      	beq.n	800a860 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a85c:	7dbb      	ldrb	r3, [r7, #22]
 800a85e:	e000      	b.n	800a862 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a860:	2300      	movs	r3, #0
}
 800a862:	4618      	mov	r0, r3
 800a864:	3718      	adds	r7, #24
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}

0800a86a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a86a:	b580      	push	{r7, lr}
 800a86c:	b084      	sub	sp, #16
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a872:	2300      	movs	r3, #0
 800a874:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2201      	movs	r2, #1
 800a87a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d014      	beq.n	800a8d0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00e      	beq.n	800a8d0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	6852      	ldr	r2, [r2, #4]
 800a8be:	b2d2      	uxtb	r2, r2
 800a8c0:	4611      	mov	r1, r2
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	4798      	blx	r3
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d001      	beq.n	800a8d0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a8cc:	2303      	movs	r3, #3
 800a8ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a8d0:	2340      	movs	r3, #64	@ 0x40
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	2100      	movs	r1, #0
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f7f6 ff01 	bl	80016de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2240      	movs	r2, #64	@ 0x40
 800a8e8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a8ec:	2340      	movs	r3, #64	@ 0x40
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	2180      	movs	r1, #128	@ 0x80
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f7f6 fef3 	bl	80016de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2240      	movs	r2, #64	@ 0x40
 800a902:	621a      	str	r2, [r3, #32]

  return ret;
 800a904:	7bfb      	ldrb	r3, [r7, #15]
}
 800a906:	4618      	mov	r0, r3
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a90e:	b480      	push	{r7}
 800a910:	b083      	sub	sp, #12
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	460b      	mov	r3, r1
 800a918:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	78fa      	ldrb	r2, [r7, #3]
 800a91e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a920:	2300      	movs	r3, #0
}
 800a922:	4618      	mov	r0, r3
 800a924:	370c      	adds	r7, #12
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr

0800a92e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a92e:	b480      	push	{r7}
 800a930:	b083      	sub	sp, #12
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	2b04      	cmp	r3, #4
 800a940:	d006      	beq.n	800a950 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a948:	b2da      	uxtb	r2, r3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2204      	movs	r2, #4
 800a954:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a958:	2300      	movs	r3, #0
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	370c      	adds	r7, #12
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr

0800a966 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a966:	b480      	push	{r7}
 800a968:	b083      	sub	sp, #12
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a974:	b2db      	uxtb	r3, r3
 800a976:	2b04      	cmp	r3, #4
 800a978:	d106      	bne.n	800a988 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a980:	b2da      	uxtb	r2, r3
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	370c      	adds	r7, #12
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr

0800a996 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a996:	b580      	push	{r7, lr}
 800a998:	b082      	sub	sp, #8
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	2b03      	cmp	r3, #3
 800a9a8:	d110      	bne.n	800a9cc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d00b      	beq.n	800a9cc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9ba:	69db      	ldr	r3, [r3, #28]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d005      	beq.n	800a9cc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9c6:	69db      	ldr	r3, [r3, #28]
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a9cc:	2300      	movs	r3, #0
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3708      	adds	r7, #8
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}

0800a9d6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a9d6:	b580      	push	{r7, lr}
 800a9d8:	b082      	sub	sp, #8
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
 800a9de:	460b      	mov	r3, r1
 800a9e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	32ae      	adds	r2, #174	@ 0xae
 800a9ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d101      	bne.n	800a9f8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a9f4:	2303      	movs	r3, #3
 800a9f6:	e01c      	b.n	800aa32 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	2b03      	cmp	r3, #3
 800aa02:	d115      	bne.n	800aa30 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	32ae      	adds	r2, #174	@ 0xae
 800aa0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa12:	6a1b      	ldr	r3, [r3, #32]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d00b      	beq.n	800aa30 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	32ae      	adds	r2, #174	@ 0xae
 800aa22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa26:	6a1b      	ldr	r3, [r3, #32]
 800aa28:	78fa      	ldrb	r2, [r7, #3]
 800aa2a:	4611      	mov	r1, r2
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3708      	adds	r7, #8
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b082      	sub	sp, #8
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
 800aa42:	460b      	mov	r3, r1
 800aa44:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	32ae      	adds	r2, #174	@ 0xae
 800aa50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d101      	bne.n	800aa5c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800aa58:	2303      	movs	r3, #3
 800aa5a:	e01c      	b.n	800aa96 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	2b03      	cmp	r3, #3
 800aa66:	d115      	bne.n	800aa94 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	32ae      	adds	r2, #174	@ 0xae
 800aa72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d00b      	beq.n	800aa94 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	32ae      	adds	r2, #174	@ 0xae
 800aa86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa8c:	78fa      	ldrb	r2, [r7, #3]
 800aa8e:	4611      	mov	r1, r2
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3708      	adds	r7, #8
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800aa9e:	b480      	push	{r7}
 800aaa0:	b083      	sub	sp, #12
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aaa6:	2300      	movs	r3, #0
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800aabc:	2300      	movs	r3, #0
 800aabe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2201      	movs	r2, #1
 800aac4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d00e      	beq.n	800aaf0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	6852      	ldr	r2, [r2, #4]
 800aade:	b2d2      	uxtb	r2, r2
 800aae0:	4611      	mov	r1, r2
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	4798      	blx	r3
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d001      	beq.n	800aaf0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800aaec:	2303      	movs	r3, #3
 800aaee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aaf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3710      	adds	r7, #16
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}

0800aafa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800aafa:	b480      	push	{r7}
 800aafc:	b083      	sub	sp, #12
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
 800ab02:	460b      	mov	r3, r1
 800ab04:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ab06:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	370c      	adds	r7, #12
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b083      	sub	sp, #12
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ab20:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	370c      	adds	r7, #12
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr

0800ab2e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ab2e:	b580      	push	{r7, lr}
 800ab30:	b086      	sub	sp, #24
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
 800ab36:	460b      	mov	r3, r1
 800ab38:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ab42:	2300      	movs	r3, #0
 800ab44:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	885b      	ldrh	r3, [r3, #2]
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	7812      	ldrb	r2, [r2, #0]
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d91f      	bls.n	800ab94 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ab5a:	e013      	b.n	800ab84 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ab5c:	f107 030a 	add.w	r3, r7, #10
 800ab60:	4619      	mov	r1, r3
 800ab62:	6978      	ldr	r0, [r7, #20]
 800ab64:	f000 f81b 	bl	800ab9e <USBD_GetNextDesc>
 800ab68:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	785b      	ldrb	r3, [r3, #1]
 800ab6e:	2b05      	cmp	r3, #5
 800ab70:	d108      	bne.n	800ab84 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	789b      	ldrb	r3, [r3, #2]
 800ab7a:	78fa      	ldrb	r2, [r7, #3]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d008      	beq.n	800ab92 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ab80:	2300      	movs	r3, #0
 800ab82:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	885b      	ldrh	r3, [r3, #2]
 800ab88:	b29a      	uxth	r2, r3
 800ab8a:	897b      	ldrh	r3, [r7, #10]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d8e5      	bhi.n	800ab5c <USBD_GetEpDesc+0x2e>
 800ab90:	e000      	b.n	800ab94 <USBD_GetEpDesc+0x66>
          break;
 800ab92:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ab94:	693b      	ldr	r3, [r7, #16]
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3718      	adds	r7, #24
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}

0800ab9e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ab9e:	b480      	push	{r7}
 800aba0:	b085      	sub	sp, #20
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
 800aba6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	881b      	ldrh	r3, [r3, #0]
 800abb0:	68fa      	ldr	r2, [r7, #12]
 800abb2:	7812      	ldrb	r2, [r2, #0]
 800abb4:	4413      	add	r3, r2
 800abb6:	b29a      	uxth	r2, r3
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	461a      	mov	r2, r3
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4413      	add	r3, r2
 800abc6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800abc8:	68fb      	ldr	r3, [r7, #12]
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3714      	adds	r7, #20
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr

0800abd6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800abd6:	b480      	push	{r7}
 800abd8:	b087      	sub	sp, #28
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	3301      	adds	r3, #1
 800abec:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800abf4:	8a3b      	ldrh	r3, [r7, #16]
 800abf6:	021b      	lsls	r3, r3, #8
 800abf8:	b21a      	sxth	r2, r3
 800abfa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800abfe:	4313      	orrs	r3, r2
 800ac00:	b21b      	sxth	r3, r3
 800ac02:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ac04:	89fb      	ldrh	r3, [r7, #14]
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	371c      	adds	r7, #28
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr
	...

0800ac14 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ac2a:	2b40      	cmp	r3, #64	@ 0x40
 800ac2c:	d005      	beq.n	800ac3a <USBD_StdDevReq+0x26>
 800ac2e:	2b40      	cmp	r3, #64	@ 0x40
 800ac30:	d857      	bhi.n	800ace2 <USBD_StdDevReq+0xce>
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d00f      	beq.n	800ac56 <USBD_StdDevReq+0x42>
 800ac36:	2b20      	cmp	r3, #32
 800ac38:	d153      	bne.n	800ace2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	32ae      	adds	r2, #174	@ 0xae
 800ac44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac48:	689b      	ldr	r3, [r3, #8]
 800ac4a:	6839      	ldr	r1, [r7, #0]
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	4798      	blx	r3
 800ac50:	4603      	mov	r3, r0
 800ac52:	73fb      	strb	r3, [r7, #15]
      break;
 800ac54:	e04a      	b.n	800acec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	785b      	ldrb	r3, [r3, #1]
 800ac5a:	2b09      	cmp	r3, #9
 800ac5c:	d83b      	bhi.n	800acd6 <USBD_StdDevReq+0xc2>
 800ac5e:	a201      	add	r2, pc, #4	@ (adr r2, 800ac64 <USBD_StdDevReq+0x50>)
 800ac60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac64:	0800acb9 	.word	0x0800acb9
 800ac68:	0800accd 	.word	0x0800accd
 800ac6c:	0800acd7 	.word	0x0800acd7
 800ac70:	0800acc3 	.word	0x0800acc3
 800ac74:	0800acd7 	.word	0x0800acd7
 800ac78:	0800ac97 	.word	0x0800ac97
 800ac7c:	0800ac8d 	.word	0x0800ac8d
 800ac80:	0800acd7 	.word	0x0800acd7
 800ac84:	0800acaf 	.word	0x0800acaf
 800ac88:	0800aca1 	.word	0x0800aca1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ac8c:	6839      	ldr	r1, [r7, #0]
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 fa3c 	bl	800b10c <USBD_GetDescriptor>
          break;
 800ac94:	e024      	b.n	800ace0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ac96:	6839      	ldr	r1, [r7, #0]
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 fba1 	bl	800b3e0 <USBD_SetAddress>
          break;
 800ac9e:	e01f      	b.n	800ace0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aca0:	6839      	ldr	r1, [r7, #0]
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 fbe0 	bl	800b468 <USBD_SetConfig>
 800aca8:	4603      	mov	r3, r0
 800acaa:	73fb      	strb	r3, [r7, #15]
          break;
 800acac:	e018      	b.n	800ace0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800acae:	6839      	ldr	r1, [r7, #0]
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f000 fc83 	bl	800b5bc <USBD_GetConfig>
          break;
 800acb6:	e013      	b.n	800ace0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800acb8:	6839      	ldr	r1, [r7, #0]
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f000 fcb4 	bl	800b628 <USBD_GetStatus>
          break;
 800acc0:	e00e      	b.n	800ace0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800acc2:	6839      	ldr	r1, [r7, #0]
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f000 fce3 	bl	800b690 <USBD_SetFeature>
          break;
 800acca:	e009      	b.n	800ace0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800accc:	6839      	ldr	r1, [r7, #0]
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 fd07 	bl	800b6e2 <USBD_ClrFeature>
          break;
 800acd4:	e004      	b.n	800ace0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800acd6:	6839      	ldr	r1, [r7, #0]
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 fd5e 	bl	800b79a <USBD_CtlError>
          break;
 800acde:	bf00      	nop
      }
      break;
 800ace0:	e004      	b.n	800acec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ace2:	6839      	ldr	r1, [r7, #0]
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f000 fd58 	bl	800b79a <USBD_CtlError>
      break;
 800acea:	bf00      	nop
  }

  return ret;
 800acec:	7bfb      	ldrb	r3, [r7, #15]
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3710      	adds	r7, #16
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop

0800acf8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad02:	2300      	movs	r3, #0
 800ad04:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad0e:	2b40      	cmp	r3, #64	@ 0x40
 800ad10:	d005      	beq.n	800ad1e <USBD_StdItfReq+0x26>
 800ad12:	2b40      	cmp	r3, #64	@ 0x40
 800ad14:	d852      	bhi.n	800adbc <USBD_StdItfReq+0xc4>
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d001      	beq.n	800ad1e <USBD_StdItfReq+0x26>
 800ad1a:	2b20      	cmp	r3, #32
 800ad1c:	d14e      	bne.n	800adbc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	3b01      	subs	r3, #1
 800ad28:	2b02      	cmp	r3, #2
 800ad2a:	d840      	bhi.n	800adae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	889b      	ldrh	r3, [r3, #4]
 800ad30:	b2db      	uxtb	r3, r3
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	d836      	bhi.n	800ada4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	889b      	ldrh	r3, [r3, #4]
 800ad3a:	b2db      	uxtb	r3, r3
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f7ff fedb 	bl	800aafa <USBD_CoreFindIF>
 800ad44:	4603      	mov	r3, r0
 800ad46:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad48:	7bbb      	ldrb	r3, [r7, #14]
 800ad4a:	2bff      	cmp	r3, #255	@ 0xff
 800ad4c:	d01d      	beq.n	800ad8a <USBD_StdItfReq+0x92>
 800ad4e:	7bbb      	ldrb	r3, [r7, #14]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d11a      	bne.n	800ad8a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ad54:	7bba      	ldrb	r2, [r7, #14]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	32ae      	adds	r2, #174	@ 0xae
 800ad5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad5e:	689b      	ldr	r3, [r3, #8]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d00f      	beq.n	800ad84 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ad64:	7bba      	ldrb	r2, [r7, #14]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ad6c:	7bba      	ldrb	r2, [r7, #14]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	32ae      	adds	r2, #174	@ 0xae
 800ad72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	6839      	ldr	r1, [r7, #0]
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	4798      	blx	r3
 800ad7e:	4603      	mov	r3, r0
 800ad80:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ad82:	e004      	b.n	800ad8e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ad84:	2303      	movs	r3, #3
 800ad86:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ad88:	e001      	b.n	800ad8e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ad8a:	2303      	movs	r3, #3
 800ad8c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	88db      	ldrh	r3, [r3, #6]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d110      	bne.n	800adb8 <USBD_StdItfReq+0xc0>
 800ad96:	7bfb      	ldrb	r3, [r7, #15]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d10d      	bne.n	800adb8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 fdd3 	bl	800b948 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ada2:	e009      	b.n	800adb8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ada4:	6839      	ldr	r1, [r7, #0]
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 fcf7 	bl	800b79a <USBD_CtlError>
          break;
 800adac:	e004      	b.n	800adb8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800adae:	6839      	ldr	r1, [r7, #0]
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 fcf2 	bl	800b79a <USBD_CtlError>
          break;
 800adb6:	e000      	b.n	800adba <USBD_StdItfReq+0xc2>
          break;
 800adb8:	bf00      	nop
      }
      break;
 800adba:	e004      	b.n	800adc6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800adbc:	6839      	ldr	r1, [r7, #0]
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 fceb 	bl	800b79a <USBD_CtlError>
      break;
 800adc4:	bf00      	nop
  }

  return ret;
 800adc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3710      	adds	r7, #16
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800adda:	2300      	movs	r3, #0
 800addc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	889b      	ldrh	r3, [r3, #4]
 800ade2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800adec:	2b40      	cmp	r3, #64	@ 0x40
 800adee:	d007      	beq.n	800ae00 <USBD_StdEPReq+0x30>
 800adf0:	2b40      	cmp	r3, #64	@ 0x40
 800adf2:	f200 817f 	bhi.w	800b0f4 <USBD_StdEPReq+0x324>
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d02a      	beq.n	800ae50 <USBD_StdEPReq+0x80>
 800adfa:	2b20      	cmp	r3, #32
 800adfc:	f040 817a 	bne.w	800b0f4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ae00:	7bbb      	ldrb	r3, [r7, #14]
 800ae02:	4619      	mov	r1, r3
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f7ff fe85 	bl	800ab14 <USBD_CoreFindEP>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae0e:	7b7b      	ldrb	r3, [r7, #13]
 800ae10:	2bff      	cmp	r3, #255	@ 0xff
 800ae12:	f000 8174 	beq.w	800b0fe <USBD_StdEPReq+0x32e>
 800ae16:	7b7b      	ldrb	r3, [r7, #13]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	f040 8170 	bne.w	800b0fe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ae1e:	7b7a      	ldrb	r2, [r7, #13]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ae26:	7b7a      	ldrb	r2, [r7, #13]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	32ae      	adds	r2, #174	@ 0xae
 800ae2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae30:	689b      	ldr	r3, [r3, #8]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	f000 8163 	beq.w	800b0fe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ae38:	7b7a      	ldrb	r2, [r7, #13]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	32ae      	adds	r2, #174	@ 0xae
 800ae3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	6839      	ldr	r1, [r7, #0]
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	4798      	blx	r3
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ae4e:	e156      	b.n	800b0fe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	785b      	ldrb	r3, [r3, #1]
 800ae54:	2b03      	cmp	r3, #3
 800ae56:	d008      	beq.n	800ae6a <USBD_StdEPReq+0x9a>
 800ae58:	2b03      	cmp	r3, #3
 800ae5a:	f300 8145 	bgt.w	800b0e8 <USBD_StdEPReq+0x318>
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	f000 809b 	beq.w	800af9a <USBD_StdEPReq+0x1ca>
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d03c      	beq.n	800aee2 <USBD_StdEPReq+0x112>
 800ae68:	e13e      	b.n	800b0e8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae70:	b2db      	uxtb	r3, r3
 800ae72:	2b02      	cmp	r3, #2
 800ae74:	d002      	beq.n	800ae7c <USBD_StdEPReq+0xac>
 800ae76:	2b03      	cmp	r3, #3
 800ae78:	d016      	beq.n	800aea8 <USBD_StdEPReq+0xd8>
 800ae7a:	e02c      	b.n	800aed6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae7c:	7bbb      	ldrb	r3, [r7, #14]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d00d      	beq.n	800ae9e <USBD_StdEPReq+0xce>
 800ae82:	7bbb      	ldrb	r3, [r7, #14]
 800ae84:	2b80      	cmp	r3, #128	@ 0x80
 800ae86:	d00a      	beq.n	800ae9e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae88:	7bbb      	ldrb	r3, [r7, #14]
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f7f6 fc6b 	bl	8001768 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae92:	2180      	movs	r1, #128	@ 0x80
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f7f6 fc67 	bl	8001768 <USBD_LL_StallEP>
 800ae9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ae9c:	e020      	b.n	800aee0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ae9e:	6839      	ldr	r1, [r7, #0]
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 fc7a 	bl	800b79a <USBD_CtlError>
              break;
 800aea6:	e01b      	b.n	800aee0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	885b      	ldrh	r3, [r3, #2]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d10e      	bne.n	800aece <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aeb0:	7bbb      	ldrb	r3, [r7, #14]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d00b      	beq.n	800aece <USBD_StdEPReq+0xfe>
 800aeb6:	7bbb      	ldrb	r3, [r7, #14]
 800aeb8:	2b80      	cmp	r3, #128	@ 0x80
 800aeba:	d008      	beq.n	800aece <USBD_StdEPReq+0xfe>
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	88db      	ldrh	r3, [r3, #6]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d104      	bne.n	800aece <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aec4:	7bbb      	ldrb	r3, [r7, #14]
 800aec6:	4619      	mov	r1, r3
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f7f6 fc4d 	bl	8001768 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f000 fd3a 	bl	800b948 <USBD_CtlSendStatus>

              break;
 800aed4:	e004      	b.n	800aee0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800aed6:	6839      	ldr	r1, [r7, #0]
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 fc5e 	bl	800b79a <USBD_CtlError>
              break;
 800aede:	bf00      	nop
          }
          break;
 800aee0:	e107      	b.n	800b0f2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aee8:	b2db      	uxtb	r3, r3
 800aeea:	2b02      	cmp	r3, #2
 800aeec:	d002      	beq.n	800aef4 <USBD_StdEPReq+0x124>
 800aeee:	2b03      	cmp	r3, #3
 800aef0:	d016      	beq.n	800af20 <USBD_StdEPReq+0x150>
 800aef2:	e04b      	b.n	800af8c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aef4:	7bbb      	ldrb	r3, [r7, #14]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d00d      	beq.n	800af16 <USBD_StdEPReq+0x146>
 800aefa:	7bbb      	ldrb	r3, [r7, #14]
 800aefc:	2b80      	cmp	r3, #128	@ 0x80
 800aefe:	d00a      	beq.n	800af16 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af00:	7bbb      	ldrb	r3, [r7, #14]
 800af02:	4619      	mov	r1, r3
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f7f6 fc2f 	bl	8001768 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af0a:	2180      	movs	r1, #128	@ 0x80
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f7f6 fc2b 	bl	8001768 <USBD_LL_StallEP>
 800af12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af14:	e040      	b.n	800af98 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800af16:	6839      	ldr	r1, [r7, #0]
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 fc3e 	bl	800b79a <USBD_CtlError>
              break;
 800af1e:	e03b      	b.n	800af98 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	885b      	ldrh	r3, [r3, #2]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d136      	bne.n	800af96 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800af28:	7bbb      	ldrb	r3, [r7, #14]
 800af2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d004      	beq.n	800af3c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800af32:	7bbb      	ldrb	r3, [r7, #14]
 800af34:	4619      	mov	r1, r3
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f7f6 fc35 	bl	80017a6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 fd03 	bl	800b948 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800af42:	7bbb      	ldrb	r3, [r7, #14]
 800af44:	4619      	mov	r1, r3
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f7ff fde4 	bl	800ab14 <USBD_CoreFindEP>
 800af4c:	4603      	mov	r3, r0
 800af4e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af50:	7b7b      	ldrb	r3, [r7, #13]
 800af52:	2bff      	cmp	r3, #255	@ 0xff
 800af54:	d01f      	beq.n	800af96 <USBD_StdEPReq+0x1c6>
 800af56:	7b7b      	ldrb	r3, [r7, #13]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d11c      	bne.n	800af96 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800af5c:	7b7a      	ldrb	r2, [r7, #13]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800af64:	7b7a      	ldrb	r2, [r7, #13]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	32ae      	adds	r2, #174	@ 0xae
 800af6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d010      	beq.n	800af96 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800af74:	7b7a      	ldrb	r2, [r7, #13]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	32ae      	adds	r2, #174	@ 0xae
 800af7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	6839      	ldr	r1, [r7, #0]
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	4798      	blx	r3
 800af86:	4603      	mov	r3, r0
 800af88:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800af8a:	e004      	b.n	800af96 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800af8c:	6839      	ldr	r1, [r7, #0]
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 fc03 	bl	800b79a <USBD_CtlError>
              break;
 800af94:	e000      	b.n	800af98 <USBD_StdEPReq+0x1c8>
              break;
 800af96:	bf00      	nop
          }
          break;
 800af98:	e0ab      	b.n	800b0f2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	d002      	beq.n	800afac <USBD_StdEPReq+0x1dc>
 800afa6:	2b03      	cmp	r3, #3
 800afa8:	d032      	beq.n	800b010 <USBD_StdEPReq+0x240>
 800afaa:	e097      	b.n	800b0dc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afac:	7bbb      	ldrb	r3, [r7, #14]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d007      	beq.n	800afc2 <USBD_StdEPReq+0x1f2>
 800afb2:	7bbb      	ldrb	r3, [r7, #14]
 800afb4:	2b80      	cmp	r3, #128	@ 0x80
 800afb6:	d004      	beq.n	800afc2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800afb8:	6839      	ldr	r1, [r7, #0]
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f000 fbed 	bl	800b79a <USBD_CtlError>
                break;
 800afc0:	e091      	b.n	800b0e6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	da0b      	bge.n	800afe2 <USBD_StdEPReq+0x212>
 800afca:	7bbb      	ldrb	r3, [r7, #14]
 800afcc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800afd0:	4613      	mov	r3, r2
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	4413      	add	r3, r2
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	3310      	adds	r3, #16
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	4413      	add	r3, r2
 800afde:	3304      	adds	r3, #4
 800afe0:	e00b      	b.n	800affa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800afe2:	7bbb      	ldrb	r3, [r7, #14]
 800afe4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afe8:	4613      	mov	r3, r2
 800afea:	009b      	lsls	r3, r3, #2
 800afec:	4413      	add	r3, r2
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	4413      	add	r3, r2
 800aff8:	3304      	adds	r3, #4
 800affa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	2200      	movs	r2, #0
 800b000:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	2202      	movs	r2, #2
 800b006:	4619      	mov	r1, r3
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 fc43 	bl	800b894 <USBD_CtlSendData>
              break;
 800b00e:	e06a      	b.n	800b0e6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b010:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b014:	2b00      	cmp	r3, #0
 800b016:	da11      	bge.n	800b03c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b018:	7bbb      	ldrb	r3, [r7, #14]
 800b01a:	f003 020f 	and.w	r2, r3, #15
 800b01e:	6879      	ldr	r1, [r7, #4]
 800b020:	4613      	mov	r3, r2
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	4413      	add	r3, r2
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	440b      	add	r3, r1
 800b02a:	3324      	adds	r3, #36	@ 0x24
 800b02c:	881b      	ldrh	r3, [r3, #0]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d117      	bne.n	800b062 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b032:	6839      	ldr	r1, [r7, #0]
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 fbb0 	bl	800b79a <USBD_CtlError>
                  break;
 800b03a:	e054      	b.n	800b0e6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b03c:	7bbb      	ldrb	r3, [r7, #14]
 800b03e:	f003 020f 	and.w	r2, r3, #15
 800b042:	6879      	ldr	r1, [r7, #4]
 800b044:	4613      	mov	r3, r2
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	4413      	add	r3, r2
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	440b      	add	r3, r1
 800b04e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b052:	881b      	ldrh	r3, [r3, #0]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d104      	bne.n	800b062 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b058:	6839      	ldr	r1, [r7, #0]
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 fb9d 	bl	800b79a <USBD_CtlError>
                  break;
 800b060:	e041      	b.n	800b0e6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b062:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b066:	2b00      	cmp	r3, #0
 800b068:	da0b      	bge.n	800b082 <USBD_StdEPReq+0x2b2>
 800b06a:	7bbb      	ldrb	r3, [r7, #14]
 800b06c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b070:	4613      	mov	r3, r2
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	4413      	add	r3, r2
 800b076:	009b      	lsls	r3, r3, #2
 800b078:	3310      	adds	r3, #16
 800b07a:	687a      	ldr	r2, [r7, #4]
 800b07c:	4413      	add	r3, r2
 800b07e:	3304      	adds	r3, #4
 800b080:	e00b      	b.n	800b09a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b082:	7bbb      	ldrb	r3, [r7, #14]
 800b084:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b088:	4613      	mov	r3, r2
 800b08a:	009b      	lsls	r3, r3, #2
 800b08c:	4413      	add	r3, r2
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	4413      	add	r3, r2
 800b098:	3304      	adds	r3, #4
 800b09a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b09c:	7bbb      	ldrb	r3, [r7, #14]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d002      	beq.n	800b0a8 <USBD_StdEPReq+0x2d8>
 800b0a2:	7bbb      	ldrb	r3, [r7, #14]
 800b0a4:	2b80      	cmp	r3, #128	@ 0x80
 800b0a6:	d103      	bne.n	800b0b0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	601a      	str	r2, [r3, #0]
 800b0ae:	e00e      	b.n	800b0ce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b0b0:	7bbb      	ldrb	r3, [r7, #14]
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f7f6 fb95 	bl	80017e4 <USBD_LL_IsStallEP>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d003      	beq.n	800b0c8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	601a      	str	r2, [r3, #0]
 800b0c6:	e002      	b.n	800b0ce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	2202      	movs	r2, #2
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 fbdd 	bl	800b894 <USBD_CtlSendData>
              break;
 800b0da:	e004      	b.n	800b0e6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b0dc:	6839      	ldr	r1, [r7, #0]
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f000 fb5b 	bl	800b79a <USBD_CtlError>
              break;
 800b0e4:	bf00      	nop
          }
          break;
 800b0e6:	e004      	b.n	800b0f2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b0e8:	6839      	ldr	r1, [r7, #0]
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 fb55 	bl	800b79a <USBD_CtlError>
          break;
 800b0f0:	bf00      	nop
      }
      break;
 800b0f2:	e005      	b.n	800b100 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b0f4:	6839      	ldr	r1, [r7, #0]
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 fb4f 	bl	800b79a <USBD_CtlError>
      break;
 800b0fc:	e000      	b.n	800b100 <USBD_StdEPReq+0x330>
      break;
 800b0fe:	bf00      	nop
  }

  return ret;
 800b100:	7bfb      	ldrb	r3, [r7, #15]
}
 800b102:	4618      	mov	r0, r3
 800b104:	3710      	adds	r7, #16
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
	...

0800b10c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b084      	sub	sp, #16
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b116:	2300      	movs	r3, #0
 800b118:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b11a:	2300      	movs	r3, #0
 800b11c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b11e:	2300      	movs	r3, #0
 800b120:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	885b      	ldrh	r3, [r3, #2]
 800b126:	0a1b      	lsrs	r3, r3, #8
 800b128:	b29b      	uxth	r3, r3
 800b12a:	3b01      	subs	r3, #1
 800b12c:	2b06      	cmp	r3, #6
 800b12e:	f200 8128 	bhi.w	800b382 <USBD_GetDescriptor+0x276>
 800b132:	a201      	add	r2, pc, #4	@ (adr r2, 800b138 <USBD_GetDescriptor+0x2c>)
 800b134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b138:	0800b155 	.word	0x0800b155
 800b13c:	0800b16d 	.word	0x0800b16d
 800b140:	0800b1ad 	.word	0x0800b1ad
 800b144:	0800b383 	.word	0x0800b383
 800b148:	0800b383 	.word	0x0800b383
 800b14c:	0800b323 	.word	0x0800b323
 800b150:	0800b34f 	.word	0x0800b34f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	7c12      	ldrb	r2, [r2, #16]
 800b160:	f107 0108 	add.w	r1, r7, #8
 800b164:	4610      	mov	r0, r2
 800b166:	4798      	blx	r3
 800b168:	60f8      	str	r0, [r7, #12]
      break;
 800b16a:	e112      	b.n	800b392 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	7c1b      	ldrb	r3, [r3, #16]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d10d      	bne.n	800b190 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b17a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b17c:	f107 0208 	add.w	r2, r7, #8
 800b180:	4610      	mov	r0, r2
 800b182:	4798      	blx	r3
 800b184:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	3301      	adds	r3, #1
 800b18a:	2202      	movs	r2, #2
 800b18c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b18e:	e100      	b.n	800b392 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b198:	f107 0208 	add.w	r2, r7, #8
 800b19c:	4610      	mov	r0, r2
 800b19e:	4798      	blx	r3
 800b1a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	2202      	movs	r2, #2
 800b1a8:	701a      	strb	r2, [r3, #0]
      break;
 800b1aa:	e0f2      	b.n	800b392 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	885b      	ldrh	r3, [r3, #2]
 800b1b0:	b2db      	uxtb	r3, r3
 800b1b2:	2b05      	cmp	r3, #5
 800b1b4:	f200 80ac 	bhi.w	800b310 <USBD_GetDescriptor+0x204>
 800b1b8:	a201      	add	r2, pc, #4	@ (adr r2, 800b1c0 <USBD_GetDescriptor+0xb4>)
 800b1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1be:	bf00      	nop
 800b1c0:	0800b1d9 	.word	0x0800b1d9
 800b1c4:	0800b20d 	.word	0x0800b20d
 800b1c8:	0800b241 	.word	0x0800b241
 800b1cc:	0800b275 	.word	0x0800b275
 800b1d0:	0800b2a9 	.word	0x0800b2a9
 800b1d4:	0800b2dd 	.word	0x0800b2dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d00b      	beq.n	800b1fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	7c12      	ldrb	r2, [r2, #16]
 800b1f0:	f107 0108 	add.w	r1, r7, #8
 800b1f4:	4610      	mov	r0, r2
 800b1f6:	4798      	blx	r3
 800b1f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1fa:	e091      	b.n	800b320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1fc:	6839      	ldr	r1, [r7, #0]
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 facb 	bl	800b79a <USBD_CtlError>
            err++;
 800b204:	7afb      	ldrb	r3, [r7, #11]
 800b206:	3301      	adds	r3, #1
 800b208:	72fb      	strb	r3, [r7, #11]
          break;
 800b20a:	e089      	b.n	800b320 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d00b      	beq.n	800b230 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b21e:	689b      	ldr	r3, [r3, #8]
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	7c12      	ldrb	r2, [r2, #16]
 800b224:	f107 0108 	add.w	r1, r7, #8
 800b228:	4610      	mov	r0, r2
 800b22a:	4798      	blx	r3
 800b22c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b22e:	e077      	b.n	800b320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b230:	6839      	ldr	r1, [r7, #0]
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 fab1 	bl	800b79a <USBD_CtlError>
            err++;
 800b238:	7afb      	ldrb	r3, [r7, #11]
 800b23a:	3301      	adds	r3, #1
 800b23c:	72fb      	strb	r3, [r7, #11]
          break;
 800b23e:	e06f      	b.n	800b320 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b246:	68db      	ldr	r3, [r3, #12]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d00b      	beq.n	800b264 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b252:	68db      	ldr	r3, [r3, #12]
 800b254:	687a      	ldr	r2, [r7, #4]
 800b256:	7c12      	ldrb	r2, [r2, #16]
 800b258:	f107 0108 	add.w	r1, r7, #8
 800b25c:	4610      	mov	r0, r2
 800b25e:	4798      	blx	r3
 800b260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b262:	e05d      	b.n	800b320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b264:	6839      	ldr	r1, [r7, #0]
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 fa97 	bl	800b79a <USBD_CtlError>
            err++;
 800b26c:	7afb      	ldrb	r3, [r7, #11]
 800b26e:	3301      	adds	r3, #1
 800b270:	72fb      	strb	r3, [r7, #11]
          break;
 800b272:	e055      	b.n	800b320 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b27a:	691b      	ldr	r3, [r3, #16]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d00b      	beq.n	800b298 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b286:	691b      	ldr	r3, [r3, #16]
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	7c12      	ldrb	r2, [r2, #16]
 800b28c:	f107 0108 	add.w	r1, r7, #8
 800b290:	4610      	mov	r0, r2
 800b292:	4798      	blx	r3
 800b294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b296:	e043      	b.n	800b320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b298:	6839      	ldr	r1, [r7, #0]
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 fa7d 	bl	800b79a <USBD_CtlError>
            err++;
 800b2a0:	7afb      	ldrb	r3, [r7, #11]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	72fb      	strb	r3, [r7, #11]
          break;
 800b2a6:	e03b      	b.n	800b320 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2ae:	695b      	ldr	r3, [r3, #20]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d00b      	beq.n	800b2cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2ba:	695b      	ldr	r3, [r3, #20]
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	7c12      	ldrb	r2, [r2, #16]
 800b2c0:	f107 0108 	add.w	r1, r7, #8
 800b2c4:	4610      	mov	r0, r2
 800b2c6:	4798      	blx	r3
 800b2c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2ca:	e029      	b.n	800b320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2cc:	6839      	ldr	r1, [r7, #0]
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 fa63 	bl	800b79a <USBD_CtlError>
            err++;
 800b2d4:	7afb      	ldrb	r3, [r7, #11]
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	72fb      	strb	r3, [r7, #11]
          break;
 800b2da:	e021      	b.n	800b320 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2e2:	699b      	ldr	r3, [r3, #24]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d00b      	beq.n	800b300 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2ee:	699b      	ldr	r3, [r3, #24]
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	7c12      	ldrb	r2, [r2, #16]
 800b2f4:	f107 0108 	add.w	r1, r7, #8
 800b2f8:	4610      	mov	r0, r2
 800b2fa:	4798      	blx	r3
 800b2fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2fe:	e00f      	b.n	800b320 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b300:	6839      	ldr	r1, [r7, #0]
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 fa49 	bl	800b79a <USBD_CtlError>
            err++;
 800b308:	7afb      	ldrb	r3, [r7, #11]
 800b30a:	3301      	adds	r3, #1
 800b30c:	72fb      	strb	r3, [r7, #11]
          break;
 800b30e:	e007      	b.n	800b320 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b310:	6839      	ldr	r1, [r7, #0]
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 fa41 	bl	800b79a <USBD_CtlError>
          err++;
 800b318:	7afb      	ldrb	r3, [r7, #11]
 800b31a:	3301      	adds	r3, #1
 800b31c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b31e:	bf00      	nop
      }
      break;
 800b320:	e037      	b.n	800b392 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	7c1b      	ldrb	r3, [r3, #16]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d109      	bne.n	800b33e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b332:	f107 0208 	add.w	r2, r7, #8
 800b336:	4610      	mov	r0, r2
 800b338:	4798      	blx	r3
 800b33a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b33c:	e029      	b.n	800b392 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b33e:	6839      	ldr	r1, [r7, #0]
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 fa2a 	bl	800b79a <USBD_CtlError>
        err++;
 800b346:	7afb      	ldrb	r3, [r7, #11]
 800b348:	3301      	adds	r3, #1
 800b34a:	72fb      	strb	r3, [r7, #11]
      break;
 800b34c:	e021      	b.n	800b392 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	7c1b      	ldrb	r3, [r3, #16]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d10d      	bne.n	800b372 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b35c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b35e:	f107 0208 	add.w	r2, r7, #8
 800b362:	4610      	mov	r0, r2
 800b364:	4798      	blx	r3
 800b366:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	3301      	adds	r3, #1
 800b36c:	2207      	movs	r2, #7
 800b36e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b370:	e00f      	b.n	800b392 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b372:	6839      	ldr	r1, [r7, #0]
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 fa10 	bl	800b79a <USBD_CtlError>
        err++;
 800b37a:	7afb      	ldrb	r3, [r7, #11]
 800b37c:	3301      	adds	r3, #1
 800b37e:	72fb      	strb	r3, [r7, #11]
      break;
 800b380:	e007      	b.n	800b392 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b382:	6839      	ldr	r1, [r7, #0]
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f000 fa08 	bl	800b79a <USBD_CtlError>
      err++;
 800b38a:	7afb      	ldrb	r3, [r7, #11]
 800b38c:	3301      	adds	r3, #1
 800b38e:	72fb      	strb	r3, [r7, #11]
      break;
 800b390:	bf00      	nop
  }

  if (err != 0U)
 800b392:	7afb      	ldrb	r3, [r7, #11]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d11e      	bne.n	800b3d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	88db      	ldrh	r3, [r3, #6]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d016      	beq.n	800b3ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b3a0:	893b      	ldrh	r3, [r7, #8]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d00e      	beq.n	800b3c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	88da      	ldrh	r2, [r3, #6]
 800b3aa:	893b      	ldrh	r3, [r7, #8]
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	bf28      	it	cs
 800b3b0:	4613      	movcs	r3, r2
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b3b6:	893b      	ldrh	r3, [r7, #8]
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	68f9      	ldr	r1, [r7, #12]
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f000 fa69 	bl	800b894 <USBD_CtlSendData>
 800b3c2:	e009      	b.n	800b3d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b3c4:	6839      	ldr	r1, [r7, #0]
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 f9e7 	bl	800b79a <USBD_CtlError>
 800b3cc:	e004      	b.n	800b3d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 faba 	bl	800b948 <USBD_CtlSendStatus>
 800b3d4:	e000      	b.n	800b3d8 <USBD_GetDescriptor+0x2cc>
    return;
 800b3d6:	bf00      	nop
  }
}
 800b3d8:	3710      	adds	r7, #16
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop

0800b3e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	889b      	ldrh	r3, [r3, #4]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d131      	bne.n	800b456 <USBD_SetAddress+0x76>
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	88db      	ldrh	r3, [r3, #6]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d12d      	bne.n	800b456 <USBD_SetAddress+0x76>
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	885b      	ldrh	r3, [r3, #2]
 800b3fe:	2b7f      	cmp	r3, #127	@ 0x7f
 800b400:	d829      	bhi.n	800b456 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	885b      	ldrh	r3, [r3, #2]
 800b406:	b2db      	uxtb	r3, r3
 800b408:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b40c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b414:	b2db      	uxtb	r3, r3
 800b416:	2b03      	cmp	r3, #3
 800b418:	d104      	bne.n	800b424 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b41a:	6839      	ldr	r1, [r7, #0]
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 f9bc 	bl	800b79a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b422:	e01d      	b.n	800b460 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	7bfa      	ldrb	r2, [r7, #15]
 800b428:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b42c:	7bfb      	ldrb	r3, [r7, #15]
 800b42e:	4619      	mov	r1, r3
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f7f6 fa03 	bl	800183c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f000 fa86 	bl	800b948 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b43c:	7bfb      	ldrb	r3, [r7, #15]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d004      	beq.n	800b44c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2202      	movs	r2, #2
 800b446:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b44a:	e009      	b.n	800b460 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2201      	movs	r2, #1
 800b450:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b454:	e004      	b.n	800b460 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b456:	6839      	ldr	r1, [r7, #0]
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f000 f99e 	bl	800b79a <USBD_CtlError>
  }
}
 800b45e:	bf00      	nop
 800b460:	bf00      	nop
 800b462:	3710      	adds	r7, #16
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b472:	2300      	movs	r3, #0
 800b474:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	885b      	ldrh	r3, [r3, #2]
 800b47a:	b2da      	uxtb	r2, r3
 800b47c:	4b4e      	ldr	r3, [pc, #312]	@ (800b5b8 <USBD_SetConfig+0x150>)
 800b47e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b480:	4b4d      	ldr	r3, [pc, #308]	@ (800b5b8 <USBD_SetConfig+0x150>)
 800b482:	781b      	ldrb	r3, [r3, #0]
 800b484:	2b01      	cmp	r3, #1
 800b486:	d905      	bls.n	800b494 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b488:	6839      	ldr	r1, [r7, #0]
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 f985 	bl	800b79a <USBD_CtlError>
    return USBD_FAIL;
 800b490:	2303      	movs	r3, #3
 800b492:	e08c      	b.n	800b5ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b49a:	b2db      	uxtb	r3, r3
 800b49c:	2b02      	cmp	r3, #2
 800b49e:	d002      	beq.n	800b4a6 <USBD_SetConfig+0x3e>
 800b4a0:	2b03      	cmp	r3, #3
 800b4a2:	d029      	beq.n	800b4f8 <USBD_SetConfig+0x90>
 800b4a4:	e075      	b.n	800b592 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b4a6:	4b44      	ldr	r3, [pc, #272]	@ (800b5b8 <USBD_SetConfig+0x150>)
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d020      	beq.n	800b4f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b4ae:	4b42      	ldr	r3, [pc, #264]	@ (800b5b8 <USBD_SetConfig+0x150>)
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b4b8:	4b3f      	ldr	r3, [pc, #252]	@ (800b5b8 <USBD_SetConfig+0x150>)
 800b4ba:	781b      	ldrb	r3, [r3, #0]
 800b4bc:	4619      	mov	r1, r3
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f7fe ffe3 	bl	800a48a <USBD_SetClassConfig>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b4c8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d008      	beq.n	800b4e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b4ce:	6839      	ldr	r1, [r7, #0]
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f000 f962 	bl	800b79a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2202      	movs	r2, #2
 800b4da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b4de:	e065      	b.n	800b5ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 fa31 	bl	800b948 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2203      	movs	r2, #3
 800b4ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b4ee:	e05d      	b.n	800b5ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f000 fa29 	bl	800b948 <USBD_CtlSendStatus>
      break;
 800b4f6:	e059      	b.n	800b5ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b4f8:	4b2f      	ldr	r3, [pc, #188]	@ (800b5b8 <USBD_SetConfig+0x150>)
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d112      	bne.n	800b526 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2202      	movs	r2, #2
 800b504:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b508:	4b2b      	ldr	r3, [pc, #172]	@ (800b5b8 <USBD_SetConfig+0x150>)
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	461a      	mov	r2, r3
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b512:	4b29      	ldr	r3, [pc, #164]	@ (800b5b8 <USBD_SetConfig+0x150>)
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	4619      	mov	r1, r3
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f7fe ffd2 	bl	800a4c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 fa12 	bl	800b948 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b524:	e042      	b.n	800b5ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b526:	4b24      	ldr	r3, [pc, #144]	@ (800b5b8 <USBD_SetConfig+0x150>)
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	461a      	mov	r2, r3
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	429a      	cmp	r2, r3
 800b532:	d02a      	beq.n	800b58a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	b2db      	uxtb	r3, r3
 800b53a:	4619      	mov	r1, r3
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f7fe ffc0 	bl	800a4c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b542:	4b1d      	ldr	r3, [pc, #116]	@ (800b5b8 <USBD_SetConfig+0x150>)
 800b544:	781b      	ldrb	r3, [r3, #0]
 800b546:	461a      	mov	r2, r3
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b54c:	4b1a      	ldr	r3, [pc, #104]	@ (800b5b8 <USBD_SetConfig+0x150>)
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	4619      	mov	r1, r3
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f7fe ff99 	bl	800a48a <USBD_SetClassConfig>
 800b558:	4603      	mov	r3, r0
 800b55a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b55c:	7bfb      	ldrb	r3, [r7, #15]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d00f      	beq.n	800b582 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b562:	6839      	ldr	r1, [r7, #0]
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 f918 	bl	800b79a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	4619      	mov	r1, r3
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f7fe ffa5 	bl	800a4c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2202      	movs	r2, #2
 800b57c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b580:	e014      	b.n	800b5ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 f9e0 	bl	800b948 <USBD_CtlSendStatus>
      break;
 800b588:	e010      	b.n	800b5ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 f9dc 	bl	800b948 <USBD_CtlSendStatus>
      break;
 800b590:	e00c      	b.n	800b5ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b592:	6839      	ldr	r1, [r7, #0]
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 f900 	bl	800b79a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b59a:	4b07      	ldr	r3, [pc, #28]	@ (800b5b8 <USBD_SetConfig+0x150>)
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	4619      	mov	r1, r3
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f7fe ff8e 	bl	800a4c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b5a6:	2303      	movs	r3, #3
 800b5a8:	73fb      	strb	r3, [r7, #15]
      break;
 800b5aa:	bf00      	nop
  }

  return ret;
 800b5ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3710      	adds	r7, #16
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	20001ed8 	.word	0x20001ed8

0800b5bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b082      	sub	sp, #8
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	88db      	ldrh	r3, [r3, #6]
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	d004      	beq.n	800b5d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b5ce:	6839      	ldr	r1, [r7, #0]
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 f8e2 	bl	800b79a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b5d6:	e023      	b.n	800b620 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5de:	b2db      	uxtb	r3, r3
 800b5e0:	2b02      	cmp	r3, #2
 800b5e2:	dc02      	bgt.n	800b5ea <USBD_GetConfig+0x2e>
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	dc03      	bgt.n	800b5f0 <USBD_GetConfig+0x34>
 800b5e8:	e015      	b.n	800b616 <USBD_GetConfig+0x5a>
 800b5ea:	2b03      	cmp	r3, #3
 800b5ec:	d00b      	beq.n	800b606 <USBD_GetConfig+0x4a>
 800b5ee:	e012      	b.n	800b616 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	3308      	adds	r3, #8
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 f948 	bl	800b894 <USBD_CtlSendData>
        break;
 800b604:	e00c      	b.n	800b620 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	3304      	adds	r3, #4
 800b60a:	2201      	movs	r2, #1
 800b60c:	4619      	mov	r1, r3
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 f940 	bl	800b894 <USBD_CtlSendData>
        break;
 800b614:	e004      	b.n	800b620 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b616:	6839      	ldr	r1, [r7, #0]
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f000 f8be 	bl	800b79a <USBD_CtlError>
        break;
 800b61e:	bf00      	nop
}
 800b620:	bf00      	nop
 800b622:	3708      	adds	r7, #8
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b638:	b2db      	uxtb	r3, r3
 800b63a:	3b01      	subs	r3, #1
 800b63c:	2b02      	cmp	r3, #2
 800b63e:	d81e      	bhi.n	800b67e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	88db      	ldrh	r3, [r3, #6]
 800b644:	2b02      	cmp	r3, #2
 800b646:	d004      	beq.n	800b652 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b648:	6839      	ldr	r1, [r7, #0]
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 f8a5 	bl	800b79a <USBD_CtlError>
        break;
 800b650:	e01a      	b.n	800b688 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2201      	movs	r2, #1
 800b656:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d005      	beq.n	800b66e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	f043 0202 	orr.w	r2, r3, #2
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	330c      	adds	r3, #12
 800b672:	2202      	movs	r2, #2
 800b674:	4619      	mov	r1, r3
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f000 f90c 	bl	800b894 <USBD_CtlSendData>
      break;
 800b67c:	e004      	b.n	800b688 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b67e:	6839      	ldr	r1, [r7, #0]
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f000 f88a 	bl	800b79a <USBD_CtlError>
      break;
 800b686:	bf00      	nop
  }
}
 800b688:	bf00      	nop
 800b68a:	3708      	adds	r7, #8
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	885b      	ldrh	r3, [r3, #2]
 800b69e:	2b01      	cmp	r3, #1
 800b6a0:	d107      	bne.n	800b6b2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 f94c 	bl	800b948 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b6b0:	e013      	b.n	800b6da <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	885b      	ldrh	r3, [r3, #2]
 800b6b6:	2b02      	cmp	r3, #2
 800b6b8:	d10b      	bne.n	800b6d2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	889b      	ldrh	r3, [r3, #4]
 800b6be:	0a1b      	lsrs	r3, r3, #8
 800b6c0:	b29b      	uxth	r3, r3
 800b6c2:	b2da      	uxtb	r2, r3
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f000 f93c 	bl	800b948 <USBD_CtlSendStatus>
}
 800b6d0:	e003      	b.n	800b6da <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b6d2:	6839      	ldr	r1, [r7, #0]
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 f860 	bl	800b79a <USBD_CtlError>
}
 800b6da:	bf00      	nop
 800b6dc:	3708      	adds	r7, #8
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6e2:	b580      	push	{r7, lr}
 800b6e4:	b082      	sub	sp, #8
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
 800b6ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	3b01      	subs	r3, #1
 800b6f6:	2b02      	cmp	r3, #2
 800b6f8:	d80b      	bhi.n	800b712 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	885b      	ldrh	r3, [r3, #2]
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d10c      	bne.n	800b71c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2200      	movs	r2, #0
 800b706:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 f91c 	bl	800b948 <USBD_CtlSendStatus>
      }
      break;
 800b710:	e004      	b.n	800b71c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b712:	6839      	ldr	r1, [r7, #0]
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 f840 	bl	800b79a <USBD_CtlError>
      break;
 800b71a:	e000      	b.n	800b71e <USBD_ClrFeature+0x3c>
      break;
 800b71c:	bf00      	nop
  }
}
 800b71e:	bf00      	nop
 800b720:	3708      	adds	r7, #8
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}

0800b726 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b726:	b580      	push	{r7, lr}
 800b728:	b084      	sub	sp, #16
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
 800b72e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	781a      	ldrb	r2, [r3, #0]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	3301      	adds	r3, #1
 800b740:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	781a      	ldrb	r2, [r3, #0]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	3301      	adds	r3, #1
 800b74e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b750:	68f8      	ldr	r0, [r7, #12]
 800b752:	f7ff fa40 	bl	800abd6 <SWAPBYTE>
 800b756:	4603      	mov	r3, r0
 800b758:	461a      	mov	r2, r3
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	3301      	adds	r3, #1
 800b762:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	3301      	adds	r3, #1
 800b768:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b76a:	68f8      	ldr	r0, [r7, #12]
 800b76c:	f7ff fa33 	bl	800abd6 <SWAPBYTE>
 800b770:	4603      	mov	r3, r0
 800b772:	461a      	mov	r2, r3
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	3301      	adds	r3, #1
 800b77c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	3301      	adds	r3, #1
 800b782:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b784:	68f8      	ldr	r0, [r7, #12]
 800b786:	f7ff fa26 	bl	800abd6 <SWAPBYTE>
 800b78a:	4603      	mov	r3, r0
 800b78c:	461a      	mov	r2, r3
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	80da      	strh	r2, [r3, #6]
}
 800b792:	bf00      	nop
 800b794:	3710      	adds	r7, #16
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b082      	sub	sp, #8
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
 800b7a2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b7a4:	2180      	movs	r1, #128	@ 0x80
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f7f5 ffde 	bl	8001768 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b7ac:	2100      	movs	r1, #0
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f7f5 ffda 	bl	8001768 <USBD_LL_StallEP>
}
 800b7b4:	bf00      	nop
 800b7b6:	3708      	adds	r7, #8
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b086      	sub	sp, #24
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	60f8      	str	r0, [r7, #12]
 800b7c4:	60b9      	str	r1, [r7, #8]
 800b7c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d042      	beq.n	800b858 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b7d6:	6938      	ldr	r0, [r7, #16]
 800b7d8:	f000 f842 	bl	800b860 <USBD_GetLen>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	3301      	adds	r3, #1
 800b7e0:	005b      	lsls	r3, r3, #1
 800b7e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7e6:	d808      	bhi.n	800b7fa <USBD_GetString+0x3e>
 800b7e8:	6938      	ldr	r0, [r7, #16]
 800b7ea:	f000 f839 	bl	800b860 <USBD_GetLen>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	005b      	lsls	r3, r3, #1
 800b7f6:	b29a      	uxth	r2, r3
 800b7f8:	e001      	b.n	800b7fe <USBD_GetString+0x42>
 800b7fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b802:	7dfb      	ldrb	r3, [r7, #23]
 800b804:	68ba      	ldr	r2, [r7, #8]
 800b806:	4413      	add	r3, r2
 800b808:	687a      	ldr	r2, [r7, #4]
 800b80a:	7812      	ldrb	r2, [r2, #0]
 800b80c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b80e:	7dfb      	ldrb	r3, [r7, #23]
 800b810:	3301      	adds	r3, #1
 800b812:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b814:	7dfb      	ldrb	r3, [r7, #23]
 800b816:	68ba      	ldr	r2, [r7, #8]
 800b818:	4413      	add	r3, r2
 800b81a:	2203      	movs	r2, #3
 800b81c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b81e:	7dfb      	ldrb	r3, [r7, #23]
 800b820:	3301      	adds	r3, #1
 800b822:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b824:	e013      	b.n	800b84e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b826:	7dfb      	ldrb	r3, [r7, #23]
 800b828:	68ba      	ldr	r2, [r7, #8]
 800b82a:	4413      	add	r3, r2
 800b82c:	693a      	ldr	r2, [r7, #16]
 800b82e:	7812      	ldrb	r2, [r2, #0]
 800b830:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	3301      	adds	r3, #1
 800b836:	613b      	str	r3, [r7, #16]
    idx++;
 800b838:	7dfb      	ldrb	r3, [r7, #23]
 800b83a:	3301      	adds	r3, #1
 800b83c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b83e:	7dfb      	ldrb	r3, [r7, #23]
 800b840:	68ba      	ldr	r2, [r7, #8]
 800b842:	4413      	add	r3, r2
 800b844:	2200      	movs	r2, #0
 800b846:	701a      	strb	r2, [r3, #0]
    idx++;
 800b848:	7dfb      	ldrb	r3, [r7, #23]
 800b84a:	3301      	adds	r3, #1
 800b84c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	781b      	ldrb	r3, [r3, #0]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d1e7      	bne.n	800b826 <USBD_GetString+0x6a>
 800b856:	e000      	b.n	800b85a <USBD_GetString+0x9e>
    return;
 800b858:	bf00      	nop
  }
}
 800b85a:	3718      	adds	r7, #24
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b860:	b480      	push	{r7}
 800b862:	b085      	sub	sp, #20
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b868:	2300      	movs	r3, #0
 800b86a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b870:	e005      	b.n	800b87e <USBD_GetLen+0x1e>
  {
    len++;
 800b872:	7bfb      	ldrb	r3, [r7, #15]
 800b874:	3301      	adds	r3, #1
 800b876:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	3301      	adds	r3, #1
 800b87c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d1f5      	bne.n	800b872 <USBD_GetLen+0x12>
  }

  return len;
 800b886:	7bfb      	ldrb	r3, [r7, #15]
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3714      	adds	r7, #20
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b084      	sub	sp, #16
 800b898:	af00      	add	r7, sp, #0
 800b89a:	60f8      	str	r0, [r7, #12]
 800b89c:	60b9      	str	r1, [r7, #8]
 800b89e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2202      	movs	r2, #2
 800b8a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	68ba      	ldr	r2, [r7, #8]
 800b8b8:	2100      	movs	r1, #0
 800b8ba:	68f8      	ldr	r0, [r7, #12]
 800b8bc:	f7f5 ffdd 	bl	800187a <USBD_LL_Transmit>

  return USBD_OK;
 800b8c0:	2300      	movs	r3, #0
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3710      	adds	r7, #16
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b084      	sub	sp, #16
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	60f8      	str	r0, [r7, #12]
 800b8d2:	60b9      	str	r1, [r7, #8]
 800b8d4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	68ba      	ldr	r2, [r7, #8]
 800b8da:	2100      	movs	r1, #0
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f7f5 ffcc 	bl	800187a <USBD_LL_Transmit>

  return USBD_OK;
 800b8e2:	2300      	movs	r3, #0
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3710      	adds	r7, #16
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	60f8      	str	r0, [r7, #12]
 800b8f4:	60b9      	str	r1, [r7, #8]
 800b8f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2203      	movs	r2, #3
 800b8fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	68ba      	ldr	r2, [r7, #8]
 800b914:	2100      	movs	r1, #0
 800b916:	68f8      	ldr	r0, [r7, #12]
 800b918:	f7f5 ffd0 	bl	80018bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b91c:	2300      	movs	r3, #0
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3710      	adds	r7, #16
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}

0800b926 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b926:	b580      	push	{r7, lr}
 800b928:	b084      	sub	sp, #16
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	60f8      	str	r0, [r7, #12]
 800b92e:	60b9      	str	r1, [r7, #8]
 800b930:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	68ba      	ldr	r2, [r7, #8]
 800b936:	2100      	movs	r1, #0
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	f7f5 ffbf 	bl	80018bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b93e:	2300      	movs	r3, #0
}
 800b940:	4618      	mov	r0, r3
 800b942:	3710      	adds	r7, #16
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2204      	movs	r2, #4
 800b954:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b958:	2300      	movs	r3, #0
 800b95a:	2200      	movs	r2, #0
 800b95c:	2100      	movs	r1, #0
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f7f5 ff8b 	bl	800187a <USBD_LL_Transmit>

  return USBD_OK;
 800b964:	2300      	movs	r3, #0
}
 800b966:	4618      	mov	r0, r3
 800b968:	3708      	adds	r7, #8
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}

0800b96e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b96e:	b580      	push	{r7, lr}
 800b970:	b082      	sub	sp, #8
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2205      	movs	r2, #5
 800b97a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b97e:	2300      	movs	r3, #0
 800b980:	2200      	movs	r2, #0
 800b982:	2100      	movs	r1, #0
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f7f5 ff99 	bl	80018bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b98a:	2300      	movs	r3, #0
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3708      	adds	r7, #8
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <siprintf>:
 800b994:	b40e      	push	{r1, r2, r3}
 800b996:	b500      	push	{lr}
 800b998:	b09c      	sub	sp, #112	@ 0x70
 800b99a:	ab1d      	add	r3, sp, #116	@ 0x74
 800b99c:	9002      	str	r0, [sp, #8]
 800b99e:	9006      	str	r0, [sp, #24]
 800b9a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b9a4:	4809      	ldr	r0, [pc, #36]	@ (800b9cc <siprintf+0x38>)
 800b9a6:	9107      	str	r1, [sp, #28]
 800b9a8:	9104      	str	r1, [sp, #16]
 800b9aa:	4909      	ldr	r1, [pc, #36]	@ (800b9d0 <siprintf+0x3c>)
 800b9ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9b0:	9105      	str	r1, [sp, #20]
 800b9b2:	6800      	ldr	r0, [r0, #0]
 800b9b4:	9301      	str	r3, [sp, #4]
 800b9b6:	a902      	add	r1, sp, #8
 800b9b8:	f000 f994 	bl	800bce4 <_svfiprintf_r>
 800b9bc:	9b02      	ldr	r3, [sp, #8]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	701a      	strb	r2, [r3, #0]
 800b9c2:	b01c      	add	sp, #112	@ 0x70
 800b9c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9c8:	b003      	add	sp, #12
 800b9ca:	4770      	bx	lr
 800b9cc:	20000148 	.word	0x20000148
 800b9d0:	ffff0208 	.word	0xffff0208

0800b9d4 <memset>:
 800b9d4:	4402      	add	r2, r0
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d100      	bne.n	800b9de <memset+0xa>
 800b9dc:	4770      	bx	lr
 800b9de:	f803 1b01 	strb.w	r1, [r3], #1
 800b9e2:	e7f9      	b.n	800b9d8 <memset+0x4>

0800b9e4 <__errno>:
 800b9e4:	4b01      	ldr	r3, [pc, #4]	@ (800b9ec <__errno+0x8>)
 800b9e6:	6818      	ldr	r0, [r3, #0]
 800b9e8:	4770      	bx	lr
 800b9ea:	bf00      	nop
 800b9ec:	20000148 	.word	0x20000148

0800b9f0 <__libc_init_array>:
 800b9f0:	b570      	push	{r4, r5, r6, lr}
 800b9f2:	4d0d      	ldr	r5, [pc, #52]	@ (800ba28 <__libc_init_array+0x38>)
 800b9f4:	4c0d      	ldr	r4, [pc, #52]	@ (800ba2c <__libc_init_array+0x3c>)
 800b9f6:	1b64      	subs	r4, r4, r5
 800b9f8:	10a4      	asrs	r4, r4, #2
 800b9fa:	2600      	movs	r6, #0
 800b9fc:	42a6      	cmp	r6, r4
 800b9fe:	d109      	bne.n	800ba14 <__libc_init_array+0x24>
 800ba00:	4d0b      	ldr	r5, [pc, #44]	@ (800ba30 <__libc_init_array+0x40>)
 800ba02:	4c0c      	ldr	r4, [pc, #48]	@ (800ba34 <__libc_init_array+0x44>)
 800ba04:	f000 fc66 	bl	800c2d4 <_init>
 800ba08:	1b64      	subs	r4, r4, r5
 800ba0a:	10a4      	asrs	r4, r4, #2
 800ba0c:	2600      	movs	r6, #0
 800ba0e:	42a6      	cmp	r6, r4
 800ba10:	d105      	bne.n	800ba1e <__libc_init_array+0x2e>
 800ba12:	bd70      	pop	{r4, r5, r6, pc}
 800ba14:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba18:	4798      	blx	r3
 800ba1a:	3601      	adds	r6, #1
 800ba1c:	e7ee      	b.n	800b9fc <__libc_init_array+0xc>
 800ba1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba22:	4798      	blx	r3
 800ba24:	3601      	adds	r6, #1
 800ba26:	e7f2      	b.n	800ba0e <__libc_init_array+0x1e>
 800ba28:	0800c7f0 	.word	0x0800c7f0
 800ba2c:	0800c7f0 	.word	0x0800c7f0
 800ba30:	0800c7f0 	.word	0x0800c7f0
 800ba34:	0800c7f4 	.word	0x0800c7f4

0800ba38 <__retarget_lock_acquire_recursive>:
 800ba38:	4770      	bx	lr

0800ba3a <__retarget_lock_release_recursive>:
 800ba3a:	4770      	bx	lr

0800ba3c <_free_r>:
 800ba3c:	b538      	push	{r3, r4, r5, lr}
 800ba3e:	4605      	mov	r5, r0
 800ba40:	2900      	cmp	r1, #0
 800ba42:	d041      	beq.n	800bac8 <_free_r+0x8c>
 800ba44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba48:	1f0c      	subs	r4, r1, #4
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	bfb8      	it	lt
 800ba4e:	18e4      	addlt	r4, r4, r3
 800ba50:	f000 f8e0 	bl	800bc14 <__malloc_lock>
 800ba54:	4a1d      	ldr	r2, [pc, #116]	@ (800bacc <_free_r+0x90>)
 800ba56:	6813      	ldr	r3, [r2, #0]
 800ba58:	b933      	cbnz	r3, 800ba68 <_free_r+0x2c>
 800ba5a:	6063      	str	r3, [r4, #4]
 800ba5c:	6014      	str	r4, [r2, #0]
 800ba5e:	4628      	mov	r0, r5
 800ba60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba64:	f000 b8dc 	b.w	800bc20 <__malloc_unlock>
 800ba68:	42a3      	cmp	r3, r4
 800ba6a:	d908      	bls.n	800ba7e <_free_r+0x42>
 800ba6c:	6820      	ldr	r0, [r4, #0]
 800ba6e:	1821      	adds	r1, r4, r0
 800ba70:	428b      	cmp	r3, r1
 800ba72:	bf01      	itttt	eq
 800ba74:	6819      	ldreq	r1, [r3, #0]
 800ba76:	685b      	ldreq	r3, [r3, #4]
 800ba78:	1809      	addeq	r1, r1, r0
 800ba7a:	6021      	streq	r1, [r4, #0]
 800ba7c:	e7ed      	b.n	800ba5a <_free_r+0x1e>
 800ba7e:	461a      	mov	r2, r3
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	b10b      	cbz	r3, 800ba88 <_free_r+0x4c>
 800ba84:	42a3      	cmp	r3, r4
 800ba86:	d9fa      	bls.n	800ba7e <_free_r+0x42>
 800ba88:	6811      	ldr	r1, [r2, #0]
 800ba8a:	1850      	adds	r0, r2, r1
 800ba8c:	42a0      	cmp	r0, r4
 800ba8e:	d10b      	bne.n	800baa8 <_free_r+0x6c>
 800ba90:	6820      	ldr	r0, [r4, #0]
 800ba92:	4401      	add	r1, r0
 800ba94:	1850      	adds	r0, r2, r1
 800ba96:	4283      	cmp	r3, r0
 800ba98:	6011      	str	r1, [r2, #0]
 800ba9a:	d1e0      	bne.n	800ba5e <_free_r+0x22>
 800ba9c:	6818      	ldr	r0, [r3, #0]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	6053      	str	r3, [r2, #4]
 800baa2:	4408      	add	r0, r1
 800baa4:	6010      	str	r0, [r2, #0]
 800baa6:	e7da      	b.n	800ba5e <_free_r+0x22>
 800baa8:	d902      	bls.n	800bab0 <_free_r+0x74>
 800baaa:	230c      	movs	r3, #12
 800baac:	602b      	str	r3, [r5, #0]
 800baae:	e7d6      	b.n	800ba5e <_free_r+0x22>
 800bab0:	6820      	ldr	r0, [r4, #0]
 800bab2:	1821      	adds	r1, r4, r0
 800bab4:	428b      	cmp	r3, r1
 800bab6:	bf04      	itt	eq
 800bab8:	6819      	ldreq	r1, [r3, #0]
 800baba:	685b      	ldreq	r3, [r3, #4]
 800babc:	6063      	str	r3, [r4, #4]
 800babe:	bf04      	itt	eq
 800bac0:	1809      	addeq	r1, r1, r0
 800bac2:	6021      	streq	r1, [r4, #0]
 800bac4:	6054      	str	r4, [r2, #4]
 800bac6:	e7ca      	b.n	800ba5e <_free_r+0x22>
 800bac8:	bd38      	pop	{r3, r4, r5, pc}
 800baca:	bf00      	nop
 800bacc:	20002020 	.word	0x20002020

0800bad0 <sbrk_aligned>:
 800bad0:	b570      	push	{r4, r5, r6, lr}
 800bad2:	4e0f      	ldr	r6, [pc, #60]	@ (800bb10 <sbrk_aligned+0x40>)
 800bad4:	460c      	mov	r4, r1
 800bad6:	6831      	ldr	r1, [r6, #0]
 800bad8:	4605      	mov	r5, r0
 800bada:	b911      	cbnz	r1, 800bae2 <sbrk_aligned+0x12>
 800badc:	f000 fba6 	bl	800c22c <_sbrk_r>
 800bae0:	6030      	str	r0, [r6, #0]
 800bae2:	4621      	mov	r1, r4
 800bae4:	4628      	mov	r0, r5
 800bae6:	f000 fba1 	bl	800c22c <_sbrk_r>
 800baea:	1c43      	adds	r3, r0, #1
 800baec:	d103      	bne.n	800baf6 <sbrk_aligned+0x26>
 800baee:	f04f 34ff 	mov.w	r4, #4294967295
 800baf2:	4620      	mov	r0, r4
 800baf4:	bd70      	pop	{r4, r5, r6, pc}
 800baf6:	1cc4      	adds	r4, r0, #3
 800baf8:	f024 0403 	bic.w	r4, r4, #3
 800bafc:	42a0      	cmp	r0, r4
 800bafe:	d0f8      	beq.n	800baf2 <sbrk_aligned+0x22>
 800bb00:	1a21      	subs	r1, r4, r0
 800bb02:	4628      	mov	r0, r5
 800bb04:	f000 fb92 	bl	800c22c <_sbrk_r>
 800bb08:	3001      	adds	r0, #1
 800bb0a:	d1f2      	bne.n	800baf2 <sbrk_aligned+0x22>
 800bb0c:	e7ef      	b.n	800baee <sbrk_aligned+0x1e>
 800bb0e:	bf00      	nop
 800bb10:	2000201c 	.word	0x2000201c

0800bb14 <_malloc_r>:
 800bb14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb18:	1ccd      	adds	r5, r1, #3
 800bb1a:	f025 0503 	bic.w	r5, r5, #3
 800bb1e:	3508      	adds	r5, #8
 800bb20:	2d0c      	cmp	r5, #12
 800bb22:	bf38      	it	cc
 800bb24:	250c      	movcc	r5, #12
 800bb26:	2d00      	cmp	r5, #0
 800bb28:	4606      	mov	r6, r0
 800bb2a:	db01      	blt.n	800bb30 <_malloc_r+0x1c>
 800bb2c:	42a9      	cmp	r1, r5
 800bb2e:	d904      	bls.n	800bb3a <_malloc_r+0x26>
 800bb30:	230c      	movs	r3, #12
 800bb32:	6033      	str	r3, [r6, #0]
 800bb34:	2000      	movs	r0, #0
 800bb36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bc10 <_malloc_r+0xfc>
 800bb3e:	f000 f869 	bl	800bc14 <__malloc_lock>
 800bb42:	f8d8 3000 	ldr.w	r3, [r8]
 800bb46:	461c      	mov	r4, r3
 800bb48:	bb44      	cbnz	r4, 800bb9c <_malloc_r+0x88>
 800bb4a:	4629      	mov	r1, r5
 800bb4c:	4630      	mov	r0, r6
 800bb4e:	f7ff ffbf 	bl	800bad0 <sbrk_aligned>
 800bb52:	1c43      	adds	r3, r0, #1
 800bb54:	4604      	mov	r4, r0
 800bb56:	d158      	bne.n	800bc0a <_malloc_r+0xf6>
 800bb58:	f8d8 4000 	ldr.w	r4, [r8]
 800bb5c:	4627      	mov	r7, r4
 800bb5e:	2f00      	cmp	r7, #0
 800bb60:	d143      	bne.n	800bbea <_malloc_r+0xd6>
 800bb62:	2c00      	cmp	r4, #0
 800bb64:	d04b      	beq.n	800bbfe <_malloc_r+0xea>
 800bb66:	6823      	ldr	r3, [r4, #0]
 800bb68:	4639      	mov	r1, r7
 800bb6a:	4630      	mov	r0, r6
 800bb6c:	eb04 0903 	add.w	r9, r4, r3
 800bb70:	f000 fb5c 	bl	800c22c <_sbrk_r>
 800bb74:	4581      	cmp	r9, r0
 800bb76:	d142      	bne.n	800bbfe <_malloc_r+0xea>
 800bb78:	6821      	ldr	r1, [r4, #0]
 800bb7a:	1a6d      	subs	r5, r5, r1
 800bb7c:	4629      	mov	r1, r5
 800bb7e:	4630      	mov	r0, r6
 800bb80:	f7ff ffa6 	bl	800bad0 <sbrk_aligned>
 800bb84:	3001      	adds	r0, #1
 800bb86:	d03a      	beq.n	800bbfe <_malloc_r+0xea>
 800bb88:	6823      	ldr	r3, [r4, #0]
 800bb8a:	442b      	add	r3, r5
 800bb8c:	6023      	str	r3, [r4, #0]
 800bb8e:	f8d8 3000 	ldr.w	r3, [r8]
 800bb92:	685a      	ldr	r2, [r3, #4]
 800bb94:	bb62      	cbnz	r2, 800bbf0 <_malloc_r+0xdc>
 800bb96:	f8c8 7000 	str.w	r7, [r8]
 800bb9a:	e00f      	b.n	800bbbc <_malloc_r+0xa8>
 800bb9c:	6822      	ldr	r2, [r4, #0]
 800bb9e:	1b52      	subs	r2, r2, r5
 800bba0:	d420      	bmi.n	800bbe4 <_malloc_r+0xd0>
 800bba2:	2a0b      	cmp	r2, #11
 800bba4:	d917      	bls.n	800bbd6 <_malloc_r+0xc2>
 800bba6:	1961      	adds	r1, r4, r5
 800bba8:	42a3      	cmp	r3, r4
 800bbaa:	6025      	str	r5, [r4, #0]
 800bbac:	bf18      	it	ne
 800bbae:	6059      	strne	r1, [r3, #4]
 800bbb0:	6863      	ldr	r3, [r4, #4]
 800bbb2:	bf08      	it	eq
 800bbb4:	f8c8 1000 	streq.w	r1, [r8]
 800bbb8:	5162      	str	r2, [r4, r5]
 800bbba:	604b      	str	r3, [r1, #4]
 800bbbc:	4630      	mov	r0, r6
 800bbbe:	f000 f82f 	bl	800bc20 <__malloc_unlock>
 800bbc2:	f104 000b 	add.w	r0, r4, #11
 800bbc6:	1d23      	adds	r3, r4, #4
 800bbc8:	f020 0007 	bic.w	r0, r0, #7
 800bbcc:	1ac2      	subs	r2, r0, r3
 800bbce:	bf1c      	itt	ne
 800bbd0:	1a1b      	subne	r3, r3, r0
 800bbd2:	50a3      	strne	r3, [r4, r2]
 800bbd4:	e7af      	b.n	800bb36 <_malloc_r+0x22>
 800bbd6:	6862      	ldr	r2, [r4, #4]
 800bbd8:	42a3      	cmp	r3, r4
 800bbda:	bf0c      	ite	eq
 800bbdc:	f8c8 2000 	streq.w	r2, [r8]
 800bbe0:	605a      	strne	r2, [r3, #4]
 800bbe2:	e7eb      	b.n	800bbbc <_malloc_r+0xa8>
 800bbe4:	4623      	mov	r3, r4
 800bbe6:	6864      	ldr	r4, [r4, #4]
 800bbe8:	e7ae      	b.n	800bb48 <_malloc_r+0x34>
 800bbea:	463c      	mov	r4, r7
 800bbec:	687f      	ldr	r7, [r7, #4]
 800bbee:	e7b6      	b.n	800bb5e <_malloc_r+0x4a>
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	42a3      	cmp	r3, r4
 800bbf6:	d1fb      	bne.n	800bbf0 <_malloc_r+0xdc>
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	6053      	str	r3, [r2, #4]
 800bbfc:	e7de      	b.n	800bbbc <_malloc_r+0xa8>
 800bbfe:	230c      	movs	r3, #12
 800bc00:	6033      	str	r3, [r6, #0]
 800bc02:	4630      	mov	r0, r6
 800bc04:	f000 f80c 	bl	800bc20 <__malloc_unlock>
 800bc08:	e794      	b.n	800bb34 <_malloc_r+0x20>
 800bc0a:	6005      	str	r5, [r0, #0]
 800bc0c:	e7d6      	b.n	800bbbc <_malloc_r+0xa8>
 800bc0e:	bf00      	nop
 800bc10:	20002020 	.word	0x20002020

0800bc14 <__malloc_lock>:
 800bc14:	4801      	ldr	r0, [pc, #4]	@ (800bc1c <__malloc_lock+0x8>)
 800bc16:	f7ff bf0f 	b.w	800ba38 <__retarget_lock_acquire_recursive>
 800bc1a:	bf00      	nop
 800bc1c:	20002018 	.word	0x20002018

0800bc20 <__malloc_unlock>:
 800bc20:	4801      	ldr	r0, [pc, #4]	@ (800bc28 <__malloc_unlock+0x8>)
 800bc22:	f7ff bf0a 	b.w	800ba3a <__retarget_lock_release_recursive>
 800bc26:	bf00      	nop
 800bc28:	20002018 	.word	0x20002018

0800bc2c <__ssputs_r>:
 800bc2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc30:	688e      	ldr	r6, [r1, #8]
 800bc32:	461f      	mov	r7, r3
 800bc34:	42be      	cmp	r6, r7
 800bc36:	680b      	ldr	r3, [r1, #0]
 800bc38:	4682      	mov	sl, r0
 800bc3a:	460c      	mov	r4, r1
 800bc3c:	4690      	mov	r8, r2
 800bc3e:	d82d      	bhi.n	800bc9c <__ssputs_r+0x70>
 800bc40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bc48:	d026      	beq.n	800bc98 <__ssputs_r+0x6c>
 800bc4a:	6965      	ldr	r5, [r4, #20]
 800bc4c:	6909      	ldr	r1, [r1, #16]
 800bc4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc52:	eba3 0901 	sub.w	r9, r3, r1
 800bc56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc5a:	1c7b      	adds	r3, r7, #1
 800bc5c:	444b      	add	r3, r9
 800bc5e:	106d      	asrs	r5, r5, #1
 800bc60:	429d      	cmp	r5, r3
 800bc62:	bf38      	it	cc
 800bc64:	461d      	movcc	r5, r3
 800bc66:	0553      	lsls	r3, r2, #21
 800bc68:	d527      	bpl.n	800bcba <__ssputs_r+0x8e>
 800bc6a:	4629      	mov	r1, r5
 800bc6c:	f7ff ff52 	bl	800bb14 <_malloc_r>
 800bc70:	4606      	mov	r6, r0
 800bc72:	b360      	cbz	r0, 800bcce <__ssputs_r+0xa2>
 800bc74:	6921      	ldr	r1, [r4, #16]
 800bc76:	464a      	mov	r2, r9
 800bc78:	f000 fae8 	bl	800c24c <memcpy>
 800bc7c:	89a3      	ldrh	r3, [r4, #12]
 800bc7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bc82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc86:	81a3      	strh	r3, [r4, #12]
 800bc88:	6126      	str	r6, [r4, #16]
 800bc8a:	6165      	str	r5, [r4, #20]
 800bc8c:	444e      	add	r6, r9
 800bc8e:	eba5 0509 	sub.w	r5, r5, r9
 800bc92:	6026      	str	r6, [r4, #0]
 800bc94:	60a5      	str	r5, [r4, #8]
 800bc96:	463e      	mov	r6, r7
 800bc98:	42be      	cmp	r6, r7
 800bc9a:	d900      	bls.n	800bc9e <__ssputs_r+0x72>
 800bc9c:	463e      	mov	r6, r7
 800bc9e:	6820      	ldr	r0, [r4, #0]
 800bca0:	4632      	mov	r2, r6
 800bca2:	4641      	mov	r1, r8
 800bca4:	f000 faa8 	bl	800c1f8 <memmove>
 800bca8:	68a3      	ldr	r3, [r4, #8]
 800bcaa:	1b9b      	subs	r3, r3, r6
 800bcac:	60a3      	str	r3, [r4, #8]
 800bcae:	6823      	ldr	r3, [r4, #0]
 800bcb0:	4433      	add	r3, r6
 800bcb2:	6023      	str	r3, [r4, #0]
 800bcb4:	2000      	movs	r0, #0
 800bcb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcba:	462a      	mov	r2, r5
 800bcbc:	f000 fad4 	bl	800c268 <_realloc_r>
 800bcc0:	4606      	mov	r6, r0
 800bcc2:	2800      	cmp	r0, #0
 800bcc4:	d1e0      	bne.n	800bc88 <__ssputs_r+0x5c>
 800bcc6:	6921      	ldr	r1, [r4, #16]
 800bcc8:	4650      	mov	r0, sl
 800bcca:	f7ff feb7 	bl	800ba3c <_free_r>
 800bcce:	230c      	movs	r3, #12
 800bcd0:	f8ca 3000 	str.w	r3, [sl]
 800bcd4:	89a3      	ldrh	r3, [r4, #12]
 800bcd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcda:	81a3      	strh	r3, [r4, #12]
 800bcdc:	f04f 30ff 	mov.w	r0, #4294967295
 800bce0:	e7e9      	b.n	800bcb6 <__ssputs_r+0x8a>
	...

0800bce4 <_svfiprintf_r>:
 800bce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bce8:	4698      	mov	r8, r3
 800bcea:	898b      	ldrh	r3, [r1, #12]
 800bcec:	061b      	lsls	r3, r3, #24
 800bcee:	b09d      	sub	sp, #116	@ 0x74
 800bcf0:	4607      	mov	r7, r0
 800bcf2:	460d      	mov	r5, r1
 800bcf4:	4614      	mov	r4, r2
 800bcf6:	d510      	bpl.n	800bd1a <_svfiprintf_r+0x36>
 800bcf8:	690b      	ldr	r3, [r1, #16]
 800bcfa:	b973      	cbnz	r3, 800bd1a <_svfiprintf_r+0x36>
 800bcfc:	2140      	movs	r1, #64	@ 0x40
 800bcfe:	f7ff ff09 	bl	800bb14 <_malloc_r>
 800bd02:	6028      	str	r0, [r5, #0]
 800bd04:	6128      	str	r0, [r5, #16]
 800bd06:	b930      	cbnz	r0, 800bd16 <_svfiprintf_r+0x32>
 800bd08:	230c      	movs	r3, #12
 800bd0a:	603b      	str	r3, [r7, #0]
 800bd0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd10:	b01d      	add	sp, #116	@ 0x74
 800bd12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd16:	2340      	movs	r3, #64	@ 0x40
 800bd18:	616b      	str	r3, [r5, #20]
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd1e:	2320      	movs	r3, #32
 800bd20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd24:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd28:	2330      	movs	r3, #48	@ 0x30
 800bd2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bec8 <_svfiprintf_r+0x1e4>
 800bd2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd32:	f04f 0901 	mov.w	r9, #1
 800bd36:	4623      	mov	r3, r4
 800bd38:	469a      	mov	sl, r3
 800bd3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd3e:	b10a      	cbz	r2, 800bd44 <_svfiprintf_r+0x60>
 800bd40:	2a25      	cmp	r2, #37	@ 0x25
 800bd42:	d1f9      	bne.n	800bd38 <_svfiprintf_r+0x54>
 800bd44:	ebba 0b04 	subs.w	fp, sl, r4
 800bd48:	d00b      	beq.n	800bd62 <_svfiprintf_r+0x7e>
 800bd4a:	465b      	mov	r3, fp
 800bd4c:	4622      	mov	r2, r4
 800bd4e:	4629      	mov	r1, r5
 800bd50:	4638      	mov	r0, r7
 800bd52:	f7ff ff6b 	bl	800bc2c <__ssputs_r>
 800bd56:	3001      	adds	r0, #1
 800bd58:	f000 80a7 	beq.w	800beaa <_svfiprintf_r+0x1c6>
 800bd5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd5e:	445a      	add	r2, fp
 800bd60:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd62:	f89a 3000 	ldrb.w	r3, [sl]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	f000 809f 	beq.w	800beaa <_svfiprintf_r+0x1c6>
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	f04f 32ff 	mov.w	r2, #4294967295
 800bd72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd76:	f10a 0a01 	add.w	sl, sl, #1
 800bd7a:	9304      	str	r3, [sp, #16]
 800bd7c:	9307      	str	r3, [sp, #28]
 800bd7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bd82:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd84:	4654      	mov	r4, sl
 800bd86:	2205      	movs	r2, #5
 800bd88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd8c:	484e      	ldr	r0, [pc, #312]	@ (800bec8 <_svfiprintf_r+0x1e4>)
 800bd8e:	f7f4 fa27 	bl	80001e0 <memchr>
 800bd92:	9a04      	ldr	r2, [sp, #16]
 800bd94:	b9d8      	cbnz	r0, 800bdce <_svfiprintf_r+0xea>
 800bd96:	06d0      	lsls	r0, r2, #27
 800bd98:	bf44      	itt	mi
 800bd9a:	2320      	movmi	r3, #32
 800bd9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bda0:	0711      	lsls	r1, r2, #28
 800bda2:	bf44      	itt	mi
 800bda4:	232b      	movmi	r3, #43	@ 0x2b
 800bda6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdaa:	f89a 3000 	ldrb.w	r3, [sl]
 800bdae:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdb0:	d015      	beq.n	800bdde <_svfiprintf_r+0xfa>
 800bdb2:	9a07      	ldr	r2, [sp, #28]
 800bdb4:	4654      	mov	r4, sl
 800bdb6:	2000      	movs	r0, #0
 800bdb8:	f04f 0c0a 	mov.w	ip, #10
 800bdbc:	4621      	mov	r1, r4
 800bdbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdc2:	3b30      	subs	r3, #48	@ 0x30
 800bdc4:	2b09      	cmp	r3, #9
 800bdc6:	d94b      	bls.n	800be60 <_svfiprintf_r+0x17c>
 800bdc8:	b1b0      	cbz	r0, 800bdf8 <_svfiprintf_r+0x114>
 800bdca:	9207      	str	r2, [sp, #28]
 800bdcc:	e014      	b.n	800bdf8 <_svfiprintf_r+0x114>
 800bdce:	eba0 0308 	sub.w	r3, r0, r8
 800bdd2:	fa09 f303 	lsl.w	r3, r9, r3
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	9304      	str	r3, [sp, #16]
 800bdda:	46a2      	mov	sl, r4
 800bddc:	e7d2      	b.n	800bd84 <_svfiprintf_r+0xa0>
 800bdde:	9b03      	ldr	r3, [sp, #12]
 800bde0:	1d19      	adds	r1, r3, #4
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	9103      	str	r1, [sp, #12]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	bfbb      	ittet	lt
 800bdea:	425b      	neglt	r3, r3
 800bdec:	f042 0202 	orrlt.w	r2, r2, #2
 800bdf0:	9307      	strge	r3, [sp, #28]
 800bdf2:	9307      	strlt	r3, [sp, #28]
 800bdf4:	bfb8      	it	lt
 800bdf6:	9204      	strlt	r2, [sp, #16]
 800bdf8:	7823      	ldrb	r3, [r4, #0]
 800bdfa:	2b2e      	cmp	r3, #46	@ 0x2e
 800bdfc:	d10a      	bne.n	800be14 <_svfiprintf_r+0x130>
 800bdfe:	7863      	ldrb	r3, [r4, #1]
 800be00:	2b2a      	cmp	r3, #42	@ 0x2a
 800be02:	d132      	bne.n	800be6a <_svfiprintf_r+0x186>
 800be04:	9b03      	ldr	r3, [sp, #12]
 800be06:	1d1a      	adds	r2, r3, #4
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	9203      	str	r2, [sp, #12]
 800be0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be10:	3402      	adds	r4, #2
 800be12:	9305      	str	r3, [sp, #20]
 800be14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bed8 <_svfiprintf_r+0x1f4>
 800be18:	7821      	ldrb	r1, [r4, #0]
 800be1a:	2203      	movs	r2, #3
 800be1c:	4650      	mov	r0, sl
 800be1e:	f7f4 f9df 	bl	80001e0 <memchr>
 800be22:	b138      	cbz	r0, 800be34 <_svfiprintf_r+0x150>
 800be24:	9b04      	ldr	r3, [sp, #16]
 800be26:	eba0 000a 	sub.w	r0, r0, sl
 800be2a:	2240      	movs	r2, #64	@ 0x40
 800be2c:	4082      	lsls	r2, r0
 800be2e:	4313      	orrs	r3, r2
 800be30:	3401      	adds	r4, #1
 800be32:	9304      	str	r3, [sp, #16]
 800be34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be38:	4824      	ldr	r0, [pc, #144]	@ (800becc <_svfiprintf_r+0x1e8>)
 800be3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be3e:	2206      	movs	r2, #6
 800be40:	f7f4 f9ce 	bl	80001e0 <memchr>
 800be44:	2800      	cmp	r0, #0
 800be46:	d036      	beq.n	800beb6 <_svfiprintf_r+0x1d2>
 800be48:	4b21      	ldr	r3, [pc, #132]	@ (800bed0 <_svfiprintf_r+0x1ec>)
 800be4a:	bb1b      	cbnz	r3, 800be94 <_svfiprintf_r+0x1b0>
 800be4c:	9b03      	ldr	r3, [sp, #12]
 800be4e:	3307      	adds	r3, #7
 800be50:	f023 0307 	bic.w	r3, r3, #7
 800be54:	3308      	adds	r3, #8
 800be56:	9303      	str	r3, [sp, #12]
 800be58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be5a:	4433      	add	r3, r6
 800be5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800be5e:	e76a      	b.n	800bd36 <_svfiprintf_r+0x52>
 800be60:	fb0c 3202 	mla	r2, ip, r2, r3
 800be64:	460c      	mov	r4, r1
 800be66:	2001      	movs	r0, #1
 800be68:	e7a8      	b.n	800bdbc <_svfiprintf_r+0xd8>
 800be6a:	2300      	movs	r3, #0
 800be6c:	3401      	adds	r4, #1
 800be6e:	9305      	str	r3, [sp, #20]
 800be70:	4619      	mov	r1, r3
 800be72:	f04f 0c0a 	mov.w	ip, #10
 800be76:	4620      	mov	r0, r4
 800be78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be7c:	3a30      	subs	r2, #48	@ 0x30
 800be7e:	2a09      	cmp	r2, #9
 800be80:	d903      	bls.n	800be8a <_svfiprintf_r+0x1a6>
 800be82:	2b00      	cmp	r3, #0
 800be84:	d0c6      	beq.n	800be14 <_svfiprintf_r+0x130>
 800be86:	9105      	str	r1, [sp, #20]
 800be88:	e7c4      	b.n	800be14 <_svfiprintf_r+0x130>
 800be8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800be8e:	4604      	mov	r4, r0
 800be90:	2301      	movs	r3, #1
 800be92:	e7f0      	b.n	800be76 <_svfiprintf_r+0x192>
 800be94:	ab03      	add	r3, sp, #12
 800be96:	9300      	str	r3, [sp, #0]
 800be98:	462a      	mov	r2, r5
 800be9a:	4b0e      	ldr	r3, [pc, #56]	@ (800bed4 <_svfiprintf_r+0x1f0>)
 800be9c:	a904      	add	r1, sp, #16
 800be9e:	4638      	mov	r0, r7
 800bea0:	f3af 8000 	nop.w
 800bea4:	1c42      	adds	r2, r0, #1
 800bea6:	4606      	mov	r6, r0
 800bea8:	d1d6      	bne.n	800be58 <_svfiprintf_r+0x174>
 800beaa:	89ab      	ldrh	r3, [r5, #12]
 800beac:	065b      	lsls	r3, r3, #25
 800beae:	f53f af2d 	bmi.w	800bd0c <_svfiprintf_r+0x28>
 800beb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800beb4:	e72c      	b.n	800bd10 <_svfiprintf_r+0x2c>
 800beb6:	ab03      	add	r3, sp, #12
 800beb8:	9300      	str	r3, [sp, #0]
 800beba:	462a      	mov	r2, r5
 800bebc:	4b05      	ldr	r3, [pc, #20]	@ (800bed4 <_svfiprintf_r+0x1f0>)
 800bebe:	a904      	add	r1, sp, #16
 800bec0:	4638      	mov	r0, r7
 800bec2:	f000 f879 	bl	800bfb8 <_printf_i>
 800bec6:	e7ed      	b.n	800bea4 <_svfiprintf_r+0x1c0>
 800bec8:	0800c7b4 	.word	0x0800c7b4
 800becc:	0800c7be 	.word	0x0800c7be
 800bed0:	00000000 	.word	0x00000000
 800bed4:	0800bc2d 	.word	0x0800bc2d
 800bed8:	0800c7ba 	.word	0x0800c7ba

0800bedc <_printf_common>:
 800bedc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bee0:	4616      	mov	r6, r2
 800bee2:	4698      	mov	r8, r3
 800bee4:	688a      	ldr	r2, [r1, #8]
 800bee6:	690b      	ldr	r3, [r1, #16]
 800bee8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800beec:	4293      	cmp	r3, r2
 800beee:	bfb8      	it	lt
 800bef0:	4613      	movlt	r3, r2
 800bef2:	6033      	str	r3, [r6, #0]
 800bef4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bef8:	4607      	mov	r7, r0
 800befa:	460c      	mov	r4, r1
 800befc:	b10a      	cbz	r2, 800bf02 <_printf_common+0x26>
 800befe:	3301      	adds	r3, #1
 800bf00:	6033      	str	r3, [r6, #0]
 800bf02:	6823      	ldr	r3, [r4, #0]
 800bf04:	0699      	lsls	r1, r3, #26
 800bf06:	bf42      	ittt	mi
 800bf08:	6833      	ldrmi	r3, [r6, #0]
 800bf0a:	3302      	addmi	r3, #2
 800bf0c:	6033      	strmi	r3, [r6, #0]
 800bf0e:	6825      	ldr	r5, [r4, #0]
 800bf10:	f015 0506 	ands.w	r5, r5, #6
 800bf14:	d106      	bne.n	800bf24 <_printf_common+0x48>
 800bf16:	f104 0a19 	add.w	sl, r4, #25
 800bf1a:	68e3      	ldr	r3, [r4, #12]
 800bf1c:	6832      	ldr	r2, [r6, #0]
 800bf1e:	1a9b      	subs	r3, r3, r2
 800bf20:	42ab      	cmp	r3, r5
 800bf22:	dc26      	bgt.n	800bf72 <_printf_common+0x96>
 800bf24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bf28:	6822      	ldr	r2, [r4, #0]
 800bf2a:	3b00      	subs	r3, #0
 800bf2c:	bf18      	it	ne
 800bf2e:	2301      	movne	r3, #1
 800bf30:	0692      	lsls	r2, r2, #26
 800bf32:	d42b      	bmi.n	800bf8c <_printf_common+0xb0>
 800bf34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bf38:	4641      	mov	r1, r8
 800bf3a:	4638      	mov	r0, r7
 800bf3c:	47c8      	blx	r9
 800bf3e:	3001      	adds	r0, #1
 800bf40:	d01e      	beq.n	800bf80 <_printf_common+0xa4>
 800bf42:	6823      	ldr	r3, [r4, #0]
 800bf44:	6922      	ldr	r2, [r4, #16]
 800bf46:	f003 0306 	and.w	r3, r3, #6
 800bf4a:	2b04      	cmp	r3, #4
 800bf4c:	bf02      	ittt	eq
 800bf4e:	68e5      	ldreq	r5, [r4, #12]
 800bf50:	6833      	ldreq	r3, [r6, #0]
 800bf52:	1aed      	subeq	r5, r5, r3
 800bf54:	68a3      	ldr	r3, [r4, #8]
 800bf56:	bf0c      	ite	eq
 800bf58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf5c:	2500      	movne	r5, #0
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	bfc4      	itt	gt
 800bf62:	1a9b      	subgt	r3, r3, r2
 800bf64:	18ed      	addgt	r5, r5, r3
 800bf66:	2600      	movs	r6, #0
 800bf68:	341a      	adds	r4, #26
 800bf6a:	42b5      	cmp	r5, r6
 800bf6c:	d11a      	bne.n	800bfa4 <_printf_common+0xc8>
 800bf6e:	2000      	movs	r0, #0
 800bf70:	e008      	b.n	800bf84 <_printf_common+0xa8>
 800bf72:	2301      	movs	r3, #1
 800bf74:	4652      	mov	r2, sl
 800bf76:	4641      	mov	r1, r8
 800bf78:	4638      	mov	r0, r7
 800bf7a:	47c8      	blx	r9
 800bf7c:	3001      	adds	r0, #1
 800bf7e:	d103      	bne.n	800bf88 <_printf_common+0xac>
 800bf80:	f04f 30ff 	mov.w	r0, #4294967295
 800bf84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf88:	3501      	adds	r5, #1
 800bf8a:	e7c6      	b.n	800bf1a <_printf_common+0x3e>
 800bf8c:	18e1      	adds	r1, r4, r3
 800bf8e:	1c5a      	adds	r2, r3, #1
 800bf90:	2030      	movs	r0, #48	@ 0x30
 800bf92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bf96:	4422      	add	r2, r4
 800bf98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bf9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bfa0:	3302      	adds	r3, #2
 800bfa2:	e7c7      	b.n	800bf34 <_printf_common+0x58>
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	4622      	mov	r2, r4
 800bfa8:	4641      	mov	r1, r8
 800bfaa:	4638      	mov	r0, r7
 800bfac:	47c8      	blx	r9
 800bfae:	3001      	adds	r0, #1
 800bfb0:	d0e6      	beq.n	800bf80 <_printf_common+0xa4>
 800bfb2:	3601      	adds	r6, #1
 800bfb4:	e7d9      	b.n	800bf6a <_printf_common+0x8e>
	...

0800bfb8 <_printf_i>:
 800bfb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bfbc:	7e0f      	ldrb	r7, [r1, #24]
 800bfbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bfc0:	2f78      	cmp	r7, #120	@ 0x78
 800bfc2:	4691      	mov	r9, r2
 800bfc4:	4680      	mov	r8, r0
 800bfc6:	460c      	mov	r4, r1
 800bfc8:	469a      	mov	sl, r3
 800bfca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bfce:	d807      	bhi.n	800bfe0 <_printf_i+0x28>
 800bfd0:	2f62      	cmp	r7, #98	@ 0x62
 800bfd2:	d80a      	bhi.n	800bfea <_printf_i+0x32>
 800bfd4:	2f00      	cmp	r7, #0
 800bfd6:	f000 80d2 	beq.w	800c17e <_printf_i+0x1c6>
 800bfda:	2f58      	cmp	r7, #88	@ 0x58
 800bfdc:	f000 80b9 	beq.w	800c152 <_printf_i+0x19a>
 800bfe0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bfe4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bfe8:	e03a      	b.n	800c060 <_printf_i+0xa8>
 800bfea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bfee:	2b15      	cmp	r3, #21
 800bff0:	d8f6      	bhi.n	800bfe0 <_printf_i+0x28>
 800bff2:	a101      	add	r1, pc, #4	@ (adr r1, 800bff8 <_printf_i+0x40>)
 800bff4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bff8:	0800c051 	.word	0x0800c051
 800bffc:	0800c065 	.word	0x0800c065
 800c000:	0800bfe1 	.word	0x0800bfe1
 800c004:	0800bfe1 	.word	0x0800bfe1
 800c008:	0800bfe1 	.word	0x0800bfe1
 800c00c:	0800bfe1 	.word	0x0800bfe1
 800c010:	0800c065 	.word	0x0800c065
 800c014:	0800bfe1 	.word	0x0800bfe1
 800c018:	0800bfe1 	.word	0x0800bfe1
 800c01c:	0800bfe1 	.word	0x0800bfe1
 800c020:	0800bfe1 	.word	0x0800bfe1
 800c024:	0800c165 	.word	0x0800c165
 800c028:	0800c08f 	.word	0x0800c08f
 800c02c:	0800c11f 	.word	0x0800c11f
 800c030:	0800bfe1 	.word	0x0800bfe1
 800c034:	0800bfe1 	.word	0x0800bfe1
 800c038:	0800c187 	.word	0x0800c187
 800c03c:	0800bfe1 	.word	0x0800bfe1
 800c040:	0800c08f 	.word	0x0800c08f
 800c044:	0800bfe1 	.word	0x0800bfe1
 800c048:	0800bfe1 	.word	0x0800bfe1
 800c04c:	0800c127 	.word	0x0800c127
 800c050:	6833      	ldr	r3, [r6, #0]
 800c052:	1d1a      	adds	r2, r3, #4
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	6032      	str	r2, [r6, #0]
 800c058:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c05c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c060:	2301      	movs	r3, #1
 800c062:	e09d      	b.n	800c1a0 <_printf_i+0x1e8>
 800c064:	6833      	ldr	r3, [r6, #0]
 800c066:	6820      	ldr	r0, [r4, #0]
 800c068:	1d19      	adds	r1, r3, #4
 800c06a:	6031      	str	r1, [r6, #0]
 800c06c:	0606      	lsls	r6, r0, #24
 800c06e:	d501      	bpl.n	800c074 <_printf_i+0xbc>
 800c070:	681d      	ldr	r5, [r3, #0]
 800c072:	e003      	b.n	800c07c <_printf_i+0xc4>
 800c074:	0645      	lsls	r5, r0, #25
 800c076:	d5fb      	bpl.n	800c070 <_printf_i+0xb8>
 800c078:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c07c:	2d00      	cmp	r5, #0
 800c07e:	da03      	bge.n	800c088 <_printf_i+0xd0>
 800c080:	232d      	movs	r3, #45	@ 0x2d
 800c082:	426d      	negs	r5, r5
 800c084:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c088:	4859      	ldr	r0, [pc, #356]	@ (800c1f0 <_printf_i+0x238>)
 800c08a:	230a      	movs	r3, #10
 800c08c:	e011      	b.n	800c0b2 <_printf_i+0xfa>
 800c08e:	6821      	ldr	r1, [r4, #0]
 800c090:	6833      	ldr	r3, [r6, #0]
 800c092:	0608      	lsls	r0, r1, #24
 800c094:	f853 5b04 	ldr.w	r5, [r3], #4
 800c098:	d402      	bmi.n	800c0a0 <_printf_i+0xe8>
 800c09a:	0649      	lsls	r1, r1, #25
 800c09c:	bf48      	it	mi
 800c09e:	b2ad      	uxthmi	r5, r5
 800c0a0:	2f6f      	cmp	r7, #111	@ 0x6f
 800c0a2:	4853      	ldr	r0, [pc, #332]	@ (800c1f0 <_printf_i+0x238>)
 800c0a4:	6033      	str	r3, [r6, #0]
 800c0a6:	bf14      	ite	ne
 800c0a8:	230a      	movne	r3, #10
 800c0aa:	2308      	moveq	r3, #8
 800c0ac:	2100      	movs	r1, #0
 800c0ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c0b2:	6866      	ldr	r6, [r4, #4]
 800c0b4:	60a6      	str	r6, [r4, #8]
 800c0b6:	2e00      	cmp	r6, #0
 800c0b8:	bfa2      	ittt	ge
 800c0ba:	6821      	ldrge	r1, [r4, #0]
 800c0bc:	f021 0104 	bicge.w	r1, r1, #4
 800c0c0:	6021      	strge	r1, [r4, #0]
 800c0c2:	b90d      	cbnz	r5, 800c0c8 <_printf_i+0x110>
 800c0c4:	2e00      	cmp	r6, #0
 800c0c6:	d04b      	beq.n	800c160 <_printf_i+0x1a8>
 800c0c8:	4616      	mov	r6, r2
 800c0ca:	fbb5 f1f3 	udiv	r1, r5, r3
 800c0ce:	fb03 5711 	mls	r7, r3, r1, r5
 800c0d2:	5dc7      	ldrb	r7, [r0, r7]
 800c0d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c0d8:	462f      	mov	r7, r5
 800c0da:	42bb      	cmp	r3, r7
 800c0dc:	460d      	mov	r5, r1
 800c0de:	d9f4      	bls.n	800c0ca <_printf_i+0x112>
 800c0e0:	2b08      	cmp	r3, #8
 800c0e2:	d10b      	bne.n	800c0fc <_printf_i+0x144>
 800c0e4:	6823      	ldr	r3, [r4, #0]
 800c0e6:	07df      	lsls	r7, r3, #31
 800c0e8:	d508      	bpl.n	800c0fc <_printf_i+0x144>
 800c0ea:	6923      	ldr	r3, [r4, #16]
 800c0ec:	6861      	ldr	r1, [r4, #4]
 800c0ee:	4299      	cmp	r1, r3
 800c0f0:	bfde      	ittt	le
 800c0f2:	2330      	movle	r3, #48	@ 0x30
 800c0f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c0f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c0fc:	1b92      	subs	r2, r2, r6
 800c0fe:	6122      	str	r2, [r4, #16]
 800c100:	f8cd a000 	str.w	sl, [sp]
 800c104:	464b      	mov	r3, r9
 800c106:	aa03      	add	r2, sp, #12
 800c108:	4621      	mov	r1, r4
 800c10a:	4640      	mov	r0, r8
 800c10c:	f7ff fee6 	bl	800bedc <_printf_common>
 800c110:	3001      	adds	r0, #1
 800c112:	d14a      	bne.n	800c1aa <_printf_i+0x1f2>
 800c114:	f04f 30ff 	mov.w	r0, #4294967295
 800c118:	b004      	add	sp, #16
 800c11a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c11e:	6823      	ldr	r3, [r4, #0]
 800c120:	f043 0320 	orr.w	r3, r3, #32
 800c124:	6023      	str	r3, [r4, #0]
 800c126:	4833      	ldr	r0, [pc, #204]	@ (800c1f4 <_printf_i+0x23c>)
 800c128:	2778      	movs	r7, #120	@ 0x78
 800c12a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c12e:	6823      	ldr	r3, [r4, #0]
 800c130:	6831      	ldr	r1, [r6, #0]
 800c132:	061f      	lsls	r7, r3, #24
 800c134:	f851 5b04 	ldr.w	r5, [r1], #4
 800c138:	d402      	bmi.n	800c140 <_printf_i+0x188>
 800c13a:	065f      	lsls	r7, r3, #25
 800c13c:	bf48      	it	mi
 800c13e:	b2ad      	uxthmi	r5, r5
 800c140:	6031      	str	r1, [r6, #0]
 800c142:	07d9      	lsls	r1, r3, #31
 800c144:	bf44      	itt	mi
 800c146:	f043 0320 	orrmi.w	r3, r3, #32
 800c14a:	6023      	strmi	r3, [r4, #0]
 800c14c:	b11d      	cbz	r5, 800c156 <_printf_i+0x19e>
 800c14e:	2310      	movs	r3, #16
 800c150:	e7ac      	b.n	800c0ac <_printf_i+0xf4>
 800c152:	4827      	ldr	r0, [pc, #156]	@ (800c1f0 <_printf_i+0x238>)
 800c154:	e7e9      	b.n	800c12a <_printf_i+0x172>
 800c156:	6823      	ldr	r3, [r4, #0]
 800c158:	f023 0320 	bic.w	r3, r3, #32
 800c15c:	6023      	str	r3, [r4, #0]
 800c15e:	e7f6      	b.n	800c14e <_printf_i+0x196>
 800c160:	4616      	mov	r6, r2
 800c162:	e7bd      	b.n	800c0e0 <_printf_i+0x128>
 800c164:	6833      	ldr	r3, [r6, #0]
 800c166:	6825      	ldr	r5, [r4, #0]
 800c168:	6961      	ldr	r1, [r4, #20]
 800c16a:	1d18      	adds	r0, r3, #4
 800c16c:	6030      	str	r0, [r6, #0]
 800c16e:	062e      	lsls	r6, r5, #24
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	d501      	bpl.n	800c178 <_printf_i+0x1c0>
 800c174:	6019      	str	r1, [r3, #0]
 800c176:	e002      	b.n	800c17e <_printf_i+0x1c6>
 800c178:	0668      	lsls	r0, r5, #25
 800c17a:	d5fb      	bpl.n	800c174 <_printf_i+0x1bc>
 800c17c:	8019      	strh	r1, [r3, #0]
 800c17e:	2300      	movs	r3, #0
 800c180:	6123      	str	r3, [r4, #16]
 800c182:	4616      	mov	r6, r2
 800c184:	e7bc      	b.n	800c100 <_printf_i+0x148>
 800c186:	6833      	ldr	r3, [r6, #0]
 800c188:	1d1a      	adds	r2, r3, #4
 800c18a:	6032      	str	r2, [r6, #0]
 800c18c:	681e      	ldr	r6, [r3, #0]
 800c18e:	6862      	ldr	r2, [r4, #4]
 800c190:	2100      	movs	r1, #0
 800c192:	4630      	mov	r0, r6
 800c194:	f7f4 f824 	bl	80001e0 <memchr>
 800c198:	b108      	cbz	r0, 800c19e <_printf_i+0x1e6>
 800c19a:	1b80      	subs	r0, r0, r6
 800c19c:	6060      	str	r0, [r4, #4]
 800c19e:	6863      	ldr	r3, [r4, #4]
 800c1a0:	6123      	str	r3, [r4, #16]
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1a8:	e7aa      	b.n	800c100 <_printf_i+0x148>
 800c1aa:	6923      	ldr	r3, [r4, #16]
 800c1ac:	4632      	mov	r2, r6
 800c1ae:	4649      	mov	r1, r9
 800c1b0:	4640      	mov	r0, r8
 800c1b2:	47d0      	blx	sl
 800c1b4:	3001      	adds	r0, #1
 800c1b6:	d0ad      	beq.n	800c114 <_printf_i+0x15c>
 800c1b8:	6823      	ldr	r3, [r4, #0]
 800c1ba:	079b      	lsls	r3, r3, #30
 800c1bc:	d413      	bmi.n	800c1e6 <_printf_i+0x22e>
 800c1be:	68e0      	ldr	r0, [r4, #12]
 800c1c0:	9b03      	ldr	r3, [sp, #12]
 800c1c2:	4298      	cmp	r0, r3
 800c1c4:	bfb8      	it	lt
 800c1c6:	4618      	movlt	r0, r3
 800c1c8:	e7a6      	b.n	800c118 <_printf_i+0x160>
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	4632      	mov	r2, r6
 800c1ce:	4649      	mov	r1, r9
 800c1d0:	4640      	mov	r0, r8
 800c1d2:	47d0      	blx	sl
 800c1d4:	3001      	adds	r0, #1
 800c1d6:	d09d      	beq.n	800c114 <_printf_i+0x15c>
 800c1d8:	3501      	adds	r5, #1
 800c1da:	68e3      	ldr	r3, [r4, #12]
 800c1dc:	9903      	ldr	r1, [sp, #12]
 800c1de:	1a5b      	subs	r3, r3, r1
 800c1e0:	42ab      	cmp	r3, r5
 800c1e2:	dcf2      	bgt.n	800c1ca <_printf_i+0x212>
 800c1e4:	e7eb      	b.n	800c1be <_printf_i+0x206>
 800c1e6:	2500      	movs	r5, #0
 800c1e8:	f104 0619 	add.w	r6, r4, #25
 800c1ec:	e7f5      	b.n	800c1da <_printf_i+0x222>
 800c1ee:	bf00      	nop
 800c1f0:	0800c7c5 	.word	0x0800c7c5
 800c1f4:	0800c7d6 	.word	0x0800c7d6

0800c1f8 <memmove>:
 800c1f8:	4288      	cmp	r0, r1
 800c1fa:	b510      	push	{r4, lr}
 800c1fc:	eb01 0402 	add.w	r4, r1, r2
 800c200:	d902      	bls.n	800c208 <memmove+0x10>
 800c202:	4284      	cmp	r4, r0
 800c204:	4623      	mov	r3, r4
 800c206:	d807      	bhi.n	800c218 <memmove+0x20>
 800c208:	1e43      	subs	r3, r0, #1
 800c20a:	42a1      	cmp	r1, r4
 800c20c:	d008      	beq.n	800c220 <memmove+0x28>
 800c20e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c212:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c216:	e7f8      	b.n	800c20a <memmove+0x12>
 800c218:	4402      	add	r2, r0
 800c21a:	4601      	mov	r1, r0
 800c21c:	428a      	cmp	r2, r1
 800c21e:	d100      	bne.n	800c222 <memmove+0x2a>
 800c220:	bd10      	pop	{r4, pc}
 800c222:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c226:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c22a:	e7f7      	b.n	800c21c <memmove+0x24>

0800c22c <_sbrk_r>:
 800c22c:	b538      	push	{r3, r4, r5, lr}
 800c22e:	4d06      	ldr	r5, [pc, #24]	@ (800c248 <_sbrk_r+0x1c>)
 800c230:	2300      	movs	r3, #0
 800c232:	4604      	mov	r4, r0
 800c234:	4608      	mov	r0, r1
 800c236:	602b      	str	r3, [r5, #0]
 800c238:	f7f4 fe36 	bl	8000ea8 <_sbrk>
 800c23c:	1c43      	adds	r3, r0, #1
 800c23e:	d102      	bne.n	800c246 <_sbrk_r+0x1a>
 800c240:	682b      	ldr	r3, [r5, #0]
 800c242:	b103      	cbz	r3, 800c246 <_sbrk_r+0x1a>
 800c244:	6023      	str	r3, [r4, #0]
 800c246:	bd38      	pop	{r3, r4, r5, pc}
 800c248:	20002014 	.word	0x20002014

0800c24c <memcpy>:
 800c24c:	440a      	add	r2, r1
 800c24e:	4291      	cmp	r1, r2
 800c250:	f100 33ff 	add.w	r3, r0, #4294967295
 800c254:	d100      	bne.n	800c258 <memcpy+0xc>
 800c256:	4770      	bx	lr
 800c258:	b510      	push	{r4, lr}
 800c25a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c25e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c262:	4291      	cmp	r1, r2
 800c264:	d1f9      	bne.n	800c25a <memcpy+0xe>
 800c266:	bd10      	pop	{r4, pc}

0800c268 <_realloc_r>:
 800c268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c26c:	4680      	mov	r8, r0
 800c26e:	4615      	mov	r5, r2
 800c270:	460c      	mov	r4, r1
 800c272:	b921      	cbnz	r1, 800c27e <_realloc_r+0x16>
 800c274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c278:	4611      	mov	r1, r2
 800c27a:	f7ff bc4b 	b.w	800bb14 <_malloc_r>
 800c27e:	b92a      	cbnz	r2, 800c28c <_realloc_r+0x24>
 800c280:	f7ff fbdc 	bl	800ba3c <_free_r>
 800c284:	2400      	movs	r4, #0
 800c286:	4620      	mov	r0, r4
 800c288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c28c:	f000 f81a 	bl	800c2c4 <_malloc_usable_size_r>
 800c290:	4285      	cmp	r5, r0
 800c292:	4606      	mov	r6, r0
 800c294:	d802      	bhi.n	800c29c <_realloc_r+0x34>
 800c296:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c29a:	d8f4      	bhi.n	800c286 <_realloc_r+0x1e>
 800c29c:	4629      	mov	r1, r5
 800c29e:	4640      	mov	r0, r8
 800c2a0:	f7ff fc38 	bl	800bb14 <_malloc_r>
 800c2a4:	4607      	mov	r7, r0
 800c2a6:	2800      	cmp	r0, #0
 800c2a8:	d0ec      	beq.n	800c284 <_realloc_r+0x1c>
 800c2aa:	42b5      	cmp	r5, r6
 800c2ac:	462a      	mov	r2, r5
 800c2ae:	4621      	mov	r1, r4
 800c2b0:	bf28      	it	cs
 800c2b2:	4632      	movcs	r2, r6
 800c2b4:	f7ff ffca 	bl	800c24c <memcpy>
 800c2b8:	4621      	mov	r1, r4
 800c2ba:	4640      	mov	r0, r8
 800c2bc:	f7ff fbbe 	bl	800ba3c <_free_r>
 800c2c0:	463c      	mov	r4, r7
 800c2c2:	e7e0      	b.n	800c286 <_realloc_r+0x1e>

0800c2c4 <_malloc_usable_size_r>:
 800c2c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2c8:	1f18      	subs	r0, r3, #4
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	bfbc      	itt	lt
 800c2ce:	580b      	ldrlt	r3, [r1, r0]
 800c2d0:	18c0      	addlt	r0, r0, r3
 800c2d2:	4770      	bx	lr

0800c2d4 <_init>:
 800c2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2d6:	bf00      	nop
 800c2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2da:	bc08      	pop	{r3}
 800c2dc:	469e      	mov	lr, r3
 800c2de:	4770      	bx	lr

0800c2e0 <_fini>:
 800c2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2e2:	bf00      	nop
 800c2e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2e6:	bc08      	pop	{r3}
 800c2e8:	469e      	mov	lr, r3
 800c2ea:	4770      	bx	lr
